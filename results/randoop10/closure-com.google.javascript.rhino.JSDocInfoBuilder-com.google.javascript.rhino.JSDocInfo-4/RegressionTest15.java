import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("hi!");
        boolean boolean5 = jSDocInfo0.isHidden();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("?");
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.isExport();
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        boolean boolean13 = jSDocInfo0.hasParameterType("{1562088166}");
        boolean boolean14 = jSDocInfo0.isInterface();
        boolean boolean15 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean16 = jSDocInfo0.hasReturnType();
        boolean boolean17 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isInterface();
        java.lang.String str10 = jSDocInfo0.getVersion();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThisType(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        node12.setLength((int) ' ');
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean16 = node12.isRegExp();
        node12.setLength(155648);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node11 = node2.getLastChild();
        int int12 = node11.getType();
        node11.setSourceEncodedPositionForTree((int) (short) 1);
        java.util.Set<java.lang.String> strSet15 = null;
        node11.setDirectives(strSet15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.isJavaDispatch();
        node20.setJSDocInfo(jSDocInfo22);
        java.lang.String str31 = jSDocInfo22.getLendsName();
        boolean boolean32 = jSDocInfo22.hasType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node35.isDec();
        boolean boolean42 = node35.isBlock();
        boolean boolean43 = node35.hasOneChild();
        java.lang.String str44 = node35.getSourceFileName();
        boolean boolean45 = node35.isVoid();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node48.siblings();
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet57);
        java.lang.Object[] objArray60 = strSet57.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.isExterns();
        boolean boolean63 = jSDocInfo61.hasReturnType();
        boolean boolean64 = jSDocInfo61.isOverride();
        jSDocInfo61.setLicense("hi!");
        boolean boolean67 = strSet57.contains((java.lang.Object) jSDocInfo61);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair70 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType68, jSType69);
        boolean boolean71 = strSet57.equals((java.lang.Object) jSType69);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet57);
        jSDocInfo22.setAssociatedNode(node35);
        boolean boolean74 = node35.isOnlyModifiesThisCall();
        int int75 = node11.getIndexOfChild(node35);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        boolean boolean7 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean16 = jSDocInfoBuilder1.recordParameterDescription("InputId: ", "OR hi!\n    OR hi!\n");
        boolean boolean17 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList1 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean3 = jSDocInfo2.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo2.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo2.getVisibility();
        boolean boolean6 = jSDocInfo2.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo2.setVisibility(visibility7);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder9 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder10 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = visibilityEnumBuilder10.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = jSDocInfo13.getVisibility();
        boolean boolean17 = jSDocInfo13.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo13.setVisibility(visibility18);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray20 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility18 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder9.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo29.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = jSDocInfo29.getVisibility();
        boolean boolean33 = jSDocInfo29.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo29.setVisibility(visibility34);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray36 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility34 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray36);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo41.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo41.getVisibility();
        boolean boolean45 = jSDocInfo41.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo41.setVisibility(visibility46);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray48 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility46 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray48);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = visibilityEnumBuilder37.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getSuppressions();
        boolean boolean53 = jSDocInfo51.isNoSideEffects();
        boolean boolean54 = jSDocInfo51.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo51.getReturnType();
        boolean boolean56 = jSDocInfo51.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean60 = jSDocInfoBuilder58.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder58.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean63 = jSDocInfoBuilder58.recordVisibility(visibility62);
        jSDocInfo51.setVisibility(visibility62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder37.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility62);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder9.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection70 = visibilityEnumBuilder9.build();
        org.junit.Assert.assertNotNull(visibilityEnumList1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder9);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(visibility16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray20);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(visibility32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray36);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + visibility46 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility46.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray48);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder50);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertNotNull(visibilityEnumCollection70);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        node5.setLineno(35);
        com.google.javascript.rhino.Node node16 = node5.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExterns();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        jSDocInfo17.setLicense("hi!");
        int int22 = jSDocInfo17.getImplementedInterfaceCount();
        boolean boolean23 = jSDocInfo17.isExport();
        boolean boolean24 = jSDocInfo17.isImplicitCast();
        node16.setJSDocInfo(jSDocInfo17);
        int int26 = node16.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node11.siblings();
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        boolean boolean28 = jSDocInfoBuilder24.recordHiddenness();
        boolean boolean29 = strSet20.remove((java.lang.Object) jSDocInfoBuilder24);
        boolean boolean30 = jSDocInfoBuilder24.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder24.recordExtendedInterface(jSTypeExpression31);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder34.addAuthor("");
        boolean boolean37 = jSDocInfoBuilder34.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = null;
        boolean boolean39 = jSDocInfoBuilder34.recordThrowType(jSTypeExpression38);
        boolean boolean40 = jSDocInfoBuilder34.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder42.addAuthor("");
        boolean boolean45 = jSDocInfoBuilder42.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = null;
        boolean boolean47 = jSDocInfoBuilder42.recordThrowType(jSTypeExpression46);
        boolean boolean48 = jSDocInfoBuilder42.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        jSDocInfoBuilder42.markName("", staticSourceFile50, 29, 50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node56.isDebugger();
        boolean boolean63 = node56.isSyntheticBlock();
        boolean boolean64 = node56.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = new com.google.javascript.rhino.JSTypeExpression(node56, "Unknown class name");
        boolean boolean68 = jSDocInfoBuilder42.recordThrowDescription(jSTypeExpression66, "?");
        boolean boolean69 = jSDocInfoBuilder34.recordExtendedInterface(jSTypeExpression66);
        boolean boolean70 = jSDocInfoBuilder24.recordImplementedInterface(jSTypeExpression66);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression66);
        boolean boolean72 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression71);
        boolean boolean74 = jSDocInfoBuilder1.recordFileOverview("{168895621}");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node84.isNot();
        int int88 = node84.getLineno();
        boolean boolean89 = node84.isCatch();
        boolean boolean90 = node78.hasChild(node84);
        node84.setCharno(43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = new com.google.javascript.rhino.JSTypeExpression(node84, "java.io.IOException: function (this:me, {988702852}): me");
        boolean boolean95 = jSTypeExpression94.isOptionalArg();
        boolean boolean96 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression94);
        jSDocInfoBuilder1.recordOriginalCommentString("{80474539}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray13 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility11 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray13);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo18.getVisibility();
        boolean boolean22 = jSDocInfo18.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo18.setVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray25 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility23 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility31);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility31);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder39 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = visibilityEnumBuilder39.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = visibilityEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo45.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = jSDocInfo45.getVisibility();
        boolean boolean49 = jSDocInfo45.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo45.setVisibility(visibility50);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray52 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility50 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo57.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = jSDocInfo57.getVisibility();
        boolean boolean61 = jSDocInfo57.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo57.setVisibility(visibility62);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray64 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility62 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection71 = visibilityEnumBuilder70.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean74 = jSDocInfoBuilder73.recordInterface();
        boolean boolean76 = jSDocInfoBuilder73.recordDescription("hi!");
        boolean boolean77 = jSDocInfoBuilder73.recordHiddenness();
        boolean boolean78 = jSDocInfoBuilder73.recordExpose();
        boolean boolean80 = jSDocInfoBuilder73.hasParameter("Not declared as a constructor");
        boolean boolean81 = jSDocInfoBuilder73.isConstructorRecorded();
        boolean boolean83 = jSDocInfoBuilder73.recordFileOverview("function (this:me, {726862509}): me");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder84 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility85 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder86 = visibilityEnumBuilder84.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility85);
        boolean boolean87 = jSDocInfoBuilder73.recordVisibility(visibility85);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder70.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility85);
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(visibility21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder33);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder38);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder41);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(visibility48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(visibility60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertNotNull(visibilityEnumCollection71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + visibility85 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility85.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.addSuppression("?");
        boolean boolean6 = jSDocInfo0.hasThisType();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.hasType();
        jSDocInfo0.setLicense("{17134484}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        node5.setLineno(5);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node19.isBlock();
        boolean boolean27 = node19.hasOneChild();
        com.google.javascript.rhino.jstype.JSType jSType28 = node19.getJSType();
        com.google.javascript.rhino.Node node29 = node5.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder31.markTypeNode(node42, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node49 = node19.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isNE();
        boolean boolean54 = node52.isInstanceOf();
        boolean boolean55 = node52.isThrow();
        node52.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable58 = node52.getAncestors();
        java.util.Set<java.lang.String> strSet59 = node52.getDirectives();
        boolean boolean60 = node52.isThrow();
        node42.addChildToFront(node52);
        com.google.javascript.rhino.jstype.JSType jSType62 = node42.getJSType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(ancestorIterable58);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSType62);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.lang.String str17 = jSDocInfo5.getDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean19 = jSDocInfo5.isConstructor();
        boolean boolean20 = jSDocInfo5.isIdGenerator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList4 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("{({1731729485},{875003820},{721963083})}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        java.lang.String str13 = jSDocInfo0.getLendsName();
        boolean boolean14 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        node5.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo25.getThisType();
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo25.getReferences();
        java.lang.String str33 = jSDocInfo25.getMeaning();
        boolean boolean34 = jSDocInfo25.hasThisType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getColumnOfOffset(1);
        int int44 = staticSourceFile31.getColumnOfOffset(4);
        int int46 = staticSourceFile31.getLineOffset(54);
        int int48 = staticSourceFile31.getLineOffset(43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2147483648) + "'", int46 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-2147483648) + "'", int48 == (-2147483648));
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor5 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList0.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isNoTypeCheck();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo7.setAssociatedNode(node13);
        int int15 = jSDocInfo7.getImplementedInterfaceCount();
        boolean boolean16 = nodeIterableList6.contains((java.lang.Object) jSDocInfo7);
        boolean boolean17 = jSDocInfo7.isHidden();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableItor5);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        boolean boolean6 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getParameterType("");
        boolean boolean27 = jSDocInfo19.isConstant();
        boolean boolean28 = jSDocInfo19.isHidden();
        boolean boolean29 = jSDocInfo19.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo19.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo19.getTemplateTypeNames();
        boolean boolean32 = jSDocInfo19.isDeprecated();
        boolean boolean33 = jSDocInfo19.isConstant();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str7 = jSDocInfo0.toString();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo21.getSuppressions();
        boolean boolean23 = jSDocInfo21.isNoSideEffects();
        java.lang.String str24 = jSDocInfo21.getBlockDescription();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo21.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        int int27 = nodeIterableList26.size();
        boolean boolean28 = strSet25.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList26);
        int int29 = nodeIterableList26.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor30 = nodeIterableList26.iterator();
        int int31 = nodeIterableList19.lastIndexOf((java.lang.Object) nodeIterableItor30);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Unknown class name", 2, (int) ' ');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDec();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isVoid();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isTypeOf();
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node25);
        int int28 = node6.getIndexOfChild(node25);
        boolean boolean29 = node6.isTrue();
        boolean boolean30 = node3.isEquivalentToTyped(node6);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        int int42 = node33.getIntProp((int) (short) 1);
        node33.addSuppression("{1480997056}");
        com.google.javascript.rhino.Node node45 = node33.getLastChild();
        java.lang.String str46 = node45.getString();
        int int47 = node3.getIndexOfChild(node45);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        node51.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node65.isNot();
        int int69 = node65.getLineno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node75.isNot();
        int int79 = node75.getLineno();
        com.google.javascript.rhino.Node node80 = node65.srcref(node75);
        int int81 = node65.getCharno();
        com.google.javascript.rhino.Node node82 = node51.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node88 = node87.cloneNode();
        boolean boolean89 = node88.isAssignAdd();
        int int90 = node51.getIndexOfChild(node88);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node88.siblings();
        typePosition48.setItem(node88);
        int int93 = typePosition48.getPositionOnEndLine();
        int int94 = typePosition48.getPositionOnEndLine();
        com.google.javascript.rhino.Node node95 = typePosition48.getItem();
        com.google.javascript.rhino.Node node96 = node45.srcrefTree(node95);
        // The following exception was thrown during execution in test generation
        try {
            node95.setDouble((double) 213036);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: TYPEOF hi! 38 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo4.getTypedefType();
        boolean boolean82 = jSDocInfo4.isDeprecated();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo4.getParameterNames();
        boolean boolean84 = jSDocInfo4.isConstant();
        boolean boolean86 = jSDocInfo4.hasParameterType("{1332928501}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str11 = jSDocInfo0.getDescription();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str13 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getSuppressions();
        boolean boolean62 = jSDocInfo60.isNoSideEffects();
        boolean boolean63 = jSDocInfo60.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getReturnType();
        boolean boolean65 = jSDocInfo60.isNoAlias();
        boolean boolean66 = nodeIterableList53.contains((java.lang.Object) jSDocInfo60);
        boolean boolean67 = jSDocInfo60.shouldPreserveTry();
        boolean boolean68 = jSDocInfo60.isNoCompile();
        boolean boolean69 = jSDocInfo60.isDefine();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo60.getSuppressions();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        int int17 = strSet11.size();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean28 = nodeIterableList27.add(nodeIterable26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        boolean boolean45 = strSet40.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList43);
        java.lang.Object[] objArray46 = nodeIterableList43.toArray();
        boolean boolean47 = nodeIterableList43.isEmpty();
        boolean boolean48 = nodeIterableList27.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList43);
        boolean boolean49 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getTypedefType();
        boolean boolean53 = jSDocInfo50.isExterns();
        boolean boolean54 = jSDocInfo50.isInterface();
        java.lang.String str56 = jSDocInfo50.getDescriptionForParameter("{694195918}");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility59);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility59);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility62);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder65.addAuthor("");
        boolean boolean68 = jSDocInfoBuilder65.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = null;
        boolean boolean70 = jSDocInfoBuilder65.recordReturnType(jSTypeExpression69);
        boolean boolean71 = jSDocInfoBuilder65.recordOverride();
        boolean boolean73 = jSDocInfoBuilder65.recordBlockDescription("java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean74 = jSDocInfoBuilder65.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean77 = jSDocInfoBuilder76.recordInterface();
        boolean boolean79 = jSDocInfoBuilder76.recordDescription("hi!");
        boolean boolean80 = jSDocInfoBuilder76.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder76.recordThrowType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder76.recordConstancy();
        boolean boolean84 = jSDocInfoBuilder76.recordOverride();
        boolean boolean85 = jSDocInfoBuilder76.recordNoTypeCheck();
        boolean boolean86 = jSDocInfoBuilder76.recordHiddenness();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean88 = jSDocInfoBuilder76.recordVisibility(visibility87);
        boolean boolean89 = jSDocInfoBuilder65.recordVisibility(visibility87);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder90 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility87);
        jSDocInfo50.setVisibility(visibility87);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection92 = jSDocInfo50.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = nodeIterableList43.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder57);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder90);
        org.junit.Assert.assertNotNull(nodeCollection92);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        jSDocInfoBuilder1.markName("JSDocInfo", 4095, (int) ' ');
        boolean boolean17 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi!\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        boolean boolean29 = jSDocInfo26.isOverride();
        boolean boolean30 = jSDocInfo26.isNoCompile();
        java.lang.String str31 = jSDocInfo26.getLendsName();
        boolean boolean32 = jSType23.equals((java.lang.Object) str31);
        boolean boolean33 = jSType23.hasAnyTemplate();
        boolean boolean34 = jSType23.isVoidType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType35 = jSType23.toMaybeParameterizedType();
        boolean boolean36 = jSType23.isArrayType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(parameterizedType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        boolean boolean20 = jSType19.isInstanceType();
        boolean boolean21 = jSType19.isFunctionType();
        boolean boolean22 = jSType19.matchesNumberContext();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator25 = nodeIterableList23.spliterator();
        boolean boolean26 = jSType19.equals((java.lang.Object) nodeIterableSpliterator25);
        boolean boolean27 = nodeIterableList0.equals((java.lang.Object) boolean26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder29.addAuthor("");
        boolean boolean32 = jSDocInfoBuilder29.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder29.recordParameter("OR hi!", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder29.recordImplicitCast();
        boolean boolean37 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isExterns();
        com.google.javascript.rhino.Node node40 = jSDocInfo38.getAssociatedNode();
        boolean boolean41 = jSDocInfo38.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo38.getType();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo38.getParameterNames();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo38.getParameterNames();
        boolean boolean45 = jSDocInfoBuilder29.recordSuppressions(strSet44);
        boolean boolean46 = jSDocInfoBuilder29.recordExpose();
        boolean boolean47 = jSDocInfoBuilder29.recordInterface();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.hasModifies();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        boolean boolean33 = strSet26.remove((java.lang.Object) boolean32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo34.getSuppressions();
        boolean boolean36 = jSDocInfo34.isNoSideEffects();
        boolean boolean37 = jSDocInfo34.isConsistentIdGenerator();
        boolean boolean38 = strSet26.contains((java.lang.Object) jSDocInfo34);
        boolean boolean39 = jSDocInfo34.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo34.getEnumParameterType();
        node7.setJSDocInfo(jSDocInfo34);
        com.google.javascript.rhino.Node node42 = node7.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder15.recordConstancy();
        boolean boolean23 = jSDocInfoBuilder15.recordOverride();
        boolean boolean25 = jSDocInfoBuilder15.recordMeaning("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordInterface();
        boolean boolean30 = jSDocInfoBuilder27.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder27.recordDefineType(jSTypeExpression31);
        boolean boolean34 = jSDocInfoBuilder27.recordMeaning("hi!");
        boolean boolean36 = jSDocInfoBuilder27.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.addAuthor("");
        boolean boolean41 = jSDocInfoBuilder38.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder38.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile46 = null;
        jSDocInfoBuilder38.markName("", staticSourceFile46, 29, 50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        boolean boolean59 = node52.isSyntheticBlock();
        boolean boolean60 = node52.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = new com.google.javascript.rhino.JSTypeExpression(node52, "Unknown class name");
        boolean boolean64 = jSDocInfoBuilder38.recordThrowDescription(jSTypeExpression62, "?");
        boolean boolean65 = jSDocInfoBuilder27.recordThrowType(jSTypeExpression62);
        boolean boolean66 = jSDocInfoBuilder15.recordType(jSTypeExpression62);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression62);
        boolean boolean68 = jSDocInfoBuilder1.recordType(jSTypeExpression62);
        boolean boolean69 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean70 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        java.lang.String str15 = node13.getSourceFileName();
        boolean boolean16 = node13.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean27 = node22.isEquivalentToTyped(node26);
        com.google.javascript.rhino.Node node28 = node22.cloneNode();
        com.google.javascript.rhino.InputId inputId29 = node22.getInputId();
        boolean boolean30 = node22.isLabelName();
        com.google.javascript.rhino.Node node31 = node13.srcref(node22);
        node13.setIsSyntheticBlock(true);
        node13.detachChildren();
        com.google.javascript.rhino.Node node35 = node13.getLastSibling();
        jSDocInfo0.setAssociatedNode(node13);
        int int37 = node13.getSourcePosition();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node13.getStaticSourceFile();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(staticSourceFile38);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("");
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean9 = jSDocInfo0.hasType();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        node2.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node22.isNot();
        int int26 = node22.getLineno();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node37 = node22.srcref(node32);
        boolean boolean38 = node37.isDelProp();
        com.google.javascript.rhino.Node node39 = node37.getLastSibling();
        java.lang.String str40 = node39.toStringTree();
        boolean boolean41 = node2.isEquivalentTo(node39);
        boolean boolean42 = node39.isSyntheticBlock();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(40);
        boolean boolean45 = node44.isReturn();
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("");
        java.lang.String str48 = inputId47.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        boolean boolean55 = objectType54.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = objectType61.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair63 = objectType54.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = objectType54.collapseUnion();
        boolean boolean65 = inputId47.equals((java.lang.Object) objectType54);
        node44.setInputId(inputId47);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isAnd();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo76.getSuppressions();
        boolean boolean78 = jSDocInfo76.isNoSideEffects();
        java.lang.String str79 = jSDocInfo76.getReturnDescription();
        boolean boolean81 = jSDocInfo76.hasParameter("Not declared as a constructor");
        java.lang.String str82 = jSDocInfo76.getMeaning();
        boolean boolean83 = jSDocInfo76.isJavaDispatch();
        node74.setJSDocInfo(jSDocInfo76);
        boolean boolean85 = node69.isEquivalentToTyped(node74);
        java.lang.String str86 = node74.getQualifiedName();
        boolean boolean87 = node74.isComma();
        java.lang.String str88 = node74.toString();
        boolean boolean89 = inputId47.equals((java.lang.Object) str88);
        node39.setInputId(inputId47);
        java.lang.String str91 = inputId47.toString();
        java.lang.String str92 = inputId47.getIdName();
        java.lang.String str93 = inputId47.getIdName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n" + "'", str40, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "InputId: " + "'", str48, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(typePair63);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GETELEM 2 [jsdoc_info: JSDocInfo]" + "'", str88, "GETELEM 2 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "InputId: " + "'", str91, "InputId: ");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node31 = node16.srcref(node26);
        int int32 = node16.getCharno();
        com.google.javascript.rhino.Node node33 = node2.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node39 = node38.cloneNode();
        boolean boolean40 = node39.isAssignAdd();
        int int41 = node2.getIndexOfChild(node39);
        boolean boolean42 = node39.isAnd();
        com.google.javascript.rhino.Node node43 = node39.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node39.getJsDocBuilderForNode();
        fileLevelJsDocBuilder44.append("InputId: {1208754332}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.isTrue();
        com.google.javascript.rhino.Node node11 = node2.cloneNode();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        boolean boolean34 = node17.isQuotedString();
        boolean boolean35 = node17.isIf();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node17.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node48 = node2.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.Node node49 = node17.getParent();
        boolean boolean50 = node17.isTrue();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node56.isNot();
        int int60 = node56.getLineno();
        boolean boolean61 = node56.isAdd();
        com.google.javascript.rhino.Node node62 = node56.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node62.setJSType(jSType63);
        com.google.javascript.rhino.InputId inputId66 = new com.google.javascript.rhino.InputId("");
        java.lang.String str67 = inputId66.getIdName();
        node62.setInputId(inputId66);
        java.lang.String[] strArray71 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        boolean boolean74 = strSet72.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo75.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo75.getVisibility();
        boolean boolean79 = jSDocInfo75.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo75.setVisibility(visibility80);
        boolean boolean82 = jSDocInfo75.hasEnumParameterType();
        boolean boolean83 = jSDocInfo75.isDefine();
        java.lang.String str84 = jSDocInfo75.getLendsName();
        boolean boolean85 = jSDocInfo75.hasModifies();
        boolean boolean86 = jSDocInfo75.isNoSideEffects();
        boolean boolean87 = strSet72.equals((java.lang.Object) boolean86);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.hasFileOverview();
        boolean boolean90 = jSDocInfo88.hasModifies();
        java.util.Set<java.lang.String> strSet91 = jSDocInfo88.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList92 = com.google.common.collect.ImmutableList.of();
        boolean boolean93 = strSet91.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList92);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor94 = nodeIterableList92.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor95 = nodeIterableList92.iterator();
        boolean boolean96 = strSet72.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList92);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet72);
        boolean boolean98 = node62.isFromExterns();
        com.google.javascript.rhino.Node node99 = node17.useSourceInfoFromForTree(node62);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertNull(visibility78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + visibility80 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility80.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(nodeIterableList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor94);
        org.junit.Assert.assertNotNull(nodeIterableItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        boolean boolean42 = jSDocInfo39.isImplicitCast();
        boolean boolean43 = jSDocInfo39.isInterface();
        boolean boolean44 = jSDocInfo39.hasFileOverview();
        node37.setJSDocInfo(jSDocInfo39);
        java.lang.Class<?> wildcardClass46 = node37.getClass();
        com.google.common.collect.ImmutableList<java.lang.Class<?>> wildcardClassList47 = com.google.common.collect.ImmutableList.of(wildcardClass46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClassList47);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isImplicitCast();
        boolean boolean11 = jSDocInfo7.isExport();
        boolean boolean12 = jSDocInfo7.isNoShadow();
        boolean boolean14 = jSDocInfo7.hasParameter("Unknown class name");
        java.lang.String str15 = jSDocInfo7.getDescription();
        java.lang.String str16 = jSDocInfo7.getFileOverview();
        boolean boolean17 = jSDocInfo7.hasFileOverview();
        boolean boolean18 = nodeIterableList0.equals((java.lang.Object) jSDocInfo7);
        boolean boolean19 = jSDocInfo7.isExport();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean62 = jSDocInfoBuilder1.recordDescription("OR hi! 0\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(53, "{1242212142}", (int) (byte) 0, 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder1.build(node67);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo68.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        java.lang.String str6 = node2.getQualifiedName();
        boolean boolean7 = node2.isTrue();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        node11.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = node25.srcref(node35);
        int int41 = node25.getCharno();
        com.google.javascript.rhino.Node node42 = node11.copyInformationFrom(node25);
        boolean boolean43 = node11.isTrue();
        boolean boolean44 = node11.isCase();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(52, node11);
        java.lang.String str46 = node45.toString();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node50.isDebugger();
        node50.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node64.isNot();
        int int68 = node64.getLineno();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node74.isNot();
        int int78 = node74.getLineno();
        com.google.javascript.rhino.Node node79 = node64.srcref(node74);
        int int80 = node64.getCharno();
        com.google.javascript.rhino.Node node81 = node50.copyInformationFrom(node64);
        boolean boolean82 = node50.isTrue();
        boolean boolean83 = node50.isCase();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(52, node50);
        com.google.javascript.rhino.Node node85 = node45.srcrefTree(node84);
        com.google.javascript.rhino.Node node86 = node2.copyInformationFrom(node45);
        com.google.javascript.rhino.Node node87 = node86.cloneNode();
        boolean boolean88 = node86.isRegExp();
        node86.addSuppression("(null|undefined|{})");
        boolean boolean91 = node86.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "INSTANCEOF" + "'", str46, "INSTANCEOF");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean13 = jSDocInfoBuilder1.recordLends("OR hi!");
        boolean boolean14 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean17 = jSDocInfoBuilder1.recordFileOverview("");
        boolean boolean18 = jSDocInfoBuilder1.isPopulated();
        jSDocInfoBuilder1.recordOriginalCommentString("{1185156980}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet63 = jSDocInfo62.getSuppressions();
        boolean boolean64 = jSDocInfo62.hasBaseType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection65 = jSDocInfo62.getMarkers();
        boolean boolean67 = jSDocInfo62.hasParameterType("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo62.getBaseType();
        java.lang.String str69 = jSDocInfo62.toString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection70 = jSDocInfo62.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = nodeIterableList53.set(12, (java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(markerCollection65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "JSDocInfo" + "'", str69, "JSDocInfo");
        org.junit.Assert.assertNotNull(nodeCollection70);
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("{}");
        boolean boolean14 = jSDocInfoBuilder1.recordReturnDescription("NULL function (this:me, {190244343}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordExterns();
        boolean boolean6 = jSDocInfoBuilder1.recordLends("OR hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("{376655723}");
        boolean boolean9 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean14 = node13.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = new com.google.javascript.rhino.JSTypeExpression(node13, "INSTANCEOF");
        boolean boolean17 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        jSDocInfo0.addSuppression("{424067794}");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("{298532945}");
        boolean boolean17 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!\n    OR hi!\n");
        boolean boolean18 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean19 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean20 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean21 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean15 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        boolean boolean26 = node21.isAdd();
        com.google.javascript.rhino.Node node27 = node21.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node27.setJSType(jSType28);
        boolean boolean30 = node27.isString();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        boolean boolean48 = strSet42.isEmpty();
        node27.setDirectives((java.util.Set<java.lang.String>) strSet42);
        boolean boolean50 = node27.isObjectLit();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node27, "Named type with empty name component");
        boolean boolean53 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 100, (-2147483648), 53);
        boolean boolean58 = node57.isLabelName();
        jSDocInfoBuilder1.markTypeNode(node57, 48, (int) (short) 10, (-1), 10, true);
        // The following exception was thrown during execution in test generation
        try {
            node57.setDouble((double) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node7.isAdd();
        boolean boolean11 = node7.isAnd();
        typePosition1.setItem(node7);
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, node13);
        int int15 = node13.getLength();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean20 = node19.isOptionalArg();
        boolean boolean21 = node19.isFalse();
        boolean boolean22 = node19.isVoid();
        int int23 = node19.getSourceOffset();
        boolean boolean24 = node19.isNot();
        com.google.javascript.rhino.Node node25 = node13.clonePropsFrom(node19);
        com.google.javascript.rhino.Node node26 = node25.getParent();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean31 = jSDocInfoBuilder28.recordDescription("hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordInterface();
        boolean boolean50 = jSDocInfoBuilder47.recordDescription("hi!");
        boolean boolean51 = jSDocInfoBuilder47.recordHiddenness();
        boolean boolean52 = strSet43.remove((java.lang.Object) jSDocInfoBuilder47);
        boolean boolean53 = jSDocInfoBuilder47.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder55.addAuthor("");
        boolean boolean58 = jSDocInfoBuilder55.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = null;
        boolean boolean60 = jSDocInfoBuilder55.recordThrowType(jSTypeExpression59);
        boolean boolean61 = jSDocInfoBuilder55.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        jSDocInfoBuilder55.markName("", staticSourceFile63, 29, 50);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node69.isDebugger();
        boolean boolean76 = node69.isSyntheticBlock();
        boolean boolean77 = node69.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node69, "Unknown class name");
        boolean boolean81 = jSDocInfoBuilder55.recordThrowDescription(jSTypeExpression79, "?");
        boolean boolean82 = jSDocInfoBuilder47.recordThrowType(jSTypeExpression79);
        boolean boolean83 = jSDocInfoBuilder28.recordEnumParameterType(jSTypeExpression79);
        boolean boolean85 = jSDocInfoBuilder28.recordReturnDescription("hi!");
        boolean boolean86 = jSDocInfoBuilder28.recordConstancy();
        boolean boolean88 = jSDocInfoBuilder28.recordLends("");
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        boolean boolean92 = node91.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = jSDocInfoBuilder28.build(node91);
        boolean boolean94 = jSDocInfo93.isIdGenerator();
        boolean boolean95 = jSDocInfo93.isImplicitCast();
        node26.setJSDocInfo(jSDocInfo93);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("{464938482}");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        int int28 = strSet22.size();
        boolean boolean29 = strSet22.isEmpty();
        boolean boolean30 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        node34.putBooleanProp(0, false);
        node34.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean51 = node34.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node34.getStaticSourceFile();
        jSDocInfoBuilder1.markName("TYPEOF hi!", staticSourceFile52, (int) (short) 100, 31);
        boolean boolean57 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.recordInterface();
        boolean boolean62 = jSDocInfoBuilder59.recordDescription("hi!");
        boolean boolean63 = jSDocInfoBuilder59.recordHiddenness();
        boolean boolean64 = jSDocInfoBuilder59.recordConsistentIdGenerator();
        boolean boolean65 = jSDocInfoBuilder59.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder67.addAuthor("");
        boolean boolean70 = jSDocInfoBuilder67.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = null;
        boolean boolean72 = jSDocInfoBuilder67.recordThrowType(jSTypeExpression71);
        boolean boolean73 = jSDocInfoBuilder67.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = null;
        jSDocInfoBuilder67.markName("", staticSourceFile75, 29, 50);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDebugger();
        boolean boolean88 = node81.isSyntheticBlock();
        boolean boolean89 = node81.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node81, "Unknown class name");
        boolean boolean93 = jSDocInfoBuilder67.recordThrowDescription(jSTypeExpression91, "?");
        com.google.javascript.rhino.Node node94 = jSTypeExpression91.getRoot();
        boolean boolean95 = jSDocInfoBuilder59.recordBaseType(jSTypeExpression91);
        boolean boolean96 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression91);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isNE();
        boolean boolean22 = node20.isInstanceOf();
        boolean boolean23 = node20.isThrow();
        node20.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node20.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable26);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor17.set((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertNotNull(nodeIterableList27);
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        node5.setLineno(5);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node19.isBlock();
        boolean boolean27 = node19.hasOneChild();
        com.google.javascript.rhino.jstype.JSType jSType28 = node19.getJSType();
        com.google.javascript.rhino.Node node29 = node5.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder31.markTypeNode(node42, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node49 = node19.clonePropsFrom(node42);
        boolean boolean50 = node42.isGetProp();
        int int51 = node42.getSideEffectFlags();
        node42.addSuppression("[]");
        // The following exception was thrown during execution in test generation
        try {
            double double54 = node42.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        int int39 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeList36);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator40 = nodeIterableList0.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor41 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node44.siblings();
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet53);
        int int56 = strSet53.size();
        strSet53.clear();
        java.util.Spliterator<java.lang.String> strSpliterator58 = strSet53.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = nodeIterableList59.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition62 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition63 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition65 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition66 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition67 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray68 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition62, typePosition63, typePosition64, typePosition65, typePosition66, typePosition67 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray69 = nodeIterableList59.toArray(typePositionArray68);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor70 = nodeIterableList59.iterator();
        java.lang.Object[] objArray71 = nodeIterableList59.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream72 = nodeIterableList59.parallelStream();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean77 = node76.isObjectLit();
        int int78 = nodeIterableList59.indexOf((java.lang.Object) boolean77);
        boolean boolean79 = strSet53.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = nodeIterableList0.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableSpliterator40);
        org.junit.Assert.assertNotNull(nodeIterableItor41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertNotNull(typePositionArray68);
        org.junit.Assert.assertNotNull(typePositionArray69);
        org.junit.Assert.assertNotNull(nodeIterableItor70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node11 = node2.getLastChild();
        java.lang.String str12 = node11.getString();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node18.isNot();
        int int22 = node18.getLineno();
        boolean boolean23 = node18.isAdd();
        com.google.javascript.rhino.Node node24 = node18.cloneTree();
        com.google.javascript.rhino.Node node25 = node11.clonePropsFrom(node18);
        com.google.javascript.rhino.Node node26 = node25.getFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getType();
        boolean boolean30 = jSDocInfo27.isImplicitCast();
        boolean boolean31 = jSDocInfo27.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo27.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection33 = jSDocInfo27.getReferences();
        boolean boolean34 = jSDocInfo27.isConstant();
        java.lang.String str35 = jSDocInfo27.getDeprecationReason();
        node25.setJSDocInfo(jSDocInfo27);
        int int37 = jSDocInfo27.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo27.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertNull(strCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(jSTypeExpression38);
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isAssign();
        boolean boolean10 = node2.isInstanceOf();
        boolean boolean11 = node2.isTry();
        boolean boolean12 = node2.isDelProp();
        boolean boolean13 = node2.isDo();
        boolean boolean14 = node2.isVar();
        node2.setIsSyntheticBlock(false);
        node2.setSourceEncodedPositionForTree(45);
        node2.addSuppression("Node tree inequality:\nTree1:\nNAME\n    OR hi!\n        OR hi!\n\n\nTree2:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree1: NAME\n    OR hi!\n        OR hi!\n\n\nSubtree2: OR hi! [empty_block: 1]\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean13 = jSDocInfoBuilder1.recordVersion("{1246504462}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean17 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean20 = jSDocInfoBuilder15.recordVisibility(visibility19);
        boolean boolean22 = jSDocInfoBuilder15.recordLends("OR hi!\n");
        boolean boolean23 = jSDocInfoBuilder15.recordExport();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("{298532945}");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        boolean boolean34 = jSTypeRegistry29.canPropertyBeDefined(jSType32, "Unknown class name");
        jSTypeRegistry29.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry29.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        jSTypeRegistry40.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = objectType47.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot50 = objectType47.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType58 = objectType57.toMaybeEnumElementType();
        boolean boolean59 = jSTypeRegistry29.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType47, objectType57);
        boolean boolean61 = jSTypeRegistry25.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType47, "JSDocInfo");
        jSTypeRegistry25.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry25.getType("OR hi!\n");
        jSTypeRegistry25.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo67.getType();
        boolean boolean70 = jSDocInfo67.isImplicitCast();
        boolean boolean71 = jSDocInfo67.isExport();
        java.lang.String str72 = jSDocInfo67.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo67.getType();
        java.lang.String str74 = jSDocInfo67.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = jSDocInfo67.getTemplateTypeNames();
        jSTypeRegistry25.setTemplateTypeNames((java.util.List<java.lang.String>) strList75);
        boolean boolean77 = jSDocInfoBuilder15.recordTemplateTypeNames((java.util.List<java.lang.String>) strList75);
        boolean boolean78 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNull(jSTypeStaticSlot50);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNull(enumElementType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "JSDocInfo" + "'", str72, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getSuppressions();
        boolean boolean62 = jSDocInfo60.isNoSideEffects();
        boolean boolean63 = jSDocInfo60.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getReturnType();
        boolean boolean65 = jSDocInfo60.isNoAlias();
        boolean boolean66 = nodeIterableList53.contains((java.lang.Object) jSDocInfo60);
        boolean boolean67 = jSDocInfo60.shouldPreserveTry();
        boolean boolean68 = jSDocInfo60.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo60.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        boolean boolean34 = jSDocInfo31.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo31.getReturnType();
        boolean boolean36 = jSDocInfo31.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordInterface();
        boolean boolean40 = jSDocInfoBuilder38.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder38.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean43 = jSDocInfoBuilder38.recordVisibility(visibility42);
        jSDocInfo31.setVisibility(visibility42);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility46);
        jSDocInfo0.setVisibility(visibility46);
        boolean boolean49 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertTrue("'" + visibility46 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility46.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.getIdName();
        java.lang.String str4 = inputId1.getIdName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo5.getThrownTypes();
        jSDocInfo5.addSuppression("{1529389073}");
        int int13 = jSDocInfo5.getImplementedInterfaceCount();
        boolean boolean14 = inputId1.equals((java.lang.Object) jSDocInfo5);
        java.lang.String str15 = jSDocInfo5.getLicense();
        boolean boolean16 = jSDocInfo5.isNoTypeCheck();
        boolean boolean17 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        boolean boolean20 = jSDocInfo18.hasModifies();
        boolean boolean21 = jSDocInfo18.isIdGenerator();
        boolean boolean22 = jSDocInfo18.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo18.getType();
        boolean boolean24 = jSDocInfo18.isInterface();
        java.lang.String str25 = jSDocInfo18.getDeprecationReason();
        boolean boolean26 = jSDocInfo18.isJavaDispatch();
        int int27 = jSDocInfo18.getImplementedInterfaceCount();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean39 = jSDocInfoBuilder36.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression40);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder36.recordThisType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder36.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = null;
        boolean boolean46 = jSDocInfoBuilder36.recordBaseType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder36.recordExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean49 = jSDocInfo48.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo48.getType();
        boolean boolean51 = jSDocInfo48.isNoTypeCheck();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo48.setAssociatedNode(node54);
        int int56 = jSDocInfo48.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList57 = jSDocInfo48.getExtendedInterfaces();
        boolean boolean58 = jSDocInfo48.isHidden();
        boolean boolean59 = jSDocInfo48.hasReturnType();
        java.lang.String str60 = jSDocInfo48.getVersion();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList62 = visibilityEnumBuilder61.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = jSDocInfo63.getVisibility();
        boolean boolean67 = jSDocInfo63.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo63.setVisibility(visibility68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility68);
        jSDocInfo48.setVisibility(visibility68);
        boolean boolean72 = jSDocInfoBuilder36.recordVisibility(visibility68);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility68);
        jSDocInfo18.setVisibility(visibility68);
        jSDocInfo5.setVisibility(visibility68);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(visibilityEnumList62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNull(visibility66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean17 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean18 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean19 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean20 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isImplicitCast();
        boolean boolean11 = jSDocInfo7.isExport();
        boolean boolean12 = jSDocInfo7.isNoShadow();
        boolean boolean14 = jSDocInfo7.hasParameter("Unknown class name");
        java.lang.String str15 = jSDocInfo7.getDescription();
        java.lang.String str16 = jSDocInfo7.getFileOverview();
        boolean boolean17 = jSDocInfo7.hasFileOverview();
        boolean boolean18 = nodeIterableList0.equals((java.lang.Object) jSDocInfo7);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDec();
        boolean boolean28 = node21.isBlock();
        boolean boolean29 = node21.hasOneChild();
        com.google.javascript.rhino.jstype.JSType jSType30 = node21.getJSType();
        boolean boolean31 = node21.isNumber();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        com.google.javascript.rhino.Node node52 = node37.srcref(node47);
        boolean boolean53 = node47.isComma();
        node47.setVarArgs(true);
        java.lang.String str56 = node47.toString();
        boolean boolean57 = node47.isNot();
        com.google.javascript.rhino.Node node58 = node47.getParent();
        com.google.javascript.rhino.Node node59 = node21.srcref(node47);
        int int60 = nodeIterableList0.indexOf((java.lang.Object) node47);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node66 = node65.cloneNode();
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable76 = node70.siblings();
        java.lang.String[] strArray78 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet79);
        node70.putBooleanProp(0, false);
        node70.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean87 = node70.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = node70.getStaticSourceFile();
        boolean boolean89 = staticSourceFile88.isExtern();
        int int91 = staticSourceFile88.getLineOffset(16);
        node66.setStaticSourceFile(staticSourceFile88);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable93 = node66.siblings();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = nodeIterableList0.add(nodeIterable93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR hi! [var_args_name: 1]" + "'", str56, "OR hi! [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterable76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(staticSourceFile88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-2147483648) + "'", int91 == (-2147483648));
        org.junit.Assert.assertNotNull(nodeIterable93);
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder13.recordMeaning("hi!");
        boolean boolean22 = jSDocInfoBuilder13.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        boolean boolean78 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression75);
        boolean boolean79 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression75);
        boolean boolean80 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression75);
        boolean boolean82 = jSDocInfoBuilder1.recordType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean85 = jSDocInfoBuilder1.recordReturnDescription("OR hi! [source_file: OR hi!\n    OR hi!\n]");
        boolean boolean86 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean88 = jSDocInfoBuilder1.recordMeaning("{1900170626}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder7.recordVersion("hi!");
        boolean boolean10 = jSDocInfoBuilder7.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder12.recordHiddenness();
        boolean boolean17 = jSDocInfoBuilder12.recordExpose();
        boolean boolean18 = jSDocInfoBuilder12.recordNoCompile();
        boolean boolean19 = jSDocInfoBuilder12.isPopulatedWithFileOverview();
        boolean boolean20 = jSDocInfoBuilder12.recordJavaDispatch();
        boolean boolean21 = jSDocInfoBuilder12.recordNoAlias();
        boolean boolean23 = jSDocInfoBuilder12.addAuthor("{}");
        boolean boolean25 = jSDocInfoBuilder12.recordDeprecationReason("{694195918}");
        boolean boolean26 = jSDocInfoBuilder12.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean31 = jSDocInfoBuilder28.recordDescription("hi!");
        boolean boolean32 = jSDocInfoBuilder28.recordHiddenness();
        boolean boolean33 = jSDocInfoBuilder28.recordExpose();
        boolean boolean34 = jSDocInfoBuilder28.recordIdGenerator();
        boolean boolean36 = jSDocInfoBuilder28.addReference("OR hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.recordInterface();
        boolean boolean55 = jSDocInfoBuilder52.recordDescription("hi!");
        boolean boolean56 = jSDocInfoBuilder52.recordHiddenness();
        boolean boolean57 = strSet48.remove((java.lang.Object) jSDocInfoBuilder52);
        boolean boolean58 = jSDocInfoBuilder52.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean87 = jSDocInfoBuilder52.recordThrowType(jSTypeExpression84);
        boolean boolean88 = jSDocInfoBuilder28.recordEnumParameterType(jSTypeExpression84);
        boolean boolean89 = jSDocInfoBuilder12.recordExtendedInterface(jSTypeExpression84);
        boolean boolean90 = jSDocInfoBuilder7.recordThisType(jSTypeExpression84);
        boolean boolean91 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression92);
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder1.markTypeNode(node12, 29, 48, 46, (int) (byte) 100, true);
        boolean boolean20 = jSDocInfoBuilder1.recordDescription("{1221148348}");
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node26.isThis();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node48.isNot();
        int int52 = node48.getLineno();
        com.google.javascript.rhino.Node node53 = node38.srcref(node48);
        int int54 = node38.getCharno();
        boolean boolean55 = node38.isQuotedString();
        boolean boolean56 = node38.isIf();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node38.useSourceInfoFromForTree(node62);
        boolean boolean69 = node26.hasChild(node62);
        boolean boolean70 = node26.isHook();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node26.setStaticSourceFile(staticSourceFile71);
        java.lang.String str73 = node26.toString();
        int int74 = node26.getSideEffectFlags();
        jSDocInfoBuilder1.markTypeNode(node26, 50, (int) '#', (int) (byte) 100, 3, true);
        boolean boolean82 = jSDocInfoBuilder1.recordReturnDescription("PARAM_LIST");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PARAM_LIST" + "'", str73, "PARAM_LIST");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.isOverride();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        boolean boolean13 = jSDocInfo0.isOverride();
        boolean boolean14 = jSDocInfo0.isConstructor();
        java.lang.String str15 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        boolean boolean42 = jSDocInfo39.isImplicitCast();
        boolean boolean43 = jSDocInfo39.isInterface();
        boolean boolean44 = jSDocInfo39.hasFileOverview();
        node37.setJSDocInfo(jSDocInfo39);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(31, "INSTANCEOF", 10, 53);
        boolean boolean51 = node50.isQuotedString();
        node50.setLength(4095);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node50.isName();
        com.google.javascript.rhino.Node node56 = node37.useSourceInfoFromForTree(node50);
        boolean boolean57 = node50.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        node5.setLineno(35);
        com.google.javascript.rhino.Node node16 = node5.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExterns();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        jSDocInfo17.setLicense("hi!");
        int int22 = jSDocInfo17.getImplementedInterfaceCount();
        boolean boolean23 = jSDocInfo17.isExport();
        boolean boolean24 = jSDocInfo17.isImplicitCast();
        node16.setJSDocInfo(jSDocInfo17);
        boolean boolean26 = node16.isScript();
        com.google.javascript.rhino.Node node27 = node16.getLastSibling();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isGetElem();
        boolean boolean33 = nodeIterableList28.equals((java.lang.Object) node31);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry35.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean44 = node39.isEquivalentToTyped(node43);
        boolean boolean45 = node39.isThis();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node51.isNot();
        int int55 = node51.getLineno();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isNot();
        int int65 = node61.getLineno();
        com.google.javascript.rhino.Node node66 = node51.srcref(node61);
        int int67 = node51.getCharno();
        boolean boolean68 = node51.isQuotedString();
        boolean boolean69 = node51.isIf();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node75.isNot();
        int int79 = node75.getLineno();
        boolean boolean80 = node75.isAdd();
        com.google.javascript.rhino.Node node81 = node51.useSourceInfoFromForTree(node75);
        boolean boolean82 = node39.hasChild(node75);
        node75.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node85 = node75.cloneTree();
        boolean boolean86 = node75.wasEmptyNode();
        boolean boolean87 = node75.isNE();
        com.google.javascript.rhino.Node node88 = node31.srcrefTree(node75);
        com.google.javascript.rhino.Node node90 = node31.getAncestor((int) (byte) 100);
        node16.addChildToBack(node31);
        boolean boolean92 = node16.isBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("STRING {...} 52");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.lang.String str3 = jSDocInfo0.getDescription();
        java.lang.String str4 = jSDocInfo0.getDescription();
        jSDocInfo0.addSuppression("{1483644085}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getColumnOfOffset(1);
        int int44 = staticSourceFile31.getLineOfOffset(38);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = staticSourceFile31.getLineOffset((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Should not call getLineOffset with line number -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.hasThisType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.util.Set<java.lang.String> strSet81 = jSDocInfo0.getSuppressions();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo0.getModifies();
        java.lang.String str83 = jSDocInfo0.getBlockDescription();
        int int84 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("INSTANCEOF");
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("{694195918}");
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.markAnnotation("", 155648, 4);
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("OR hi!");
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        boolean boolean32 = strSet25.remove((java.lang.Object) boolean31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        boolean boolean36 = jSDocInfo33.isConsistentIdGenerator();
        boolean boolean37 = strSet25.contains((java.lang.Object) jSDocInfo33);
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo33.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo33.getParameterType("");
        boolean boolean41 = jSDocInfo33.isConstant();
        boolean boolean42 = jSDocInfo33.isHidden();
        boolean boolean43 = jSDocInfo33.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo33.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo33.getTemplateTypeNames();
        boolean boolean46 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList45);
        boolean boolean47 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean48 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        boolean boolean29 = jSDocInfo26.isOverride();
        boolean boolean30 = jSDocInfo26.isNoCompile();
        java.lang.String str31 = jSDocInfo26.getLendsName();
        boolean boolean32 = jSType23.equals((java.lang.Object) str31);
        boolean boolean33 = jSType23.isUnknownType();
        boolean boolean34 = jSType23.isUnionType();
        boolean boolean35 = jSType23.isNoType();
        boolean boolean36 = jSType23.canBeCalled();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        int int12 = jSDocInfo0.getParameterCount();
        java.lang.String str13 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node14 = jSDocInfo0.getAssociatedNode();
        boolean boolean15 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "None", "{298532945}", "OR hi! [directives: []]\n", "{298532945}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        boolean boolean23 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean24 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("{1526019385}");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean15 = jSDocInfoBuilder1.recordFileOverview("JSDocInfo");
        jSDocInfoBuilder1.markText("OR hi! [source_file: OR hi!\n    OR hi!\n]\n    OR hi!\n", 29, 31, 100, 47);
        boolean boolean23 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nSTRING OR hi! [var_args_name: 1] 41\n\n\nTree2:\nOR hi!\n\n\nSubtree1: STRING OR hi! [var_args_name: 1] 41\n\n\nSubtree2: OR hi!\n");
        boolean boolean24 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        int int27 = jSDocInfo25.getParameterCount();
        boolean boolean28 = jSDocInfo25.isIdGenerator();
        boolean boolean29 = jSDocInfo25.isInterface();
        boolean boolean30 = jSDocInfo25.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo25.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo25.getParameterType("OR hi! [source_file: {298532945}]");
        java.util.Set<java.lang.String> strSet34 = jSDocInfo25.getModifies();
        boolean boolean35 = jSDocInfoBuilder1.recordModifies(strSet34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean40 = node39.isOptionalArg();
        boolean boolean41 = node39.isString();
        boolean boolean42 = node39.isNumber();
        node39.setLength(8202);
        boolean boolean45 = strSet34.equals((java.lang.Object) 8202);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean62 = jSDocInfoBuilder1.recordDescription("OR hi! 0\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(53, "{1242212142}", (int) (byte) 0, 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder1.build(node67);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable69 = node67.getAncestors();
        boolean boolean70 = node67.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertNotNull(ancestorIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean43 = jSDocInfoBuilder1.recordVisibility(visibility42);
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n", 2, 36, 47, 31);
        boolean boolean50 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean52 = jSDocInfoBuilder1.isPopulated();
        boolean boolean53 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        boolean boolean14 = node2.isGetterDef();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        boolean boolean21 = jSDocInfoBuilder16.recordExpose();
        boolean boolean22 = jSDocInfoBuilder16.recordIdGenerator();
        boolean boolean24 = jSDocInfoBuilder16.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression25);
        jSDocInfoBuilder16.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean29 = jSDocInfoBuilder16.recordImplicitCast();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        node33.putBooleanProp(0, false);
        node33.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean50 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node33.getStaticSourceFile();
        int int53 = staticSourceFile51.getLineOfOffset(53);
        jSDocInfoBuilder16.markName("TYPEOF hi!", staticSourceFile51, 52, 0);
        java.lang.String str57 = staticSourceFile51.getName();
        int int59 = staticSourceFile51.getLineOfOffset(44);
        java.lang.String str60 = staticSourceFile51.getName();
        node2.setStaticSourceFile(staticSourceFile51);
        int int63 = staticSourceFile51.getLineOfOffset(49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str57, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str60, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        boolean boolean7 = objectType6.matchesInt32Context();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.recordOverride();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "None", "{298532945}", "OR hi! [directives: []]\n", "{298532945}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = jSDocInfoBuilder9.recordTemplateTypeNames((java.util.List<java.lang.String>) strList28);
        boolean boolean31 = jSDocInfoBuilder9.isDescriptionRecorded();
        boolean boolean32 = jSDocInfoBuilder9.isConstructorRecorded();
        boolean boolean33 = objectType6.equals((java.lang.Object) jSDocInfoBuilder9);
        com.google.javascript.rhino.jstype.UnionType unionType34 = objectType6.toMaybeUnionType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = unionType34.isNoType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(unionType34);
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isImplicitCast();
        boolean boolean11 = jSDocInfo7.isExport();
        boolean boolean12 = jSDocInfo7.isNoShadow();
        boolean boolean14 = jSDocInfo7.hasParameter("Unknown class name");
        java.lang.String str15 = jSDocInfo7.getDescription();
        java.lang.String str16 = jSDocInfo7.getFileOverview();
        boolean boolean17 = jSDocInfo7.hasFileOverview();
        boolean boolean18 = nodeIterableList0.equals((java.lang.Object) jSDocInfo7);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray20 = nodeIterableList19.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = nodeIterableList19.reverse();
        boolean boolean22 = nodeIterableList19.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor23 = nodeIterableList19.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream24 = nodeIterableList19.stream();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor25 = nodeIterableList19.iterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor26 = nodeIterableList19.iterator();
        boolean boolean27 = nodeIterableList0.equals((java.lang.Object) nodeIterableItor26);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray29 = nodeIterableList28.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = nodeIterableList28.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray37 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray38 = nodeIterableList28.toArray(typePositionArray37);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = nodeIterableList39.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray48 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition42, typePosition43, typePosition44, typePosition45, typePosition46, typePosition47 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray49 = nodeIterableList39.toArray(typePositionArray48);
        boolean boolean50 = nodeIterableList28.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream51 = nodeIterableList28.stream();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str55 = node54.getString();
        int int56 = nodeIterableList28.indexOf((java.lang.Object) node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node59.isDebugger();
        boolean boolean66 = node59.isSyntheticBlock();
        boolean boolean67 = node59.isTypeOf();
        int int68 = nodeIterableList28.indexOf((java.lang.Object) node59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList69 = nodeIterableList28.asList();
        boolean boolean70 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList69);
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator71 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.replaceAll(nodeIterableUnaryOperator71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor23);
        org.junit.Assert.assertNotNull(nodeIterableStream24);
        org.junit.Assert.assertNotNull(nodeIterableItor25);
        org.junit.Assert.assertNotNull(nodeIterableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertNotNull(typePositionArray37);
        org.junit.Assert.assertNotNull(typePositionArray38);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(typePositionArray48);
        org.junit.Assert.assertNotNull(typePositionArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR hi! [directives: []]\n" + "'", str55, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        boolean boolean15 = node10.isAdd();
        com.google.javascript.rhino.Node node16 = node10.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node16.setJSType(jSType17);
        boolean boolean19 = node16.isString();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        boolean boolean30 = node25.isAdd();
        com.google.javascript.rhino.Node node31 = node25.cloneTree();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        boolean boolean42 = node37.isAdd();
        boolean boolean43 = node31.hasChild(node37);
        boolean boolean44 = node37.isDefaultCase();
        int int45 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isTypeOf();
        boolean boolean50 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = node37.copyInformationFromForTree(node48);
        boolean boolean52 = node16.isEquivalentToTyped(node48);
        jSDocInfoBuilder1.markTypeNode(node16, 83, 31, 83, (-1), false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node16.getJsDocBuilderForNode();
        boolean boolean60 = node16.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{298532945}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        boolean boolean10 = jSTypeRegistry5.canPropertyBeDefined(jSType8, "Unknown class name");
        jSTypeRegistry5.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry5.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        jSTypeRegistry16.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = objectType23.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        boolean boolean35 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType23, objectType33);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType23, "JSDocInfo");
        jSTypeRegistry1.clearTemplateTypeNames();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        boolean boolean57 = strSet50.remove((java.lang.Object) boolean56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet59 = jSDocInfo58.getSuppressions();
        boolean boolean60 = jSDocInfo58.isNoSideEffects();
        boolean boolean61 = jSDocInfo58.isConsistentIdGenerator();
        boolean boolean62 = strSet50.contains((java.lang.Object) jSDocInfo58);
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo58.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean66 = objectType65.isEnumElementType();
        boolean boolean67 = objectType65.isNoObjectType();
        com.google.javascript.rhino.Node node68 = objectType65.getRootNode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList7 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList7, jSTypeArray6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry5.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList7);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean14 = node9.isEquivalentToTyped(node13);
        boolean boolean15 = node9.isFromExterns();
        boolean boolean16 = node9.isSetterDef();
        boolean boolean17 = node9.isVarArgs();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node9.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 100, 10);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node28.isNot();
        int int32 = node28.getLineno();
        boolean boolean33 = node28.isAdd();
        node28.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean36 = node28.isDec();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDebugger();
        boolean boolean47 = node40.isAssign();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(51, node40, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node51 = node28.srcrefTree(node50);
        int int52 = node51.getLength();
        com.google.javascript.rhino.Node node53 = node22.useSourceInfoFromForTree(node51);
        boolean boolean54 = node53.isNE();
        boolean boolean55 = node53.isTry();
        boolean boolean56 = node53.isTypeOf();
        com.google.javascript.rhino.Node node57 = node9.useSourceInfoFrom(node53);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = new com.google.javascript.rhino.JSTypeExpression(node57, "java.io.IOException: None");
        boolean boolean60 = jSDocInfoBuilder1.recordType(jSTypeExpression59);
        boolean boolean61 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder63.recordDefineType(jSTypeExpression64);
        jSDocInfoBuilder63.recordOriginalCommentString("OR hi! [var_args_name: 1] : {...}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo68.getType();
        boolean boolean71 = jSDocInfo68.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo68.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection73 = jSDocInfo68.getTypeNodes();
        java.lang.String str74 = jSDocInfo68.getSourceName();
        java.util.Set<java.lang.String> strSet75 = jSDocInfo68.getSuppressions();
        boolean boolean76 = jSDocInfoBuilder63.recordModifies(strSet75);
        int int77 = strSet75.size();
        boolean boolean78 = jSDocInfoBuilder1.recordSuppressions(strSet75);
        java.util.Iterator<java.lang.String> strItor79 = strSet75.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor79.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertNotNull(nodeCollection73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strItor79);
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, true);
        jSTypeRegistry2.incrementGeneration();
        com.google.javascript.rhino.jstype.JSType jSType5 = jSTypeRegistry2.getType("OR hi! 0\n");
        boolean boolean7 = jSTypeRegistry2.hasNamespace("ERROR hi! 4095");
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getType();
        boolean boolean11 = jSDocInfo8.isNoTypeCheck();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo8.setAssociatedNode(node14);
        int int16 = jSDocInfo8.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo8.getExtendedInterfaces();
        boolean boolean18 = jSDocInfo8.isHidden();
        java.lang.String str19 = jSDocInfo8.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo8.getTemplateTypeNames();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.hasThisType();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        boolean boolean16 = nodeIterableList15.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList15.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList15.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor19 = nodeIterableList18.iterator();
        boolean boolean20 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        boolean boolean24 = jSDocInfo21.isImplicitCast();
        boolean boolean25 = jSDocInfo21.isConstructor();
        boolean boolean26 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo21.getParameterType("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        int int29 = nodeIterableList18.lastIndexOf((java.lang.Object) "Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        boolean boolean30 = nodeIterableList18.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(nodeIterableItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray4 = nodeIterableList3.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList11, 52, node18 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList25.reverse();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList27, 52, node34 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray42 = nodeIterableList41.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = nodeIterableList41.reverse();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Object[] objArray53 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList43, 52, node50 };
        java.lang.Object[][] objArray54 = new java.lang.Object[][] { objArray21, objArray37, objArray53 };
        java.lang.Object[][] objArray55 = nodeIterableList5.toArray(objArray54);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray57 = nodeIterableList56.toArray();
        int int59 = nodeIterableList56.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray60 = nodeIterableList56.toArray();
        boolean boolean61 = nodeIterableList5.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList56);
        boolean boolean63 = nodeIterableList5.equals((java.lang.Object) (short) 1);
        int int64 = nodeIterableList5.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream65 = nodeIterableList5.stream();
        boolean boolean66 = nodeIterableList5.isEmpty();
        boolean boolean67 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList70 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection71 = visibilityEnumBuilder69.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean75 = jSDocInfoBuilder73.recordVisibility(visibility74);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility74);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder80 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean82 = jSDocInfoBuilder80.recordVisibility(visibility81);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder83.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility84);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder86 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder86.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility87);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray89 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility77, visibility78, visibility81, visibility84, visibility87 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList90 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray89);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder91 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray89);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList92 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList93 = visibilityEnumBuilder69.build();
        int int94 = nodeIterableList0.lastIndexOf((java.lang.Object) visibilityEnumBuilder69);
        boolean boolean95 = nodeIterableList0.isEmpty();
        int int96 = nodeIterableList0.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertNotNull(visibilityEnumList70);
        org.junit.Assert.assertNotNull(visibilityEnumCollection71);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility81 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility81.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + visibility84 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility84.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
        org.junit.Assert.assertNotNull(visibilityArray89);
        org.junit.Assert.assertNotNull(visibilityEnumList90);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder91);
        org.junit.Assert.assertNotNull(visibilityEnumList92);
        org.junit.Assert.assertNotNull(visibilityEnumList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.isHidden();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.isOverride();
        java.lang.String str11 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList51 = com.google.common.collect.ImmutableList.of(strSet17, strSet31, strSet45);
        boolean boolean52 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList55 = nodeIterableList53.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray62 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition56, typePosition57, typePosition58, typePosition59, typePosition60, typePosition61 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray63 = nodeIterableList53.toArray(typePositionArray62);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor64 = nodeIterableList53.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor65 = nodeIterableList53.listIterator();
        java.lang.Object[] objArray66 = nodeIterableList53.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = null;
        boolean boolean73 = jSDocInfoBuilder68.recordDefineType(jSTypeExpression72);
        boolean boolean75 = jSDocInfoBuilder68.recordMeaning("hi!");
        boolean boolean77 = jSDocInfoBuilder68.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean78 = nodeIterableList53.equals((java.lang.Object) "OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        boolean boolean81 = jSDocInfo79.shouldPreserveTry();
        boolean boolean82 = jSDocInfo79.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection83 = jSDocInfo79.getMarkers();
        boolean boolean84 = jSDocInfo79.isNoCompile();
        boolean boolean85 = nodeIterableList53.equals((java.lang.Object) boolean84);
        boolean boolean86 = strSet45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList53.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSetList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList55);
        org.junit.Assert.assertNotNull(typePositionArray62);
        org.junit.Assert.assertNotNull(typePositionArray63);
        org.junit.Assert.assertNotNull(nodeIterableItor64);
        org.junit.Assert.assertNotNull(nodeIterableItor65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(markerCollection83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean11 = jSDocInfoBuilder1.recordDescription("{657196217}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        boolean boolean15 = node14.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry17.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean26 = node21.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node27 = node21.cloneNode();
        com.google.javascript.rhino.InputId inputId28 = node21.getInputId();
        boolean boolean29 = node14.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType30 = node14.getJSType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node32 = typePosition31.getItem();
        com.google.javascript.rhino.Node node33 = typePosition31.getItem();
        int int34 = typePosition31.getPositionOnEndLine();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet46);
        node37.putBooleanProp(0, false);
        typePosition31.setItem(node37);
        boolean boolean53 = node37.isFromExterns();
        boolean boolean54 = node37.isWhile();
        boolean boolean55 = node37.isCase();
        com.google.javascript.rhino.Node node56 = node14.useSourceInfoFromForTree(node37);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        java.lang.String str61 = node59.getSourceFileName();
        boolean boolean62 = node59.isDebugger();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        boolean boolean66 = jSDocInfo63.isImplicitCast();
        boolean boolean67 = jSDocInfo63.isExport();
        java.lang.String str68 = jSDocInfo63.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo63.getType();
        boolean boolean70 = jSDocInfo63.isDeprecated();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(46, "java.io.IOException: java.io.IOException: java.io.IOException");
        jSDocInfo63.setAssociatedNode(node73);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isTypeOf();
        node77.setLineno(51);
        node77.setVarArgs(false);
        int int83 = node77.getChildCount();
        boolean boolean84 = node77.isAnd();
        com.google.javascript.rhino.Node node85 = node73.useSourceInfoIfMissingFrom(node77);
        com.google.javascript.rhino.Node node86 = node59.clonePropsFrom(node73);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("hi!");
        int int89 = node88.getType();
        boolean boolean90 = node88.isDec();
        com.google.javascript.rhino.Node node91 = node59.useSourceInfoFromForTree(node88);
        boolean boolean92 = node91.isIf();
        node91.putIntProp(40, 131073);
        boolean boolean96 = node37.hasChild(node91);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node37.getChildAtIndex(7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "JSDocInfo" + "'", str68, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 40 + "'", int89 == 40);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isAnd();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getSuppressions();
        boolean boolean11 = jSDocInfo9.isNoSideEffects();
        java.lang.String str12 = jSDocInfo9.getReturnDescription();
        boolean boolean14 = jSDocInfo9.hasParameter("Not declared as a constructor");
        java.lang.String str15 = jSDocInfo9.getMeaning();
        boolean boolean16 = jSDocInfo9.isJavaDispatch();
        node7.setJSDocInfo(jSDocInfo9);
        boolean boolean18 = node2.isEquivalentToTyped(node7);
        int int20 = node2.getIntProp(0);
        node2.setQuotedString();
        com.google.javascript.rhino.Node node22 = node2.getParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder1 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = visibilityEnumBuilder1.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder4 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isExterns();
        boolean boolean7 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getType();
        boolean boolean11 = jSDocInfo8.isImplicitCast();
        boolean boolean12 = jSDocInfo8.isExport();
        boolean boolean13 = jSDocInfo8.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo8.getReturnType();
        boolean boolean15 = jSDocInfo8.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = visibilityEnumBuilder16.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility17);
        jSDocInfo8.setVisibility(visibility17);
        jSDocInfo5.setVisibility(visibility17);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility17);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility29);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo38.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = jSDocInfo38.getVisibility();
        boolean boolean42 = jSDocInfo38.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo38.setVisibility(visibility43);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray45 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility43 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder37.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder47.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = jSDocInfo50.getVisibility();
        boolean boolean54 = jSDocInfo50.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo50.setVisibility(visibility55);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray57 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility55 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.recordInterface();
        boolean boolean67 = jSDocInfoBuilder65.isInterfaceRecorded();
        boolean boolean68 = jSDocInfoBuilder65.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean70 = jSDocInfoBuilder65.recordVisibility(visibility69);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility69);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList72 = visibilityEnumBuilder0.build();
        org.junit.Assert.assertNotNull(visibilityEnumBuilder0);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder3);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder18);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNull(visibility41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray45);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(visibility53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray57);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertNotNull(visibilityEnumList72);
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isImplicitCast();
        boolean boolean10 = jSDocInfo8.isNoCompile();
        boolean boolean11 = jSDocInfo8.isJavaDispatch();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility20 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.recordInterface();
        boolean boolean60 = jSDocInfoBuilder57.recordDescription("hi!");
        boolean boolean61 = jSDocInfoBuilder57.recordHiddenness();
        boolean boolean62 = jSDocInfoBuilder57.recordExpose();
        boolean boolean63 = jSDocInfoBuilder57.recordIdGenerator();
        boolean boolean65 = jSDocInfoBuilder57.addReference("OR hi!");
        boolean boolean67 = jSDocInfoBuilder57.recordLends("{424067794}");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean69 = jSDocInfoBuilder57.recordVisibility(visibility68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility68);
        jSDocInfo8.setVisibility(visibility68);
        jSDocInfo0.setVisibility(visibility68);
        java.lang.String str74 = jSDocInfo0.getDescriptionForParameter("InputId: OR hi! [directives: []]");
        boolean boolean75 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str12 = jSDocInfo0.getSourceName();
        boolean boolean14 = jSDocInfo0.hasParameterType("{694195918}");
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray17 = nodeIterableList16.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList16.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray25 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition19, typePosition20, typePosition21, typePosition22, typePosition23, typePosition24 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray26 = nodeIterableList16.toArray(typePositionArray25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordReturnType(jSTypeExpression32);
        int int34 = nodeIterableList16.lastIndexOf((java.lang.Object) jSTypeExpression32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo35.getSuppressions();
        boolean boolean37 = nodeIterableList16.contains((java.lang.Object) strSet36);
        java.lang.Object[] objArray38 = nodeIterableList16.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean49 = nodeIterableList48.add(nodeIterable47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node52.siblings();
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet61);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        boolean boolean66 = strSet61.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList64);
        java.lang.Object[] objArray67 = nodeIterableList64.toArray();
        boolean boolean68 = nodeIterableList64.isEmpty();
        boolean boolean69 = nodeIterableList48.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList64);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node72.siblings();
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList84 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray85 = nodeIterableList84.toArray();
        boolean boolean86 = strSet81.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        java.lang.Object[] objArray87 = nodeIterableList84.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor88 = nodeIterableList84.listIterator();
        boolean boolean89 = nodeIterableList84.isEmpty();
        boolean boolean90 = nodeIterableList48.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        boolean boolean91 = nodeIterableList16.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        int int92 = nodeIterableList84.size();
        boolean boolean93 = strSet15.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        boolean boolean94 = nodeIterableList84.isEmpty();
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator95 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList84.replaceAll(nodeIterableUnaryOperator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(typePositionArray25);
        org.junit.Assert.assertNotNull(typePositionArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(nodeIterableList84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("{441018204}");
        jSDocInfo0.setLicense("");
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        java.lang.Class<?> wildcardClass13 = markerCollection12.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        boolean boolean81 = jSDocInfo69.isNoCompile();
        boolean boolean82 = jSDocInfo69.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo69.getParameterType("");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression84);
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        boolean boolean5 = jSDocInfo0.isExterns();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isExterns();
        int int10 = jSDocInfo8.getParameterCount();
        boolean boolean11 = jSDocInfo8.isIdGenerator();
        boolean boolean12 = jSDocInfo8.isInterface();
        boolean boolean13 = jSDocInfo8.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        java.lang.String str19 = jSDocInfo14.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo14.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        boolean boolean25 = jSDocInfo23.hasModifies();
        boolean boolean26 = jSDocInfo23.isIdGenerator();
        boolean boolean27 = jSDocInfo23.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getType();
        boolean boolean29 = jSDocInfo23.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.containsDeclaration();
        java.lang.String str33 = jSDocInfo30.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getType();
        boolean boolean37 = jSDocInfo34.isImplicitCast();
        boolean boolean38 = jSDocInfo34.isExport();
        boolean boolean39 = jSDocInfo34.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo34.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection41 = jSDocInfo34.getMarkers();
        boolean boolean42 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo43.getSuppressions();
        boolean boolean45 = jSDocInfo43.isNoSideEffects();
        boolean boolean46 = jSDocInfo43.isConsistentIdGenerator();
        boolean boolean48 = jSDocInfo43.hasParameter("OR hi!\n");
        boolean boolean49 = jSDocInfo43.hasType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = jSDocInfo50.isNoSideEffects();
        boolean boolean54 = jSDocInfo50.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str55 = jSDocInfo50.getVersion();
        jSDocInfo50.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo50.getTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo59.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList63 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo14, jSDocInfo23, jSDocInfo30, jSDocInfo34, jSDocInfo43, jSDocInfo50, jSDocInfo59);
        java.lang.String str64 = jSDocInfo34.getLicense();
        boolean boolean65 = jSDocInfo34.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(markerCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(jSDocInfoList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isConstructor();
        jSDocInfo0.addSuppression("OR hi! 0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo4.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo4.getTypedefType();
        com.google.javascript.rhino.Node node83 = jSDocInfo4.getAssociatedNode();
        boolean boolean84 = jSDocInfo4.containsDeclaration();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.isExpose();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray6 = strSet5.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        node6.putBooleanProp(0, false);
        typePosition0.setItem(node6);
        boolean boolean22 = node6.isFromExterns();
        node6.removeProp(49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        boolean boolean30 = jSDocInfo25.isExport();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        jSDocInfo25.setVisibility(visibility36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo25.getTypedefType();
        boolean boolean40 = jSDocInfo25.hasThisType();
        int int41 = jSDocInfo25.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo25.getImplementedInterfaces();
        node6.setJSDocInfo(jSDocInfo25);
        jSDocInfo25.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo25.getExtendedInterfaces();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        boolean boolean14 = jSDocInfoBuilder9.recordExpose();
        boolean boolean15 = jSDocInfoBuilder9.recordNoCompile();
        boolean boolean16 = jSDocInfoBuilder9.isPopulatedWithFileOverview();
        boolean boolean17 = jSDocInfoBuilder9.isPopulated();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node21.siblings();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet30);
        node21.putBooleanProp(0, false);
        node21.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean38 = node21.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node21.getStaticSourceFile();
        boolean boolean40 = staticSourceFile39.isExtern();
        int int42 = staticSourceFile39.getLineOffset(16);
        jSDocInfoBuilder9.markName("None", staticSourceFile39, (int) (byte) 1, 43);
        int int47 = staticSourceFile39.getColumnOfOffset(4);
        java.lang.String str48 = staticSourceFile39.getName();
        int int50 = staticSourceFile39.getLineOfOffset(32);
        java.lang.String str51 = staticSourceFile39.getName();
        jSDocInfoBuilder1.markName("InputId: Not declared as a constructor", staticSourceFile39, 49, 42);
        boolean boolean55 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-2147483648) + "'", int42 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str48, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str51, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = objectType14.toObjectType();
        boolean boolean16 = objectType15.isEmptyType();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection17 = jSTypeRegistry1.getDirectImplementors(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = jSTypeRegistry1.getErrorReporter();
        boolean boolean19 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        boolean boolean20 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo21.getEnumParameterType();
        boolean boolean23 = jSDocInfo21.hasBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo21.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList24);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry1.getType("");
        boolean boolean29 = jSTypeRegistry1.hasNamespace("{...}");
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = objectType35.toObjectType();
        boolean boolean37 = objectType36.matchesInt32Context();
        boolean boolean38 = objectType36.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = objectType51.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        boolean boolean59 = jSTypeRegistry54.canPropertyBeDefined(jSType57, "Unknown class name");
        jSTypeRegistry54.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry54.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType67, "");
        boolean boolean70 = jSType69.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = objectType52.testForEquality(jSType69);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSType69.collapseUnion();
        boolean boolean73 = objectType45.differsFrom(jSType69);
        boolean boolean74 = jSType69.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType75 = objectType36.getGreatestSubtype(jSType69);
        boolean boolean76 = objectType36.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry1.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType36, jSTypeArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection17);
        org.junit.Assert.assertNull(errorReporter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.lang.Object[] objArray16 = nodeIterableList0.toArray();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode10 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry9.setResolveMode(resolveMode10);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry9.createObjectType(objectType12);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = objectType13.toObjectType();
        boolean boolean15 = objectType14.matchesInt32Context();
        boolean boolean16 = objectType14.isStringValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode33 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry32.setResolveMode(resolveMode33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean37 = jSTypeRegistry32.canPropertyBeDefined(jSType35, "Unknown class name");
        jSTypeRegistry32.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode42 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry41.setResolveMode(resolveMode42);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry41.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry32.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType45, "");
        boolean boolean48 = jSType47.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = objectType30.testForEquality(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType47.collapseUnion();
        boolean boolean51 = objectType23.differsFrom(jSType47);
        boolean boolean52 = jSType47.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType53 = objectType14.getGreatestSubtype(jSType47);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType53.findPropertyType("OR hi! [directives: []]\n");
        java.lang.String str56 = jSType53.toAnnotationString();
        com.google.javascript.rhino.jstype.JSType jSType57 = jSType53.collapseUnion();
        boolean boolean58 = strSet7.remove((java.lang.Object) jSType57);
        java.util.RandomAccess[][] randomAccessArray59 = new java.util.RandomAccess[][] {};
        java.util.RandomAccess[][] randomAccessArray60 = strSet7.toArray(randomAccessArray59);
        com.google.common.collect.ImmutableList<java.lang.Object[]> objArrayList61 = com.google.common.collect.ImmutableList.copyOf((java.lang.Object[][]) randomAccessArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + resolveMode10 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode10.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + resolveMode33 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode33.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + resolveMode42 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode42.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "?" + "'", str56, "?");
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(objArrayList61);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(31, "INSTANCEOF", 10, 53);
        boolean boolean6 = node5.isHook();
        boolean boolean7 = node5.isReturn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) -1, node5, 53, (-2147483648));
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isNoTypeCheck();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo13.setAssociatedNode(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 49, 12);
        node19.addChildToBack(node25);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        boolean boolean37 = node32.isAdd();
        com.google.javascript.rhino.Node node38 = node32.cloneTree();
        java.lang.String str39 = node38.toStringTree();
        boolean boolean40 = node38.isLocalResultCall();
        boolean boolean41 = node38.isTrue();
        java.lang.String str42 = node38.toString();
        node38.removeProp((int) (short) 1);
        boolean boolean45 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node51 = node49.getLastSibling();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(40, node49, (int) (byte) 10, (int) (byte) 100);
        boolean boolean55 = node54.isStringKey();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(42, node19, node38, node54, 36, 0);
        com.google.javascript.rhino.Node node59 = node54.removeFirstChild();
        java.lang.String str60 = node5.checkTreeEquals(node59);
        boolean boolean61 = node5.isTrue();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "OR hi!\n" + "'", str39, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!" + "'", str42, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Node tree inequality:\nTree1:\nDELPROP INSTANCEOF 10\n\n\nTree2:\nOR hi!\n\n\nSubtree1: DELPROP INSTANCEOF 10\n\n\nSubtree2: OR hi!\n" + "'", str60, "Node tree inequality:\nTree1:\nDELPROP INSTANCEOF 10\n\n\nTree2:\nOR hi!\n\n\nSubtree1: DELPROP INSTANCEOF 10\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: InputId: OR hi! [source_file: {298532945}]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isRegExp();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDec();
        boolean boolean14 = node7.isBlock();
        boolean boolean15 = node7.isTrue();
        com.google.javascript.rhino.Node node16 = node7.cloneNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node22.isNot();
        int int26 = node22.getLineno();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node37 = node22.srcref(node32);
        int int38 = node22.getCharno();
        boolean boolean39 = node22.isQuotedString();
        boolean boolean40 = node22.isIf();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        boolean boolean51 = node46.isAdd();
        com.google.javascript.rhino.Node node52 = node22.useSourceInfoFromForTree(node46);
        com.google.javascript.rhino.Node node53 = node7.useSourceInfoFromForTree(node22);
        boolean boolean54 = node3.isEquivalentTo(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isExterns();
        com.google.javascript.rhino.Node node57 = jSDocInfo55.getAssociatedNode();
        boolean boolean58 = jSDocInfo55.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo55.getType();
        java.lang.String str60 = jSDocInfo55.getMeaning();
        java.lang.String str61 = jSDocInfo55.getDescription();
        node3.setJSDocInfo(jSDocInfo55);
        jSDocInfo55.setLicense("{1275608813}");
        boolean boolean65 = jSDocInfo55.isOverride();
        int int66 = jSDocInfo55.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node2.getJsDocBuilderForNode();
        java.lang.String str7 = node2.getString();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean12 = node11.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isNE();
        boolean boolean17 = node15.isInstanceOf();
        boolean boolean18 = node15.isThrow();
        node15.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node15.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        boolean boolean28 = jSTypeRegistry23.canPropertyBeDefined(jSType26, "Unknown class name");
        jSTypeRegistry23.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry23.createAnonymousObjectType();
        objectType31.clearResolved();
        node15.setJSType((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.jstype.JSType jSType34 = node15.getJSType();
        boolean boolean35 = jSType34.isNominalConstructor();
        node11.setJSType(jSType34);
        boolean boolean37 = jSType34.isEmptyType();
        node2.setJSType(jSType34);
        boolean boolean39 = node2.isNot();
        int int40 = node2.getType();
        boolean boolean41 = node2.isTrue();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node2.getAncestors();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder44.addAuthor("");
        boolean boolean47 = jSDocInfoBuilder44.recordExport();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        boolean boolean58 = node53.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node53.setJSType(jSType59);
        boolean boolean61 = node53.isOptionalArg();
        java.util.Set<java.lang.String> strSet62 = node53.getDirectives();
        boolean boolean63 = node53.isInstanceOf();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        boolean boolean72 = node69.isNot();
        int int73 = node69.getLineno();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean80 = node79.isThis();
        node76.addChildToBack(node79);
        boolean boolean82 = node79.isNot();
        int int83 = node79.getLineno();
        com.google.javascript.rhino.Node node84 = node69.srcref(node79);
        boolean boolean85 = node84.isDelProp();
        com.google.javascript.rhino.Node node86 = node84.getLastSibling();
        boolean boolean87 = node86.isSetterDef();
        com.google.javascript.rhino.Node node88 = node53.srcrefTree(node86);
        com.google.javascript.rhino.InputId inputId89 = node53.getInputId();
        jSDocInfoBuilder44.markTypeNode(node53, 97, 35, (int) '4', 52, false);
        boolean boolean96 = node53.isParamList();
        int int97 = node2.getIndexOfChild(node53);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(inputId89);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        boolean boolean27 = jSDocInfoBuilder23.recordHiddenness();
        boolean boolean28 = strSet19.remove((java.lang.Object) jSDocInfoBuilder23);
        boolean boolean29 = jSDocInfoBuilder23.recordPreserveTry();
        boolean boolean30 = jSDocInfoBuilder23.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean34 = jSDocInfoBuilder32.isInterfaceRecorded();
        boolean boolean35 = jSDocInfoBuilder32.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean37 = jSDocInfoBuilder32.recordVisibility(visibility36);
        boolean boolean38 = jSDocInfoBuilder32.recordExpose();
        boolean boolean40 = jSDocInfoBuilder32.recordBlockDescription("Unknown class name");
        jSDocInfoBuilder32.markAnnotation("{1229225967}", 8, (int) (byte) -1);
        boolean boolean45 = jSDocInfoBuilder32.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder47.addAuthor("");
        boolean boolean50 = jSDocInfoBuilder47.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = null;
        boolean boolean52 = jSDocInfoBuilder47.recordThrowType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder47.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        jSDocInfoBuilder47.markName("", staticSourceFile55, 29, 50);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node61.isDebugger();
        boolean boolean68 = node61.isSyntheticBlock();
        boolean boolean69 = node61.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = new com.google.javascript.rhino.JSTypeExpression(node61, "Unknown class name");
        boolean boolean73 = jSDocInfoBuilder47.recordThrowDescription(jSTypeExpression71, "?");
        boolean boolean74 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression71);
        boolean boolean75 = jSDocInfoBuilder23.recordExtendedInterface(jSTypeExpression71);
        boolean boolean76 = jSDocInfoBuilder1.recordParameter("{483323349}", jSTypeExpression71);
        boolean boolean77 = jSDocInfoBuilder1.recordExterns();
        boolean boolean78 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean79 = jSDocInfoBuilder1.recordExport();
        boolean boolean80 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        boolean boolean14 = node7.isVoid();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isTypeOf();
        com.google.javascript.rhino.Node node19 = node7.srcrefTree(node17);
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node23.isDebugger();
        com.google.javascript.rhino.Node node30 = node23.getFirstChild();
        boolean boolean31 = node7.hasChild(node30);
        typePosition4.setItem(node30);
        boolean boolean33 = node30.isLabel();
        java.lang.String str34 = node30.getString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = jSDocInfoBuilder1.build(node30);
        boolean boolean36 = jSDocInfo35.hasModifies();
        boolean boolean37 = jSDocInfo35.isConstant();
        boolean boolean38 = jSDocInfo35.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        jSTypeRegistry1.identifyNonNullableName("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.JSType jSType25 = objectType24.getTypeOfThis();
        boolean boolean26 = objectType24.isArrayType();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        jSTypeRegistry28.identifyNonNullableName("OR hi!");
        jSTypeRegistry28.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable42 = jSTypeRegistry33.getTypesWithProperty("hi!");
        jSTypeRegistry33.resetForTypeCheck();
        jSTypeRegistry33.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        boolean boolean52 = jSTypeRegistry47.canPropertyBeDefined(jSType50, "Unknown class name");
        jSTypeRegistry47.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry56.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = objectType60.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] { objectType60 };
        com.google.javascript.rhino.Node node63 = jSTypeRegistry47.createParametersWithVarArgs(jSTypeArray62);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry33.createUnionType(jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry28.createOptionalParameters(jSTypeArray62);
        com.google.javascript.rhino.jstype.FunctionType functionType66 = jSTypeRegistry1.createConstructorType((com.google.javascript.rhino.jstype.JSType) objectType24, jSTypeArray62);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder69.recordInterface();
        boolean boolean72 = jSDocInfoBuilder69.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder69.recordDefineType(jSTypeExpression73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = null;
        boolean boolean76 = jSDocInfoBuilder69.recordThisType(jSTypeExpression75);
        boolean boolean77 = jSDocInfoBuilder69.isPopulated();
        boolean boolean79 = jSDocInfoBuilder69.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean81 = jSDocInfoBuilder69.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean86 = node85.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node85.getJSDocInfo();
        jSDocInfoBuilder69.markTypeNode(node85, 35, 29, 0, 100, false);
        node85.removeProp(45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType96 = jSTypeRegistry1.createInterfaceType("{1269690791}", node85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable42);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean3 = jSDocInfoBuilder1.recordVisibility(visibility2);
        boolean boolean4 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        boolean boolean14 = node7.isSyntheticBlock();
        boolean boolean15 = node7.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = new com.google.javascript.rhino.JSTypeExpression(node7, "Unknown class name");
        boolean boolean18 = jSTypeExpression17.isOptionalArg();
        boolean boolean19 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression17);
        boolean boolean21 = jSDocInfoBuilder1.hasParameter("{1050342792}");
        boolean boolean22 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("Named type with empty name component");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable5 = jSTypeRegistry1.getEachReferenceTypeWithProperty("OR hi! [directives: []]");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        boolean boolean24 = strSet17.remove((java.lang.Object) boolean23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo25.getSuppressions();
        boolean boolean27 = jSDocInfo25.isNoSideEffects();
        boolean boolean28 = jSDocInfo25.isConsistentIdGenerator();
        boolean boolean29 = strSet17.contains((java.lang.Object) jSDocInfo25);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry31.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType44, "");
        com.google.javascript.rhino.jstype.UnionType unionType47 = objectType44.toMaybeUnionType();
        boolean boolean48 = objectType44.matchesObjectContext();
        boolean boolean49 = objectType44.hasAnyTemplate();
        boolean boolean50 = strSet17.equals((java.lang.Object) objectType44);
        boolean boolean51 = objectType44.isString();
        boolean boolean52 = objectType44.isEnumType();
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType44, "function (this:me, {726862509}): me");
        boolean boolean55 = jSType54.isEmptyType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNull(unionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordType(jSTypeExpression7);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder9 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder9.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo12.getVisibility();
        boolean boolean16 = jSDocInfo12.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo12.setVisibility(visibility17);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray19 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility17 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray19);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo23.getType();
        boolean boolean26 = jSDocInfo23.isImplicitCast();
        boolean boolean27 = jSDocInfo23.isExport();
        boolean boolean28 = jSDocInfo23.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo23.getReturnType();
        boolean boolean30 = jSDocInfo23.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility32);
        jSDocInfo23.setVisibility(visibility32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility32);
        boolean boolean36 = jSDocInfoBuilder1.recordVisibility(visibility32);
        boolean boolean37 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.recordInterface();
        boolean boolean42 = jSDocInfoBuilder39.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder44.addAuthor("");
        boolean boolean47 = jSDocInfoBuilder44.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder44.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        jSDocInfoBuilder44.markName("", staticSourceFile52, 29, 50);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node58.isDebugger();
        boolean boolean65 = node58.isSyntheticBlock();
        boolean boolean66 = node58.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = new com.google.javascript.rhino.JSTypeExpression(node58, "Unknown class name");
        boolean boolean70 = jSDocInfoBuilder44.recordThrowDescription(jSTypeExpression68, "?");
        boolean boolean72 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression68, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node73 = jSTypeExpression68.getRoot();
        boolean boolean74 = jSDocInfoBuilder1.recordThisType(jSTypeExpression68);
        com.google.javascript.rhino.Node node75 = jSTypeExpression68.getRoot();
        boolean boolean76 = node75.wasEmptyNode();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray19);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder33);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.addReference("");
        boolean boolean6 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        boolean boolean26 = jSDocInfo23.isOverride();
        jSDocInfo23.setLicense("hi!");
        boolean boolean29 = strSet19.contains((java.lang.Object) jSDocInfo23);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair32 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType30, jSType31);
        boolean boolean33 = strSet19.equals((java.lang.Object) jSType31);
        boolean boolean35 = strSet19.add("hi!");
        boolean boolean36 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet19);
        boolean boolean37 = jSDocInfoBuilder1.recordOverride();
        boolean boolean40 = jSDocInfoBuilder1.recordParameterDescription("{1990054510}", "STRING  5\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray6 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList7 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList7, jSTypeArray6);
        com.google.javascript.rhino.Node node9 = jSTypeRegistry5.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList7);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType43 = objectType29.getRestrictedTypeGivenToBooleanOutcome(true);
        com.google.javascript.rhino.Node node44 = objectType29.getRootNode();
        boolean boolean45 = objectType29.isGlobalThisType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        boolean boolean52 = objectType51.isNominalConstructor();
        boolean boolean53 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType51);
        boolean boolean54 = objectType51.isFunctionType();
        boolean boolean55 = objectType51.isNoType();
        boolean boolean56 = strSet3.remove((java.lang.Object) boolean55);
        strSet3.clear();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.listIterator();
        boolean boolean19 = nodeIterableList14.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        boolean boolean23 = nodeIterableList20.isEmpty();
        int int24 = nodeIterableList20.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression27);
        jSDocInfoBuilder26.markAnnotation("None", 48, 51);
        boolean boolean33 = jSDocInfoBuilder26.recordNoShadow();
        boolean boolean35 = jSDocInfoBuilder26.addReference("OR hi!");
        boolean boolean36 = jSDocInfoBuilder26.isJavaDispatch();
        int int37 = nodeIterableList20.indexOf((java.lang.Object) jSDocInfoBuilder26);
        boolean boolean38 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList46 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "PARAM_LIST", (java.lang.Comparable<java.lang.String>) "{272877914}", (java.lang.Comparable<java.lang.String>) "OR hi! [source_file: {298532945}]", (java.lang.Comparable<java.lang.String>) "OR hi! [directives: []]", (java.lang.Comparable<java.lang.String>) "[]", (java.lang.Comparable<java.lang.String>) "{424067794}", (java.lang.Comparable<java.lang.String>) "");
        boolean boolean47 = nodeIterableList20.equals((java.lang.Object) strComparableList46);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = nodeIterableList20.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList20.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor51 = nodeIterableList20.listIterator((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(nodeIterableItor49);
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setLicense("{721844050}");
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        jSDocInfo0.setDeprecated(true);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        boolean boolean8 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        jSDocInfo0.addSuppression("function (this:me, {471925113}): me");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder1.recordMeaning("{...}");
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        com.google.javascript.rhino.Node node22 = node16.cloneNode();
        boolean boolean23 = node16.isDec();
        int int24 = node16.getLength();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = new com.google.javascript.rhino.JSTypeExpression(node16, "OR hi!\n");
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression26, "{856954291}");
        boolean boolean29 = jSTypeExpression26.isOptionalArg();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        boolean boolean40 = node35.isAdd();
        com.google.javascript.rhino.Node node41 = node35.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node41.setJSType(jSType42);
        com.google.javascript.rhino.InputId inputId45 = new com.google.javascript.rhino.InputId("");
        java.lang.String str46 = inputId45.getIdName();
        node41.setInputId(inputId45);
        java.lang.String str48 = inputId45.getIdName();
        java.lang.String str49 = inputId45.getIdName();
        boolean boolean50 = jSTypeExpression26.equals((java.lang.Object) inputId45);
        java.lang.String str51 = inputId45.getIdName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node21.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = ancestorIterable22.spliterator();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean34 = nodeIterableList33.add(nodeIterable7);
        boolean boolean35 = nodeIterableList33.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable22);
        boolean boolean36 = nodeIterableList33.add(nodeIterable32);
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        java.lang.Object[] objArray38 = nodeIterableList33.toArray();
        boolean boolean39 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        boolean boolean45 = jSDocInfoBuilder41.recordHiddenness();
        boolean boolean46 = jSDocInfoBuilder41.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder41.recordType(jSTypeExpression47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo52.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = jSDocInfo52.getVisibility();
        boolean boolean56 = jSDocInfo52.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility57);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray59 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility57 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray59);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        boolean boolean66 = jSDocInfo63.isImplicitCast();
        boolean boolean67 = jSDocInfo63.isExport();
        boolean boolean68 = jSDocInfo63.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo63.getReturnType();
        boolean boolean70 = jSDocInfo63.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        jSDocInfo63.setVisibility(visibility72);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        boolean boolean76 = jSDocInfoBuilder41.recordVisibility(visibility72);
        boolean boolean77 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder41);
        java.lang.String str78 = nodeIterableList0.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo79.getType();
        boolean boolean82 = jSDocInfo79.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getReturnType();
        java.lang.String str84 = jSDocInfo79.getLendsName();
        java.util.Collection<java.lang.String> strCollection85 = jSDocInfo79.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = jSDocInfo79.getEnumParameterType();
        boolean boolean87 = jSDocInfo79.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo79.getType();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo79.getSuppressions();
        boolean boolean90 = jSDocInfo79.isImplicitCast();
        boolean boolean91 = nodeIterableList0.equals((java.lang.Object) boolean90);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertNull(visibility55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(strCollection85);
        org.junit.Assert.assertNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isIf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        boolean boolean34 = node29.isAdd();
        com.google.javascript.rhino.Node node35 = node5.useSourceInfoFromForTree(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = node41.cloneTree();
        java.lang.Object obj49 = node47.getProp((int) (byte) 0);
        int int50 = node47.getChildCount();
        node35.addChildrenToFront(node47);
        boolean boolean52 = node47.isDelProp();
        boolean boolean53 = node47.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node56.isDebugger();
        boolean boolean63 = node56.isVoid();
        com.google.javascript.rhino.Node node64 = node56.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.hasFileOverview();
        boolean boolean67 = jSDocInfo65.hasModifies();
        boolean boolean69 = jSDocInfo65.hasParameter("OR hi!");
        java.lang.String str70 = jSDocInfo65.getDeprecationReason();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo65.getSuppressions();
        node56.setDirectives(strSet71);
        boolean boolean73 = node56.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet75 = jSDocInfo74.getSuppressions();
        boolean boolean76 = jSDocInfo74.isNoSideEffects();
        java.lang.String str77 = jSDocInfo74.getReturnDescription();
        boolean boolean79 = jSDocInfo74.hasParameter("Not declared as a constructor");
        java.lang.String str80 = jSDocInfo74.getMeaning();
        boolean boolean81 = jSDocInfo74.isNoSideEffects();
        boolean boolean82 = jSDocInfo74.hasBaseType();
        boolean boolean83 = jSDocInfo74.isConstructor();
        jSDocInfo74.setDeprecated(true);
        boolean boolean86 = jSDocInfo74.isNoAlias();
        node56.setJSDocInfo(jSDocInfo74);
        boolean boolean88 = node47.isEquivalentTo(node56);
        node47.setCharno((int) (byte) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.addAuthor("");
        boolean boolean12 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder9.recordReturnType(jSTypeExpression13);
        boolean boolean15 = jSDocInfoBuilder9.recordOverride();
        boolean boolean17 = jSDocInfoBuilder9.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node23.isNot();
        int int27 = node23.getLineno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node33.isNot();
        int int37 = node33.getLineno();
        com.google.javascript.rhino.Node node38 = node23.srcref(node33);
        boolean boolean39 = node38.isDelProp();
        com.google.javascript.rhino.Node node40 = node38.getLastSibling();
        boolean boolean41 = node40.isFunction();
        java.lang.Object obj43 = node40.getProp((int) ' ');
        jSDocInfoBuilder9.markTypeNode(node40, 35, (int) (byte) 0, 16, 49, true);
        boolean boolean51 = jSDocInfoBuilder9.recordBlockDescription("InputId: ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean56 = jSDocInfoBuilder53.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder58.addAuthor("");
        boolean boolean61 = jSDocInfoBuilder58.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = null;
        boolean boolean63 = jSDocInfoBuilder58.recordThrowType(jSTypeExpression62);
        boolean boolean64 = jSDocInfoBuilder58.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        jSDocInfoBuilder58.markName("", staticSourceFile66, 29, 50);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node72.isDebugger();
        boolean boolean79 = node72.isSyntheticBlock();
        boolean boolean80 = node72.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        boolean boolean84 = jSDocInfoBuilder58.recordThrowDescription(jSTypeExpression82, "?");
        boolean boolean86 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression82, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean87 = jSTypeExpression82.isOptionalArg();
        boolean boolean88 = jSDocInfoBuilder9.recordDefineType(jSTypeExpression82);
        boolean boolean89 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression82);
        boolean boolean90 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.Node node93 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean94 = node93.isThis();
        boolean boolean95 = node93.isDelProp();
        boolean boolean96 = node93.isNoSideEffectsCall();
        java.util.Set<java.lang.String> strSet97 = null;
        node93.setDirectives(strSet97);
        com.google.javascript.rhino.JSDocInfo jSDocInfo99 = jSDocInfoBuilder1.build(node93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSDocInfo99);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.reverse();
        boolean boolean64 = nodeIterableList63.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor65 = nodeIterableList63.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList63.asList();
        int int67 = nodeIterableList66.size();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor68 = nodeIterableList66.listIterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder70.addAuthor("");
        boolean boolean73 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordReturnType(jSTypeExpression74);
        jSDocInfoBuilder70.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean81 = jSDocInfoBuilder70.recordDeprecationReason("hi!");
        boolean boolean82 = jSDocInfoBuilder70.isPopulatedWithFileOverview();
        boolean boolean84 = jSDocInfoBuilder70.recordDescription("{1242212142}");
        boolean boolean86 = jSDocInfoBuilder70.recordMeaning("{2033549453}");
        boolean boolean87 = jSDocInfoBuilder70.isPopulated();
        boolean boolean88 = nodeIterableList66.contains((java.lang.Object) jSDocInfoBuilder70);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor65);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markName("java.io.IOException: {2027824777}", 0, 36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        java.lang.String str63 = nodeIterableList2.toString();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList2.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList64.asList();
        boolean boolean66 = nodeIterableList65.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = nodeIterableList65.asList();
        boolean boolean68 = nodeIterableList65.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isExterns();
        boolean boolean72 = jSDocInfo70.hasReturnType();
        boolean boolean73 = jSDocInfo70.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo70.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo70.getTypedefType();
        boolean boolean76 = jSDocInfo70.isExterns();
        java.lang.String str77 = jSDocInfo70.getDescription();
        boolean boolean78 = jSDocInfo70.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection79 = jSDocInfo70.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = nodeIterableList65.set(40, (java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeCollection79);
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.hasOneChild();
        com.google.javascript.rhino.InputId inputId20 = node11.getInputId();
        boolean boolean21 = node11.hasChildren();
        node11.addSuppression("OR hi! 0\n");
        boolean boolean24 = node11.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder1.build(node11);
        boolean boolean26 = jSDocInfo25.isExport();
        jSDocInfo25.addSuppression("{971330823}");
        boolean boolean29 = jSDocInfo25.isInterface();
        boolean boolean30 = jSDocInfo25.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        boolean boolean60 = nodeIterableList53.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = nodeIterableList53.asList();
        boolean boolean62 = nodeIterableList61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo63.getSuppressions();
        boolean boolean65 = jSDocInfo63.isNoSideEffects();
        java.lang.String str66 = jSDocInfo63.getReturnDescription();
        boolean boolean68 = jSDocInfo63.hasDescriptionForParameter("{...}");
        boolean boolean69 = jSDocInfo63.isExterns();
        boolean boolean70 = jSDocInfo63.hasReturnType();
        boolean boolean71 = jSDocInfo63.hasEnumParameterType();
        int int72 = nodeIterableList61.lastIndexOf((java.lang.Object) boolean71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = nodeIterableList61.remove((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.recordPreserveTry();
        boolean boolean9 = nodeIterableList0.equals((java.lang.Object) boolean8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList0.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList0.reverse();
        int int12 = nodeIterableList11.size();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        jSTypeRegistry15.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot25 = objectType22.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType22);
        boolean boolean27 = jSType26.hasDisplayName();
        boolean boolean28 = nodeIterableList11.equals((java.lang.Object) boolean27);
        boolean boolean29 = nodeIterableList11.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        boolean boolean42 = jSDocInfoBuilder31.recordDeprecationReason("Not declared as a constructor");
        boolean boolean43 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.addAuthor("");
        boolean boolean48 = jSDocInfoBuilder45.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder45.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.addAuthor("");
        boolean boolean56 = jSDocInfoBuilder53.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression57);
        boolean boolean59 = jSDocInfoBuilder53.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder53.markName("", staticSourceFile61, 29, 50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isSyntheticBlock();
        boolean boolean75 = node67.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node67, "Unknown class name");
        boolean boolean79 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean80 = jSDocInfoBuilder45.recordExtendedInterface(jSTypeExpression77);
        boolean boolean81 = jSDocInfoBuilder31.recordDefineType(jSTypeExpression77);
        boolean boolean82 = jSDocInfoBuilder31.recordExport();
        boolean boolean83 = nodeIterableList11.equals((java.lang.Object) jSDocInfoBuilder31);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor84 = nodeIterableList11.iterator();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean92 = node91.isThis();
        node88.addChildToBack(node91);
        boolean boolean94 = node88.isDebugger();
        com.google.javascript.rhino.Node node95 = node88.getFirstChild();
        boolean boolean96 = node95.isSyntheticBlock();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable97 = node95.getAncestors();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable98 = node95.children();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable99 = nodeIterableList11.set((int) (byte) -1, nodeIterable98);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNull(jSTypeStaticSlot25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor84);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(ancestorIterable97);
        org.junit.Assert.assertNotNull(nodeIterable98);
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str11 = jSDocInfo0.getDescription();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.addAuthor("");
        boolean boolean9 = jSDocInfoBuilder6.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder6.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder6.markName("", staticSourceFile14, 29, 50);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node20.isDebugger();
        boolean boolean27 = node20.isSyntheticBlock();
        boolean boolean28 = node20.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node20, "Unknown class name");
        boolean boolean32 = jSDocInfoBuilder6.recordThrowDescription(jSTypeExpression30, "?");
        boolean boolean34 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression30, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean35 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean36 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean35 = jSDocInfo0.hasBaseType();
        java.lang.String str36 = jSDocInfo0.getOriginalCommentString();
        boolean boolean37 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("{}");
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecationReason("{694195918}");
        boolean boolean15 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordIdGenerator();
        boolean boolean25 = jSDocInfoBuilder17.addReference("OR hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.siblings();
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        boolean boolean45 = jSDocInfoBuilder41.recordHiddenness();
        boolean boolean46 = strSet37.remove((java.lang.Object) jSDocInfoBuilder41);
        boolean boolean47 = jSDocInfoBuilder41.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder49.addAuthor("");
        boolean boolean52 = jSDocInfoBuilder49.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = null;
        boolean boolean54 = jSDocInfoBuilder49.recordThrowType(jSTypeExpression53);
        boolean boolean55 = jSDocInfoBuilder49.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        jSDocInfoBuilder49.markName("", staticSourceFile57, 29, 50);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node63.isDebugger();
        boolean boolean70 = node63.isSyntheticBlock();
        boolean boolean71 = node63.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node63, "Unknown class name");
        boolean boolean75 = jSDocInfoBuilder49.recordThrowDescription(jSTypeExpression73, "?");
        boolean boolean76 = jSDocInfoBuilder41.recordThrowType(jSTypeExpression73);
        boolean boolean77 = jSDocInfoBuilder17.recordEnumParameterType(jSTypeExpression73);
        boolean boolean78 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression73);
        boolean boolean80 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! [input_id: InputId: InputId: ]\n    OR hi!\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! [input_id: InputId: InputId: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean87 = node86.isThis();
        node83.addChildToBack(node86);
        boolean boolean89 = node83.isDebugger();
        boolean boolean90 = node83.isSyntheticBlock();
        boolean boolean91 = node83.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = new com.google.javascript.rhino.JSTypeExpression(node83, "Unknown class name");
        boolean boolean94 = jSTypeExpression93.isOptionalArg();
        boolean boolean95 = jSTypeExpression93.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression96 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression93);
        boolean boolean97 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression93);
        boolean boolean99 = jSDocInfoBuilder1.recordBlockDescription("ERROR hi! 4095");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList45.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = nodeIterableList45.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList60.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder63.recordInterface();
        boolean boolean66 = jSDocInfoBuilder63.recordDescription("hi!");
        boolean boolean67 = jSDocInfoBuilder63.recordHiddenness();
        boolean boolean68 = jSDocInfoBuilder63.recordExpose();
        boolean boolean69 = jSDocInfoBuilder63.recordConstructor();
        boolean boolean71 = jSDocInfoBuilder63.addAuthor("Unknown class name");
        boolean boolean73 = jSDocInfoBuilder63.recordDescription("[]");
        boolean boolean74 = jSDocInfoBuilder63.recordDeprecated();
        boolean boolean75 = jSDocInfoBuilder63.recordConsistentIdGenerator();
        boolean boolean77 = jSDocInfoBuilder63.recordMeaning("{775928261}");
        boolean boolean78 = jSDocInfoBuilder63.isDescriptionRecorded();
        int int79 = nodeIterableList60.lastIndexOf((java.lang.Object) jSDocInfoBuilder63);
        boolean boolean80 = jSDocInfoBuilder63.recordDeprecated();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(31, 1, 10);
        boolean boolean85 = node84.isScript();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node84, "{1729404217}");
        boolean boolean88 = jSTypeExpression87.isVarArgs();
        boolean boolean89 = jSDocInfoBuilder63.recordDefineType(jSTypeExpression87);
        boolean boolean90 = jSDocInfoBuilder63.recordExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(nodeIterableList60);
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor1 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder3.recordInterface();
        boolean boolean6 = jSDocInfoBuilder3.recordDescription("hi!");
        boolean boolean7 = jSDocInfoBuilder3.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder3.recordThrowType(jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder3.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder3.recordReturnType(jSTypeExpression11);
        boolean boolean14 = jSDocInfoBuilder3.recordDeprecationReason("Not declared as a constructor");
        boolean boolean15 = jSDocInfoBuilder3.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder17.addAuthor("");
        boolean boolean20 = jSDocInfoBuilder17.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder17.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder17.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.addAuthor("");
        boolean boolean28 = jSDocInfoBuilder25.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder25.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        jSDocInfoBuilder25.markName("", staticSourceFile33, 29, 50);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        boolean boolean46 = node39.isSyntheticBlock();
        boolean boolean47 = node39.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node39, "Unknown class name");
        boolean boolean51 = jSDocInfoBuilder25.recordThrowDescription(jSTypeExpression49, "?");
        boolean boolean52 = jSDocInfoBuilder17.recordExtendedInterface(jSTypeExpression49);
        boolean boolean53 = jSDocInfoBuilder3.recordDefineType(jSTypeExpression49);
        boolean boolean54 = jSDocInfoBuilder3.recordExport();
        boolean boolean55 = jSDocInfoBuilder3.recordExport();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility57);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder59.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo62.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = jSDocInfo62.getVisibility();
        boolean boolean66 = jSDocInfo62.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo62.setVisibility(visibility67);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray69 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility67 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray69);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo74.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = jSDocInfo74.getVisibility();
        boolean boolean78 = jSDocInfo74.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo74.setVisibility(visibility79);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray81 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility79 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder73.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray81);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder70.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray81);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder84 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray81);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder87 = visibilityEnumBuilder85.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility86);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder84.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility86);
        boolean boolean89 = jSDocInfoBuilder3.recordVisibility(visibility86);
        boolean boolean90 = jSDocInfoBuilder3.recordConstancy();
        boolean boolean91 = jSDocInfoBuilder3.recordNoCompile();
        boolean boolean94 = jSDocInfoBuilder3.recordParameterDescription("OR []", "{764537935}");
        boolean boolean95 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder3);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor96 = nodeIterableList0.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(nodeIterableItor1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertNull(visibility65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray69);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertNull(visibility77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + visibility79 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility79.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder84);
        org.junit.Assert.assertTrue("'" + visibility86 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility86.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder87);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor96);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder15.recordTypedef(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder15.recordConstructor();
        boolean boolean24 = jSDocInfoBuilder15.shouldParseDocumentation();
        boolean boolean25 = jSDocInfoBuilder15.isPopulatedWithFileOverview();
        boolean boolean27 = jSDocInfoBuilder15.recordDescription("{1978369052}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        boolean boolean14 = jSDocInfoBuilder9.recordExpose();
        boolean boolean15 = jSDocInfoBuilder9.recordIdGenerator();
        boolean boolean17 = jSDocInfoBuilder9.addReference("OR hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordInterface();
        boolean boolean36 = jSDocInfoBuilder33.recordDescription("hi!");
        boolean boolean37 = jSDocInfoBuilder33.recordHiddenness();
        boolean boolean38 = strSet29.remove((java.lang.Object) jSDocInfoBuilder33);
        boolean boolean39 = jSDocInfoBuilder33.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder41.addAuthor("");
        boolean boolean44 = jSDocInfoBuilder41.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = null;
        boolean boolean46 = jSDocInfoBuilder41.recordThrowType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder41.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder41.markName("", staticSourceFile49, 29, 50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node55.isDebugger();
        boolean boolean62 = node55.isSyntheticBlock();
        boolean boolean63 = node55.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = new com.google.javascript.rhino.JSTypeExpression(node55, "Unknown class name");
        boolean boolean67 = jSDocInfoBuilder41.recordThrowDescription(jSTypeExpression65, "?");
        boolean boolean68 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression65);
        boolean boolean69 = jSDocInfoBuilder9.recordEnumParameterType(jSTypeExpression65);
        boolean boolean70 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression65);
        boolean boolean71 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean74 = jSDocInfoBuilder73.recordInterface();
        boolean boolean76 = jSDocInfoBuilder73.recordDescription("hi!");
        boolean boolean77 = jSDocInfoBuilder73.recordHiddenness();
        boolean boolean78 = jSDocInfoBuilder73.recordExpose();
        boolean boolean79 = jSDocInfoBuilder73.recordNoCompile();
        boolean boolean80 = jSDocInfoBuilder73.recordConstructor();
        jSDocInfoBuilder73.recordOriginalCommentString("OR hi!");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean86 = node85.isTypeOf();
        node85.setLineno(51);
        boolean boolean89 = node85.isCase();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node85, "java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean92 = jSDocInfoBuilder73.recordThisType(jSTypeExpression91);
        boolean boolean93 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression91);
        com.google.javascript.rhino.Node node94 = jSTypeExpression91.getRoot();
        com.google.javascript.rhino.Node node95 = jSTypeExpression91.getRoot();
        boolean boolean96 = node95.isNE();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        int int17 = nodeIterableList14.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo19.getExtendedInterfaces();
        boolean boolean23 = jSDocInfo19.isNoCompile();
        boolean boolean24 = jSDocInfo19.isNoTypeCheck();
        boolean boolean25 = nodeIterableList14.contains((java.lang.Object) jSDocInfo19);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator26 = nodeIterableList14.spliterator();
        com.google.javascript.rhino.InputId inputId28 = new com.google.javascript.rhino.InputId("");
        java.lang.String str29 = inputId28.getIdName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isTypeOf();
        com.google.javascript.rhino.Node node44 = node32.srcrefTree(node42);
        boolean boolean45 = node44.isBreak();
        boolean boolean46 = node44.wasEmptyNode();
        boolean boolean47 = inputId28.equals((java.lang.Object) node44);
        java.lang.String str48 = inputId28.toString();
        java.lang.String str49 = inputId28.toString();
        int int50 = nodeIterableList14.indexOf((java.lang.Object) str49);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator51 = nodeIterableList14.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo53.getType();
        boolean boolean56 = jSDocInfo53.isImplicitCast();
        boolean boolean57 = jSDocInfo53.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection58 = jSDocInfo53.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator59 = nodeCollection58.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList14.add((int) (short) 0, (java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "InputId: " + "'", str48, "InputId: ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "InputId: " + "'", str49, "InputId: ");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeCollection58);
        org.junit.Assert.assertNotNull(nodeSpliterator59);
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("OR hi!\n    OR hi!\n");
        boolean boolean9 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.hasParameter("PARAM_LIST\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream6 = nodeIterableList3.parallelStream();
        boolean boolean7 = nodeIterableList3.isEmpty();
        int int8 = nodeIterableList3.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isExterns();
        boolean boolean11 = jSDocInfo9.hasReturnType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isOverride();
        boolean boolean18 = jSDocInfo13.isNoSideEffects();
        boolean boolean20 = jSDocInfo13.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet21 = jSDocInfo13.getModifies();
        java.lang.String str22 = jSDocInfo13.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        boolean boolean26 = jSDocInfo23.isOverride();
        jSDocInfo23.setLicense("hi!");
        java.lang.String str29 = jSDocInfo23.getDeprecationReason();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo23.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        java.lang.String str34 = jSDocInfo31.getReturnDescription();
        boolean boolean36 = jSDocInfo31.hasParameter("Not declared as a constructor");
        java.lang.String str37 = jSDocInfo31.getMeaning();
        boolean boolean38 = jSDocInfo31.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getSuppressions();
        boolean boolean44 = jSDocInfo42.isNoSideEffects();
        java.lang.String str45 = jSDocInfo42.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo46.getType();
        boolean boolean49 = jSDocInfo46.isNoTypeCheck();
        boolean boolean50 = jSDocInfo46.isHidden();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList52 = com.google.common.collect.ImmutableList.of(jSDocInfo9, jSDocInfo13, jSDocInfo23, jSDocInfo31, jSDocInfo39, jSDocInfo42, jSDocInfo46);
        java.lang.String str53 = jSDocInfo9.getSourceName();
        java.lang.String str55 = jSDocInfo9.getDescriptionForParameter("InputId: ");
        com.google.javascript.rhino.Node node56 = jSDocInfo9.getAssociatedNode();
        int int57 = nodeIterableList3.indexOf((java.lang.Object) node56);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList58 = nodeIterableList3.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = nodeIterableList58.remove(172031);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList58);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.listIterator();
        boolean boolean19 = nodeIterableList14.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        boolean boolean23 = nodeIterableList20.isEmpty();
        int int24 = nodeIterableList20.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression27);
        jSDocInfoBuilder26.markAnnotation("None", 48, 51);
        boolean boolean33 = jSDocInfoBuilder26.recordNoShadow();
        boolean boolean35 = jSDocInfoBuilder26.addReference("OR hi!");
        boolean boolean36 = jSDocInfoBuilder26.isJavaDispatch();
        int int37 = nodeIterableList20.indexOf((java.lang.Object) jSDocInfoBuilder26);
        boolean boolean38 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList46 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "PARAM_LIST", (java.lang.Comparable<java.lang.String>) "{272877914}", (java.lang.Comparable<java.lang.String>) "OR hi! [source_file: {298532945}]", (java.lang.Comparable<java.lang.String>) "OR hi! [directives: []]", (java.lang.Comparable<java.lang.String>) "[]", (java.lang.Comparable<java.lang.String>) "{424067794}", (java.lang.Comparable<java.lang.String>) "");
        boolean boolean47 = nodeIterableList20.equals((java.lang.Object) strComparableList46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node50.siblings();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList62 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray63 = nodeIterableList62.toArray();
        boolean boolean64 = strSet59.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        boolean boolean65 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList20.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo67.getSuppressions();
        boolean boolean69 = jSDocInfo67.isNoSideEffects();
        boolean boolean70 = jSDocInfo67.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo67.getReturnType();
        com.google.javascript.rhino.Node node72 = jSDocInfo67.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo67.getTypedefType();
        boolean boolean74 = jSDocInfo67.isNoShadow();
        com.google.javascript.rhino.Node node75 = jSDocInfo67.getAssociatedNode();
        boolean boolean76 = nodeIterableList20.equals((java.lang.Object) jSDocInfo67);
        java.lang.Object[] objArray77 = nodeIterableList20.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strComparableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeIterableList62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isFunction();
        java.lang.Object obj25 = node22.getProp((int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        boolean boolean29 = jSDocInfo26.isImplicitCast();
        boolean boolean30 = jSDocInfo26.isOverride();
        boolean boolean31 = jSDocInfo26.isNoSideEffects();
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean33 = jSDocInfo26.hasFileOverview();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder35.recordTypedef(jSTypeExpression76);
        boolean boolean79 = jSDocInfoBuilder35.recordFileOverview("{856954291}");
        boolean boolean80 = jSDocInfoBuilder35.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.isOverride();
        boolean boolean11 = jSDocInfo0.isOverride();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeCollection12);
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isNE();
        boolean boolean66 = node64.isInstanceOf();
        boolean boolean67 = node64.isThrow();
        node64.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node64.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable70);
        boolean boolean72 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isExterns();
        int int75 = jSDocInfo73.getParameterCount();
        jSDocInfo73.setLicense("None");
        boolean boolean78 = jSDocInfo73.hasFileOverview();
        boolean boolean79 = jSDocInfo73.isInterface();
        int int80 = jSDocInfo73.getImplementedInterfaceCount();
        boolean boolean82 = jSDocInfo73.hasParameter("{168285338}");
        boolean boolean83 = jSDocInfo73.isExpose();
        int int84 = nodeIterableList71.indexOf((java.lang.Object) boolean83);
        boolean boolean85 = nodeIterableList71.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable70);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        boolean boolean29 = jSDocInfo26.isOverride();
        boolean boolean30 = jSDocInfo26.isNoCompile();
        java.lang.String str31 = jSDocInfo26.getLendsName();
        boolean boolean32 = jSType23.equals((java.lang.Object) str31);
        boolean boolean33 = jSType23.isUnknownType();
        boolean boolean34 = jSType23.isUnionType();
        boolean boolean35 = jSType23.isNoType();
        jSType23.clearResolved();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean23 = jSDocInfoBuilder20.recordDescription("hi!");
        boolean boolean24 = jSDocInfoBuilder20.recordHiddenness();
        boolean boolean25 = strSet16.remove((java.lang.Object) jSDocInfoBuilder20);
        boolean boolean26 = jSDocInfoBuilder20.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder28.markName("", staticSourceFile36, 29, 50);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        boolean boolean54 = jSDocInfoBuilder28.recordThrowDescription(jSTypeExpression52, "?");
        boolean boolean55 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression52);
        boolean boolean58 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean59 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean60 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean61 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.isHidden();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean12 = jSDocInfoBuilder11.recordOverride();
        boolean boolean13 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        com.google.javascript.rhino.Node node16 = jSDocInfo14.getAssociatedNode();
        boolean boolean17 = jSDocInfo14.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getType();
        boolean boolean19 = jSDocInfo14.isExport();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility25);
        jSDocInfo14.setVisibility(visibility25);
        boolean boolean28 = jSDocInfoBuilder11.recordVisibility(visibility25);
        jSDocInfo0.setVisibility(visibility25);
        boolean boolean30 = jSDocInfo0.isDeprecated();
        boolean boolean31 = jSDocInfo0.isConstant();
        boolean boolean32 = jSDocInfo0.hasFileOverview();
        boolean boolean33 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder24);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList9.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder12.recordOverride();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isAdd();
        boolean boolean28 = node24.isExprResult();
        boolean boolean29 = node24.isThrow();
        boolean boolean30 = node24.isVarArgs();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node33 = node24.useSourceInfoFrom(node32);
        node24.setLineno(5);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node46 = node39.getFirstChild();
        boolean boolean47 = node39.isNot();
        boolean boolean48 = node39.isIn();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node52.isDebugger();
        boolean boolean59 = node52.isAssign();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(51, node52, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node62.getAncestors();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(1, node39, node62, 54, 10);
        int int67 = node24.getIndexOfChild(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder12.build(node66);
        boolean boolean69 = nodeIterableList10.equals((java.lang.Object) node66);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isNE();
        boolean boolean74 = node72.isInstanceOf();
        boolean boolean75 = node72.isThrow();
        node72.setCharno(54);
        boolean boolean78 = node72.isDebugger();
        boolean boolean79 = node72.isOr();
        node72.setLength(29);
        boolean boolean82 = nodeIterableList10.contains((java.lang.Object) 29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = nodeIterableList10.remove(131073);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        int int6 = nodeIterableList3.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo7.getSuppressions();
        boolean boolean9 = jSDocInfo7.isNoSideEffects();
        int int10 = jSDocInfo7.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo11.getType();
        boolean boolean14 = jSDocInfo11.isImplicitCast();
        boolean boolean15 = jSDocInfo11.isExport();
        java.lang.String str16 = jSDocInfo11.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo17.getType();
        boolean boolean20 = jSDocInfo17.isImplicitCast();
        boolean boolean21 = jSDocInfo17.isExport();
        boolean boolean22 = jSDocInfo17.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo17.getReturnType();
        boolean boolean24 = jSDocInfo17.containsDeclaration();
        int int25 = jSDocInfo17.getParameterCount();
        java.lang.String str26 = jSDocInfo17.getVersion();
        jSDocInfo17.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo29.getType();
        boolean boolean32 = jSDocInfo29.isNoTypeCheck();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo29.setAssociatedNode(node35);
        jSDocInfo29.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        com.google.javascript.rhino.Node node41 = jSDocInfo39.getAssociatedNode();
        boolean boolean42 = jSDocInfo39.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        boolean boolean46 = jSDocInfo43.isImplicitCast();
        boolean boolean47 = jSDocInfo43.isOverride();
        boolean boolean48 = jSDocInfo43.isNoSideEffects();
        boolean boolean49 = jSDocInfo43.containsDeclaration();
        java.lang.String str50 = jSDocInfo43.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean54 = jSDocInfo53.isExterns();
        int int55 = jSDocInfo53.getParameterCount();
        boolean boolean56 = jSDocInfo53.isIdGenerator();
        boolean boolean57 = jSDocInfo53.isInterface();
        boolean boolean58 = jSDocInfo53.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo53.getThisType();
        java.lang.String str60 = jSDocInfo53.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo61.getSuppressions();
        boolean boolean63 = jSDocInfo61.isNoSideEffects();
        java.lang.String str64 = jSDocInfo61.getReturnDescription();
        boolean boolean66 = jSDocInfo61.hasParameter("Not declared as a constructor");
        java.lang.String str67 = jSDocInfo61.getMeaning();
        boolean boolean68 = jSDocInfo61.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean70 = jSDocInfo69.isExterns();
        com.google.javascript.rhino.Node node71 = jSDocInfo69.getAssociatedNode();
        boolean boolean72 = jSDocInfo69.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo69.getType();
        boolean boolean75 = jSDocInfo69.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo76.getSuppressions();
        boolean boolean78 = jSDocInfo76.isNoSideEffects();
        java.lang.String str79 = jSDocInfo76.getReturnDescription();
        java.lang.String str80 = jSDocInfo76.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.hasFileOverview();
        boolean boolean83 = jSDocInfo81.hasModifies();
        int int84 = jSDocInfo81.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection85 = jSDocInfo81.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray86 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList87 = com.google.common.collect.ImmutableList.of(jSDocInfo7, jSDocInfo11, jSDocInfo17, jSDocInfo29, jSDocInfo39, jSDocInfo43, jSDocInfo51, jSDocInfo53, jSDocInfo61, jSDocInfo69, jSDocInfo76, jSDocInfo81, jSDocInfoArray86);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo76.getBaseType();
        int int89 = nodeIterableList3.indexOf((java.lang.Object) jSTypeExpression88);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream90 = nodeIterableList3.stream();
        java.lang.Object[] objArray91 = nodeIterableList3.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor92 = nodeIterableList3.iterator();
        java.lang.Object[] objArray93 = nodeIterableList3.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JSDocInfo" + "'", str16, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(nodeCollection85);
        org.junit.Assert.assertNotNull(jSDocInfoArray86);
        org.junit.Assert.assertNotNull(jSDocInfoList87);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordLends("OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        jSDocInfoBuilder1.recordOriginalCommentString("Unknown class name");
        boolean boolean12 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean13 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean16 = jSDocInfoBuilder1.recordParameterDescription("OR hi! [synthetic: 1]", "{827814855}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        java.lang.Object[] objArray22 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean33 = nodeIterableList32.add(nodeIterable31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        java.lang.Object[] objArray51 = nodeIterableList48.toArray();
        boolean boolean52 = nodeIterableList48.isEmpty();
        boolean boolean53 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        boolean boolean70 = strSet65.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        java.lang.Object[] objArray71 = nodeIterableList68.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList68.listIterator();
        boolean boolean73 = nodeIterableList68.isEmpty();
        boolean boolean74 = nodeIterableList32.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        boolean boolean75 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList68.listIterator();
        boolean boolean77 = nodeIterableItor76.hasPrevious();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor76.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isTypeOf();
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node21);
        com.google.javascript.rhino.Node node24 = node11.getLastSibling();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        com.google.javascript.rhino.Node node34 = node27.getFirstChild();
        boolean boolean35 = node11.hasChild(node34);
        typePosition8.setItem(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node46 = node39.getFirstChild();
        boolean boolean47 = node39.isNot();
        typePosition8.setItem(node39);
        java.lang.String str49 = node39.getString();
        node39.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node52 = node6.copyInformationFromForTree(node39);
        java.lang.String str53 = node52.getSourceFileName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node52.getAncestors();
        boolean boolean55 = node52.isVar();
        boolean boolean56 = node52.isThrow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean12 = jSDocInfoBuilder1.addReference("{556367677}");
        boolean boolean13 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean16 = jSDocInfoBuilder1.addAuthor("STRING INSTANCEOF 50");
        boolean boolean17 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        node5.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo25.getThisType();
        java.lang.String str32 = jSDocInfo25.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean34 = jSDocInfo25.hasType();
        boolean boolean35 = jSDocInfo25.isConstructor();
        int int36 = jSDocInfo25.getParameterCount();
        boolean boolean37 = jSDocInfo25.isImplicitCast();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExport();
        boolean boolean9 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean11 = jSDocInfoBuilder1.recordDescription("{464938482}");
        jSDocInfoBuilder1.markText("{80474539}", (int) (byte) 1, 43, (int) (byte) 1, 53);
        jSDocInfoBuilder1.markText("{1406296263}", 38, 409600, 200716, (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder1.recordExterns();
        boolean boolean14 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean16 = jSDocInfoBuilder1.recordDeprecationReason("{proxy:{1538954470}}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isConstant();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        boolean boolean24 = node22.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        boolean boolean27 = jSDocInfo25.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getImplementedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        node22.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node51 = node36.srcref(node46);
        int int52 = node36.getCharno();
        boolean boolean53 = node36.isQuotedString();
        boolean boolean54 = node36.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        int int57 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet69);
        node60.putBooleanProp(0, false);
        node60.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean77 = node60.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node60.getStaticSourceFile();
        int int80 = staticSourceFile78.getLineOffset(40);
        java.lang.String str81 = staticSourceFile78.getName();
        int int83 = staticSourceFile78.getColumnOfOffset((int) '#');
        node36.setStaticSourceFile(staticSourceFile78);
        node22.setStaticSourceFile(staticSourceFile78);
        boolean boolean86 = staticSourceFile78.isExtern();
        java.lang.String str87 = staticSourceFile78.getName();
        boolean boolean88 = staticSourceFile78.isExtern();
        java.lang.String str89 = staticSourceFile78.getName();
        java.lang.String str90 = staticSourceFile78.getName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str81, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str87, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str89, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str90, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        node6.putBooleanProp(0, false);
        typePosition0.setItem(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node6.getStaticSourceFile();
        boolean boolean23 = node6.wasEmptyNode();
        boolean boolean24 = node6.isSetterDef();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.addAuthor("");
        boolean boolean30 = jSDocInfoBuilder27.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder27.recordReturnType(jSTypeExpression31);
        boolean boolean33 = jSDocInfoBuilder27.recordOverride();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node39.isAdd();
        boolean boolean43 = node39.isExprResult();
        boolean boolean44 = node39.isThrow();
        boolean boolean45 = node39.isVarArgs();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node48 = node39.useSourceInfoFrom(node47);
        node39.setLineno(5);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        com.google.javascript.rhino.Node node61 = node54.getFirstChild();
        boolean boolean62 = node54.isNot();
        boolean boolean63 = node54.isIn();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isAssign();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(51, node67, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable78 = node77.getAncestors();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(1, node54, node77, 54, 10);
        int int82 = node39.getIndexOfChild(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder27.build(node81);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((-1), node81);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(45, 83, 12);
        com.google.javascript.rhino.Node node89 = node81.useSourceInfoIfMissingFrom(node88);
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildToFront(node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(ancestorIterable78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isOverride();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.isPopulated();
        boolean boolean4 = jSDocInfoBuilder1.recordExterns();
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        jSDocInfoBuilder1.recordOriginalCommentString("{1162609263}");
        boolean boolean8 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean10 = jSDocInfoBuilder1.recordDescription("{490529557}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("InputId: function (this:me, {2128846323}): me");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.hasBaseType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.hasParameterType("Not declared as a type name");
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo37.getVisibility();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo37.getTemplateTypeNames();
        java.lang.String str46 = jSDocInfo37.getBlockDescription();
        com.google.javascript.rhino.Node node47 = jSDocInfo37.getAssociatedNode();
        boolean boolean48 = jSDocInfo37.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        boolean boolean16 = nodeIterableList15.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList15.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList15.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor19 = nodeIterableList18.iterator();
        boolean boolean20 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isExterns();
        boolean boolean23 = jSDocInfo21.hasReturnType();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo21.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet24.spliterator();
        java.lang.Iterable[][] iterableArray27 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray28 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray27;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList29 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray28);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry31.createObjectType(objectType34);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = objectType42.toObjectType();
        boolean boolean44 = objectType43.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope45 = objectType43.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType46 = objectType35.resolve(errorReporter36, jSTypeStaticScope45);
        java.lang.Iterable[][] iterableArray48 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray49 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray48;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList50 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray49);
        boolean boolean51 = objectType35.equals((java.lang.Object) nodeIterableArray49);
        java.lang.Iterable[][] iterableArray53 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray54 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray53;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList55 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray54);
        java.lang.Iterable[][] iterableArray57 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray58 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray57;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList59 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray58);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = objectType72.toObjectType();
        boolean boolean74 = objectType73.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope75 = objectType73.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType76 = objectType65.resolve(errorReporter66, jSTypeStaticScope75);
        java.lang.Iterable[][] iterableArray78 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray79 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray78;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList80 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray79);
        boolean boolean81 = objectType65.equals((java.lang.Object) nodeIterableArray79);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[][]> nodeIterableArrayList82 = com.google.common.collect.ImmutableList.of(nodeIterableArray49, nodeIterableArray54, nodeIterableArray58, nodeIterableArray79);
        java.lang.Iterable[][] iterableArray84 = new java.lang.Iterable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<com.google.javascript.rhino.Node>[][] nodeIterableArray85 = (java.lang.Iterable<com.google.javascript.rhino.Node>[][]) iterableArray84;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[]> nodeIterableArrayList86 = com.google.common.collect.ImmutableList.copyOf(nodeIterableArray85);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>[][]> nodeIterableArrayList87 = com.google.common.collect.ImmutableList.of(nodeIterableArray28, nodeIterableArray49, nodeIterableArray85);
        java.lang.Class<?> wildcardClass88 = nodeIterableArray49.getClass();
        java.lang.Class[] classArray90 = new java.lang.Class[1];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray91 = (java.lang.Class<?>[]) classArray90;
        wildcardClassArray91[0] = wildcardClass88;
        java.lang.Class<?>[] wildcardClassArray94 = strSet24.toArray(wildcardClassArray91);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray95 = nodeIterableList18.toArray((java.lang.reflect.GenericDeclaration[]) wildcardClassArray91);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.reflect.AnnotatedElement> annotatedElementList96 = com.google.common.collect.ImmutableList.copyOf((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(nodeIterableItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(iterableArray27);
        org.junit.Assert.assertNotNull(nodeIterableArray28);
        org.junit.Assert.assertNotNull(nodeIterableArrayList29);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(iterableArray48);
        org.junit.Assert.assertNotNull(nodeIterableArray49);
        org.junit.Assert.assertNotNull(nodeIterableArrayList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iterableArray53);
        org.junit.Assert.assertNotNull(nodeIterableArray54);
        org.junit.Assert.assertNotNull(nodeIterableArrayList55);
        org.junit.Assert.assertNotNull(iterableArray57);
        org.junit.Assert.assertNotNull(nodeIterableArray58);
        org.junit.Assert.assertNotNull(nodeIterableArrayList59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope75);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNotNull(iterableArray78);
        org.junit.Assert.assertNotNull(nodeIterableArray79);
        org.junit.Assert.assertNotNull(nodeIterableArrayList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeIterableArrayList82);
        org.junit.Assert.assertNotNull(iterableArray84);
        org.junit.Assert.assertNotNull(nodeIterableArray85);
        org.junit.Assert.assertNotNull(nodeIterableArrayList86);
        org.junit.Assert.assertNotNull(nodeIterableArrayList87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(wildcardClassArray91);
        org.junit.Assert.assertNotNull(wildcardClassArray94);
        org.junit.Assert.assertNotNull(genericDeclarationArray95);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility20 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean30 = jSDocInfoBuilder28.recordVisibility(visibility29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility32);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder36 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility35);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray37 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility25, visibility26, visibility29, visibility32, visibility35 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList38 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray37);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder39 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray37);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = jSDocInfo43.getVisibility();
        boolean boolean47 = jSDocInfo43.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo43.setVisibility(visibility48);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray50 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility48 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray50);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo55.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = jSDocInfo55.getVisibility();
        boolean boolean59 = jSDocInfo55.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo55.setVisibility(visibility60);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray62 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility60 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray62);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo68.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = jSDocInfo68.getVisibility();
        boolean boolean72 = jSDocInfo68.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo68.setVisibility(visibility73);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray75 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility73 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder79 = visibilityEnumBuilder77.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean81 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo80.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = jSDocInfo80.getVisibility();
        boolean boolean84 = jSDocInfo80.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility85 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo80.setVisibility(visibility85);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray87 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility85 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder79.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray87);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder89 = visibilityEnumBuilder76.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray87);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder90 = visibilityEnumBuilder64.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray87);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder91 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray87);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection92 = visibilityEnumBuilder91.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder24);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder33);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder36);
        org.junit.Assert.assertNotNull(visibilityArray37);
        org.junit.Assert.assertNotNull(visibilityEnumList38);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder39);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertNull(visibility46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray50);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNull(visibility58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray62);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(visibility71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray75);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(visibility83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + visibility85 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility85.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray87);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder89);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder90);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder91);
        org.junit.Assert.assertNotNull(visibilityEnumCollection92);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        java.lang.String str4 = jSDocInfo0.getDescription();
        jSDocInfo0.addSuppression("function (this:me, {988702852}): me");
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.recordInterface();
        boolean boolean4 = jSDocInfoBuilder2.isInterfaceRecorded();
        boolean boolean5 = jSDocInfoBuilder2.recordIdGenerator();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isGetElem();
        jSDocInfoBuilder2.markTypeNode(node8, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(12, node8, (int) '4', 0);
        boolean boolean19 = node8.isAnd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("{464938482}");
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str10 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        boolean boolean9 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str12 = jSDocInfo0.getSourceName();
        boolean boolean14 = jSDocInfo0.hasParameterType("{694195918}");
        boolean boolean15 = jSDocInfo0.isIdGenerator();
        java.lang.String str16 = jSDocInfo0.getDeprecationReason();
        boolean boolean17 = jSDocInfo0.isExpose();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getSuppressions();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection19 = jSDocInfo0.getMarkers();
        java.lang.String str20 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(markerCollection19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean3 = jSDocInfoBuilder1.recordVisibility(visibility2);
        boolean boolean4 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        boolean boolean10 = jSDocInfoBuilder6.recordHiddenness();
        boolean boolean11 = jSDocInfoBuilder6.recordExpose();
        boolean boolean12 = jSDocInfoBuilder6.recordConstructor();
        boolean boolean14 = jSDocInfoBuilder6.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder6.recordTypedef(jSTypeExpression15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordConsistentIdGenerator();
        boolean boolean24 = jSDocInfoBuilder18.recordNoTypeCheck();
        jSDocInfoBuilder18.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean32 = jSDocInfoBuilder18.recordLends("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordInterface();
        boolean boolean37 = jSDocInfoBuilder34.recordDescription("hi!");
        boolean boolean38 = jSDocInfoBuilder34.recordHiddenness();
        boolean boolean39 = jSDocInfoBuilder34.recordExpose();
        boolean boolean40 = jSDocInfoBuilder34.recordIdGenerator();
        boolean boolean42 = jSDocInfoBuilder34.addReference("OR hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        boolean boolean64 = jSDocInfoBuilder58.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder66.addAuthor("");
        boolean boolean69 = jSDocInfoBuilder66.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = null;
        boolean boolean71 = jSDocInfoBuilder66.recordThrowType(jSTypeExpression70);
        boolean boolean72 = jSDocInfoBuilder66.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        jSDocInfoBuilder66.markName("", staticSourceFile74, 29, 50);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean84 = node83.isThis();
        node80.addChildToBack(node83);
        boolean boolean86 = node80.isDebugger();
        boolean boolean87 = node80.isSyntheticBlock();
        boolean boolean88 = node80.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = new com.google.javascript.rhino.JSTypeExpression(node80, "Unknown class name");
        boolean boolean92 = jSDocInfoBuilder66.recordThrowDescription(jSTypeExpression90, "?");
        boolean boolean93 = jSDocInfoBuilder58.recordThrowType(jSTypeExpression90);
        boolean boolean94 = jSDocInfoBuilder34.recordEnumParameterType(jSTypeExpression90);
        boolean boolean95 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression90);
        boolean boolean96 = jSDocInfoBuilder6.recordTypedef(jSTypeExpression90);
        boolean boolean97 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression90);
        boolean boolean98 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean99 = jSDocInfoBuilder1.recordPreserveTry();
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean4 = jSDocInfoBuilder1.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isExterns();
        boolean boolean7 = jSDocInfo5.hasReturnType();
        jSDocInfo5.setLicense("hi!");
        java.lang.String str10 = jSDocInfo5.toString();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo5.getParameterNames();
        boolean boolean12 = jSDocInfoBuilder1.recordSuppressions(strSet11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = strSet11.add("INSTANCEOF [jsdoc_info: JSDocInfo]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isInterface();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        boolean boolean11 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean23 = jSDocInfoBuilder20.recordDescription("hi!");
        boolean boolean24 = jSDocInfoBuilder20.recordHiddenness();
        boolean boolean25 = strSet16.remove((java.lang.Object) jSDocInfoBuilder20);
        boolean boolean26 = jSDocInfoBuilder20.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder28.markName("", staticSourceFile36, 29, 50);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        boolean boolean54 = jSDocInfoBuilder28.recordThrowDescription(jSTypeExpression52, "?");
        boolean boolean55 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression52);
        com.google.javascript.rhino.Node node57 = jSTypeExpression52.getRoot();
        boolean boolean58 = node57.isNull();
        boolean boolean59 = node57.isFalse();
        boolean boolean61 = node57.getBooleanProp(11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        com.google.javascript.rhino.InputId inputId15 = new com.google.javascript.rhino.InputId("");
        java.lang.String str16 = inputId15.getIdName();
        node11.setInputId(inputId15);
        com.google.javascript.rhino.Node node18 = node11.getLastSibling();
        boolean boolean19 = node18.isIf();
        boolean boolean20 = node18.isCall();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node24.isDebugger();
        node24.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node48.isNot();
        int int52 = node48.getLineno();
        com.google.javascript.rhino.Node node53 = node38.srcref(node48);
        int int54 = node38.getCharno();
        com.google.javascript.rhino.Node node55 = node24.copyInformationFrom(node38);
        boolean boolean56 = node24.isTrue();
        boolean boolean57 = node24.isCase();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(52, node24);
        java.lang.String str59 = node58.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo60.getType();
        boolean boolean63 = jSDocInfo60.isImplicitCast();
        boolean boolean64 = jSDocInfo60.isInterface();
        boolean boolean65 = jSDocInfo60.hasFileOverview();
        node58.setJSDocInfo(jSDocInfo60);
        boolean boolean67 = node58.isBreak();
        boolean boolean68 = node58.isNot();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(50);
        node70.setLength((int) ' ');
        boolean boolean73 = node70.isTrue();
        boolean boolean74 = node70.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node75 = node58.useSourceInfoIfMissingFrom(node70);
        int int76 = node18.getIndexOfChild(node58);
        com.google.javascript.rhino.Node node77 = node58.getLastChild();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node58, "{1251669065}");
        com.google.javascript.rhino.Node node80 = jSTypeExpression79.getRoot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "INSTANCEOF" + "'", str59, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("java.io.IOException: OR hi!\n    OR hi!\n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection13 = jSDocInfo0.getMarkers();
        int int14 = jSDocInfo0.getParameterCount();
        boolean boolean15 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(markerCollection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList51 = com.google.common.collect.ImmutableList.of(strSet17, strSet31, strSet45);
        boolean boolean52 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object obj53 = null;
        boolean boolean54 = strSet45.contains(obj53);
        int int55 = strSet45.size();
        boolean boolean57 = strSet45.remove((java.lang.Object) "{748102973}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSetList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = nodeCollection11.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList53.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        int int64 = jSDocInfo62.getParameterCount();
        jSDocInfo62.setLicense("None");
        boolean boolean67 = jSDocInfo62.hasFileOverview();
        boolean boolean68 = jSDocInfo62.isExport();
        java.lang.String str69 = jSDocInfo62.getDeprecationReason();
        boolean boolean70 = nodeIterableList53.equals((java.lang.Object) jSDocInfo62);
        boolean boolean71 = jSDocInfo62.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection72 = jSDocInfo62.getTypeNodes();
        java.lang.String str73 = jSDocInfo62.getDeprecationReason();
        com.google.javascript.rhino.Node node74 = jSDocInfo62.getAssociatedNode();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeCollection72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.lang.String str9 = jSDocInfo0.getLicense();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        jSDocInfoBuilder1.markName("hi!", (int) (byte) -1, 29);
        boolean boolean71 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean72 = jSDocInfoBuilder1.recordExterns();
        boolean boolean73 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordExpose();
        boolean boolean22 = jSDocInfoBuilder15.recordIdGenerator();
        boolean boolean23 = jSDocInfoBuilder15.isConstructorRecorded();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean17 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean20 = jSDocInfoBuilder15.recordVisibility(visibility19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean39 = jSDocInfoBuilder36.recordDescription("hi!");
        boolean boolean40 = jSDocInfoBuilder36.recordHiddenness();
        boolean boolean41 = strSet32.remove((java.lang.Object) jSDocInfoBuilder36);
        boolean boolean42 = jSDocInfoBuilder36.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder44.addAuthor("");
        boolean boolean47 = jSDocInfoBuilder44.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder44.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        jSDocInfoBuilder44.markName("", staticSourceFile52, 29, 50);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node58.isDebugger();
        boolean boolean65 = node58.isSyntheticBlock();
        boolean boolean66 = node58.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = new com.google.javascript.rhino.JSTypeExpression(node58, "Unknown class name");
        boolean boolean70 = jSDocInfoBuilder44.recordThrowDescription(jSTypeExpression68, "?");
        boolean boolean71 = jSDocInfoBuilder36.recordThrowType(jSTypeExpression68);
        boolean boolean72 = jSDocInfoBuilder15.recordThisType(jSTypeExpression68);
        boolean boolean73 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression68);
        boolean boolean75 = jSTypeExpression68.equals((java.lang.Object) 100.0f);
        com.google.javascript.rhino.Node node76 = jSTypeExpression68.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("OR hi!");
        boolean boolean13 = node12.isInc();
        jSDocInfo0.setAssociatedNode(node12);
        node12.setVarArgs(false);
        boolean boolean17 = node12.isQuotedString();
        node12.setCharno(35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.recordExterns();
        boolean boolean6 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean7 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean8 = jSDocInfoBuilder1.isConstructorRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("{971330823}");
        boolean boolean12 = jSDocInfoBuilder1.recordVersion("java.io.IOException: function (this:me, {988702852}): me");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = jSDocInfo3.isNoTypeCheck();
        boolean boolean7 = jSDocInfo3.isHidden();
        boolean boolean8 = jSDocInfo3.isNoSideEffects();
        node2.setJSDocInfo(jSDocInfo3);
        boolean boolean10 = jSDocInfo3.isDeprecated();
        java.lang.String str11 = jSDocInfo3.getMeaning();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("INSTANCEOF");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression72);
        boolean boolean79 = jSTypeExpression78.isVarArgs();
        boolean boolean80 = jSDocInfoBuilder1.recordParameter("OR hi!", jSTypeExpression78);
        boolean boolean81 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean83 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi!\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi!\n    OR hi!\n");
        boolean boolean84 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.addReference("");
        boolean boolean6 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("{492705591}", staticSourceFile9, 4, 44);
        boolean boolean14 = jSDocInfoBuilder1.recordLends("");
        boolean boolean17 = jSDocInfoBuilder1.recordParameterDescription("{1332928501}", "{1761870988}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.hasFileOverview();
        boolean boolean3 = jSDocInfo1.hasModifies();
        boolean boolean5 = jSDocInfo1.hasParameter("OR hi!");
        java.lang.String str6 = jSDocInfo1.getDeprecationReason();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo1.getSuppressions();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 3);
        jSDocInfo1.setAssociatedNode(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node9.siblings();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isVoid();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isTypeOf();
        com.google.javascript.rhino.Node node26 = node14.srcrefTree(node24);
        com.google.javascript.rhino.Node node27 = node14.getLastSibling();
        boolean boolean28 = node27.isObjectLit();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node34.isNot();
        int int38 = node34.getLineno();
        boolean boolean39 = node34.isAdd();
        node34.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean42 = node34.isDec();
        com.google.javascript.rhino.Node node43 = node27.useSourceInfoFromForTree(node34);
        boolean boolean44 = node27.isInstanceOf();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(31, node9, node27, 41, (int) '4');
        node9.setIsSyntheticBlock(true);
        boolean boolean50 = node9.isCall();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node53.isDebugger();
        boolean boolean60 = node53.isVoid();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isTypeOf();
        com.google.javascript.rhino.Node node65 = node53.srcrefTree(node63);
        com.google.javascript.rhino.Node node66 = node53.getLastSibling();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node69.isDebugger();
        com.google.javascript.rhino.Node node76 = node69.getFirstChild();
        boolean boolean77 = node53.hasChild(node76);
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        boolean boolean80 = node76.isCase();
        java.lang.String str81 = node76.toString();
        boolean boolean82 = node76.isReturn();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean86 = node85.isThis();
        boolean boolean87 = node85.isDelProp();
        boolean boolean88 = node85.hasChildren();
        boolean boolean89 = node85.isOr();
        com.google.javascript.rhino.InputId inputId91 = new com.google.javascript.rhino.InputId("");
        java.lang.String str92 = inputId91.getIdName();
        java.lang.String str93 = inputId91.getIdName();
        node85.setInputId(inputId91);
        node76.setInputId(inputId91);
        java.lang.String str96 = inputId91.getIdName();
        java.lang.String str97 = inputId91.toString();
        node9.setInputId(inputId91);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR hi!" + "'", str81, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "InputId: " + "'", str97, "InputId: ");
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordParameter("OR hi! [directives: []]\n", jSTypeExpression9);
        jSDocInfoBuilder1.markName("None", 39, 46);
        boolean boolean15 = jSDocInfoBuilder1.recordExterns();
        jSDocInfoBuilder1.recordOriginalCommentString("function (this:me, {893709994}): me");
        boolean boolean18 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean36 = jSTypeRegistry28.declareType("java.io.IOException: OR hi!\n    OR hi!\n", jSType35);
        boolean boolean38 = jSTypeRegistry28.isForwardDeclaredType("OR hi! [var_args_name: 1]\n");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = nodeIterableList39.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream42 = nodeIterableList39.stream();
        java.lang.String[] strArray44 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray45 = nodeIterableList39.toArray(strArray44);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator46 = nodeIterableList39.spliterator();
        boolean boolean47 = nodeIterableList39.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        boolean boolean54 = objectType53.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        boolean boolean61 = jSTypeRegistry56.canPropertyBeDefined(jSType59, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = objectType67.toObjectType();
        boolean boolean69 = objectType68.matchesInt32Context();
        boolean boolean70 = objectType68.isStringValueType();
        boolean boolean71 = objectType68.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode74 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry73.setResolveMode(resolveMode74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry73.createObjectType(objectType76);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair78 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType68, (com.google.javascript.rhino.jstype.JSType) objectType77);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry56.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType68);
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSType79.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair81 = objectType53.getTypesUnderInequality(jSType79);
        boolean boolean82 = objectType53.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType53.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray84 = new com.google.javascript.rhino.jstype.ObjectType[] { objectType53 };
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray85 = nodeIterableList39.toArray(objectTypeArray84);
        com.google.javascript.rhino.Node node86 = jSTypeRegistry28.createParameters((com.google.javascript.rhino.jstype.JSType[]) objectTypeArray85);
        boolean boolean88 = jSTypeRegistry28.hasNamespace("Node tree inequality:\nTree1:\nNUMBER 100.0\n\n\nTree2:\nIN 10\n    OR hi!\n        OR hi!\n\n\nSubtree1: NUMBER 100.0\n\n\nSubtree2: IN 10\n    OR hi!\n        OR hi!\n");
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry28.createAnonymousObjectType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(nodeIterableStream42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode74 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode74.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(functionType80);
        org.junit.Assert.assertNotNull(typePair81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(objectTypeArray84);
        org.junit.Assert.assertNotNull(objectTypeArray85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objectType89);
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean17 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean18 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean19 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean21 = jSDocInfoBuilder1.hasParameter("{1729404217}");
        boolean boolean22 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        jSDocInfoBuilder1.markName("{1180356076}", 30, 41);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("function (this:me, {1856505431}): me");
        boolean boolean29 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList28);
        jSDocInfoBuilder1.markAnnotation("{1532955530}", 1, 9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression1 = jSDocInfo0.getEnumParameterType();
        boolean boolean2 = jSDocInfo0.hasBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasParameterType("{1197029056}");
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(jSTypeExpression1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo14.getSuppressions();
        boolean boolean16 = jSDocInfo14.isNoSideEffects();
        java.lang.String str17 = jSDocInfo14.getReturnDescription();
        boolean boolean19 = jSDocInfo14.hasDescriptionForParameter("{...}");
        java.lang.String str20 = jSDocInfo14.getDescription();
        java.lang.String str21 = jSDocInfo14.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo14.getTemplateTypeNames();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList24 = visibilityEnumBuilder23.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo25.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo25.getVisibility();
        boolean boolean29 = jSDocInfo25.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo25.setVisibility(visibility30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = jSDocInfo36.getVisibility();
        boolean boolean40 = jSDocInfo36.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo36.setVisibility(visibility41);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray43 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility41 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray43);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray43);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList47 = visibilityEnumBuilder46.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean49 = jSDocInfo48.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo48.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = jSDocInfo48.getVisibility();
        boolean boolean52 = jSDocInfo48.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo48.setVisibility(visibility53);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder45.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility57);
        jSDocInfo14.setVisibility(visibility57);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder62.recordInterface();
        boolean boolean65 = jSDocInfoBuilder62.recordDescription("hi!");
        boolean boolean66 = jSDocInfoBuilder62.recordHiddenness();
        boolean boolean67 = jSDocInfoBuilder62.recordExpose();
        boolean boolean69 = jSDocInfoBuilder62.hasParameter("Not declared as a constructor");
        boolean boolean70 = jSDocInfoBuilder62.isConstructorRecorded();
        boolean boolean72 = jSDocInfoBuilder62.recordFileOverview("function (this:me, {726862509}): me");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = visibilityEnumBuilder73.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility74);
        boolean boolean76 = jSDocInfoBuilder62.recordVisibility(visibility74);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility74);
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSDocInfo" + "'", str21, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(visibilityEnumList24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(visibility28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(visibility39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray43);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder44);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertNotNull(visibilityEnumList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertNull(visibility51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder77);
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        jSDocInfoBuilder1.recordOriginalCommentString("{1197029056}");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder1.recordOverride();
        boolean boolean13 = jSDocInfoBuilder1.recordNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder1.recordType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.isExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameterType("{1050342792}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        boolean boolean13 = jSDocInfo0.isHidden();
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean7 = jSDocInfoBuilder1.recordDeprecationReason("OR hi! [var_args_name: 1]");
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        boolean boolean14 = jSDocInfoBuilder10.recordHiddenness();
        boolean boolean15 = jSDocInfoBuilder10.recordExpose();
        boolean boolean17 = jSDocInfoBuilder10.hasParameter("Not declared as a constructor");
        boolean boolean18 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean19 = jSDocInfoBuilder10.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder21.addAuthor("");
        boolean boolean24 = jSDocInfoBuilder21.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder21.recordParameter("OR hi!", jSTypeExpression26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean32 = jSDocInfoBuilder29.recordDescription("hi!");
        boolean boolean33 = jSDocInfoBuilder29.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder29.recordConstancy();
        boolean boolean37 = jSDocInfoBuilder29.recordOverride();
        boolean boolean38 = jSDocInfoBuilder29.recordNoTypeCheck();
        boolean boolean40 = jSDocInfoBuilder29.recordMeaning("{...}");
        boolean boolean41 = jSDocInfoBuilder29.isConstructorRecorded();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node45, "");
        boolean boolean48 = jSTypeExpression47.isVarArgs();
        boolean boolean49 = jSDocInfoBuilder29.recordThisType(jSTypeExpression47);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder21.recordThrowType(jSTypeExpression47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isTypeOf();
        node54.setLineno(51);
        boolean boolean58 = node54.isCase();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean61 = jSDocInfoBuilder21.recordThisType(jSTypeExpression60);
        boolean boolean62 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression60);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression60);
        boolean boolean64 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean6 = jSDocInfo0.hasParameterType("InputId: ");
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.hasParameterType("InputId: ");
        boolean boolean10 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        jSDocInfoBuilder1.recordOriginalCommentString("{1197029056}");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        boolean boolean17 = jSDocInfoBuilder13.recordHiddenness();
        boolean boolean18 = jSDocInfoBuilder13.recordExpose();
        boolean boolean19 = jSDocInfoBuilder13.recordIdGenerator();
        boolean boolean21 = jSDocInfoBuilder13.addReference("OR hi!");
        jSDocInfoBuilder13.markText("{764537935}", 38, 48, (int) (byte) 1, 42);
        boolean boolean28 = jSDocInfoBuilder13.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordReturnType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordOverride();
        jSDocInfoBuilder30.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder44.recordConstancy();
        boolean boolean52 = jSDocInfoBuilder44.recordOverride();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "None", "{298532945}", "OR hi! [directives: []]\n", "{298532945}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        boolean boolean65 = jSDocInfoBuilder44.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean66 = jSDocInfoBuilder30.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean67 = jSDocInfoBuilder13.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean68 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean69 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder1.recordVersion("{298532945}");
        boolean boolean15 = jSDocInfoBuilder1.addReference("{1275608813}");
        boolean boolean17 = jSDocInfoBuilder1.recordVersion("java.io.IOException: java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean22 = jSDocInfoBuilder20.recordVisibility(visibility21);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray29 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility17, visibility18, visibility21, visibility24, visibility27 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList30 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder13.add(visibilityEnumArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertNotNull(visibilityArray29);
        org.junit.Assert.assertNotNull(visibilityEnumList30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        boolean boolean36 = strSet27.remove((java.lang.Object) jSDocInfoBuilder31);
        boolean boolean37 = jSDocInfoBuilder31.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder39.addAuthor("");
        boolean boolean42 = jSDocInfoBuilder39.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = null;
        boolean boolean44 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression43);
        boolean boolean45 = jSDocInfoBuilder39.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        jSDocInfoBuilder39.markName("", staticSourceFile47, 29, 50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node53.isDebugger();
        boolean boolean60 = node53.isSyntheticBlock();
        boolean boolean61 = node53.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node53, "Unknown class name");
        boolean boolean65 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression63, "?");
        boolean boolean66 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression63);
        boolean boolean67 = jSDocInfoBuilder12.recordEnumParameterType(jSTypeExpression63);
        boolean boolean68 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression63);
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        boolean boolean75 = jSTypeRegistry70.canPropertyBeDefined(jSType73, "Unknown class name");
        jSTypeRegistry70.identifyNonNullableName("Unknown class name");
        jSTypeRegistry70.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter79);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode81 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry80.setResolveMode(resolveMode81);
        com.google.javascript.rhino.jstype.ObjectType objectType83 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType84 = jSTypeRegistry80.createObjectType(objectType83);
        com.google.javascript.rhino.jstype.ObjectType objectType85 = objectType84.toObjectType();
        boolean boolean86 = objectType85.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope87 = objectType85.getParentScope();
        boolean boolean89 = jSTypeRegistry70.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType85, "INSTANCEOF");
        boolean boolean90 = jSTypeExpression63.equals((java.lang.Object) objectType85);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot92 = objectType85.getOwnSlot("{225764511}");
        boolean boolean93 = objectType85.isFunctionPrototypeType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + resolveMode81 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode81.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor20 = nodeIterableList19.iterator();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.recordInterface();
        boolean boolean39 = jSDocInfoBuilder36.recordDescription("hi!");
        boolean boolean40 = jSDocInfoBuilder36.recordHiddenness();
        boolean boolean41 = strSet32.remove((java.lang.Object) jSDocInfoBuilder36);
        boolean boolean42 = jSDocInfoBuilder36.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = null;
        boolean boolean44 = jSDocInfoBuilder36.recordExtendedInterface(jSTypeExpression43);
        boolean boolean46 = jSDocInfoBuilder36.recordFileOverview("[]");
        boolean boolean47 = jSDocInfoBuilder36.isJavaDispatch();
        int int48 = nodeIterableList19.indexOf((java.lang.Object) boolean47);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList19.listIterator();
        java.lang.Object[] objArray50 = nodeIterableList19.toArray();
        int int51 = nodeIterableList19.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.isImplicitCast();
        int int54 = jSDocInfo52.getParameterCount();
        java.lang.String str55 = jSDocInfo52.toString();
        int int56 = nodeIterableList19.lastIndexOf((java.lang.Object) str55);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream57 = nodeIterableList19.stream();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableItor20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JSDocInfo" + "'", str55, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream57);
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.recordInterface();
        boolean boolean4 = jSDocInfoBuilder2.isInterfaceRecorded();
        boolean boolean5 = jSDocInfoBuilder2.recordIdGenerator();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isGetElem();
        jSDocInfoBuilder2.markTypeNode(node8, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(12, node8, (int) '4', 0);
        com.google.javascript.rhino.Node node19 = node8.getParent();
        node8.putIntProp(39, 40960);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator45 = nodeIterableList0.spliterator();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean50 = node49.isOptionalArg();
        int int51 = node49.getSourceOffset();
        boolean boolean52 = node49.isCatch();
        boolean boolean53 = node49.isTypeOf();
        boolean boolean54 = node49.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node49.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator56 = nodeIterable55.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = nodeIterableList0.add(nodeIterable55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(nodeSpliterator56);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        boolean boolean9 = node8.isVar();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isInstanceOf();
        boolean boolean16 = node13.isThrow();
        node13.setCharno(54);
        boolean boolean19 = node13.isExprResult();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isVoid();
        boolean boolean30 = node22.hasOneChild();
        com.google.javascript.rhino.InputId inputId31 = node22.getInputId();
        boolean boolean32 = node22.hasChildren();
        int int33 = node22.getLength();
        java.lang.String str34 = node22.getString();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, node22, 100, (int) (short) 0);
        com.google.javascript.rhino.Node node38 = null;
        node8.addChildAfter(node37, node38);
        jSDocInfoBuilder1.markTypeNode(node37, 97, 38, 42, 0, false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = null;
        boolean boolean47 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        node2.addSuppression("OR hi! 0\n");
        boolean boolean15 = node2.isIn();
        java.lang.String str16 = node2.getString();
        boolean boolean17 = node2.isOnlyModifiesThisCall();
        node2.setSourceEncodedPosition(46);
        node2.setVarArgs(true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isTypeOf();
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node35);
        com.google.javascript.rhino.Node node38 = node25.getLastSibling();
        boolean boolean39 = node38.isTrue();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node42.siblings();
        node42.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        boolean boolean55 = node53.isDelProp();
        boolean boolean56 = node53.hasChildren();
        boolean boolean57 = node53.isOr();
        java.lang.String str58 = node42.checkTreeEquals(node53);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node64.isNot();
        int int68 = node64.getLineno();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node74.isNot();
        int int78 = node74.getLineno();
        com.google.javascript.rhino.Node node79 = node64.srcref(node74);
        boolean boolean80 = node79.isDelProp();
        com.google.javascript.rhino.Node node81 = node79.getLastSibling();
        boolean boolean82 = node79.isOptionalArg();
        boolean boolean83 = node42.isEquivalentTo(node79);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(3, node38, node42);
        boolean boolean85 = node38.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node38);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str58, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getSuppressions();
        boolean boolean62 = jSDocInfo60.isNoSideEffects();
        boolean boolean63 = jSDocInfo60.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getReturnType();
        boolean boolean65 = jSDocInfo60.isNoAlias();
        boolean boolean66 = nodeIterableList53.contains((java.lang.Object) jSDocInfo60);
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition68 = marker67.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker67.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition70 = marker67.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker71 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition72 = marker71.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition73 = marker71.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker74.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker74.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker74.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition79 = marker78.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition80 = marker78.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition81 = marker78.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition84 = marker83.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition85 = marker83.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition86 = marker83.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker87 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition88 = marker87.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition89 = marker87.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition90 = marker87.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList91 = com.google.common.collect.ImmutableList.of(marker67, marker71, marker74, marker78, marker82, marker83, marker87);
        int int92 = nodeIterableList53.indexOf((java.lang.Object) marker83);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition93 = marker83.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition94 = marker83.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition95 = marker83.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition96 = marker83.getAnnotation();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(nodeSourcePosition68);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(nodeSourcePosition70);
        org.junit.Assert.assertNull(nodeSourcePosition72);
        org.junit.Assert.assertNull(nodeSourcePosition73);
        org.junit.Assert.assertNull(stringPosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(nodeSourcePosition79);
        org.junit.Assert.assertNull(nodeSourcePosition80);
        org.junit.Assert.assertNull(nodeSourcePosition81);
        org.junit.Assert.assertNull(nodeSourcePosition84);
        org.junit.Assert.assertNull(nodeSourcePosition85);
        org.junit.Assert.assertNull(nodeSourcePosition86);
        org.junit.Assert.assertNull(nodeSourcePosition88);
        org.junit.Assert.assertNull(nodeSourcePosition89);
        org.junit.Assert.assertNull(stringPosition90);
        org.junit.Assert.assertNotNull(markerList91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNull(nodeSourcePosition93);
        org.junit.Assert.assertNull(typePosition94);
        org.junit.Assert.assertNull(typePosition95);
        org.junit.Assert.assertNull(stringPosition96);
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder1.markTypeNode(node12, 29, 48, 46, (int) (byte) 100, true);
        node12.putIntProp((int) (short) 100, 8);
        java.lang.Object obj23 = node12.getProp(54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry1.identifyNonNullableName("{...}");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        boolean boolean17 = jSTypeRegistry12.canPropertyBeDefined(jSType15, "Unknown class name");
        jSTypeRegistry12.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry12.createAnonymousObjectType();
        objectType20.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType23 = objectType20.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean25 = jSTypeRegistry1.canPropertyBeDefined(jSType23, "OR []");
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("Named type with empty name component");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable31 = jSTypeRegistry27.getEachReferenceTypeWithProperty("OR hi! [directives: []]");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        boolean boolean50 = strSet43.remove((java.lang.Object) boolean49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getSuppressions();
        boolean boolean53 = jSDocInfo51.isNoSideEffects();
        boolean boolean54 = jSDocInfo51.isConsistentIdGenerator();
        boolean boolean55 = strSet43.contains((java.lang.Object) jSDocInfo51);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.JSType jSType60 = null;
        boolean boolean62 = jSTypeRegistry57.canPropertyBeDefined(jSType60, "Unknown class name");
        jSTypeRegistry57.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry66.createObjectType(objectType69);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry57.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType70, "");
        com.google.javascript.rhino.jstype.UnionType unionType73 = objectType70.toMaybeUnionType();
        boolean boolean74 = objectType70.matchesObjectContext();
        boolean boolean75 = objectType70.hasAnyTemplate();
        boolean boolean76 = strSet43.equals((java.lang.Object) objectType70);
        boolean boolean77 = objectType70.isString();
        boolean boolean78 = objectType70.isEnumType();
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType70, "function (this:me, {726862509}): me");
        boolean boolean82 = jSTypeRegistry1.canPropertyBeDefined(jSType80, "{492705591}");
        jSTypeRegistry1.clearNamedTypes();
        boolean boolean85 = jSTypeRegistry1.isForwardDeclaredType("{1560389945}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(unionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        boolean boolean13 = node5.isOptionalArg();
        java.util.Set<java.lang.String> strSet14 = node5.getDirectives();
        boolean boolean15 = node5.isInstanceOf();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) 'a', nodeArray19, 8202, (int) (short) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(4098, nodeArray19);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(0, nodeArray19, 4098, 0);
        node5.addChildToBack(node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        node31.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node45.isNot();
        int int49 = node45.getLineno();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        boolean boolean58 = node55.isNot();
        int int59 = node55.getLineno();
        com.google.javascript.rhino.Node node60 = node45.srcref(node55);
        int int61 = node45.getCharno();
        com.google.javascript.rhino.Node node62 = node31.copyInformationFrom(node45);
        boolean boolean63 = node31.isTrue();
        boolean boolean64 = node31.isCase();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(52, node31);
        java.lang.String str66 = node65.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo67.getType();
        boolean boolean70 = jSDocInfo67.isImplicitCast();
        boolean boolean71 = jSDocInfo67.isInterface();
        boolean boolean72 = jSDocInfo67.hasFileOverview();
        node65.setJSDocInfo(jSDocInfo67);
        com.google.javascript.rhino.Node node74 = node65.cloneTree();
        com.google.javascript.rhino.Node node75 = node5.useSourceInfoFromForTree(node65);
        node75.setQuotedString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "INSTANCEOF" + "'", str66, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isImplicitCast();
        boolean boolean10 = jSDocInfo8.isNoCompile();
        boolean boolean11 = jSDocInfo8.isJavaDispatch();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder12 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder12.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray22 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility20 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.recordInterface();
        boolean boolean60 = jSDocInfoBuilder57.recordDescription("hi!");
        boolean boolean61 = jSDocInfoBuilder57.recordHiddenness();
        boolean boolean62 = jSDocInfoBuilder57.recordExpose();
        boolean boolean63 = jSDocInfoBuilder57.recordIdGenerator();
        boolean boolean65 = jSDocInfoBuilder57.addReference("OR hi!");
        boolean boolean67 = jSDocInfoBuilder57.recordLends("{424067794}");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean69 = jSDocInfoBuilder57.recordVisibility(visibility68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility68);
        jSDocInfo8.setVisibility(visibility68);
        jSDocInfo0.setVisibility(visibility68);
        java.lang.String str74 = jSDocInfo0.getDescriptionForParameter("InputId: OR hi! [directives: []]");
        boolean boolean75 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo0.getSuppressions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = strSet76.add("DELPROP");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray22);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("java.io.IOException: OR hi!\n    OR hi!\n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection13 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("");
        java.util.Set<java.lang.String> strSet16 = jSDocInfo0.getSuppressions();
        boolean boolean18 = jSDocInfo0.hasParameterType("IN [jsdoc_info: JSDocInfo] [source_file: OR hi!\n    OR hi!\n]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(markerCollection13);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection44 = jSDocInfo14.getMarkers();
        boolean boolean45 = jSDocInfo14.isExport();
        int int46 = jSDocInfo14.getImplementedInterfaceCount();
        java.lang.String str47 = jSDocInfo14.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNotNull(markerCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        jSDocInfo0.setLicense("");
        java.lang.String str37 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDec();
        boolean boolean47 = node40.isBlock();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node50.siblings();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet59);
        int int62 = strSet59.size();
        strSet59.clear();
        node40.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        boolean boolean71 = jSTypeRegistry66.canPropertyBeDefined(jSType69, "Unknown class name");
        jSTypeRegistry66.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry66.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType79, "");
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType79.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType79.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType79.getRestrictedTypeGivenToBooleanOutcome(false);
        node40.setJSType((com.google.javascript.rhino.jstype.JSType) objectType79);
        node40.putBooleanProp((int) (short) 10, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder91 = node40.getJsDocBuilderForNode();
        jSDocInfo0.setAssociatedNode(node40);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder91);
        org.junit.Assert.assertNull(visibility93);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        strSet4.clear();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray15 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition9, typePosition10, typePosition11, typePosition12, typePosition13, typePosition14 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray16 = nodeIterableList6.toArray(typePositionArray15);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList6.iterator();
        java.lang.Object[] objArray18 = nodeIterableList6.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream19 = nodeIterableList6.parallelStream();
        java.lang.Object[] objArray20 = nodeIterableList6.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.isImplicitCast();
        boolean boolean23 = jSDocInfo21.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo21.getBaseType();
        boolean boolean25 = nodeIterableList6.contains((java.lang.Object) jSDocInfo21);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordInterface();
        boolean boolean30 = jSDocInfoBuilder27.recordDescription("hi!");
        boolean boolean31 = jSDocInfoBuilder27.recordHiddenness();
        boolean boolean32 = jSDocInfoBuilder27.recordExpose();
        boolean boolean33 = jSDocInfoBuilder27.recordIdGenerator();
        boolean boolean35 = jSDocInfoBuilder27.addReference("OR hi!");
        boolean boolean36 = nodeIterableList6.equals((java.lang.Object) "OR hi!");
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList6.listIterator();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        boolean boolean48 = node43.isAdd();
        com.google.javascript.rhino.Node node49 = node43.cloneTree();
        boolean boolean50 = node43.isWith();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node53.siblings();
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet62);
        int int65 = strSet62.size();
        strSet62.clear();
        node43.setDirectives((java.util.Set<java.lang.String>) strSet62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        boolean boolean70 = jSDocInfo68.hasModifies();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo68.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = com.google.common.collect.ImmutableList.of();
        boolean boolean73 = strSet71.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor74 = nodeIterableList72.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor75 = nodeIterableList72.iterator();
        java.lang.Object[] objArray76 = nodeIterableList72.toArray();
        boolean boolean77 = strSet62.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor78 = nodeIterableList72.iterator();
        boolean boolean79 = nodeIterableList6.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        boolean boolean80 = strSet4.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList6);
        boolean boolean81 = nodeIterableList6.isEmpty();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(typePositionArray15);
        org.junit.Assert.assertNotNull(typePositionArray16);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor74);
        org.junit.Assert.assertNotNull(nodeIterableItor75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getType();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isHidden();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        boolean boolean23 = jSDocInfoBuilder18.recordExpose();
        boolean boolean24 = jSDocInfoBuilder18.recordConstructor();
        boolean boolean25 = nodeIterableList14.contains((java.lang.Object) jSDocInfoBuilder18);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = nodeIterableList14.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor27 = nodeIterableList26.iterator();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator28 = nodeIterableList26.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList26.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry32.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean41 = node36.isEquivalentToTyped(node40);
        com.google.javascript.rhino.Node node42 = node36.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node36.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        node46.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        node60.setOptionalArg(false);
        com.google.javascript.rhino.Node node65 = node46.srcref(node60);
        com.google.javascript.rhino.Node node66 = node60.detachFromParent();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(50, node36, node60, 37, 43);
        boolean boolean70 = nodeIterableList26.contains((java.lang.Object) 37);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(nodeIterableItor27);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator28);
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean10 = jSDocInfo0.isDefine();
        boolean boolean11 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        java.lang.String[] strArray16 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList51 = com.google.common.collect.ImmutableList.of(strSet17, strSet31, strSet45);
        boolean boolean52 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object obj53 = null;
        boolean boolean54 = strSet45.contains(obj53);
        int int55 = strSet45.size();
        boolean boolean57 = strSet45.add("{1221148348}");
        boolean boolean58 = strSet45.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        int int62 = nodeIterableList59.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean64 = nodeIterableList59.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList65.reverse();
        boolean boolean67 = nodeIterableList59.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = nodeIterableList59.asList();
        boolean boolean69 = strSet45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList59);
        strSet45.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSetList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node28.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node44 = node5.copyInformationFrom(node43);
        boolean boolean45 = node44.isGetterDef();
        boolean boolean46 = node44.isNE();
        boolean boolean47 = node44.isSwitch();
        java.util.Set<java.lang.String> strSet48 = node44.getDirectives();
        node44.addSuppression("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi!\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi!\n");
        boolean boolean51 = node44.isTypeOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("hi!", "JSDocInfo");
        boolean boolean14 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean17 = jSDocInfoBuilder1.recordParameterDescription("OR hi! [source_file: {298532945}]", "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean18 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean19 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = jSDocInfoBuilder22.recordExpose();
        boolean boolean28 = jSDocInfoBuilder22.recordNoCompile();
        boolean boolean29 = jSDocInfoBuilder22.isPopulatedWithFileOverview();
        boolean boolean30 = jSDocInfoBuilder22.isPopulated();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        node34.putBooleanProp(0, false);
        node34.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean51 = node34.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = node34.getStaticSourceFile();
        boolean boolean53 = staticSourceFile52.isExtern();
        int int55 = staticSourceFile52.getLineOffset(16);
        jSDocInfoBuilder22.markName("None", staticSourceFile52, (int) (byte) 1, 43);
        int int60 = staticSourceFile52.getColumnOfOffset(4);
        java.lang.String str61 = staticSourceFile52.getName();
        int int63 = staticSourceFile52.getLineOfOffset(32);
        java.lang.String str64 = staticSourceFile52.getName();
        java.lang.String str65 = staticSourceFile52.getName();
        jSDocInfoBuilder1.markName("{1647763103}", staticSourceFile52, 31, 97);
        boolean boolean69 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean70 = jSDocInfoBuilder1.isPopulated();
        boolean boolean72 = jSDocInfoBuilder1.recordReturnDescription("{2036603893}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(staticSourceFile52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2147483648) + "'", int55 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str61, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str64, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str65, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordImplicitCast();
        boolean boolean31 = jSDocInfoBuilder26.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder26.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression37);
        jSDocInfoBuilder36.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder58.recordTypedef(jSTypeExpression64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        boolean boolean71 = jSDocInfoBuilder67.recordHiddenness();
        boolean boolean72 = jSDocInfoBuilder67.recordExpose();
        boolean boolean73 = jSDocInfoBuilder67.recordConstructor();
        boolean boolean75 = jSDocInfoBuilder67.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder77.recordThisType(jSTypeExpression83);
        boolean boolean85 = jSDocInfoBuilder77.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList86 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder8, jSDocInfoBuilder16, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder58, jSDocInfoBuilder67, jSDocInfoBuilder77);
        boolean boolean88 = jSDocInfoBuilder58.recordBlockDescription("InputId: ");
        boolean boolean89 = jSDocInfoBuilder58.recordConstructor();
        boolean boolean91 = jSDocInfoBuilder58.hasParameter("INSTANCEOF");
        boolean boolean92 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList0.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor94 = nodeIterableList93.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor96 = nodeIterableList93.listIterator(96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (96) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeIterableList93);
        org.junit.Assert.assertNotNull(nodeIterableItor94);
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("function (this:me, {190244343}): me");
        boolean boolean14 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        boolean boolean6 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.Object obj13 = node11.getProp((int) (byte) 0);
        int int14 = node11.getChildCount();
        boolean boolean15 = node11.isThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.isImplicitCast();
        int int18 = jSDocInfo16.getParameterCount();
        node11.setJSDocInfo(jSDocInfo16);
        jSDocInfo16.setLicense("{941263233}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("hi!", "JSDocInfo");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile15, 0, (int) (byte) 1);
        boolean boolean20 = jSDocInfoBuilder1.recordBlockDescription("{1359454508}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.addAuthor("");
        boolean boolean25 = jSDocInfoBuilder22.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder22.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder22.markName("", staticSourceFile30, 29, 50);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isSyntheticBlock();
        boolean boolean44 = node36.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node36, "Unknown class name");
        boolean boolean48 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression46, "?");
        boolean boolean50 = jSTypeExpression46.equals((java.lang.Object) "Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo51.getType();
        boolean boolean54 = jSDocInfo51.isImplicitCast();
        boolean boolean55 = jSDocInfo51.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo51.getBaseType();
        boolean boolean57 = jSTypeExpression46.equals((java.lang.Object) jSTypeExpression56);
        boolean boolean58 = jSDocInfoBuilder1.recordType(jSTypeExpression46);
        boolean boolean59 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean61 = jSDocInfoBuilder1.recordDeprecationReason("{2027824777}");
        jSDocInfoBuilder1.markAnnotation("{338588760}", 0, 32);
        boolean boolean66 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getParameterType("");
        java.lang.String str28 = jSDocInfo19.getDescriptionForParameter("PARAM_LIST");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo19.getEnumParameterType();
        boolean boolean30 = jSDocInfo19.isConstructor();
        java.lang.String str31 = jSDocInfo19.getLicense();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getStartLine();
        int int4 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node5 = typePosition0.getItem();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry7.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean16 = node11.isEquivalentToTyped(node15);
        boolean boolean17 = node15.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getType();
        boolean boolean22 = jSDocInfo19.isImplicitCast();
        boolean boolean23 = jSDocInfo19.isExport();
        java.lang.String str24 = jSDocInfo19.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getType();
        boolean boolean26 = jSDocInfo19.isDeprecated();
        node15.putProp(32, (java.lang.Object) jSDocInfo19);
        typePosition0.setItem(node15);
        boolean boolean29 = node15.isTypeOf();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JSDocInfo" + "'", str24, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder1.recordMeaning("{...}");
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        com.google.javascript.rhino.Node node22 = node16.cloneNode();
        boolean boolean23 = node16.isDec();
        int int24 = node16.getLength();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = new com.google.javascript.rhino.JSTypeExpression(node16, "OR hi!\n");
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression26, "{856954291}");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("OR hi!", 1, 2);
        boolean boolean33 = jSTypeExpression26.equals((java.lang.Object) node32);
        boolean boolean34 = jSTypeExpression26.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isAnd();
        boolean boolean10 = node5.isDo();
        boolean boolean11 = node5.isTrue();
        boolean boolean12 = node5.isLabelName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node22 = node15.getFirstChild();
        com.google.javascript.rhino.Node node23 = node22.removeFirstChild();
        boolean boolean24 = node22.isVarArgs();
        int int25 = node22.getCharno();
        boolean boolean26 = node22.isUnscopedQualifiedName();
        boolean boolean27 = node22.isVoid();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder43.recordExtendedInterface(jSTypeExpression50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node57.isAdd();
        boolean boolean61 = node57.isExprResult();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = jSDocInfoBuilder43.build(node57);
        boolean boolean63 = node57.hasOneChild();
        boolean boolean64 = node57.isEmpty();
        com.google.javascript.rhino.Node node65 = node22.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node66 = node5.srcrefTree(node57);
        node57.setString("");
        com.google.javascript.rhino.Node node69 = node57.cloneNode();
        boolean boolean70 = node57.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo37.getVisibility();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo37.getTemplateTypeNames();
        java.lang.String str46 = jSDocInfo37.getBlockDescription();
        boolean boolean47 = jSDocInfo37.isNoSideEffects();
        boolean boolean48 = jSDocInfo37.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        com.google.javascript.rhino.jstype.UnionType unionType41 = objectType38.toMaybeUnionType();
        boolean boolean42 = objectType38.matchesObjectContext();
        boolean boolean43 = objectType38.hasAnyTemplate();
        boolean boolean44 = strSet11.equals((java.lang.Object) objectType38);
        boolean boolean45 = objectType38.isString();
        boolean boolean46 = objectType38.isEnumType();
        boolean boolean47 = objectType38.matchesUint32Context();
        objectType38.clearResolved();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(unionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.hasOneChild();
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean12 = node2.isVoid();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isExterns();
        boolean boolean30 = jSDocInfo28.hasReturnType();
        boolean boolean31 = jSDocInfo28.isOverride();
        jSDocInfo28.setLicense("hi!");
        boolean boolean34 = strSet24.contains((java.lang.Object) jSDocInfo28);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair37 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType35, jSType36);
        boolean boolean38 = strSet24.equals((java.lang.Object) jSType36);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node40 = node2.getNext();
        boolean boolean41 = node2.isInc();
        node2.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        boolean boolean24 = node22.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        boolean boolean27 = jSDocInfo25.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getImplementedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        node22.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node51 = node36.srcref(node46);
        int int52 = node36.getCharno();
        boolean boolean53 = node36.isQuotedString();
        boolean boolean54 = node36.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        int int57 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet69);
        node60.putBooleanProp(0, false);
        node60.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean77 = node60.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node60.getStaticSourceFile();
        int int80 = staticSourceFile78.getLineOffset(40);
        java.lang.String str81 = staticSourceFile78.getName();
        int int83 = staticSourceFile78.getColumnOfOffset((int) '#');
        node36.setStaticSourceFile(staticSourceFile78);
        node22.setStaticSourceFile(staticSourceFile78);
        boolean boolean86 = staticSourceFile78.isExtern();
        java.lang.String str87 = staticSourceFile78.getName();
        boolean boolean88 = staticSourceFile78.isExtern();
        java.lang.String str89 = staticSourceFile78.getName();
        int int91 = staticSourceFile78.getColumnOfOffset(83);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str81, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str87, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str89, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        java.lang.Object[] objArray8 = strSet6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        int int12 = nodeIterableList9.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean14 = nodeIterableList9.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = nodeIterableList15.reverse();
        boolean boolean17 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList15);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList15.iterator();
        boolean boolean19 = strSet6.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList15);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor31 = nodeIterableList20.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList20.listIterator();
        java.lang.Object[] objArray33 = nodeIterableList20.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean38 = jSDocInfoBuilder35.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression39);
        boolean boolean42 = jSDocInfoBuilder35.recordMeaning("hi!");
        boolean boolean44 = jSDocInfoBuilder35.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean45 = nodeIterableList20.equals((java.lang.Object) "OR hi!\n    OR hi!\n");
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator46 = nodeIterableList20.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = nodeIterableList15.addAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(nodeIterableItor31);
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator46);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        node26.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node26.getLastChild();
        boolean boolean36 = node26.isCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        node39.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node48 = node39.getLastChild();
        boolean boolean49 = node39.isCall();
        com.google.javascript.rhino.Node node50 = node26.copyInformationFrom(node39);
        boolean boolean51 = node26.isVoid();
        node22.addChildrenToFront(node26);
        boolean boolean53 = node22.isSetterDef();
        int int54 = node22.getCharno();
        boolean boolean55 = node22.isCall();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isAdd();
        boolean boolean65 = node61.isExprResult();
        boolean boolean66 = node61.isDec();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        boolean boolean75 = node69.isDebugger();
        boolean boolean76 = node69.isVoid();
        int int78 = node69.getIntProp((int) (short) 1);
        node69.addSuppression("{1480997056}");
        com.google.javascript.rhino.Node node81 = node69.getLastChild();
        com.google.javascript.rhino.Node node82 = node61.useSourceInfoIfMissingFrom(node69);
        com.google.javascript.rhino.Node node83 = node69.removeFirstChild();
        com.google.javascript.rhino.Node node84 = node22.clonePropsFrom(node69);
        boolean boolean85 = node69.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray13 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility11 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray13);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo18.getVisibility();
        boolean boolean22 = jSDocInfo18.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo18.setVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray25 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility23 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList30 = visibilityEnumBuilder29.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection31 = visibilityEnumBuilder29.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean35 = jSDocInfoBuilder33.recordVisibility(visibility34);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder36 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility34);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean42 = jSDocInfoBuilder40.recordVisibility(visibility41);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray49 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37, visibility38, visibility41, visibility44, visibility47 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList50 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList55 = visibilityEnumBuilder54.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList57 = visibilityEnumBuilder56.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo61.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = jSDocInfo61.getVisibility();
        boolean boolean65 = jSDocInfo61.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo61.setVisibility(visibility66);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray68 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility66 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder70.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo73.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = jSDocInfo73.getVisibility();
        boolean boolean77 = jSDocInfo73.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo73.setVisibility(visibility78);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray80 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility78 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray80);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray80);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList83 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>> visibilityEnumBuilderList84 = com.google.common.collect.ImmutableList.of(visibilityEnumBuilder29, visibilityEnumBuilder54, visibilityEnumBuilder56, visibilityEnumBuilder69);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder86 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean88 = jSDocInfoBuilder86.recordVisibility(visibility87);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder89 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility87);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder91 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean92 = jSDocInfoBuilder91.recordInterface();
        boolean boolean93 = jSDocInfoBuilder91.isInterfaceRecorded();
        boolean boolean94 = jSDocInfoBuilder91.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility95 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean96 = jSDocInfoBuilder91.recordVisibility(visibility95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder97 = visibilityEnumBuilder89.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder98 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility95);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection99 = visibilityEnumBuilder98.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(visibility21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertNotNull(visibilityEnumList30);
        org.junit.Assert.assertNotNull(visibilityEnumCollection31);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder36);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertNotNull(visibilityArray49);
        org.junit.Assert.assertNotNull(visibilityEnumList50);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumList55);
        org.junit.Assert.assertNotNull(visibilityEnumList57);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNull(visibility64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray68);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertTrue("'" + visibility71 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility71.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(visibility76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray80);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertNotNull(visibilityEnumList83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilderList84);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + visibility95 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility95.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder97);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder98);
        org.junit.Assert.assertNotNull(visibilityEnumCollection99);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordImplicitCast();
        boolean boolean31 = jSDocInfoBuilder26.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder26.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression37);
        jSDocInfoBuilder36.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder58.recordTypedef(jSTypeExpression64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        boolean boolean71 = jSDocInfoBuilder67.recordHiddenness();
        boolean boolean72 = jSDocInfoBuilder67.recordExpose();
        boolean boolean73 = jSDocInfoBuilder67.recordConstructor();
        boolean boolean75 = jSDocInfoBuilder67.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder77.recordThisType(jSTypeExpression83);
        boolean boolean85 = jSDocInfoBuilder77.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList86 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder8, jSDocInfoBuilder16, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder58, jSDocInfoBuilder67, jSDocInfoBuilder77);
        boolean boolean88 = jSDocInfoBuilder58.recordBlockDescription("InputId: ");
        boolean boolean89 = jSDocInfoBuilder58.recordConstructor();
        boolean boolean91 = jSDocInfoBuilder58.hasParameter("INSTANCEOF");
        boolean boolean92 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder58);
        int int93 = nodeIterableList0.size();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator94 = nodeIterableList0.spliterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor95 = nodeIterableList0.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator94);
        org.junit.Assert.assertNotNull(nodeIterableItor95);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.Class<?> wildcardClass9 = jSDocInfo0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray13 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility11 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray13);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo18.getVisibility();
        boolean boolean22 = jSDocInfo18.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo18.setVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray25 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility23 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo28.getSuppressions();
        boolean boolean30 = jSDocInfo28.isNoSideEffects();
        boolean boolean31 = jSDocInfo28.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getReturnType();
        boolean boolean33 = jSDocInfo28.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean37 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean40 = jSDocInfoBuilder35.recordVisibility(visibility39);
        jSDocInfo28.setVisibility(visibility39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility39);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = visibilityEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility43);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility43);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordInterface();
        boolean boolean49 = jSDocInfoBuilder47.recordPreserveTry();
        boolean boolean51 = jSDocInfoBuilder47.hasParameter("OR hi! [var_args_name: 1]");
        boolean boolean52 = jSDocInfoBuilder47.recordOverride();
        boolean boolean53 = jSDocInfoBuilder47.recordPreserveTry();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo57.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = jSDocInfo57.getVisibility();
        boolean boolean61 = jSDocInfo57.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo57.setVisibility(visibility62);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray64 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility62 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray64);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder66.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean70 = jSDocInfo69.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = jSDocInfo69.getVisibility();
        boolean boolean73 = jSDocInfo69.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo69.setVisibility(visibility74);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray76 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility74 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = visibilityEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray76);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder78 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet80 = jSDocInfo79.getSuppressions();
        boolean boolean81 = jSDocInfo79.isNoSideEffects();
        boolean boolean82 = jSDocInfo79.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getReturnType();
        boolean boolean84 = jSDocInfo79.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder86 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean87 = jSDocInfoBuilder86.recordInterface();
        boolean boolean88 = jSDocInfoBuilder86.isInterfaceRecorded();
        boolean boolean89 = jSDocInfoBuilder86.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean91 = jSDocInfoBuilder86.recordVisibility(visibility90);
        jSDocInfo79.setVisibility(visibility90);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder93 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility90);
        boolean boolean94 = jSDocInfoBuilder47.recordVisibility(visibility90);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder95 = visibilityEnumBuilder45.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility90);
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(visibility21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder42);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder44);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNull(visibility60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertNull(visibility72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray76);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder77);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder78);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder95);
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        jSDocInfo0.addSuppression("OR hi! 0");
        boolean boolean12 = jSDocInfo0.isNoAlias();
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("{({347511123},{1849089634})}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        int int42 = node26.getCharno();
        boolean boolean43 = node26.isQuotedString();
        boolean boolean44 = node26.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node62.cloneTree();
        java.lang.Object obj70 = node68.getProp((int) (byte) 0);
        int int71 = node68.getChildCount();
        node56.addChildrenToFront(node68);
        boolean boolean73 = strSet11.contains((java.lang.Object) node56);
        boolean boolean74 = node56.isDefaultCase();
        java.lang.Appendable appendable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            node56.appendStringTree(appendable75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordImplicitCast();
        boolean boolean31 = jSDocInfoBuilder26.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder26.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression37);
        jSDocInfoBuilder36.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder58.recordTypedef(jSTypeExpression64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        boolean boolean71 = jSDocInfoBuilder67.recordHiddenness();
        boolean boolean72 = jSDocInfoBuilder67.recordExpose();
        boolean boolean73 = jSDocInfoBuilder67.recordConstructor();
        boolean boolean75 = jSDocInfoBuilder67.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder77.recordThisType(jSTypeExpression83);
        boolean boolean85 = jSDocInfoBuilder77.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList86 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder8, jSDocInfoBuilder16, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder58, jSDocInfoBuilder67, jSDocInfoBuilder77);
        boolean boolean88 = jSDocInfoBuilder58.recordBlockDescription("InputId: ");
        boolean boolean89 = jSDocInfoBuilder58.recordConstructor();
        boolean boolean91 = jSDocInfoBuilder58.hasParameter("INSTANCEOF");
        boolean boolean92 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList0.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList96 = nodeIterableList93.subList(13, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (13) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeIterableList93);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        com.google.javascript.rhino.jstype.UnionType unionType41 = objectType38.toMaybeUnionType();
        boolean boolean42 = objectType38.matchesObjectContext();
        boolean boolean43 = objectType38.hasAnyTemplate();
        boolean boolean44 = strSet11.equals((java.lang.Object) objectType38);
        boolean boolean45 = objectType38.isNominalConstructor();
        com.google.javascript.rhino.jstype.JSType jSType46 = objectType38.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType47 = objectType38.autoboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = objectType53.toObjectType();
        boolean boolean55 = objectType54.matchesInt32Context();
        boolean boolean56 = objectType54.isStringValueType();
        boolean boolean57 = objectType54.canBeCalled();
        boolean boolean58 = objectType54.isAllType();
        boolean boolean59 = objectType54.isStringObjectType();
        com.google.javascript.rhino.jstype.JSType jSType61 = objectType54.getRestrictedTypeGivenToBooleanOutcome(false);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot63 = objectType54.getSlot("OR hi! [var_args_name: 1]");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType64 = objectType54.toMaybeParameterizedType();
        boolean boolean65 = objectType54.isTemplateType();
        boolean boolean66 = objectType38.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType54);
        boolean boolean67 = objectType54.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(unionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSTypeStaticSlot63);
        org.junit.Assert.assertNull(parameterizedType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray4 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        boolean boolean14 = node7.isVoid();
        boolean boolean15 = node7.hasOneChild();
        com.google.javascript.rhino.InputId inputId16 = node7.getInputId();
        java.lang.String str17 = node7.toStringTree();
        com.google.javascript.rhino.Node node18 = node7.removeFirstChild();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean29 = node24.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node30 = node24.cloneNode();
        boolean boolean31 = node24.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = jSDocInfo35.getVisibility();
        boolean boolean39 = jSDocInfo35.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo35.setVisibility(visibility40);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray42 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility40 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray42);
        java.lang.Object[] objArray44 = new java.lang.Object[] { node7, node24, visibilityArray42 };
        java.lang.Object[][] objArray45 = new java.lang.Object[][] { objArray44 };
        java.lang.Object[][][] objArray46 = new java.lang.Object[][][] { objArray45 };
        java.lang.Object[][][] objArray47 = nodeIterableList0.toArray(objArray46);
        boolean boolean48 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray50 = nodeIterableList49.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = nodeIterableList49.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray58 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition52, typePosition53, typePosition54, typePosition55, typePosition56, typePosition57 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray59 = nodeIterableList49.toArray(typePositionArray58);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor60 = nodeIterableList49.iterator();
        java.lang.Object[] objArray61 = nodeIterableList49.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList49.parallelStream();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean67 = node66.isObjectLit();
        int int68 = nodeIterableList49.indexOf((java.lang.Object) boolean67);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream69 = nodeIterableList49.stream();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator70 = nodeIterableList49.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = nodeIterableList49.asList();
        boolean boolean72 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor73 = nodeIterableList0.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str17, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(visibility38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[OR hi!, PARAM_LIST, [PRIVATE]]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(typePositionArray58);
        org.junit.Assert.assertNotNull(typePositionArray59);
        org.junit.Assert.assertNotNull(nodeIterableItor60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream69);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator70);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor73);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.setLastGeneration(false);
        jSTypeRegistry28.identifyNonNullableName("OR hi!\n");
        jSTypeRegistry28.resetForTypeCheck();
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean38 = jSTypeRegistry28.shouldTolerateUndefinedValues();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isNE();
        boolean boolean9 = node7.isInstanceOf();
        boolean boolean10 = node7.isThrow();
        node7.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node7.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        boolean boolean20 = jSTypeRegistry15.canPropertyBeDefined(jSType18, "Unknown class name");
        jSTypeRegistry15.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry15.createAnonymousObjectType();
        objectType23.clearResolved();
        node7.setJSType((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.jstype.JSType jSType26 = node7.getJSType();
        boolean boolean27 = jSType26.isNominalConstructor();
        node3.setJSType(jSType26);
        java.lang.String str29 = node3.toString();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        boolean boolean39 = jSDocInfoBuilder31.recordOverride();
        boolean boolean40 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder31.recordMeaning("{...}");
        boolean boolean43 = jSDocInfoBuilder31.isConstructorRecorded();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node47, "");
        boolean boolean50 = jSTypeExpression49.isVarArgs();
        boolean boolean51 = jSDocInfoBuilder31.recordThisType(jSTypeExpression49);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression49);
        com.google.javascript.rhino.Node node53 = jSTypeExpression52.getRoot();
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING Not declared as a constructor 43 : {}" + "'", str29, "STRING Not declared as a constructor 43 : {}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression52);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean12 = jSDocInfoBuilder1.addReference("InputId: ");
        boolean boolean13 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean17 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        boolean boolean20 = jSDocInfoBuilder15.recordReturnDescription("OR hi!\n    OR hi!\n");
        boolean boolean21 = jSDocInfoBuilder15.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder23.recordExterns();
        boolean boolean27 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean50 = strSet39.add("{298532945}");
        boolean boolean51 = strSet39.isEmpty();
        java.lang.Object[] objArray52 = strSet39.toArray();
        boolean boolean53 = jSDocInfoBuilder23.recordModifies((java.util.Set<java.lang.String>) strSet39);
        boolean boolean54 = jSDocInfoBuilder15.recordSuppressions((java.util.Set<java.lang.String>) strSet39);
        boolean boolean55 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet39);
        java.util.Spliterator<java.lang.String> strSpliterator56 = strSet39.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[, {298532945}]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[, {298532945}]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strSpliterator56);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nOR hi! 0\n\n\nTree2:\nINSTANCEOF\n\n\nSubtree1: OR hi! 0\n\n\nSubtree2: INSTANCEOF\n");
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getSuppressions();
        boolean boolean15 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getParameterType("{proxy:{1615656363}}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean8 = jSDocInfoBuilder1.recordExport();
        boolean boolean10 = jSDocInfoBuilder1.hasParameter("{1529389073}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("hi!");
        boolean boolean15 = jSDocInfoBuilder12.recordNoCompile();
        boolean boolean16 = jSDocInfoBuilder12.recordHiddenness();
        boolean boolean18 = jSDocInfoBuilder12.recordMeaning("INSTANCEOF");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.addAuthor("");
        boolean boolean23 = jSDocInfoBuilder20.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder20.recordReturnType(jSTypeExpression24);
        jSDocInfoBuilder20.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean31 = jSDocInfoBuilder20.recordDeprecationReason("hi!");
        boolean boolean32 = jSDocInfoBuilder20.isPopulatedWithFileOverview();
        boolean boolean33 = jSDocInfoBuilder20.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean37 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean40 = jSDocInfoBuilder35.recordVisibility(visibility39);
        boolean boolean42 = jSDocInfoBuilder35.recordLends("OR hi!\n");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        node45.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        boolean boolean58 = node56.isDelProp();
        boolean boolean59 = node56.hasChildren();
        boolean boolean60 = node56.isOr();
        java.lang.String str61 = node45.checkTreeEquals(node56);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isAssign();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(51, node65, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable76 = node75.getAncestors();
        com.google.javascript.rhino.Node node77 = node56.copyInformationFrom(node75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node75, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node80 = jSTypeExpression79.getRoot();
        boolean boolean81 = jSDocInfoBuilder35.recordEnumParameterType(jSTypeExpression79);
        boolean boolean82 = jSDocInfoBuilder20.recordImplementedInterface(jSTypeExpression79);
        boolean boolean83 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression79);
        boolean boolean84 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression79);
        boolean boolean86 = jSDocInfoBuilder1.recordFileOverview("function (this:me, {1687799650}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str61, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ancestorIterable76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.InputId inputId11 = node2.getInputId();
        boolean boolean12 = node2.hasChildren();
        node2.addSuppression("OR hi! 0\n");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDec();
        boolean boolean24 = node17.isString();
        boolean boolean25 = node17.isArrayLit();
        com.google.javascript.rhino.Node node27 = node17.getChildAtIndex(0);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        node30.putBooleanProp(0, false);
        node30.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean47 = node30.isThrow();
        int int48 = node30.getChildCount();
        node17.addChildToBack(node30);
        boolean boolean50 = node17.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        boolean boolean59 = node56.isNot();
        int int60 = node56.getLineno();
        boolean boolean61 = node56.isAdd();
        com.google.javascript.rhino.Node node62 = node56.cloneTree();
        boolean boolean63 = node17.isEquivalentTo(node62);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        boolean boolean72 = node69.isNot();
        int int73 = node69.getLineno();
        boolean boolean74 = node69.isAdd();
        com.google.javascript.rhino.Node node75 = node69.cloneTree();
        java.lang.Object obj77 = node75.getProp((int) (byte) 0);
        int int78 = node75.getChildCount();
        com.google.javascript.rhino.Node node79 = node17.srcref(node75);
        boolean boolean80 = node17.isQuotedString();
        com.google.javascript.rhino.Node node81 = node2.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean82 = node2.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        boolean boolean34 = strSet27.remove((java.lang.Object) boolean33);
        java.util.Iterator<java.lang.String> strItor35 = strSet27.iterator();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        com.google.javascript.rhino.Node node44 = node38.cloneNode();
        boolean boolean45 = node38.hasOneChild();
        boolean boolean46 = strSet27.remove((java.lang.Object) boolean45);
        boolean boolean47 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet27);
        boolean boolean48 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean50 = jSDocInfoBuilder1.recordDescription("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean11 = jSDocInfoBuilder1.addReference("Named type with empty name component");
        boolean boolean12 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean13 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean14 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.recordOverride();
        boolean boolean25 = jSDocInfoBuilder16.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder16.recordBaseType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder16.isPopulatedWithFileOverview();
        boolean boolean29 = jSDocInfoBuilder16.recordNoSideEffects();
        jSDocInfoBuilder16.markAnnotation("", 38, 4);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean38 = jSDocInfoBuilder35.recordDescription("hi!");
        boolean boolean39 = jSDocInfoBuilder35.recordHiddenness();
        boolean boolean40 = jSDocInfoBuilder35.recordExpose();
        boolean boolean41 = jSDocInfoBuilder35.recordIdGenerator();
        boolean boolean43 = jSDocInfoBuilder35.addReference("OR hi!");
        boolean boolean45 = jSDocInfoBuilder35.recordLends("{424067794}");
        boolean boolean47 = jSDocInfoBuilder35.recordDeprecationReason("Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean52 = jSDocInfoBuilder49.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = null;
        boolean boolean54 = jSDocInfoBuilder49.recordDefineType(jSTypeExpression53);
        boolean boolean56 = jSDocInfoBuilder49.recordMeaning("hi!");
        boolean boolean58 = jSDocInfoBuilder49.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean87 = jSDocInfoBuilder49.recordThrowType(jSTypeExpression84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression84);
        boolean boolean89 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression84);
        boolean boolean90 = jSDocInfoBuilder16.recordImplementedInterface(jSTypeExpression84);
        boolean boolean91 = jSDocInfoBuilder1.recordThisType(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.hasThisType();
        boolean boolean13 = jSDocInfo0.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        java.lang.Object[] objArray2 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = nodeIterableList0.contains((java.lang.Object) jSTypeExpression5);
        boolean boolean7 = nodeIterableList0.isEmpty();
        java.lang.Object[] objArray8 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray18 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition12, typePosition13, typePosition14, typePosition15, typePosition16, typePosition17 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray19 = nodeIterableList9.toArray(typePositionArray18);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        boolean boolean31 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        boolean boolean32 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray34 = nodeIterableList33.toArray();
        boolean boolean35 = nodeIterableList33.isEmpty();
        boolean boolean36 = nodeIterableList33.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList33.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor38 = nodeIterableList33.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = nodeIterableList33.asList();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isVoid();
        boolean boolean50 = node42.isOptionalArg();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isAssign();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(51, node54, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node65 = node64.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node64.children();
        com.google.javascript.rhino.Node node67 = node42.useSourceInfoIfMissingFrom(node64);
        boolean boolean68 = node64.isHook();
        boolean boolean69 = nodeIterableList33.equals((java.lang.Object) node64);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream70 = nodeIterableList33.parallelStream();
        boolean boolean71 = nodeIterableList33.isEmpty();
        boolean boolean72 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        boolean boolean73 = nodeIterableList33.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(typePositionArray18);
        org.junit.Assert.assertNotNull(typePositionArray19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(nodeIterableItor38);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node4.isDebugger();
        boolean boolean11 = node4.isVoid();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isTypeOf();
        com.google.javascript.rhino.Node node16 = node4.srcrefTree(node14);
        com.google.javascript.rhino.Node node17 = node4.getLastSibling();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        boolean boolean26 = node20.isDebugger();
        com.google.javascript.rhino.Node node27 = node20.getFirstChild();
        boolean boolean28 = node4.hasChild(node27);
        typePosition1.setItem(node27);
        boolean boolean30 = node27.isFor();
        boolean boolean31 = node27.isComma();
        node27.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        boolean boolean37 = node27.hasChild(node36);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList38 = com.google.common.collect.ImmutableList.of(node27);
        boolean boolean39 = node27.isAdd();
        boolean boolean40 = node27.isCase();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        boolean boolean45 = node43.isDelProp();
        int int46 = node43.getChildCount();
        boolean boolean47 = node43.isComma();
        boolean boolean48 = node43.isNoSideEffectsCall();
        boolean boolean49 = node43.isSetterDef();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node55 = node54.cloneNode();
        com.google.javascript.rhino.Node node56 = node55.removeChildren();
        com.google.javascript.rhino.Node node57 = node43.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node58 = node27.srcrefTree(node43);
        node58.addSuppression("(null|{})");
        node58.setString("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(49, node58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor3 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.isExterns();
        com.google.javascript.rhino.Node node6 = jSDocInfo4.getAssociatedNode();
        boolean boolean7 = jSDocInfo4.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getType();
        boolean boolean9 = jSDocInfo4.hasReturnType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo4.getModifies();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean21 = nodeIterableList20.add(nodeIterable19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray37 = nodeIterableList36.toArray();
        boolean boolean38 = strSet33.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        java.lang.Object[] objArray39 = nodeIterableList36.toArray();
        boolean boolean40 = nodeIterableList36.isEmpty();
        boolean boolean41 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor42 = nodeIterableList20.iterator();
        boolean boolean43 = strSet10.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor44 = nodeIterableList20.iterator();
        boolean boolean45 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        int int46 = nodeIterableList20.size();
        nodeIterableList20.clear();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream48 = nodeIterableList20.parallelStream();
        java.lang.Class<?> wildcardClass49 = nodeIterableStream48.getClass();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableItor3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(nodeIterableStream48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isImplicitCast();
        boolean boolean34 = jSDocInfo30.isOverride();
        boolean boolean35 = jSDocInfo30.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo30.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo30.getType();
        boolean boolean38 = jSDocInfo30.isNoCompile();
        boolean boolean39 = nodeIterableList0.equals((java.lang.Object) jSDocInfo30);
        java.lang.String str40 = jSDocInfo30.getDeprecationReason();
        boolean boolean42 = jSDocInfo30.hasParameter("");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder1.recordExpose();
        boolean boolean13 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean11 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("{689871749}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean76 = jSDocInfoBuilder43.isDescriptionRecorded();
        boolean boolean78 = jSDocInfoBuilder43.recordFileOverview("Not declared as a type name");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDebugger();
        boolean boolean88 = node81.isSyntheticBlock();
        boolean boolean89 = node81.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node81, "Unknown class name");
        boolean boolean92 = jSTypeExpression91.isOptionalArg();
        boolean boolean93 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression91);
        boolean boolean95 = jSDocInfoBuilder43.recordFileOverview("{298532945}");
        boolean boolean97 = jSDocInfoBuilder43.recordDeprecationReason("Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n");
        boolean boolean98 = jSDocInfoBuilder43.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        boolean boolean53 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.recordOriginalCommentString("{1322965755}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node10.isNot();
        int int14 = node10.getLineno();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node25 = node10.srcref(node20);
        boolean boolean26 = node10.isString();
        boolean boolean27 = node10.isTry();
        boolean boolean28 = node10.isHook();
        boolean boolean29 = node10.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        com.google.javascript.rhino.Node node32 = jSDocInfo30.getAssociatedNode();
        boolean boolean33 = jSDocInfo30.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo30.getType();
        node10.setJSDocInfo(jSDocInfo30);
        int int37 = node10.getIntProp((int) (short) -1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isExterns();
        com.google.javascript.rhino.Node node40 = jSDocInfo38.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList41 = jSDocInfo38.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo38.getTypedefType();
        node10.setJSDocInfo(jSDocInfo38);
        com.google.javascript.rhino.Node node44 = node10.getLastSibling();
        boolean boolean45 = node44.isIn();
        jSDocInfo0.setAssociatedNode(node44);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList41);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean31 = nodeIterableList30.add(nodeIterable29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        boolean boolean48 = strSet43.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        java.lang.Object[] objArray49 = nodeIterableList46.toArray();
        boolean boolean50 = nodeIterableList46.isEmpty();
        boolean boolean51 = nodeIterableList30.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        boolean boolean52 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator55 = nodeIterableList53.spliterator();
        boolean boolean56 = nodeIterableList30.addAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean57 = nodeIterableList53.isEmpty();
        int int58 = nodeIterableList53.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        boolean boolean61 = nodeIterableList59.isEmpty();
        boolean boolean62 = nodeIterableList59.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor63 = nodeIterableList59.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor64 = nodeIterableList59.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = nodeIterableList59.asList();
        java.lang.String str66 = nodeIterableList65.toString();
        boolean boolean67 = nodeIterableList53.equals((java.lang.Object) nodeIterableList65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        boolean boolean70 = jSDocInfo68.hasModifies();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo68.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = com.google.common.collect.ImmutableList.of();
        boolean boolean73 = strSet71.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor74 = nodeIterableList72.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = nodeIterableList72.asList();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray76 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList77 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray76);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray78 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList79 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray78);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList80 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray78);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray81 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList82 = com.google.common.collect.ImmutableList.copyOf(stringPositionArray81);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition[]> stringPositionArrayList83 = com.google.common.collect.ImmutableList.of(stringPositionArray76, stringPositionArray78, stringPositionArray81);
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray84 = nodeIterableList75.toArray(stringPositionArray76);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = nodeIterableList75.reverse();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = nodeIterableList53.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor63);
        org.junit.Assert.assertNotNull(nodeIterableItor64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor74);
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertNotNull(stringPositionArray76);
        org.junit.Assert.assertNotNull(stringPositionList77);
        org.junit.Assert.assertNotNull(stringPositionArray78);
        org.junit.Assert.assertNotNull(stringPositionList79);
        org.junit.Assert.assertNotNull(stringPositionList80);
        org.junit.Assert.assertNotNull(stringPositionArray81);
        org.junit.Assert.assertNotNull(stringPositionList82);
        org.junit.Assert.assertNotNull(stringPositionArrayList83);
        org.junit.Assert.assertNotNull(stringPositionArray84);
        org.junit.Assert.assertNotNull(nodeIterableList85);
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList1 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder3.recordInterface();
        boolean boolean6 = jSDocInfoBuilder3.recordDescription("hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder3.recordEnumParameterType(jSTypeExpression54);
        com.google.javascript.rhino.Node node59 = jSTypeExpression54.getRoot();
        boolean boolean60 = nodeIterableList1.equals((java.lang.Object) jSTypeExpression54);
        com.google.javascript.rhino.Node node61 = jSTypeExpression54.getRoot();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(nodeIterableList1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.lang.String str4 = nodeIterableList0.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.hasReturnType();
        boolean boolean23 = jSDocInfo20.isOverride();
        jSDocInfo20.setLicense("hi!");
        boolean boolean26 = strSet16.contains((java.lang.Object) jSDocInfo20);
        boolean boolean27 = strSet16.isEmpty();
        boolean boolean28 = nodeIterableList0.equals((java.lang.Object) strSet16);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isNE();
        boolean boolean37 = node35.isInstanceOf();
        boolean boolean38 = node35.isThrow();
        node35.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node35.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        boolean boolean48 = jSTypeRegistry43.canPropertyBeDefined(jSType46, "Unknown class name");
        jSTypeRegistry43.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry43.createAnonymousObjectType();
        objectType51.clearResolved();
        node35.setJSType((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node56.isDebugger();
        com.google.javascript.rhino.Node node63 = node56.getFirstChild();
        boolean boolean64 = node56.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType65 = jSTypeRegistry30.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType51, node56);
        boolean boolean67 = jSTypeRegistry30.isForwardDeclaredType("{441018204}");
        boolean boolean69 = jSTypeRegistry30.hasNamespace("OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean71 = jSTypeRegistry30.hasNamespace("{424067794}");
        jSTypeRegistry30.incrementGeneration();
        boolean boolean73 = strSet16.equals((java.lang.Object) jSTypeRegistry30);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry30.createNamedType("{2096407833}", "{704243383}", 0, 2);
        jSTypeRegistry30.resetForTypeCheck();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(functionType65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSType78);
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        node5.setLineno(35);
        com.google.javascript.rhino.Node node16 = node5.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExterns();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        jSDocInfo17.setLicense("hi!");
        int int22 = jSDocInfo17.getImplementedInterfaceCount();
        boolean boolean23 = jSDocInfo17.isExport();
        boolean boolean24 = jSDocInfo17.isImplicitCast();
        node16.setJSDocInfo(jSDocInfo17);
        boolean boolean26 = node16.isScript();
        com.google.javascript.rhino.Node node27 = node16.getLastSibling();
        boolean boolean28 = node27.isBreak();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node11.wasEmptyNode();
        boolean boolean13 = node11.isLabel();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo14.getSuppressions();
        boolean boolean16 = jSDocInfo14.isNoSideEffects();
        java.lang.String str17 = jSDocInfo14.getReturnDescription();
        boolean boolean19 = jSDocInfo14.hasParameter("Not declared as a constructor");
        int int20 = jSDocInfo14.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo14.getEnumParameterType();
        node11.setJSDocInfo(jSDocInfo14);
        java.lang.String str23 = node11.getSourceFileName();
        boolean boolean24 = node11.isInstanceOf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("OR hi! 0\n");
        boolean boolean27 = node26.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = node11.removeChildAfter(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 3);
        boolean boolean3 = node2.isWith();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(43, node2, 45, 46);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        boolean boolean11 = node9.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        boolean boolean15 = jSDocInfo12.isNoTypeCheck();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo12.setAssociatedNode(node18);
        boolean boolean20 = node18.isNoSideEffectsCall();
        boolean boolean21 = node9.isEquivalentTo(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node9.siblings();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        node25.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType34 = node25.getJSType();
        com.google.javascript.rhino.Node node35 = node9.clonePropsFrom(node25);
        com.google.javascript.rhino.Node node36 = node2.useSourceInfoFromForTree(node25);
        node36.setDouble((double) 29);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean12 = jSDocInfoBuilder1.addReference("InputId: ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder14.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder14.markName("", staticSourceFile22, 29, 50);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isSyntheticBlock();
        boolean boolean36 = node28.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node28, "Unknown class name");
        boolean boolean40 = jSDocInfoBuilder14.recordThrowDescription(jSTypeExpression38, "?");
        boolean boolean42 = jSTypeExpression38.equals((java.lang.Object) "Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo43.getType();
        boolean boolean46 = jSDocInfo43.isImplicitCast();
        boolean boolean47 = jSDocInfo43.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo43.getBaseType();
        boolean boolean49 = jSTypeExpression38.equals((java.lang.Object) jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder1.recordType(jSTypeExpression38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression51);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean14 = jSDocInfo0.hasParameter("java.io.IOException");
        java.lang.String str15 = jSDocInfo0.getFileOverview();
        boolean boolean16 = jSDocInfo0.isConstructor();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = jSType16.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSType16.collapseUnion();
        boolean boolean19 = jSType16.isInterface();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable30 = jSTypeRegistry21.getTypesWithProperty("hi!");
        jSTypeRegistry21.resetForTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        boolean boolean36 = jSDocInfo32.isExport();
        java.lang.String str37 = jSDocInfo32.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo32.getType();
        java.lang.String str39 = jSDocInfo32.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = jSDocInfo32.getTemplateTypeNames();
        jSTypeRegistry21.setTemplateTypeNames((java.util.List<java.lang.String>) strList40);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry43.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType48 = objectType47.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = objectType54.toObjectType();
        boolean boolean56 = objectType47.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType54);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType63 = objectType62.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry65.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.ObjectType objectType70 = objectType69.toObjectType();
        boolean boolean71 = objectType62.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType69);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair72 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType47, (com.google.javascript.rhino.jstype.JSType) objectType62);
        boolean boolean73 = objectType47.isFunctionPrototypeType();
        boolean boolean74 = objectType47.hasDisplayName();
        boolean boolean75 = objectType47.matchesUint32Context();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = objectType47.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry21.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType47, "InputId: InputId: ", "{298532945}", 29, 38);
        boolean boolean82 = jSType81.matchesStringContext();
        boolean boolean83 = jSType81.isEnumElementType();
        jSType81.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType85 = jSType16.getLeastSupertype(jSType81);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JSDocInfo" + "'", str37, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNull(enumElementType48);
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNull(enumElementType63);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSType85);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList35 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray36 = nodeIterableList35.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = nodeIterableList35.reverse();
        boolean boolean38 = nodeIterableList35.isEmpty();
        int int39 = nodeIterableList35.size();
        boolean boolean40 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList35);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray42 = nodeIterableList41.toArray();
        int int44 = nodeIterableList41.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray45 = nodeIterableList41.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDebugger();
        boolean boolean55 = node48.isVoid();
        boolean boolean56 = node48.hasOneChild();
        com.google.javascript.rhino.InputId inputId57 = node48.getInputId();
        java.lang.String str58 = node48.toStringTree();
        com.google.javascript.rhino.Node node59 = node48.removeFirstChild();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry61.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean70 = node65.isEquivalentToTyped(node69);
        com.google.javascript.rhino.Node node71 = node65.cloneNode();
        boolean boolean72 = node65.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = visibilityEnumBuilder73.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility74);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = jSDocInfo76.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = jSDocInfo76.getVisibility();
        boolean boolean80 = jSDocInfo76.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo76.setVisibility(visibility81);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray83 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility81 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder84 = visibilityEnumBuilder75.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray83);
        java.lang.Object[] objArray85 = new java.lang.Object[] { node48, node65, visibilityArray83 };
        java.lang.Object[][] objArray86 = new java.lang.Object[][] { objArray85 };
        java.lang.Object[][][] objArray87 = new java.lang.Object[][][] { objArray86 };
        java.lang.Object[][][] objArray88 = nodeIterableList41.toArray(objArray87);
        boolean boolean89 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList41);
        java.lang.Object[] objArray90 = nodeIterableList0.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor91 = nodeIterableList0.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable92 = nodeIterableItor91.previous();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableList35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str58, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSTypeExpression78);
        org.junit.Assert.assertNull(visibility79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + visibility81 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility81.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[OR hi!, PARAM_LIST, [PRIVATE]]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor91);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        jSDocInfoBuilder1.markText("OR hi!", (int) (short) 10, 38, 30, 1);
        boolean boolean21 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.recordOriginalCommentString("InputId: InputId: Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        node5.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo25.getThisType();
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo25.getReferences();
        java.lang.String str33 = jSDocInfo25.getMeaning();
        java.lang.String str34 = jSDocInfo25.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JSDocInfo" + "'", str34, "JSDocInfo");
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor5 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList0.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream7 = nodeIterableList0.parallelStream();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        boolean boolean26 = jSDocInfo23.isOverride();
        jSDocInfo23.setLicense("hi!");
        boolean boolean29 = strSet19.contains((java.lang.Object) jSDocInfo23);
        boolean boolean30 = strSet19.isEmpty();
        int int31 = nodeIterableList0.lastIndexOf((java.lang.Object) boolean30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node35.isDebugger();
        boolean boolean42 = node35.isAssign();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(51, node35, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node46 = node45.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node45.children();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = nodeIterableList0.add(nodeIterable47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableItor5);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(nodeIterableStream7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable47);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.lang.String str81 = jSDocInfo54.getFileOverview();
        boolean boolean82 = jSDocInfo54.isNoTypeCheck();
        jSDocInfo54.setDeprecated(false);
        java.lang.String str85 = jSDocInfo54.getOriginalCommentString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection86 = jSDocInfo54.getTypeNodes();
        boolean boolean88 = jSDocInfo54.hasParameterType("{1110666919}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(nodeCollection86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet12);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        boolean boolean19 = strSet12.remove((java.lang.Object) boolean18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo20.getSuppressions();
        boolean boolean22 = jSDocInfo20.isNoSideEffects();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean24 = strSet12.contains((java.lang.Object) jSDocInfo20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node27.isDebugger();
        boolean boolean34 = node27.isVoid();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isTypeOf();
        com.google.javascript.rhino.Node node39 = node27.srcrefTree(node37);
        com.google.javascript.rhino.Node node40 = node27.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        node40.setStaticSourceFile(staticSourceFile41);
        boolean boolean43 = strSet12.remove((java.lang.Object) node40);
        boolean boolean44 = node40.isLabel();
        com.google.javascript.rhino.Node node46 = node40.getAncestor(46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.isOptionalArg();
        int int20 = node7.getIndexOfChild(node11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node7, "{441018204}");
        boolean boolean23 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression22);
        boolean boolean25 = jSDocInfoBuilder1.recordDeprecationReason("{2049025178}");
        boolean boolean26 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getVersion();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList14 = visibilityEnumBuilder13.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility20);
        jSDocInfo0.setVisibility(visibility20);
        java.util.Set<java.lang.String> strSet24 = jSDocInfo0.getModifies();
        java.lang.String str25 = jSDocInfo0.getBlockDescription();
        java.lang.String str26 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(visibilityEnumList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getBaseType();
        boolean boolean4 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("java.io.IOException: java.io.IOException: java.io.IOException: Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordParameter("OR hi!", jSTypeExpression6);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.recordOverride();
        boolean boolean18 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean20 = jSDocInfoBuilder9.recordMeaning("{...}");
        boolean boolean21 = jSDocInfoBuilder9.isConstructorRecorded();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node25, "");
        boolean boolean28 = jSTypeExpression27.isVarArgs();
        boolean boolean29 = jSDocInfoBuilder9.recordThisType(jSTypeExpression27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression27);
        boolean boolean32 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.hasReturnType();
        boolean boolean36 = jSDocInfo33.isOverride();
        java.lang.String str37 = jSDocInfo33.getLendsName();
        boolean boolean38 = jSDocInfo33.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = jSDocInfo33.getTemplateTypeNames();
        boolean boolean40 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo41.getType();
        boolean boolean44 = jSDocInfo41.isImplicitCast();
        boolean boolean45 = jSDocInfo41.isExport();
        boolean boolean46 = jSDocInfo41.isNoShadow();
        boolean boolean48 = jSDocInfo41.hasParameter("Unknown class name");
        boolean boolean49 = jSDocInfo41.hasModifies();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo41.getThisType();
        java.util.Collection<java.lang.String> strCollection52 = jSDocInfo41.getReferences();
        boolean boolean53 = jSDocInfo41.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = jSDocInfo41.getTemplateTypeNames();
        boolean boolean55 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertNull(strCollection52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList0.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = nodeIterableList0.remove((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(nodeIterableList18);
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean12 = jSDocInfo0.hasThisType();
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        boolean boolean14 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode5 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry4.setResolveMode(resolveMode5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        boolean boolean9 = jSTypeRegistry4.canPropertyBeDefined(jSType7, "Unknown class name");
        jSTypeRegistry4.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry13.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType17, "");
        boolean boolean20 = jSType19.isInstanceType();
        boolean boolean21 = jSType19.isFunctionType();
        boolean boolean22 = jSType19.matchesNumberContext();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator25 = nodeIterableList23.spliterator();
        boolean boolean26 = jSType19.equals((java.lang.Object) nodeIterableSpliterator25);
        boolean boolean27 = nodeIterableList0.equals((java.lang.Object) boolean26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder29.addAuthor("");
        boolean boolean32 = jSDocInfoBuilder29.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder29.recordParameter("OR hi!", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder29.recordImplicitCast();
        boolean boolean37 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder29);
        boolean boolean39 = jSDocInfoBuilder29.recordBlockDescription("function (this:me, {2000841007}): me");
        boolean boolean40 = jSDocInfoBuilder29.isDescriptionRecorded();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertTrue("'" + resolveMode5 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode5.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node3 = node2.getLastChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDebugger();
        com.google.javascript.rhino.Node node13 = node6.getFirstChild();
        com.google.javascript.rhino.Node node14 = node2.copyInformationFrom(node13);
        node14.setType(8202);
        boolean boolean17 = node14.isAdd();
        boolean boolean18 = node14.isFalse();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(2, node14);
        boolean boolean20 = node14.isTypeOf();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray28 = nodeIterableList27.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = nodeIterableList27.reverse();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList29, 52, node36 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList43.reverse();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList45, 52, node52 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList59 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray60 = nodeIterableList59.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = nodeIterableList59.reverse();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList61, 52, node68 };
        java.lang.Object[][] objArray72 = new java.lang.Object[][] { objArray39, objArray55, objArray71 };
        java.lang.Object[][] objArray73 = nodeIterableList23.toArray(objArray72);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray75 = nodeIterableList74.toArray();
        int int77 = nodeIterableList74.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray78 = nodeIterableList74.toArray();
        boolean boolean79 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList74);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList74.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo81.getSuppressions();
        boolean boolean83 = jSDocInfo81.isNoSideEffects();
        boolean boolean84 = jSDocInfo81.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo81.getReturnType();
        boolean boolean86 = jSDocInfo81.isNoAlias();
        boolean boolean87 = nodeIterableList74.contains((java.lang.Object) jSDocInfo81);
        boolean boolean88 = jSDocInfo81.shouldPreserveTry();
        boolean boolean89 = jSDocInfo81.hasFileOverview();
        node14.setJSDocInfo(jSDocInfo81);
        jSDocInfo81.setLicense("{2485467}");
        java.lang.String str93 = jSDocInfo81.getVersion();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        boolean boolean11 = jSDocInfoBuilder1.recordDescription("[]");
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordMeaning("{775928261}");
        boolean boolean16 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExterns();
        int int19 = jSDocInfo17.getParameterCount();
        boolean boolean20 = jSDocInfo17.isIdGenerator();
        boolean boolean21 = jSDocInfo17.isInterface();
        java.lang.String str22 = jSDocInfo17.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo17.getThrownTypes();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList25 = visibilityEnumBuilder24.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection26 = visibilityEnumBuilder24.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean30 = jSDocInfoBuilder28.recordVisibility(visibility29);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility29);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean37 = jSDocInfoBuilder35.recordVisibility(visibility36);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray44 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility32, visibility33, visibility36, visibility39, visibility42 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList45 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray44);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList47 = visibilityEnumBuilder46.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList49 = visibilityEnumBuilder48.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = jSDocInfo50.getVisibility();
        boolean boolean54 = jSDocInfo50.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo50.setVisibility(visibility55);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = visibilityEnumBuilder48.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo61.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = jSDocInfo61.getVisibility();
        boolean boolean65 = jSDocInfo61.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo61.setVisibility(visibility66);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray68 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility66 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray68);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList73 = visibilityEnumBuilder72.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo74.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = jSDocInfo74.getVisibility();
        boolean boolean78 = jSDocInfo74.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo74.setVisibility(visibility79);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility79);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility79);
        jSDocInfo17.setVisibility(visibility79);
        boolean boolean84 = jSDocInfoBuilder1.recordVisibility(visibility79);
        boolean boolean85 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JSDocInfo" + "'", str22, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(visibilityEnumList25);
        org.junit.Assert.assertNotNull(visibilityEnumCollection26);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertNotNull(visibilityArray44);
        org.junit.Assert.assertNotNull(visibilityEnumList45);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertNotNull(visibilityEnumList47);
        org.junit.Assert.assertNotNull(visibilityEnumList49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(visibility53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder57);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNull(visibility64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray68);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertNotNull(visibilityEnumList73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertNull(visibility77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + visibility79 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility79.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("INSTANCEOF");
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("{694195918}");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        int int24 = strSet21.size();
        strSet21.clear();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = objectType40.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode44 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry43.setResolveMode(resolveMode44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        boolean boolean48 = jSTypeRegistry43.canPropertyBeDefined(jSType46, "Unknown class name");
        jSTypeRegistry43.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode53 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry52.setResolveMode(resolveMode53);
        com.google.javascript.rhino.jstype.ObjectType objectType55 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType56 = jSTypeRegistry52.createObjectType(objectType55);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry43.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType56, "");
        boolean boolean59 = jSType58.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = objectType41.testForEquality(jSType58);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType58.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType62 = jSTypeRegistry27.createNullableType(jSType58);
        boolean boolean63 = strSet21.equals((java.lang.Object) jSTypeRegistry27);
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry65.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType70 = objectType69.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = jSTypeRegistry72.createObjectType(objectType75);
        com.google.javascript.rhino.jstype.ObjectType objectType77 = objectType76.toObjectType();
        boolean boolean78 = objectType69.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType76);
        boolean boolean79 = strSet21.equals((java.lang.Object) objectType69);
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet21.spliterator();
        boolean boolean81 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet21);
        boolean boolean82 = strSet21.isEmpty();
        int int83 = strSet21.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertTrue("'" + resolveMode44 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode44.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + resolveMode53 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode53.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(enumElementType70);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node5.siblings();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray18 = nodeIterableList17.toArray();
        boolean boolean19 = strSet14.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList17);
        java.util.HashSet[] hashSetArray21 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray22 = (java.util.HashSet<java.lang.String>[]) hashSetArray21;
        strSetArray22[0] = strSet14;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList25 = com.google.common.collect.ImmutableList.copyOf(strSetArray22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isExterns();
        boolean boolean38 = jSDocInfo36.hasReturnType();
        boolean boolean39 = jSDocInfo36.isOverride();
        jSDocInfo36.setLicense("hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node57.isNot();
        int int61 = node57.getLineno();
        com.google.javascript.rhino.Node node62 = node47.srcref(node57);
        boolean boolean63 = node62.isDelProp();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        node69.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node69.setStaticSourceFile(staticSourceFile74);
        com.google.common.collect.ImmutableList<java.lang.Object> objList76 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray22, (java.lang.Object) node28, (java.lang.Object) "hi!", (java.lang.Object) boolean63, (java.lang.Object) node69);
        boolean boolean77 = node69.isInstanceOf();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(35, 37, 39);
        com.google.javascript.rhino.Node node82 = node69.srcrefTree(node81);
        int int83 = nodeIterableList2.lastIndexOf((java.lang.Object) node81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList84 = nodeIterableList2.reverse();
        boolean boolean85 = nodeIterableList84.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList86 = nodeIterableList84.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList86.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor88 = nodeIterableList86.iterator();
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList86.replaceAll(nodeIterableUnaryOperator89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(hashSetArray21);
        org.junit.Assert.assertNotNull(strSetArray22);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(nodeIterableList86);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertNotNull(nodeIterableItor88);
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean16 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder18.recordDefineType(jSTypeExpression22);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder18.recordThisType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder18.isPopulated();
        boolean boolean27 = jSDocInfoBuilder18.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean32 = jSDocInfoBuilder29.recordDescription("hi!");
        boolean boolean33 = jSDocInfoBuilder29.recordHiddenness();
        boolean boolean34 = jSDocInfoBuilder29.recordExpose();
        boolean boolean35 = jSDocInfoBuilder29.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder29.isPopulatedWithFileOverview();
        boolean boolean37 = jSDocInfoBuilder29.recordJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder29.recordNoSideEffects();
        boolean boolean39 = jSDocInfoBuilder29.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder46.addAuthor("");
        boolean boolean49 = jSDocInfoBuilder46.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression50);
        boolean boolean52 = jSDocInfoBuilder46.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder46.markName("", staticSourceFile54, 29, 50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node60.isDebugger();
        boolean boolean67 = node60.isSyntheticBlock();
        boolean boolean68 = node60.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node60, "Unknown class name");
        boolean boolean72 = jSDocInfoBuilder46.recordThrowDescription(jSTypeExpression70, "?");
        boolean boolean74 = jSDocInfoBuilder41.recordThrowDescription(jSTypeExpression70, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean75 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression70);
        boolean boolean76 = jSDocInfoBuilder18.recordThisType(jSTypeExpression70);
        boolean boolean77 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression70);
        boolean boolean79 = jSDocInfoBuilder1.recordVersion("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("OR hi! [source_file: {298532945}]");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getThrownTypes();
        boolean boolean13 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        boolean boolean59 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean60 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean62 = jSDocInfoBuilder1.recordDescription("OR hi! 0\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(53, "{1242212142}", (int) (byte) 0, 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = jSDocInfoBuilder1.build(node67);
        java.lang.String str69 = jSDocInfo68.getSourceName();
        java.lang.String str70 = jSDocInfo68.getMeaning();
        boolean boolean71 = jSDocInfo68.hasFileOverview();
        boolean boolean72 = jSDocInfo68.isNoShadow();
        jSDocInfo68.setLicense("{1322965755}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder15.hasParameter("{2076672844}");
        boolean boolean53 = jSDocInfoBuilder15.shouldParseDocumentation();
        boolean boolean54 = jSDocInfoBuilder15.recordExport();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node5.setJSType(jSType11);
        boolean boolean13 = node5.isOptionalArg();
        boolean boolean14 = node5.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        boolean boolean18 = jSDocInfo15.isImplicitCast();
        boolean boolean19 = jSDocInfo15.isOverride();
        boolean boolean20 = jSDocInfo15.isNoSideEffects();
        boolean boolean22 = jSDocInfo15.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet23 = jSDocInfo15.getModifies();
        node5.setDirectives(strSet23);
        boolean boolean25 = node5.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean6 = jSDocInfoBuilder1.recordVersion("java.io.IOException: function (this:me, {988702852}): me");
        jSDocInfoBuilder1.markAnnotation("{1742699508}", 83, 40);
        boolean boolean11 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean12 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        boolean boolean27 = node20.isWith();
        com.google.javascript.rhino.Node node28 = node11.srcrefTree(node20);
        boolean boolean29 = node11.isSwitch();
        boolean boolean30 = node11.isDebugger();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        boolean boolean41 = node33.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node33.getJSDocInfo();
        boolean boolean43 = node33.isEmpty();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (short) 10);
        boolean boolean46 = node45.isBlock();
        // The following exception was thrown during execution in test generation
        try {
            node11.addChildBefore(node33, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(jSDocInfo42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        boolean boolean81 = jSDocInfoBuilder51.recordBlockDescription("InputId: ");
        boolean boolean82 = jSDocInfoBuilder51.recordConstructor();
        boolean boolean84 = jSDocInfoBuilder51.hasParameter("INSTANCEOF");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList86 = visibilityEnumBuilder85.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection87 = visibilityEnumBuilder85.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder89 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean91 = jSDocInfoBuilder89.recordVisibility(visibility90);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder92 = visibilityEnumBuilder85.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility90);
        boolean boolean93 = jSDocInfoBuilder51.recordVisibility(visibility90);
        boolean boolean95 = jSDocInfoBuilder51.recordLends("{1275608813}");
        boolean boolean96 = jSDocInfoBuilder51.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(visibilityEnumList86);
        org.junit.Assert.assertNotNull(visibilityEnumCollection87);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        jSTypeRegistry1.identifyNonNullableName("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        boolean boolean19 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = objectType39.toObjectType();
        boolean boolean41 = objectType40.matchesInt32Context();
        boolean boolean42 = objectType40.isStringValueType();
        boolean boolean43 = objectType40.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair50 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType40, (com.google.javascript.rhino.jstype.JSType) objectType49);
        boolean boolean51 = objectType49.isNullable();
        boolean boolean52 = objectType49.isString();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray55 = nodeIterableList54.toArray();
        boolean boolean56 = nodeIterableList54.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = jSDocInfo63.getVisibility();
        boolean boolean67 = jSDocInfo63.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo63.setVisibility(visibility68);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray70 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility68 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray70);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder74 = visibilityEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo75.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo75.getVisibility();
        boolean boolean79 = jSDocInfo75.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo75.setVisibility(visibility80);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray82 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility80 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder74.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray82);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder84 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray82);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder59.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray82);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray86 = nodeIterableList54.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray82);
        com.google.javascript.rhino.ErrorReporter errorReporter87 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry88 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter87);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList90 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList90, jSTypeArray89);
        com.google.javascript.rhino.Node node92 = jSTypeRegistry88.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        int int93 = nodeIterableList54.lastIndexOf((java.lang.Object) jSTypeList90);
        com.google.javascript.rhino.jstype.JSType jSType94 = jSTypeRegistry22.createFunctionType(objectType49, jSType53, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable97 = jSTypeRegistry1.getEachReferenceTypeWithProperty("function (None, {...}, {...}, ...[{...}]): None");
        boolean boolean99 = jSTypeRegistry1.hasNamespace("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder59);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNull(visibility66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray70);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertNull(visibility78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + visibility80 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility80.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray82);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder84);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertNotNull(visibilityEnumArray86);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(jSType94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(objectTypeIterable97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        jSDocInfo0.addSuppression("");
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        node5.setLineno(5);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node19.isBlock();
        boolean boolean27 = node19.hasOneChild();
        com.google.javascript.rhino.jstype.JSType jSType28 = node19.getJSType();
        com.google.javascript.rhino.Node node29 = node5.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder31.markTypeNode(node42, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node49 = node19.clonePropsFrom(node42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        com.google.javascript.rhino.Node node78 = jSTypeExpression75.getRoot();
        com.google.javascript.rhino.Node node79 = node19.useSourceInfoFrom(node78);
        int int80 = node78.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = jSDocInfo20.getVisibility();
        boolean boolean24 = jSDocInfo20.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo20.setVisibility(visibility25);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray27 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility25 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder19.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray27);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = visibilityEnumBuilder16.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.recordInterface();
        boolean boolean48 = jSDocInfoBuilder45.recordDescription("hi!");
        boolean boolean49 = jSDocInfoBuilder45.recordHiddenness();
        boolean boolean50 = jSDocInfoBuilder45.recordExpose();
        boolean boolean51 = jSDocInfoBuilder45.recordIdGenerator();
        boolean boolean53 = jSDocInfoBuilder45.addReference("OR hi!");
        boolean boolean55 = jSDocInfoBuilder45.recordLends("{424067794}");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean57 = jSDocInfoBuilder45.recordVisibility(visibility56);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility56);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection59 = visibilityEnumBuilder43.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList60 = visibilityEnumBuilder43.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(visibility23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder41);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertNotNull(visibilityEnumCollection59);
        org.junit.Assert.assertNotNull(visibilityEnumList60);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        int int13 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        int int25 = jSDocInfo19.getExtendedInterfacesCount();
        java.lang.String str26 = jSDocInfo19.getBlockDescription();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility28);
        jSDocInfo19.setVisibility(visibility28);
        java.lang.String str31 = jSDocInfo19.getLendsName();
        boolean boolean32 = jSDocInfo19.isHidden();
        java.lang.String str33 = jSDocInfo19.getMeaning();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR hi! [var_args_name: 1]", (int) (short) 100, 0);
        node3.detachChildren();
        int int5 = node3.getChildCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        boolean boolean9 = jSDocInfo6.isImplicitCast();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo6.getParameterNames();
        node3.setDirectives(strSet10);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean22 = nodeIterableList21.add(nodeIterable20);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray38 = nodeIterableList37.toArray();
        boolean boolean39 = strSet34.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.lang.Object[] objArray40 = nodeIterableList37.toArray();
        boolean boolean41 = nodeIterableList37.isEmpty();
        boolean boolean42 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor43 = nodeIterableList21.iterator();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        boolean boolean54 = node49.isAdd();
        com.google.javascript.rhino.Node node55 = node49.cloneTree();
        java.lang.String str56 = node55.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node55.siblings();
        boolean boolean58 = nodeIterableList21.add(nodeIterable57);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList21.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = strSet10.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList9.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        int int12 = nodeIterableList11.size();
        boolean boolean13 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo14.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo14.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getBaseType();
        boolean boolean22 = jSDocInfo14.hasDescriptionForParameter("{1094662025}");
        int int23 = nodeIterableList11.indexOf((java.lang.Object) boolean22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        int int27 = jSDocInfo25.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo25.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getEnumParameterType();
        java.lang.String str30 = jSDocInfo25.getLicense();
        boolean boolean32 = jSDocInfo25.hasParameterType("{827814855}");
        boolean boolean34 = jSDocInfo25.hasParameterType("{225764511}");
        java.util.Collection<java.lang.String> strCollection35 = jSDocInfo25.getAuthors();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection36 = jSDocInfo25.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList11.add(83, (java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strCollection35);
        org.junit.Assert.assertNotNull(nodeCollection36);
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean6 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getType();
        boolean boolean11 = jSDocInfo8.isNoTypeCheck();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo8.setAssociatedNode(node14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 49, 12);
        node14.addChildToBack(node20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        boolean boolean32 = node27.isAdd();
        com.google.javascript.rhino.Node node33 = node27.cloneTree();
        java.lang.String str34 = node33.toStringTree();
        boolean boolean35 = node33.isLocalResultCall();
        boolean boolean36 = node33.isTrue();
        java.lang.String str37 = node33.toString();
        node33.removeProp((int) (short) 1);
        boolean boolean40 = node33.isAssignAdd();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = node44.getLastSibling();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(40, node44, (int) (byte) 10, (int) (byte) 100);
        boolean boolean50 = node49.isStringKey();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(42, node14, node33, node49, 36, 0);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node49, "INSTANCEOF");
        boolean boolean56 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "OR hi!\n" + "'", str34, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR hi!" + "'", str37, "OR hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.addSuppression("OR hi!\n");
        int int13 = jSDocInfo0.getParameterCount();
        boolean boolean14 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean12 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        boolean boolean14 = jSDocInfo0.isExport();
        boolean boolean15 = jSDocInfo0.isConstructor();
        boolean boolean16 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(strCollection4);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.recordInterface();
        boolean boolean5 = jSDocInfoBuilder2.recordDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder2.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder2.recordThrowType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder2.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder2.recordReturnType(jSTypeExpression10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder2.markTypeNode(node13, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node24.isDebugger();
        boolean boolean31 = node24.isVoid();
        boolean boolean32 = node24.isOptionalArg();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(51, node36, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node47 = node46.getLastChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node46.children();
        com.google.javascript.rhino.Node node49 = node24.useSourceInfoIfMissingFrom(node46);
        boolean boolean50 = node24.isName();
        boolean boolean51 = node24.isStringKey();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(8202, node13, node21, node24, (-2147483648), 0);
        boolean boolean55 = node13.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor5 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = nodeIterableList0.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isNoTypeCheck();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo7.setAssociatedNode(node13);
        int int15 = jSDocInfo7.getImplementedInterfaceCount();
        boolean boolean16 = nodeIterableList6.contains((java.lang.Object) jSDocInfo7);
        boolean boolean17 = jSDocInfo7.isExpose();
        boolean boolean18 = jSDocInfo7.isExterns();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray20 = nodeIterableList19.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = nodeIterableList19.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray28 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition22, typePosition23, typePosition24, typePosition25, typePosition26, typePosition27 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = nodeIterableList19.toArray(typePositionArray28);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor30 = nodeIterableList19.iterator();
        java.lang.Object[] objArray31 = nodeIterableList19.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList42 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean43 = nodeIterableList42.add(nodeIterable41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet55);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList58 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray59 = nodeIterableList58.toArray();
        boolean boolean60 = strSet55.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList58);
        java.lang.Object[] objArray61 = nodeIterableList58.toArray();
        boolean boolean62 = nodeIterableList58.isEmpty();
        boolean boolean63 = nodeIterableList42.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList58);
        boolean boolean64 = nodeIterableList32.equals((java.lang.Object) nodeIterableList42);
        boolean boolean65 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        boolean boolean67 = nodeIterableList66.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator68 = nodeIterableList66.spliterator();
        boolean boolean69 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = nodeIterableList70.reverse();
        boolean boolean73 = nodeIterableList70.isEmpty();
        boolean boolean74 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList70);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder78 = visibilityEnumBuilder76.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility77);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder79 = visibilityEnumBuilder75.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility77);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder79.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility80);
        boolean boolean82 = nodeIterableList70.contains((java.lang.Object) visibility80);
        jSDocInfo7.setVisibility(visibility80);
        boolean boolean84 = jSDocInfo7.isExport();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertNotNull(nodeIterableItor5);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(typePositionArray28);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(nodeIterableItor30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(nodeIterableList58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder78);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder79);
        org.junit.Assert.assertTrue("'" + visibility80 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility80.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression72);
        boolean boolean80 = jSTypeExpression72.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo37.getVisibility();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo37.getTemplateTypeNames();
        java.lang.String str46 = jSDocInfo37.getBlockDescription();
        java.lang.String str47 = jSDocInfo37.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.isExterns();
        boolean boolean12 = jSDocInfo10.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isExport();
        boolean boolean18 = jSDocInfo13.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo13.getReturnType();
        boolean boolean20 = jSDocInfo13.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        jSDocInfo13.setVisibility(visibility22);
        jSDocInfo10.setVisibility(visibility22);
        jSDocInfo0.setVisibility(visibility22);
        java.lang.String str27 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        boolean boolean29 = jSDocInfo26.isOverride();
        boolean boolean30 = jSDocInfo26.isNoCompile();
        java.lang.String str31 = jSDocInfo26.getLendsName();
        boolean boolean32 = jSType23.equals((java.lang.Object) str31);
        boolean boolean33 = jSType23.isUnknownType();
        boolean boolean34 = jSType23.isUnionType();
        boolean boolean35 = jSType23.isParameterizedType();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = objectType41.toObjectType();
        boolean boolean43 = objectType42.matchesInt32Context();
        boolean boolean44 = objectType42.isStringValueType();
        boolean boolean45 = objectType42.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType42, (com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        boolean boolean66 = jSTypeRegistry61.canPropertyBeDefined(jSType64, "Unknown class name");
        jSTypeRegistry61.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry70.createObjectType(objectType73);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry61.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType74, "");
        boolean boolean77 = jSType76.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = objectType59.testForEquality(jSType76);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSType76.collapseUnion();
        boolean boolean80 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) objectType51, jSType76);
        boolean boolean81 = jSType76.isNullable();
        com.google.javascript.rhino.jstype.JSType jSType82 = jSType23.getLeastSupertype(jSType76);
        boolean boolean83 = jSType76.isEmptyType();
        boolean boolean84 = jSType76.isNominalType();
        boolean boolean85 = jSType76.isRecordType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = jSType76.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList4 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray5 = nodeIterableList4.toArray();
        boolean boolean6 = nodeIterableList0.equals((java.lang.Object) objArray5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordInterface();
        boolean boolean11 = jSDocInfoBuilder8.recordDescription("hi!");
        boolean boolean12 = jSDocInfoBuilder8.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder8.recordExpose();
        boolean boolean14 = jSDocInfoBuilder8.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean19 = jSDocInfoBuilder16.recordDescription("hi!");
        boolean boolean20 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder16.recordConstancy();
        boolean boolean24 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordImplicitCast();
        boolean boolean31 = jSDocInfoBuilder26.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder26.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression37);
        jSDocInfoBuilder36.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node45.siblings();
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        boolean boolean62 = jSDocInfoBuilder58.recordHiddenness();
        boolean boolean63 = strSet54.remove((java.lang.Object) jSDocInfoBuilder58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder58.recordTypedef(jSTypeExpression64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        boolean boolean71 = jSDocInfoBuilder67.recordHiddenness();
        boolean boolean72 = jSDocInfoBuilder67.recordExpose();
        boolean boolean73 = jSDocInfoBuilder67.recordConstructor();
        boolean boolean75 = jSDocInfoBuilder67.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder77.recordThisType(jSTypeExpression83);
        boolean boolean85 = jSDocInfoBuilder77.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList86 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder8, jSDocInfoBuilder16, jSDocInfoBuilder26, jSDocInfoBuilder36, jSDocInfoBuilder58, jSDocInfoBuilder67, jSDocInfoBuilder77);
        boolean boolean88 = jSDocInfoBuilder58.recordBlockDescription("InputId: ");
        boolean boolean89 = jSDocInfoBuilder58.recordConstructor();
        boolean boolean91 = jSDocInfoBuilder58.hasParameter("INSTANCEOF");
        boolean boolean92 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList0.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor94 = nodeIterableList93.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor96 = nodeIterableList93.listIterator(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (31) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeIterableList93);
        org.junit.Assert.assertNotNull(nodeIterableItor94);
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("{}");
        jSDocInfoBuilder1.markAnnotation("InputId: InputId: ", 47, (int) (short) 10);
        boolean boolean18 = jSDocInfoBuilder1.recordBlockDescription("function (this:me, {195968445}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean18 = node17.isObjectLit();
        int int19 = nodeIterableList0.indexOf((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream20 = nodeIterableList0.stream();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator21 = nodeIterableList0.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList0.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo23.getType();
        boolean boolean26 = jSDocInfo23.isImplicitCast();
        boolean boolean27 = jSDocInfo23.isOverride();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        boolean boolean41 = node34.isVoid();
        boolean boolean42 = node34.isOptionalArg();
        int int43 = node30.getIndexOfChild(node34);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node30, "{441018204}");
        jSDocInfo23.setAssociatedNode(node30);
        jSDocInfo23.setDeprecated(false);
        java.lang.String str49 = jSDocInfo23.getReturnDescription();
        int int50 = nodeIterableList22.lastIndexOf((java.lang.Object) jSDocInfo23);
        boolean boolean51 = jSDocInfo23.isConstant();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream20);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator21);
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDec();
        boolean boolean19 = node12.isString();
        boolean boolean20 = node12.isArrayLit();
        java.lang.String str24 = node12.toString(true, true, false);
        java.lang.String str25 = node12.getString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder1.build(node12);
        boolean boolean28 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n");
        boolean boolean29 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR hi!" + "'", str24, "OR hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.util.HashSet[] hashSetArray18 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray19 = (java.util.HashSet<java.lang.String>[]) hashSetArray18;
        strSetArray19[0] = strSet11;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList22 = com.google.common.collect.ImmutableList.copyOf(strSetArray19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.hasReturnType();
        boolean boolean36 = jSDocInfo33.isOverride();
        jSDocInfo33.setLicense("hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node59 = node44.srcref(node54);
        boolean boolean60 = node59.isDelProp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        node66.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node66.setStaticSourceFile(staticSourceFile71);
        com.google.common.collect.ImmutableList<java.lang.Object> objList73 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray19, (java.lang.Object) node25, (java.lang.Object) "hi!", (java.lang.Object) boolean60, (java.lang.Object) node66);
        boolean boolean74 = node66.isInstanceOf();
        boolean boolean75 = node66.isFalse();
        boolean boolean76 = node66.isString();
        boolean boolean77 = node66.isBlock();
        boolean boolean78 = node66.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hashSetArray18);
        org.junit.Assert.assertNotNull(strSetArray19);
        org.junit.Assert.assertNotNull(strSetList22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean16 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean17 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        boolean boolean34 = strSet29.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        int int35 = strSet29.size();
        java.lang.Object[] objArray36 = strSet29.toArray();
        int int37 = strSet29.size();
        boolean boolean38 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet29);
        int int39 = strSet29.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.isOptionalArg();
        int int20 = node7.getIndexOfChild(node11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node7, "{441018204}");
        jSDocInfo0.setAssociatedNode(node7);
        jSDocInfo0.setDeprecated(false);
        java.lang.String str26 = jSDocInfo0.getFileOverview();
        boolean boolean27 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node29 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        boolean boolean81 = jSDocInfoBuilder51.recordBlockDescription("InputId: ");
        boolean boolean82 = jSDocInfoBuilder51.recordConstructor();
        boolean boolean84 = jSDocInfoBuilder51.hasParameter("INSTANCEOF");
        boolean boolean85 = jSDocInfoBuilder51.recordConstancy();
        boolean boolean87 = jSDocInfoBuilder51.recordVersion("java.io.IOException: java.io.IOException: java.io.IOException");
        jSDocInfoBuilder51.markAnnotation("OR hi! [input_id: InputId: ]", 3, 38);
        boolean boolean92 = jSDocInfoBuilder51.recordConsistentIdGenerator();
        boolean boolean93 = jSDocInfoBuilder51.recordInterface();
        boolean boolean94 = jSDocInfoBuilder51.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        boolean boolean79 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        int int25 = jSDocInfo19.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node26 = null;
        jSDocInfo19.setAssociatedNode(node26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo19.getReturnType();
        boolean boolean29 = jSDocInfo19.containsDeclaration();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean3 = jSDocInfoBuilder1.recordVisibility(visibility2);
        boolean boolean4 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder6.recordThisType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder6.recordInterface();
        boolean boolean15 = jSDocInfoBuilder6.recordJavaDispatch();
        boolean boolean16 = jSDocInfoBuilder6.recordExpose();
        boolean boolean17 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder19.recordConstancy();
        boolean boolean27 = jSDocInfoBuilder19.recordOverride();
        boolean boolean28 = jSDocInfoBuilder19.recordNoTypeCheck();
        boolean boolean29 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.addAuthor("");
        boolean boolean34 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression35);
        boolean boolean37 = jSDocInfoBuilder31.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        jSDocInfoBuilder31.markName("", staticSourceFile39, 29, 50);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node45.isDebugger();
        boolean boolean52 = node45.isSyntheticBlock();
        boolean boolean53 = node45.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        boolean boolean57 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression55, "?");
        com.google.javascript.rhino.Node node58 = jSTypeExpression55.getRoot();
        boolean boolean59 = jSDocInfoBuilder19.recordEnumParameterType(jSTypeExpression55);
        boolean boolean60 = jSTypeExpression55.isVarArgs();
        boolean boolean62 = jSDocInfoBuilder6.recordThrowDescription(jSTypeExpression55, "{785960677}");
        boolean boolean64 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression55, "{767546855}");
        com.google.javascript.rhino.Node node65 = jSTypeExpression55.getRoot();
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("Unknown class name", "Unknown class name");
        boolean boolean10 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder1.addReference("");
        jSDocInfoBuilder1.markText("{168285338}", 12, 0, 100, 54);
        boolean boolean20 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nEQ function (this:me, {726862509}): me\n\n\nTree2:\nOR hi! 2\n    OR hi! 2\n\n\nSubtree1: EQ function (this:me, {726862509}): me\n\n\nSubtree2: OR hi! 2\n    OR hi! 2\n");
        boolean boolean21 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean9 = jSDocInfoBuilder1.recordFileOverview("");
        boolean boolean10 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean11 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean12 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordInterface();
        boolean boolean16 = jSDocInfoBuilder14.recordPreserveTry();
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordExtendedInterface(jSTypeExpression18);
        jSDocInfoBuilder14.markAnnotation("java.io.IOException", (int) (short) 100, 54);
        boolean boolean25 = jSDocInfoBuilder14.hasParameter("InputId: {556367677}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordInterface();
        boolean boolean30 = jSDocInfoBuilder27.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder27.recordDefineType(jSTypeExpression31);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = null;
        boolean boolean34 = jSDocInfoBuilder27.recordThisType(jSTypeExpression33);
        boolean boolean35 = jSDocInfoBuilder27.isPopulated();
        boolean boolean36 = jSDocInfoBuilder27.recordNoAlias();
        boolean boolean39 = jSDocInfoBuilder27.recordParameterDescription("hi!", "JSDocInfo");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder27.markName("", staticSourceFile41, 0, (int) (byte) 1);
        boolean boolean45 = jSDocInfoBuilder27.recordNoAlias();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDebugger();
        boolean boolean55 = node48.isSyntheticBlock();
        boolean boolean56 = node48.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = new com.google.javascript.rhino.JSTypeExpression(node48, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder27.recordEnumParameterType(jSTypeExpression58);
        boolean boolean60 = jSDocInfoBuilder14.recordExtendedInterface(jSTypeExpression58);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder62.recordInterface();
        boolean boolean64 = jSDocInfoBuilder62.isInterfaceRecorded();
        boolean boolean65 = jSDocInfoBuilder62.recordImplicitCast();
        boolean boolean67 = jSDocInfoBuilder62.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = null;
        boolean boolean69 = jSDocInfoBuilder62.recordThrowType(jSTypeExpression68);
        boolean boolean70 = jSDocInfoBuilder62.recordInterface();
        boolean boolean71 = jSDocInfoBuilder62.isDescriptionRecorded();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean85 = jSDocInfoBuilder62.recordTypedef(jSTypeExpression84);
        boolean boolean86 = jSDocInfoBuilder14.recordImplementedInterface(jSTypeExpression84);
        boolean boolean87 = jSTypeExpression84.isOptionalArg();
        boolean boolean88 = jSDocInfoBuilder1.recordType(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        node15.setSourceFileForTesting("{...}");
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isCatch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        node25.removeProp(1);
        java.lang.String str33 = node25.toString(true, false, true);
        com.google.javascript.rhino.Node node34 = node15.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        boolean boolean38 = jSDocInfo35.isImplicitCast();
        boolean boolean39 = jSDocInfo35.isExport();
        boolean boolean40 = jSDocInfo35.isNoShadow();
        boolean boolean42 = jSDocInfo35.hasParameter("Unknown class name");
        boolean boolean43 = jSDocInfo35.isHidden();
        java.util.Collection<java.lang.String> strCollection44 = jSDocInfo35.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo35.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo46.getSuppressions();
        boolean boolean48 = jSDocInfo46.isNoSideEffects();
        int int49 = jSDocInfo46.getParameterCount();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = jSDocInfoBuilder51.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordType(jSTypeExpression57);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder59.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo62.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = jSDocInfo62.getVisibility();
        boolean boolean66 = jSDocInfo62.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo62.setVisibility(visibility67);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray69 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility67 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray69);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo73.getType();
        boolean boolean76 = jSDocInfo73.isImplicitCast();
        boolean boolean77 = jSDocInfo73.isExport();
        boolean boolean78 = jSDocInfo73.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo73.getReturnType();
        boolean boolean80 = jSDocInfo73.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder81.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility82);
        jSDocInfo73.setVisibility(visibility82);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility82);
        boolean boolean86 = jSDocInfoBuilder51.recordVisibility(visibility82);
        jSDocInfo46.setVisibility(visibility82);
        jSDocInfo35.setVisibility(visibility82);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo35.getType();
        node34.setJSDocInfo(jSDocInfo35);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR hi!" + "'", str33, "OR hi!");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strCollection44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertNull(visibility65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + visibility67 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility67.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray69);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertTrue("'" + visibility71 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility71.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(jSTypeExpression89);
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.lang.String str7 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility9);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = jSDocInfo14.getVisibility();
        boolean boolean18 = jSDocInfo14.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo14.setVisibility(visibility19);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray21 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility19 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray21);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo26.getVisibility();
        boolean boolean30 = jSDocInfo26.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo26.setVisibility(visibility31);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray33 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility31 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray33);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray33);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.addAuthor("");
        boolean boolean40 = jSDocInfoBuilder37.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = null;
        boolean boolean42 = jSDocInfoBuilder37.recordReturnType(jSTypeExpression41);
        boolean boolean43 = jSDocInfoBuilder37.recordOverride();
        boolean boolean45 = jSDocInfoBuilder37.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node51.isNot();
        int int55 = node51.getLineno();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isNot();
        int int65 = node61.getLineno();
        com.google.javascript.rhino.Node node66 = node51.srcref(node61);
        boolean boolean67 = node66.isDelProp();
        com.google.javascript.rhino.Node node68 = node66.getLastSibling();
        boolean boolean69 = node68.isFunction();
        java.lang.Object obj71 = node68.getProp((int) ' ');
        jSDocInfoBuilder37.markTypeNode(node68, 35, (int) (byte) 0, 16, 49, true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean79 = jSDocInfoBuilder37.recordVisibility(visibility78);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder80 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility78);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList81 = visibilityEnumBuilder80.build();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder80.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility82);
        jSDocInfo0.setVisibility(visibility82);
        boolean boolean85 = jSDocInfo0.isNoAlias();
        boolean boolean86 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(visibility17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray33);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder80);
        org.junit.Assert.assertNotNull(visibilityEnumList81);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("function (this:me, {880629567}): me");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean15 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        boolean boolean26 = node21.isAdd();
        com.google.javascript.rhino.Node node27 = node21.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node27.setJSType(jSType28);
        boolean boolean30 = node27.isString();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        boolean boolean48 = strSet42.isEmpty();
        node27.setDirectives((java.util.Set<java.lang.String>) strSet42);
        boolean boolean50 = node27.isObjectLit();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node27, "Named type with empty name component");
        boolean boolean53 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 100, (-2147483648), 53);
        boolean boolean58 = node57.isLabelName();
        jSDocInfoBuilder1.markTypeNode(node57, 48, (int) (short) 10, (-1), 10, true);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((-1), "{694195918}");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node73.isNot();
        int int77 = node73.getLineno();
        boolean boolean78 = node73.isAdd();
        com.google.javascript.rhino.Node node79 = node73.cloneTree();
        java.lang.Object obj81 = node79.getProp((int) (byte) 0);
        int int82 = node79.getChildCount();
        boolean boolean83 = node79.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node84 = node67.srcref(node79);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = new com.google.javascript.rhino.JSTypeExpression(node67, "function (this:me, {1476191226}): me");
        boolean boolean87 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        java.lang.String str8 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isVoid();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isTypeOf();
        com.google.javascript.rhino.Node node38 = node26.srcrefTree(node36);
        com.google.javascript.rhino.Node node39 = node26.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node39.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = strSet11.remove((java.lang.Object) node39);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = node39.getStaticSourceFile();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isVoid();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isTypeOf();
        com.google.javascript.rhino.Node node59 = node47.srcrefTree(node57);
        com.google.javascript.rhino.Node node60 = node47.getLastSibling();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        boolean boolean69 = node63.isDebugger();
        com.google.javascript.rhino.Node node70 = node63.getFirstChild();
        boolean boolean71 = node47.hasChild(node70);
        typePosition44.setItem(node70);
        boolean boolean73 = node70.isLabel();
        com.google.javascript.rhino.Node node74 = node39.useSourceInfoFrom(node70);
        boolean boolean75 = node39.isLabelName();
        java.lang.String str79 = node39.toString(true, true, false);
        int int80 = node39.getSourceOffset();
        boolean boolean81 = node39.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "OR hi!" + "'", str79, "OR hi!");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = nodeIterableList19.asList();
        boolean boolean32 = nodeIterableList19.isEmpty();
        com.google.javascript.rhino.InputId inputId34 = new com.google.javascript.rhino.InputId("");
        java.lang.String str35 = inputId34.getIdName();
        boolean boolean36 = nodeIterableList19.contains((java.lang.Object) inputId34);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator37 = nodeIterableList19.spliterator();
        java.lang.Cloneable[] cloneableArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Cloneable[] cloneableArray39 = nodeIterableList19.toArray(cloneableArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator37);
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n", 0, (int) (byte) 0);
        boolean boolean11 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder1.markTypeNode(node12, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        com.google.javascript.rhino.Node node30 = node24.cloneTree();
        java.lang.String str31 = node30.toStringTree();
        boolean boolean32 = node30.isNE();
        boolean boolean33 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = node12.srcref(node30);
        boolean boolean35 = node34.isBlock();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node51.isNot();
        int int55 = node51.getLineno();
        com.google.javascript.rhino.Node node56 = node41.srcref(node51);
        int int57 = node41.getCharno();
        boolean boolean58 = node41.isScript();
        boolean boolean59 = node41.isExprResult();
        com.google.javascript.rhino.jstype.JSType jSType60 = node41.getJSType();
        boolean boolean61 = node41.isLabel();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable62 = node41.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            node34.addChildToBack(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR hi!\n" + "'", str31, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(ancestorIterable62);
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        boolean boolean6 = jSDocInfo0.isExterns();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("OR hi!\n    OR hi!\n");
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        java.lang.String str14 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = visibilityEnumBuilder13.add(visibilityEnumArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        jSDocInfoBuilder1.recordOriginalCommentString("{1589976414}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("hi!");
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordInterface();
        boolean boolean18 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean21 = jSDocInfoBuilder16.recordVisibility(visibility20);
        boolean boolean23 = jSDocInfoBuilder16.recordLends("OR hi!\n");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        node26.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        boolean boolean39 = node37.isDelProp();
        boolean boolean40 = node37.hasChildren();
        boolean boolean41 = node37.isOr();
        java.lang.String str42 = node26.checkTreeEquals(node37);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDebugger();
        boolean boolean53 = node46.isAssign();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(51, node46, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node56.getAncestors();
        com.google.javascript.rhino.Node node58 = node37.copyInformationFrom(node56);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node56, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node61 = jSTypeExpression60.getRoot();
        boolean boolean62 = jSDocInfoBuilder16.recordEnumParameterType(jSTypeExpression60);
        boolean boolean63 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression60);
        boolean boolean64 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean65 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str42, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        jSDocInfo0.setLicense("");
        java.lang.String str37 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDec();
        boolean boolean47 = node40.isBlock();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node50.siblings();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet59);
        int int62 = strSet59.size();
        strSet59.clear();
        node40.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        boolean boolean71 = jSTypeRegistry66.canPropertyBeDefined(jSType69, "Unknown class name");
        jSTypeRegistry66.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry66.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType79, "");
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType79.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType79.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType79.getRestrictedTypeGivenToBooleanOutcome(false);
        node40.setJSType((com.google.javascript.rhino.jstype.JSType) objectType79);
        node40.putBooleanProp((int) (short) 10, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder91 = node40.getJsDocBuilderForNode();
        jSDocInfo0.setAssociatedNode(node40);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList93 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder91);
        org.junit.Assert.assertNotNull(jSTypeExpressionList93);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList12 = visibilityEnumBuilder11.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList13 = visibilityEnumBuilder11.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = jSDocInfoBuilder15.recordExpose();
        boolean boolean21 = jSDocInfoBuilder15.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder15.recordParameter("OR hi! [directives: []]\n", jSTypeExpression23);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility27);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        boolean boolean32 = jSDocInfoBuilder15.recordVisibility(visibility30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility34);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList38 = visibilityEnumBuilder11.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertNotNull(visibilityEnumList12);
        org.junit.Assert.assertNotNull(visibilityEnumList13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder33);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertNotNull(visibilityEnumList38);
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        boolean boolean19 = jSDocInfo14.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        boolean boolean21 = jSDocInfo14.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility23);
        jSDocInfo14.setVisibility(visibility23);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        boolean boolean45 = strSet38.remove((java.lang.Object) boolean44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo46.getSuppressions();
        boolean boolean48 = jSDocInfo46.isNoSideEffects();
        boolean boolean49 = jSDocInfo46.isConsistentIdGenerator();
        boolean boolean50 = strSet38.contains((java.lang.Object) jSDocInfo46);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = jSDocInfo46.getTemplateTypeNames();
        int int52 = jSDocInfo46.getExtendedInterfacesCount();
        java.lang.String str53 = jSDocInfo46.getBlockDescription();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        jSDocInfo46.setVisibility(visibility55);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection59 = visibilityEnumBuilder58.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder24);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertNotNull(visibilityEnumCollection59);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        boolean boolean15 = jSDocInfo12.isImplicitCast();
        boolean boolean16 = jSDocInfo12.isExport();
        java.lang.String str17 = jSDocInfo12.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo12.getType();
        java.lang.String str19 = jSDocInfo12.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo12.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType28 = objectType27.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = objectType34.toObjectType();
        boolean boolean36 = objectType27.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType43 = objectType42.toMaybeEnumElementType();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        boolean boolean51 = objectType42.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType27, (com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean53 = objectType27.isFunctionPrototypeType();
        boolean boolean54 = objectType27.hasDisplayName();
        boolean boolean55 = objectType27.matchesUint32Context();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = objectType27.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry1.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType27, "InputId: InputId: ", "{298532945}", 29, 38);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry1.createNamedType("", "function (this:me, {893709994}): me", 97, 48);
        boolean boolean68 = jSTypeRegistry1.hasNamespace("function (this:me, {1674974315}): me");
        jSTypeRegistry1.setLastGeneration(false);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JSDocInfo" + "'", str17, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNull(enumElementType28);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNull(enumElementType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node17.getJSDocInfo();
        jSDocInfoBuilder1.markTypeNode(node17, 35, 29, 0, 100, false);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        com.google.javascript.rhino.Node node46 = node31.srcref(node41);
        int int47 = node31.getCharno();
        boolean boolean48 = node31.isQuotedString();
        boolean boolean49 = node31.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node31.setStaticSourceFile(staticSourceFile50);
        int int52 = node31.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node31.getStaticSourceFile();
        boolean boolean54 = node31.isNoSideEffectsCall();
        jSDocInfoBuilder1.markTypeNode(node31, (int) (byte) 1, 39, 38, 10, true);
        boolean boolean61 = node31.isDec();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = com.google.common.collect.ImmutableList.of();
        boolean boolean8 = nodeIterableList7.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor9 = nodeIterableList7.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList7.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList10.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray13 = nodeIterableList12.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = nodeIterableList12.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray19 = nodeIterableList18.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList18.reverse();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList20, 52, node27 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray35 = nodeIterableList34.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList34.reverse();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList36, 52, node43 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray51 = nodeIterableList50.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = nodeIterableList50.reverse();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList52, 52, node59 };
        java.lang.Object[][] objArray63 = new java.lang.Object[][] { objArray30, objArray46, objArray62 };
        java.lang.Object[][] objArray64 = nodeIterableList14.toArray(objArray63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray66 = nodeIterableList65.toArray();
        int int68 = nodeIterableList65.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray69 = nodeIterableList65.toArray();
        boolean boolean70 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList65);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor71 = nodeIterableList65.iterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList65.listIterator();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray74 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray75 = (com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74;
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray76 = nodeIterableList65.toArray((com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74);
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray77 = nodeIterableList10.toArray((com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74);
        boolean boolean78 = strSet5.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList10);
        com.google.javascript.rhino.Node[] nodeArray83 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) 'a', nodeArray83, 8202, (int) (short) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(4098, nodeArray83);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray83, 44, (int) (short) 10);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray83, 11, 12);
        com.google.javascript.rhino.Node[] nodeArray94 = strSet5.toArray(nodeArray83);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = strSet5.add("(null|undefined|{})");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor71);
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertNotNull(immutableCollectionArray74);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray75);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray76);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeArray83);
        org.junit.Assert.assertNotNull(nodeArray94);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.lang.String str81 = jSDocInfo69.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList82 = jSDocInfo69.getThrownTypes();
        java.lang.String str83 = jSDocInfo69.getOriginalCommentString();
        jSDocInfo69.setDeprecated(false);
        boolean boolean86 = jSDocInfo69.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo69.getParameterType("{1599418513}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(jSTypeExpressionList82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        boolean boolean9 = jSDocInfo0.hasParameterType("OR hi! [source_file: ]\n    OR hi!\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        int int19 = nodeIterableList0.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isDelProp();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node6 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isNE();
        boolean boolean11 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node12 = node2.copyInformationFromForTree(node9);
        boolean boolean13 = node2.isLabelName();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordReturnType(jSTypeExpression19);
        jSDocInfoBuilder15.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean26 = jSDocInfoBuilder15.recordDeprecationReason("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        node30.putBooleanProp(0, false);
        node30.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean47 = node30.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node30.getStaticSourceFile();
        int int50 = staticSourceFile48.getLineOffset(40);
        java.lang.String str51 = staticSourceFile48.getName();
        java.lang.String str52 = staticSourceFile48.getName();
        java.lang.String str53 = staticSourceFile48.getName();
        jSDocInfoBuilder15.markName("java.io.IOException: Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n", staticSourceFile48, 16, 0);
        int int58 = staticSourceFile48.getColumnOfOffset(143360);
        node2.setStaticSourceFile(staticSourceFile48);
        int int61 = staticSourceFile48.getColumnOfOffset(49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str51, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str52, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str53, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isVoid();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isTypeOf();
        com.google.javascript.rhino.Node node29 = node17.srcrefTree(node27);
        com.google.javascript.rhino.Node node30 = node17.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node30.setStaticSourceFile(staticSourceFile31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean43 = node38.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node44 = node38.cloneNode();
        boolean boolean45 = node38.isEmpty();
        com.google.javascript.rhino.Node node46 = node30.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        boolean boolean58 = node53.isAdd();
        node53.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean61 = node53.isDec();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isAssign();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(51, node65, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node76 = node53.srcrefTree(node75);
        com.google.javascript.rhino.Node node78 = node76.getAncestor(2);
        boolean boolean79 = node46.isEquivalentToTyped(node76);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node76.getStaticSourceFile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo82.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo84.getSuppressions();
        boolean boolean86 = jSDocInfo84.isNoSideEffects();
        java.lang.String str87 = jSDocInfo84.getReturnDescription();
        boolean boolean89 = jSDocInfo84.hasParameter("Not declared as a constructor");
        java.lang.String str90 = jSDocInfo84.getMeaning();
        boolean boolean91 = jSDocInfo84.isInterface();
        boolean boolean92 = strSet83.remove((java.lang.Object) jSDocInfo84);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strSet83.spliterator();
        node76.putProp(45, (java.lang.Object) strSpliterator93);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(staticSourceFile80);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strSpliterator93);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        java.lang.Object[] objArray2 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = nodeIterableList0.contains((java.lang.Object) jSTypeExpression5);
        boolean boolean7 = nodeIterableList0.isEmpty();
        int int8 = nodeIterableList0.size();
        java.lang.Object[] objArray9 = nodeIterableList0.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        com.google.javascript.rhino.Node node22 = node15.getFirstChild();
        boolean boolean23 = node15.isNot();
        boolean boolean24 = node15.isIn();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(1, node15, node38, 54, 10);
        boolean boolean43 = node38.isArrayLit();
        java.util.Set<java.lang.String> strSet44 = node38.getDirectives();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node50.setJSType(jSType56);
        boolean boolean58 = node50.isOptionalArg();
        java.util.Set<java.lang.String> strSet59 = node50.getDirectives();
        boolean boolean60 = node50.isHook();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoFrom(node50);
        boolean boolean62 = node38.isOr();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node65.siblings();
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet74);
        node65.putBooleanProp(0, false);
        node65.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean82 = node65.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = node65.getStaticSourceFile();
        boolean boolean84 = staticSourceFile83.isExtern();
        java.lang.String str85 = staticSourceFile83.getName();
        int int87 = staticSourceFile83.getLineOffset(8);
        node38.setStaticSourceFile(staticSourceFile83);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable89 = node38.children();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = nodeIterableList0.set(8202, nodeIterable89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(staticSourceFile83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str85, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-2147483648) + "'", int87 == (-2147483648));
        org.junit.Assert.assertNotNull(nodeIterable89);
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        boolean boolean14 = node11.isString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray30 = nodeIterableList29.toArray();
        boolean boolean31 = strSet26.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList29);
        boolean boolean32 = strSet26.isEmpty();
        node11.setDirectives((java.util.Set<java.lang.String>) strSet26);
        boolean boolean34 = node11.isObjectLit();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node40.isNot();
        int int44 = node40.getLineno();
        boolean boolean45 = node40.isAdd();
        com.google.javascript.rhino.Node node46 = node40.cloneTree();
        java.lang.Object obj48 = node46.getProp(0);
        com.google.javascript.rhino.Node node49 = node46.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getType();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isTypeOf();
        jSDocInfo50.setAssociatedNode(node55);
        com.google.javascript.rhino.Node node58 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean59 = node55.isAssignAdd();
        node11.addChildToFront(node55);
        boolean boolean61 = node11.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        boolean boolean62 = nodeIterableList2.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = nodeIterableList2.asList();
        java.lang.Object[] objArray64 = nodeIterableList63.toArray();
        int int65 = nodeIterableList63.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray67 = nodeIterableList66.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = nodeIterableList66.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition70 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray75 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition69, typePosition70, typePosition71, typePosition72, typePosition73, typePosition74 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray76 = nodeIterableList66.toArray(typePositionArray75);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder78 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean80 = jSDocInfoBuilder78.addAuthor("");
        boolean boolean81 = jSDocInfoBuilder78.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = null;
        boolean boolean83 = jSDocInfoBuilder78.recordReturnType(jSTypeExpression82);
        int int84 = nodeIterableList66.lastIndexOf((java.lang.Object) jSTypeExpression82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo85.getSuppressions();
        boolean boolean87 = nodeIterableList66.contains((java.lang.Object) strSet86);
        java.lang.Object[] objArray88 = nodeIterableList66.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor89 = nodeIterableList66.iterator();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator90 = nodeIterableList66.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = nodeIterableList63.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(typePositionArray75);
        org.junit.Assert.assertNotNull(typePositionArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor89);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator90);
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean83 = node82.isNE();
        boolean boolean84 = node82.isInstanceOf();
        boolean boolean85 = node82.isThrow();
        node82.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable88 = node82.getAncestors();
        jSDocInfoBuilder70.markTypeNode(node82, (int) 'a', (int) '4', (int) (byte) 1, (int) 'a', false);
        boolean boolean95 = node82.isWhile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(ancestorIterable88);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        boolean boolean18 = nodeIterableList0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = nodeIterableList0.remove(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean17 = jSDocInfoBuilder1.recordOverride();
        boolean boolean18 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean19 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean8 = node7.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node7, "INSTANCEOF");
        boolean boolean11 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression10);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isTypeOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        com.google.javascript.rhino.Node node36 = node21.srcref(node31);
        boolean boolean37 = node21.isString();
        boolean boolean38 = node21.isTry();
        boolean boolean39 = node21.isHook();
        com.google.javascript.rhino.Node node40 = node14.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node41 = node14.cloneNode();
        boolean boolean42 = jSTypeExpression10.equals((java.lang.Object) node41);
        boolean boolean43 = jSTypeExpression10.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.isOptionalArg();
        int int20 = node7.getIndexOfChild(node11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node7, "{441018204}");
        jSDocInfo0.setAssociatedNode(node7);
        jSDocInfo0.setDeprecated(false);
        java.lang.String str26 = jSDocInfo0.getFileOverview();
        boolean boolean27 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = strSet28.add("{1073629450}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        jSDocInfoBuilder1.markName("{1280624500}", 47, 31);
        boolean boolean10 = jSDocInfoBuilder1.recordReturnDescription("{605840240}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        boolean boolean10 = strItor9.hasNext();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        boolean boolean14 = jSDocInfo0.hasDescriptionForParameter("NUMBER 100.0 12\n");
        java.lang.String str15 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        boolean boolean6 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray8 = nodeIterableList7.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = nodeIterableList7.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray14 = nodeIterableList13.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList15 = nodeIterableList13.reverse();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Object[] objArray25 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList15, 52, node22 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray30 = nodeIterableList29.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = nodeIterableList29.reverse();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        java.lang.Object[] objArray41 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList31, 52, node38 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = nodeIterableList45.reverse();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        java.lang.Object[] objArray57 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList47, 52, node54 };
        java.lang.Object[][] objArray58 = new java.lang.Object[][] { objArray25, objArray41, objArray57 };
        java.lang.Object[][] objArray59 = nodeIterableList9.toArray(objArray58);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray61 = nodeIterableList60.toArray();
        int int63 = nodeIterableList60.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray64 = nodeIterableList60.toArray();
        boolean boolean65 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList60);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream66 = nodeIterableList60.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo67.getSuppressions();
        boolean boolean69 = jSDocInfo67.isNoSideEffects();
        boolean boolean70 = jSDocInfo67.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo67.getReturnType();
        boolean boolean72 = jSDocInfo67.isNoAlias();
        boolean boolean73 = nodeIterableList60.contains((java.lang.Object) jSDocInfo67);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        boolean boolean78 = node76.isDelProp();
        boolean boolean79 = node76.isNoSideEffectsCall();
        java.lang.String str83 = node76.toString(true, false, true);
        com.google.javascript.rhino.Node node84 = node76.cloneTree();
        boolean boolean85 = nodeIterableList60.equals((java.lang.Object) node76);
        boolean boolean86 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList60);
        java.lang.Object[] objArray87 = nodeIterableList60.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(nodeIterableList60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream66);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "OR hi!" + "'", str83, "OR hi!");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor6 = nodeIterableList0.listIterator();
        boolean boolean7 = nodeIterableList0.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("{298532945}");
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        boolean boolean18 = jSTypeRegistry13.canPropertyBeDefined(jSType16, "Unknown class name");
        jSTypeRegistry13.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry13.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        jSTypeRegistry24.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry27.createObjectType(objectType30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = objectType31.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot34 = objectType31.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType31);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry37.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType42 = objectType41.toMaybeEnumElementType();
        boolean boolean43 = jSTypeRegistry13.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType31, objectType41);
        boolean boolean45 = jSTypeRegistry9.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType31, "JSDocInfo");
        jSTypeRegistry9.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry9.getType("OR hi!\n");
        jSTypeRegistry9.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo51.getType();
        boolean boolean54 = jSDocInfo51.isImplicitCast();
        boolean boolean55 = jSDocInfo51.isExport();
        java.lang.String str56 = jSDocInfo51.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo51.getType();
        java.lang.String str58 = jSDocInfo51.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo51.getTemplateTypeNames();
        jSTypeRegistry9.setTemplateTypeNames((java.util.List<java.lang.String>) strList59);
        boolean boolean61 = nodeIterableList0.equals((java.lang.Object) jSTypeRegistry9);
        boolean boolean63 = jSTypeRegistry9.hasNamespace("STRING INSTANCEOF 50");
        com.google.javascript.rhino.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter64);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode66 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry65.setResolveMode(resolveMode66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry65.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.ObjectType objectType70 = objectType69.toObjectType();
        boolean boolean71 = objectType70.matchesInt32Context();
        boolean boolean72 = objectType70.isStringValueType();
        boolean boolean73 = objectType70.canBeCalled();
        boolean boolean74 = objectType70.isAllType();
        boolean boolean75 = objectType70.matchesInt32Context();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = objectType70.dereference();
        boolean boolean77 = objectType70.isNullType();
        boolean boolean78 = objectType70.isEnumType();
        boolean boolean79 = objectType70.matchesNumberContext();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection80 = jSTypeRegistry9.getDirectImplementors(objectType70);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNull(jSTypeStaticSlot34);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNull(enumElementType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JSDocInfo" + "'", str56, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + resolveMode66 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode66.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection80);
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        jSDocInfoBuilder1.markText("OR hi!", (int) (short) 10, 38, 30, 1);
        boolean boolean23 = jSDocInfoBuilder1.recordParameterDescription("{1529389073}", "{2076672844}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean27 = jSDocInfoBuilder25.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder29.addAuthor("");
        boolean boolean32 = jSDocInfoBuilder29.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = null;
        boolean boolean34 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression33);
        boolean boolean35 = jSDocInfoBuilder29.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder29.markName("", staticSourceFile37, 29, 50);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node43.isDebugger();
        boolean boolean50 = node43.isSyntheticBlock();
        boolean boolean51 = node43.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = new com.google.javascript.rhino.JSTypeExpression(node43, "Unknown class name");
        boolean boolean55 = jSDocInfoBuilder29.recordThrowDescription(jSTypeExpression53, "?");
        boolean boolean57 = jSTypeExpression53.equals((java.lang.Object) "Not declared as a type name");
        boolean boolean58 = jSTypeExpression53.isOptionalArg();
        boolean boolean60 = jSDocInfoBuilder25.recordThrowDescription(jSTypeExpression53, "InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression53);
        boolean boolean62 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression61);
        com.google.javascript.rhino.Node node63 = jSTypeExpression61.getRoot();
        com.google.javascript.rhino.Node node64 = jSTypeExpression61.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isTypeOf();
        jSDocInfo6.setAssociatedNode(node11);
        boolean boolean14 = jSDocInfo6.containsDeclaration();
        boolean boolean15 = jSDocInfo6.hasType();
        java.lang.String str16 = jSDocInfo6.getDescription();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(50);
        node18.setLength((int) ' ');
        jSDocInfo6.setAssociatedNode(node18);
        jSDocInfo0.setAssociatedNode(node18);
        node18.setType(4079);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isDefine();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str14 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getVersion();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str10 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        java.lang.String str12 = jSDocInfo0.getVersion();
        boolean boolean13 = jSDocInfo0.isNoTypeCheck();
        int int14 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        boolean boolean10 = node2.hasOneChild();
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean12 = node2.isVoid();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isExterns();
        boolean boolean30 = jSDocInfo28.hasReturnType();
        boolean boolean31 = jSDocInfo28.isOverride();
        jSDocInfo28.setLicense("hi!");
        boolean boolean34 = strSet24.contains((java.lang.Object) jSDocInfo28);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair37 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType35, jSType36);
        boolean boolean38 = strSet24.equals((java.lang.Object) jSType36);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node40 = node2.getNext();
        // The following exception was thrown during execution in test generation
        try {
            node40.setCharno(8202);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node1 = typePosition0.getItem();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        node6.putBooleanProp(0, false);
        typePosition0.setItem(node6);
        boolean boolean22 = node6.isFromExterns();
        node6.removeProp(49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        boolean boolean30 = jSDocInfo25.isExport();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        jSDocInfo25.setVisibility(visibility36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo25.getTypedefType();
        boolean boolean40 = jSDocInfo25.hasThisType();
        int int41 = jSDocInfo25.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo25.getImplementedInterfaces();
        node6.setJSDocInfo(jSDocInfo25);
        boolean boolean44 = jSDocInfo25.hasBaseType();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray14 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isImplicitCast();
        boolean boolean17 = jSDocInfo15.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo15.getBaseType();
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        boolean boolean26 = jSDocInfoBuilder21.recordExpose();
        boolean boolean27 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean29 = jSDocInfoBuilder21.addReference("OR hi!");
        boolean boolean30 = nodeIterableList0.equals((java.lang.Object) "OR hi!");
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList0.listIterator(0);
        int int33 = nodeIterableList0.size();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor34 = nodeIterableList0.listIterator();
        java.lang.Object[] objArray35 = nodeIterableList0.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        boolean boolean15 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node2.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node64.siblings();
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet73);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList76 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray77 = nodeIterableList76.toArray();
        boolean boolean78 = strSet73.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList76);
        java.lang.Object[] objArray79 = nodeIterableList76.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList76.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList81 = nodeIterableList76.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder83 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean84 = jSDocInfoBuilder83.recordInterface();
        boolean boolean85 = jSDocInfoBuilder83.isInterfaceRecorded();
        boolean boolean86 = jSDocInfoBuilder83.recordIdGenerator();
        boolean boolean87 = nodeIterableList81.contains((java.lang.Object) boolean86);
        boolean boolean88 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList81);
        java.io.IOException iOException89 = new java.io.IOException();
        java.io.IOException iOException90 = new java.io.IOException((java.lang.Throwable) iOException89);
        java.lang.Throwable[] throwableArray91 = iOException89.getSuppressed();
        java.lang.Throwable[] throwableArray92 = nodeIterableList2.toArray(throwableArray91);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList93 = com.google.common.collect.ImmutableList.of(throwableArray91);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(nodeIterableList76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(nodeIterableList81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableList93);
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isNE();
        boolean boolean5 = node3.isInstanceOf();
        boolean boolean6 = node3.isThrow();
        node3.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node3.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        objectType19.clearResolved();
        node3.setJSType((com.google.javascript.rhino.jstype.JSType) objectType19);
        boolean boolean22 = node3.isTrue();
        node3.setLength(40);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        node27.detachChildren();
        java.lang.String str40 = node27.toStringTree();
        java.lang.String str41 = node27.getString();
        int int42 = node27.getLength();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(49, node3, node27, 49, 39);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder46 = node27.getJsDocBuilderForNode();
        fileLevelJsDocBuilder46.append("");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi! [directives: []]\n" + "'", str40, "OR hi! [directives: []]\n");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder46);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isSyntheticBlock();
        boolean boolean23 = node15.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node15, "Unknown class name");
        boolean boolean27 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression25, "?");
        com.google.javascript.rhino.Node node28 = jSTypeExpression25.getRoot();
        java.lang.String str32 = node28.toString(true, false, false);
        com.google.javascript.rhino.Node node33 = node28.getNext();
        boolean boolean34 = node28.isStringKey();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR hi!" + "'", str32, "OR hi!");
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        java.lang.Object[] objArray22 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        boolean boolean28 = jSDocInfoBuilder24.recordHiddenness();
        boolean boolean29 = jSDocInfoBuilder24.recordConsistentIdGenerator();
        boolean boolean30 = jSDocInfoBuilder24.recordNoTypeCheck();
        boolean boolean31 = nodeIterableList0.equals((java.lang.Object) boolean30);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList0.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream33 = nodeIterableList0.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertNotNull(nodeIterableStream33);
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("{883421079}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder1.isPopulated();
        boolean boolean13 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean14 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean16 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n");
        boolean boolean17 = jSDocInfoBuilder1.recordNoSideEffects();
        jSDocInfoBuilder1.markAnnotation("{885722545}", 43, (int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isTypeOf();
        com.google.javascript.rhino.Node node37 = node25.srcrefTree(node35);
        com.google.javascript.rhino.Node node38 = node25.getLastSibling();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node41.isDebugger();
        com.google.javascript.rhino.Node node48 = node41.getFirstChild();
        boolean boolean49 = node25.hasChild(node48);
        typePosition22.setItem(node48);
        boolean boolean51 = node48.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node48.new FileLevelJsDocBuilder();
        boolean boolean53 = node48.isParamList();
        boolean boolean54 = node48.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSDocInfo55);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean14 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean15 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean18 = jSDocInfoBuilder1.recordMeaning("{143056113}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean22 = jSDocInfoBuilder20.isJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder20.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isExterns();
        boolean boolean26 = jSDocInfo24.hasReturnType();
        jSDocInfo24.setLicense("hi!");
        java.lang.String str29 = jSDocInfo24.toString();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo24.getParameterNames();
        boolean boolean31 = jSDocInfoBuilder20.recordSuppressions(strSet30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordInterface();
        boolean boolean36 = jSDocInfoBuilder33.recordDescription("hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.recordInterface();
        boolean boolean55 = jSDocInfoBuilder52.recordDescription("hi!");
        boolean boolean56 = jSDocInfoBuilder52.recordHiddenness();
        boolean boolean57 = strSet48.remove((java.lang.Object) jSDocInfoBuilder52);
        boolean boolean58 = jSDocInfoBuilder52.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean87 = jSDocInfoBuilder52.recordThrowType(jSTypeExpression84);
        boolean boolean88 = jSDocInfoBuilder33.recordEnumParameterType(jSTypeExpression84);
        boolean boolean89 = jSDocInfoBuilder20.recordType(jSTypeExpression84);
        boolean boolean90 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression84);
        jSDocInfoBuilder1.markName("{794583267}", (int) (short) 0, 51);
        boolean boolean96 = jSDocInfoBuilder1.recordLends("{1240565727}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JSDocInfo" + "'", str29, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        boolean boolean14 = node13.isIn();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        com.google.javascript.rhino.Node node24 = node17.getFirstChild();
        boolean boolean25 = node17.isSwitch();
        int int26 = node17.getLineno();
        com.google.javascript.rhino.Node node27 = node13.useSourceInfoFromForTree(node17);
        boolean boolean28 = node17.isFalse();
        node17.addSuppression("Object");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        boolean boolean41 = node36.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node36.setJSType(jSType42);
        boolean boolean44 = node36.isOptionalArg();
        boolean boolean45 = node36.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo46.getType();
        boolean boolean49 = jSDocInfo46.isImplicitCast();
        boolean boolean50 = jSDocInfo46.isOverride();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        boolean boolean53 = jSDocInfo46.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet54 = jSDocInfo46.getModifies();
        node36.setDirectives(strSet54);
        com.google.javascript.rhino.Node node56 = node17.srcref(node36);
        boolean boolean57 = node36.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean22 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        boolean boolean28 = jSDocInfoBuilder24.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder24.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder24.recordReturnType(jSTypeExpression32);
        boolean boolean35 = jSDocInfoBuilder24.recordDeprecationReason("Not declared as a constructor");
        boolean boolean36 = jSDocInfoBuilder24.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.addAuthor("");
        boolean boolean41 = jSDocInfoBuilder38.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder38.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder46.addAuthor("");
        boolean boolean49 = jSDocInfoBuilder46.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression50);
        boolean boolean52 = jSDocInfoBuilder46.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder46.markName("", staticSourceFile54, 29, 50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node60.isDebugger();
        boolean boolean67 = node60.isSyntheticBlock();
        boolean boolean68 = node60.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node60, "Unknown class name");
        boolean boolean72 = jSDocInfoBuilder46.recordThrowDescription(jSTypeExpression70, "?");
        boolean boolean73 = jSDocInfoBuilder38.recordExtendedInterface(jSTypeExpression70);
        boolean boolean74 = jSDocInfoBuilder24.recordDefineType(jSTypeExpression70);
        boolean boolean75 = jSDocInfoBuilder24.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean78 = jSDocInfoBuilder77.recordInterface();
        boolean boolean80 = jSDocInfoBuilder77.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder77.recordTypedef(jSTypeExpression81);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = new com.google.javascript.rhino.JSTypeExpression(node86, "");
        boolean boolean89 = jSTypeExpression88.isVarArgs();
        boolean boolean90 = jSDocInfoBuilder77.recordDefineType(jSTypeExpression88);
        boolean boolean91 = jSDocInfoBuilder24.recordTypedef(jSTypeExpression88);
        boolean boolean92 = jSDocInfoBuilder15.recordImplementedInterface(jSTypeExpression88);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.hasParameterType("{298532945}");
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("[]");
        java.lang.String str9 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder11.recordTypedef(jSTypeExpression15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node20, "");
        boolean boolean23 = jSTypeExpression22.isVarArgs();
        boolean boolean24 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression22);
        boolean boolean25 = jSTypeExpression22.isOptionalArg();
        boolean boolean26 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean30 = jSDocInfoBuilder28.recordVisibility(visibility29);
        boolean boolean31 = jSDocInfoBuilder28.isConstructorRecorded();
        boolean boolean32 = jSDocInfoBuilder28.isPopulatedWithFileOverview();
        boolean boolean33 = jSDocInfoBuilder28.recordDeprecated();
        boolean boolean34 = jSDocInfoBuilder28.recordExport();
        boolean boolean35 = jSTypeExpression22.equals((java.lang.Object) jSDocInfoBuilder28);
        com.google.javascript.rhino.Node node36 = jSTypeExpression22.getRoot();
        boolean boolean37 = node36.isDo();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        com.google.javascript.rhino.Node node58 = node43.srcref(node53);
        int int59 = node43.getCharno();
        boolean boolean60 = node43.isQuotedString();
        boolean boolean61 = node43.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        node43.setStaticSourceFile(staticSourceFile62);
        int int64 = node43.getSourceOffset();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node43.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node69.siblings();
        java.lang.String[] strArray77 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node69.setDirectives((java.util.Set<java.lang.String>) strSet78);
        node69.putBooleanProp(0, false);
        node69.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean86 = node69.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile87 = node69.getStaticSourceFile();
        boolean boolean88 = staticSourceFile87.isExtern();
        java.lang.String str89 = staticSourceFile87.getName();
        node43.setStaticSourceFile(staticSourceFile87);
        boolean boolean91 = node43.isQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node36.removeChild(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(staticSourceFile65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(staticSourceFile87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str89, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("Unknown class name", "Unknown class name");
        boolean boolean10 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node12 = typePosition11.getItem();
        int int13 = typePosition11.getStartLine();
        int int14 = typePosition11.getStartLine();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node30.isNot();
        int int34 = node30.getLineno();
        com.google.javascript.rhino.Node node35 = node20.srcref(node30);
        boolean boolean36 = node35.isDelProp();
        int int37 = node35.getChildCount();
        typePosition11.setItem(node35);
        jSDocInfoBuilder1.markTypeNode(node35, 49, 36, 36, 44, true);
        int int45 = node35.getSourceOffset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        java.lang.String str25 = node5.toString(true, true, true);
        int int26 = node5.getSourceOffset();
        node5.removeProp(36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo29.getType();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isTypeOf();
        jSDocInfo29.setAssociatedNode(node34);
        boolean boolean37 = jSDocInfo29.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo29.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("OR hi!");
        boolean boolean42 = node41.isInc();
        jSDocInfo29.setAssociatedNode(node41);
        com.google.javascript.rhino.Node node44 = node5.copyInformationFromForTree(node41);
        java.lang.String str45 = node5.getQualifiedName();
        int int46 = node5.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR hi!" + "'", str25, "OR hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.siblings();
        node35.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node44 = node35.getLastChild();
        boolean boolean45 = node35.isCall();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node48.siblings();
        node48.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node57 = node48.getLastChild();
        boolean boolean58 = node48.isCall();
        com.google.javascript.rhino.Node node59 = node35.copyInformationFrom(node48);
        boolean boolean60 = node48.isGetElem();
        boolean boolean61 = nodeIterableList0.contains((java.lang.Object) node48);
        int int63 = node48.getIntProp(42);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        boolean boolean72 = node66.isDec();
        boolean boolean73 = node66.isBlock();
        boolean boolean74 = node66.isTrue();
        boolean boolean75 = node66.isSetterDef();
        node66.removeProp(30);
        boolean boolean78 = node48.isEquivalentTo(node66);
        boolean boolean79 = node48.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isSetterDef();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node27.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType29 = node27.getJSType();
        node22.addChildrenToBack(node27);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = nodeIterableList31.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray40 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition34, typePosition35, typePosition36, typePosition37, typePosition38, typePosition39 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = nodeIterableList31.toArray(typePositionArray40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder43.addAuthor("");
        boolean boolean46 = jSDocInfoBuilder43.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression47);
        int int49 = nodeIterableList31.lastIndexOf((java.lang.Object) jSTypeExpression47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = nodeIterableList31.contains((java.lang.Object) strSet51);
        node22.setDirectives(strSet51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node57.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean65 = nodeIterableList64.add(nodeIterable63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node68.siblings();
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList80 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray81 = nodeIterableList80.toArray();
        boolean boolean82 = strSet77.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        java.lang.Object[] objArray83 = nodeIterableList80.toArray();
        boolean boolean84 = nodeIterableList80.isEmpty();
        boolean boolean85 = nodeIterableList64.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        boolean boolean86 = nodeIterableList54.equals((java.lang.Object) nodeIterableList64);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList54.iterator();
        boolean boolean88 = strSet51.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet90 = jSDocInfo89.getSuppressions();
        boolean boolean91 = jSDocInfo89.isNoSideEffects();
        int int92 = jSDocInfo89.getParameterCount();
        java.util.Set<java.lang.String> strSet93 = jSDocInfo89.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection94 = jSDocInfo89.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = nodeIterableList54.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(typePositionArray40);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(nodeIterableList80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(nodeCollection94);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.recordInterface();
        boolean boolean4 = jSDocInfoBuilder2.isInterfaceRecorded();
        boolean boolean5 = jSDocInfoBuilder2.recordIdGenerator();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isGetElem();
        jSDocInfoBuilder2.markTypeNode(node8, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(12, node8, (int) '4', 0);
        com.google.javascript.rhino.Node node19 = node8.getParent();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean23 = jSDocInfoBuilder21.recordVisibility(visibility22);
        boolean boolean24 = jSDocInfoBuilder21.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo25.getType();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isTypeOf();
        jSDocInfo25.setAssociatedNode(node30);
        boolean boolean33 = jSDocInfo25.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo25.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = jSDocInfo25.getTemplateTypeNames();
        boolean boolean36 = jSDocInfoBuilder21.recordTemplateTypeNames((java.util.List<java.lang.String>) strList35);
        boolean boolean38 = jSDocInfoBuilder21.recordMeaning("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean42 = node41.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = new com.google.javascript.rhino.JSTypeExpression(node41, "INSTANCEOF");
        boolean boolean45 = jSDocInfoBuilder21.recordTypedef(jSTypeExpression44);
        boolean boolean48 = jSDocInfoBuilder21.recordParameterDescription("java.io.IOException: OR hi! [directives: []]\n", "{721844050}");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isNE();
        boolean boolean53 = node51.isInstanceOf();
        boolean boolean54 = node51.isThrow();
        boolean boolean55 = node51.isWhile();
        com.google.javascript.rhino.Node node56 = node51.cloneTree();
        java.lang.String str57 = node56.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = jSDocInfoBuilder21.build(node56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node64.isNot();
        int int68 = node64.getLineno();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node74.isNot();
        int int78 = node74.getLineno();
        com.google.javascript.rhino.Node node79 = node64.srcref(node74);
        boolean boolean80 = node79.isDelProp();
        com.google.javascript.rhino.Node node81 = node79.getLastSibling();
        boolean boolean82 = node81.isFunction();
        boolean boolean83 = node81.isComma();
        int int84 = node81.getCharno();
        java.lang.String str85 = node56.checkTreeEquals(node81);
        com.google.javascript.rhino.Node node86 = node8.useSourceInfoFromForTree(node56);
        boolean boolean87 = node56.isCall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(jSDocInfo58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str12 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("{694195918}", 29, 4095);
        jSDocInfo0.setAssociatedNode(node17);
        boolean boolean19 = jSDocInfo0.isDeprecated();
        boolean boolean20 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str22 = jSDocInfo0.getReturnDescription();
        boolean boolean23 = jSDocInfo0.isNoTypeCheck();
        boolean boolean24 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean14 = node13.isOptionalArg();
        boolean boolean15 = node13.isFalse();
        boolean boolean16 = node13.isVoid();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        boolean boolean23 = node22.isSwitch();
        boolean boolean24 = node13.hasChild(node22);
        jSDocInfoBuilder1.markTypeNode(node13, (int) (short) 0, (int) (byte) 1, (int) (short) 10, 100, true);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDec();
        boolean boolean41 = node34.isBlock();
        boolean boolean42 = node34.hasOneChild();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        boolean boolean49 = jSDocInfoBuilder44.recordExpose();
        boolean boolean50 = jSDocInfoBuilder44.recordNoCompile();
        boolean boolean51 = jSDocInfoBuilder44.isPopulatedWithFileOverview();
        boolean boolean52 = jSDocInfoBuilder44.isPopulated();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        node56.putBooleanProp(0, false);
        node56.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean73 = node56.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node56.getStaticSourceFile();
        boolean boolean75 = staticSourceFile74.isExtern();
        int int77 = staticSourceFile74.getLineOffset(16);
        jSDocInfoBuilder44.markName("None", staticSourceFile74, (int) (byte) 1, 43);
        int int82 = staticSourceFile74.getColumnOfOffset(4);
        node34.setStaticSourceFile(staticSourceFile74);
        jSDocInfoBuilder1.markName("None", staticSourceFile74, 16, 42);
        int int88 = staticSourceFile74.getLineOffset(50);
        java.lang.String str89 = staticSourceFile74.getName();
        int int91 = staticSourceFile74.getColumnOfOffset(32);
        int int93 = staticSourceFile74.getLineOffset((int) (byte) 10);
        boolean boolean94 = staticSourceFile74.isExtern();
        int int96 = staticSourceFile74.getLineOffset(9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-2147483648) + "'", int77 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-2147483648) + "'", int88 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str89, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-2147483648) + "'", int93 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-2147483648) + "'", int96 == (-2147483648));
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo6.hasEnumParameterType();
        boolean boolean14 = jSDocInfo6.isDefine();
        java.lang.String str15 = jSDocInfo6.getLendsName();
        boolean boolean16 = jSDocInfo6.hasModifies();
        boolean boolean17 = jSDocInfo6.isNoSideEffects();
        boolean boolean18 = strSet3.equals((java.lang.Object) boolean17);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray20 = nodeIterableList19.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = nodeIterableList19.reverse();
        boolean boolean22 = nodeIterableList19.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor23 = nodeIterableList19.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        boolean boolean31 = objectType30.matchesInt32Context();
        boolean boolean32 = objectType30.isStringValueType();
        boolean boolean33 = objectType30.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair40 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType30, (com.google.javascript.rhino.jstype.JSType) objectType39);
        com.google.javascript.rhino.jstype.JSType jSType41 = objectType39.restrictByNotNullOrUndefined();
        java.lang.String str42 = objectType39.toAnnotationString();
        boolean boolean43 = nodeIterableList19.equals((java.lang.Object) objectType39);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator44 = nodeIterableList19.spliterator();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean55 = nodeIterableList54.add(nodeIterable53);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node58.siblings();
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        boolean boolean72 = strSet67.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList70);
        java.lang.Object[] objArray73 = nodeIterableList70.toArray();
        boolean boolean74 = nodeIterableList70.isEmpty();
        boolean boolean75 = nodeIterableList54.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList70);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor76 = nodeIterableList54.iterator();
        boolean boolean77 = nodeIterableList19.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList54);
        boolean boolean78 = strSet3.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList19);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList79 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray80 = nodeIterableList79.toArray();
        boolean boolean81 = nodeIterableList79.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor82 = nodeIterableList79.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream83 = nodeIterableList79.parallelStream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor84 = nodeIterableList79.iterator();
        boolean boolean85 = nodeIterableList79.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = nodeIterableList19.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "?" + "'", str42, "?");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(nodeIterableList79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor82);
        org.junit.Assert.assertNotNull(nodeIterableStream83);
        org.junit.Assert.assertNotNull(nodeIterableItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        boolean boolean9 = jSDocInfo6.isNoTypeCheck();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo6.setAssociatedNode(node12);
        boolean boolean14 = node12.isNoSideEffectsCall();
        boolean boolean15 = node3.isEquivalentTo(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node3.siblings();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node20, "");
        boolean boolean23 = node20.isGetterDef();
        com.google.javascript.rhino.Node node24 = node3.copyInformationFrom(node20);
        boolean boolean25 = node20.isIf();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("");
        java.lang.String str32 = inputId31.getIdName();
        node28.setInputId(inputId31);
        boolean boolean34 = node28.isThrow();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(36, "{441018204}");
        boolean boolean38 = node37.hasMoreThanOneChild();
        com.google.javascript.rhino.jstype.JSType jSType39 = node37.getJSType();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoFrom(node37);
        int int41 = node40.getCharno();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(38, node20, node40);
        boolean boolean43 = node20.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder1 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = visibilityEnumBuilder1.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder4 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = visibilityEnumBuilder4.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList8 = visibilityEnumBuilder7.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder7.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = jSDocInfo20.getVisibility();
        boolean boolean24 = jSDocInfo20.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo20.setVisibility(visibility25);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray27 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility25 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder19.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray27);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = jSDocInfo32.getVisibility();
        boolean boolean36 = jSDocInfo32.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo32.setVisibility(visibility37);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray39 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder31.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray39);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList42 = visibilityEnumBuilder41.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder48.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility54);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo59.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = jSDocInfo59.getVisibility();
        boolean boolean63 = jSDocInfo59.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo59.setVisibility(visibility64);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray66 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility64 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray66);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = visibilityEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo71.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = jSDocInfo71.getVisibility();
        boolean boolean75 = jSDocInfo71.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo71.setVisibility(visibility76);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray78 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility76 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder79 = visibilityEnumBuilder70.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder80 = visibilityEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder48.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = visibilityEnumBuilder47.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder84 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder16.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder86 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray78);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder0);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder3);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder6);
        org.junit.Assert.assertNotNull(visibilityEnumList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(visibility23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNull(visibility35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray39);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder41);
        org.junit.Assert.assertNotNull(visibilityEnumList42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder47);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertNull(visibility62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + visibility64 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility64.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(visibility74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray78);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder79);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder80);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder84);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder86);
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean16 = jSDocInfoBuilder11.recordVisibility(visibility15);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean35 = jSDocInfoBuilder32.recordDescription("hi!");
        boolean boolean36 = jSDocInfoBuilder32.recordHiddenness();
        boolean boolean37 = strSet28.remove((java.lang.Object) jSDocInfoBuilder32);
        boolean boolean38 = jSDocInfoBuilder32.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder11.recordThisType(jSTypeExpression64);
        boolean boolean69 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression64);
        boolean boolean70 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isConstructor();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.hasParameterType("{17134484}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray11 = nodeIterableList10.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = nodeIterableList10.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray17 = nodeIterableList16.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList16.reverse();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Object[] objArray28 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList18, 52, node25 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Object[] objArray44 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList34, 52, node41 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = nodeIterableList48.reverse();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Object[] objArray60 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList50, 52, node57 };
        java.lang.Object[][] objArray61 = new java.lang.Object[][] { objArray28, objArray44, objArray60 };
        java.lang.Object[][] objArray62 = nodeIterableList12.toArray(objArray61);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList63 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray64 = nodeIterableList63.toArray();
        int int66 = nodeIterableList63.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray67 = nodeIterableList63.toArray();
        boolean boolean68 = nodeIterableList12.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList63);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream69 = nodeIterableList63.parallelStream();
        java.lang.Object[] objArray70 = nodeIterableList63.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor71 = nodeIterableList63.listIterator();
        com.google.javascript.rhino.JSDocInfo.NamePosition[][][] namePositionArray72 = new com.google.javascript.rhino.JSDocInfo.NamePosition[][][] {};
        com.google.javascript.rhino.JSDocInfo.NamePosition[][][] namePositionArray73 = nodeIterableList63.toArray(namePositionArray72);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = nodeIterableList63.asList();
        boolean boolean75 = strSet9.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(nodeIterableList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor71);
        org.junit.Assert.assertNotNull(namePositionArray72);
        org.junit.Assert.assertNotNull(namePositionArray73);
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.isExpose();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isGetElem();
        jSDocInfoBuilder1.markTypeNode(node7, (int) '#', (int) (short) -1, (int) '4', 2, false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node7.children();
        java.lang.String str19 = node7.toString(false, false, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR hi!" + "'", str19, "OR hi!");
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isExpose();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        boolean boolean12 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean23 = jSDocInfoBuilder20.recordDescription("hi!");
        boolean boolean24 = jSDocInfoBuilder20.recordHiddenness();
        boolean boolean25 = strSet16.remove((java.lang.Object) jSDocInfoBuilder20);
        boolean boolean26 = jSDocInfoBuilder20.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder28.markName("", staticSourceFile36, 29, 50);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        boolean boolean54 = jSDocInfoBuilder28.recordThrowDescription(jSTypeExpression52, "?");
        boolean boolean55 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression52);
        boolean boolean58 = jSDocInfoBuilder1.recordReturnDescription("hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        java.lang.String str63 = node61.getSourceFileName();
        boolean boolean64 = node61.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry66.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean75 = node70.isEquivalentToTyped(node74);
        com.google.javascript.rhino.Node node76 = node70.cloneNode();
        com.google.javascript.rhino.InputId inputId77 = node70.getInputId();
        boolean boolean78 = node70.isLabelName();
        com.google.javascript.rhino.Node node79 = node61.srcref(node70);
        boolean boolean80 = node79.isNoSideEffectsCall();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node79, "InputId: java.io.IOException: None");
        boolean boolean83 = jSDocInfoBuilder1.recordType(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray22 = nodeIterableList21.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = nodeIterableList21.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition24, typePosition25, typePosition26, typePosition27, typePosition28, typePosition29 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray31 = nodeIterableList21.toArray(typePositionArray30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition35, typePosition36, typePosition37, typePosition38, typePosition39, typePosition40 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray42 = nodeIterableList32.toArray(typePositionArray41);
        boolean boolean43 = nodeIterableList21.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream44 = nodeIterableList21.stream();
        boolean boolean45 = nodeIterableList19.contains((java.lang.Object) nodeIterableList21);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        boolean boolean56 = node49.isVoid();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        com.google.javascript.rhino.Node node61 = node49.srcrefTree(node59);
        com.google.javascript.rhino.Node node62 = node49.getLastSibling();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        com.google.javascript.rhino.Node node72 = node65.getFirstChild();
        boolean boolean73 = node49.hasChild(node72);
        typePosition46.setItem(node72);
        boolean boolean75 = node72.isFor();
        boolean boolean76 = node72.isComma();
        node72.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        boolean boolean82 = node72.hasChild(node81);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList83 = com.google.common.collect.ImmutableList.of(node72);
        boolean boolean84 = node72.isVar();
        node72.setCharno((-2147483648));
        int int87 = nodeIterableList21.lastIndexOf((java.lang.Object) node72);
        node72.setLineno(8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean91 = jSDocInfo90.isExterns();
        int int92 = jSDocInfo90.getParameterCount();
        jSDocInfo90.setLicense("None");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection95 = jSDocInfo90.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression96 = jSDocInfo90.getReturnType();
        node72.setJSDocInfo(jSDocInfo90);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility98 = jSDocInfo90.getVisibility();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(typePositionArray31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertNotNull(typePositionArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(nodeCollection95);
        org.junit.Assert.assertNull(jSTypeExpression96);
        org.junit.Assert.assertNull(visibility98);
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        boolean boolean5 = jSDocInfo0.isExterns();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.isExterns();
        int int10 = jSDocInfo8.getParameterCount();
        boolean boolean11 = jSDocInfo8.isIdGenerator();
        boolean boolean12 = jSDocInfo8.isInterface();
        boolean boolean13 = jSDocInfo8.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.isExport();
        java.lang.String str19 = jSDocInfo14.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo14.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        boolean boolean25 = jSDocInfo23.hasModifies();
        boolean boolean26 = jSDocInfo23.isIdGenerator();
        boolean boolean27 = jSDocInfo23.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getType();
        boolean boolean29 = jSDocInfo23.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.containsDeclaration();
        java.lang.String str33 = jSDocInfo30.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean35 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo34.getType();
        boolean boolean37 = jSDocInfo34.isImplicitCast();
        boolean boolean38 = jSDocInfo34.isExport();
        boolean boolean39 = jSDocInfo34.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo34.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection41 = jSDocInfo34.getMarkers();
        boolean boolean42 = jSDocInfo34.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo43.getSuppressions();
        boolean boolean45 = jSDocInfo43.isNoSideEffects();
        boolean boolean46 = jSDocInfo43.isConsistentIdGenerator();
        boolean boolean48 = jSDocInfo43.hasParameter("OR hi!\n");
        boolean boolean49 = jSDocInfo43.hasType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = jSDocInfo50.isNoSideEffects();
        boolean boolean54 = jSDocInfo50.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str55 = jSDocInfo50.getVersion();
        jSDocInfo50.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo50.getTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo59.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList63 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo8, jSDocInfo14, jSDocInfo23, jSDocInfo30, jSDocInfo34, jSDocInfo43, jSDocInfo50, jSDocInfo59);
        java.lang.String str64 = jSDocInfo34.getLicense();
        boolean boolean65 = jSDocInfo34.isNoCompile();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo34.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strSet66.spliterator();
        java.util.Iterator<java.lang.String> strItor68 = strSet66.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strItor68.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertNotNull(markerCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(jSDocInfoList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertNotNull(strItor68);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("INSTANCEOF", 50, 46);
        com.google.javascript.rhino.jstype.JSType jSType14 = node13.getJSType();
        jSDocInfo0.setAssociatedNode(node13);
        boolean boolean16 = node13.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean24 = jSDocInfoBuilder19.recordVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordInterface();
        boolean boolean30 = jSDocInfoBuilder27.recordDescription("hi!");
        boolean boolean31 = jSDocInfoBuilder27.recordHiddenness();
        boolean boolean32 = jSDocInfoBuilder27.recordExpose();
        boolean boolean33 = jSDocInfoBuilder27.recordNoCompile();
        boolean boolean34 = jSDocInfoBuilder27.isPopulatedWithFileOverview();
        boolean boolean35 = jSDocInfoBuilder27.isPopulated();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet48);
        node39.putBooleanProp(0, false);
        node39.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean56 = node39.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node39.getStaticSourceFile();
        boolean boolean58 = staticSourceFile57.isExtern();
        int int60 = staticSourceFile57.getLineOffset(16);
        jSDocInfoBuilder27.markName("None", staticSourceFile57, (int) (byte) 1, 43);
        int int65 = staticSourceFile57.getColumnOfOffset(4);
        java.lang.String str66 = staticSourceFile57.getName();
        int int68 = staticSourceFile57.getLineOfOffset(32);
        java.lang.String str69 = staticSourceFile57.getName();
        jSDocInfoBuilder19.markName("InputId: Not declared as a constructor", staticSourceFile57, 49, 42);
        int int74 = staticSourceFile57.getColumnOfOffset(44);
        jSDocInfoBuilder1.markName("{441018204}", staticSourceFile57, (int) (short) -1, 15);
        boolean boolean78 = staticSourceFile57.isExtern();
        int int80 = staticSourceFile57.getLineOfOffset(40960);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-2147483648) + "'", int60 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str66, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str69, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        boolean boolean11 = node9.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isExport();
        java.lang.String str18 = jSDocInfo13.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo13.getType();
        boolean boolean20 = jSDocInfo13.isDeprecated();
        node9.putProp(32, (java.lang.Object) jSDocInfo13);
        boolean boolean22 = jSDocInfo13.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo13.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo13.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo13.getBaseType();
        int int26 = jSDocInfo13.getParameterCount();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JSDocInfo" + "'", str18, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        boolean boolean10 = strSet8.contains((java.lang.Object) "{639869264}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo5.getSuppressions();
        boolean boolean7 = jSDocInfo5.isNoSideEffects();
        java.lang.String str8 = jSDocInfo5.getReturnDescription();
        boolean boolean10 = jSDocInfo5.hasParameter("Not declared as a constructor");
        java.lang.String str11 = jSDocInfo5.getMeaning();
        boolean boolean12 = jSDocInfo5.isJavaDispatch();
        node3.setJSDocInfo(jSDocInfo5);
        java.lang.String str14 = jSDocInfo5.getLendsName();
        boolean boolean15 = jSDocInfo5.hasType();
        boolean boolean16 = jSDocInfo5.isDeprecated();
        com.google.javascript.rhino.Node node17 = jSDocInfo5.getAssociatedNode();
        boolean boolean18 = jSDocInfo5.isIdGenerator();
        java.lang.String str19 = jSDocInfo5.getOriginalCommentString();
        boolean boolean20 = jSDocInfo5.isOverride();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder6.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean11 = jSDocInfoBuilder6.recordVisibility(visibility10);
        boolean boolean13 = jSDocInfoBuilder6.recordLends("OR hi!\n");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        node16.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        boolean boolean29 = node27.isDelProp();
        boolean boolean30 = node27.hasChildren();
        boolean boolean31 = node27.isOr();
        java.lang.String str32 = node16.checkTreeEquals(node27);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(51, node36, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable47 = node46.getAncestors();
        com.google.javascript.rhino.Node node48 = node27.copyInformationFrom(node46);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node46, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node51 = jSTypeExpression50.getRoot();
        boolean boolean52 = jSDocInfoBuilder6.recordEnumParameterType(jSTypeExpression50);
        boolean boolean53 = jSDocInfoBuilder1.recordThisType(jSTypeExpression50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        boolean boolean62 = node59.isNot();
        int int63 = node59.getLineno();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        boolean boolean72 = node69.isNot();
        int int73 = node69.getLineno();
        com.google.javascript.rhino.Node node74 = node59.srcref(node69);
        boolean boolean75 = node74.isDelProp();
        com.google.javascript.rhino.Node node76 = node74.getLastSibling();
        boolean boolean77 = node76.isFunction();
        boolean boolean78 = node76.isComma();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable79 = node76.getAncestors();
        node76.setCharno((int) (short) 100);
        boolean boolean82 = node76.isString();
        boolean boolean83 = jSTypeExpression50.equals((java.lang.Object) node76);
        boolean boolean84 = node76.isThis();
        boolean boolean85 = node76.isTrue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str32, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ancestorIterable47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(ancestorIterable79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder11.addAuthor("OR hi!\n");
        boolean boolean78 = jSDocInfoBuilder11.recordExterns();
        jSDocInfoBuilder11.markName("{225764511}", (int) (short) 10, 200716);
        jSDocInfoBuilder11.markAnnotation("{1142604835}", 97, 53);
        boolean boolean88 = jSDocInfoBuilder11.recordFileOverview("null");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        jSDocInfo0.setLicense("");
        java.lang.String str37 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDec();
        boolean boolean47 = node40.isBlock();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node50.siblings();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet59);
        int int62 = strSet59.size();
        strSet59.clear();
        node40.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode67 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry66.setResolveMode(resolveMode67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        boolean boolean71 = jSTypeRegistry66.canPropertyBeDefined(jSType69, "Unknown class name");
        jSTypeRegistry66.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode76 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry75.setResolveMode(resolveMode76);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry75.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSTypeRegistry66.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType79, "");
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType79.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean84 = objectType79.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType79.getRestrictedTypeGivenToBooleanOutcome(false);
        node40.setJSType((com.google.javascript.rhino.jstype.JSType) objectType79);
        node40.putBooleanProp((int) (short) 10, true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder91 = node40.getJsDocBuilderForNode();
        jSDocInfo0.setAssociatedNode(node40);
        java.util.Set<java.lang.String> strSet93 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + resolveMode67 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode67.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode76 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode76.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(jSType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder91);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.hasThisType();
        boolean boolean3 = jSDocInfo0.isDefine();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        boolean boolean12 = jSDocInfo0.hasModifies();
        java.lang.String str13 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(nodeCollection14);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.recordPreserveTry();
        boolean boolean9 = nodeIterableList0.equals((java.lang.Object) boolean8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList0.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray13 = nodeIterableList12.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = nodeIterableList12.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray19 = nodeIterableList18.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList18.reverse();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList20, 52, node27 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray35 = nodeIterableList34.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList34.reverse();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList36, 52, node43 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray51 = nodeIterableList50.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = nodeIterableList50.reverse();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList52, 52, node59 };
        java.lang.Object[][] objArray63 = new java.lang.Object[][] { objArray30, objArray46, objArray62 };
        java.lang.Object[][] objArray64 = nodeIterableList14.toArray(objArray63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray66 = nodeIterableList65.toArray();
        int int68 = nodeIterableList65.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray69 = nodeIterableList65.toArray();
        boolean boolean70 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList65);
        boolean boolean72 = nodeIterableList14.equals((java.lang.Object) (short) 1);
        int int73 = nodeIterableList14.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream74 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = nodeIterableList14.reverse();
        boolean boolean76 = nodeIterableList75.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = nodeIterableList10.addAll(44, (java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream74);
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("java.io.IOException: OR hi!\n    OR hi!\n");
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry1.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        jSTypeRegistry1.forwardDeclareType("{1242212142}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable12 = jSTypeRegistry1.getEachReferenceTypeWithProperty("OR hi! [directives: []]\n");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        jSTypeRegistry15.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode19 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry18.setResolveMode(resolveMode19);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry18.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = objectType22.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot25 = objectType22.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode29 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry28.setResolveMode(resolveMode29);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry28.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = objectType32.toObjectType();
        boolean boolean34 = objectType33.matchesInt32Context();
        boolean boolean35 = objectType33.isStringValueType();
        boolean boolean36 = objectType33.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode39 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry38.setResolveMode(resolveMode39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry38.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair43 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType33, (com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean44 = objectType42.isNullable();
        boolean boolean45 = objectType42.isString();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        boolean boolean49 = nodeIterableList47.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder50.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo56.getVisibility();
        boolean boolean60 = jSDocInfo56.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo56.setVisibility(visibility61);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray63 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility61 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder65.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo68.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = jSDocInfo68.getVisibility();
        boolean boolean72 = jSDocInfo68.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo68.setVisibility(visibility73);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray75 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility73 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder67.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = visibilityEnumBuilder64.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder78 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray79 = nodeIterableList47.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray75);
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry81.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        int int86 = nodeIterableList47.lastIndexOf((java.lang.Object) jSTypeList83);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry15.createFunctionType(objectType42, jSType46, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.Node node88 = jSTypeRegistry1.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable90 = jSTypeRegistry1.getTypesWithProperty("java.io.IOException: Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("java.io.IOException: OR []");
        com.google.javascript.rhino.jstype.JSType jSType97 = jSTypeRegistry1.createNamedType("{1165562229}", "", 6, 2);
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = jSType97.getJSDocInfo();
        boolean boolean99 = jSType97.hasAnyTemplate();
        org.junit.Assert.assertNotNull(jSType8);
        org.junit.Assert.assertNotNull(objectTypeIterable12);
        org.junit.Assert.assertTrue("'" + resolveMode19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode19.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNull(jSTypeStaticSlot25);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + resolveMode29 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode29.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode39 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode39.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(visibility71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray75);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder77);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder78);
        org.junit.Assert.assertNotNull(visibilityEnumArray79);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(jSTypeIterable90);
        org.junit.Assert.assertNotNull(jSType97);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markText("function (this:me, {726862509}): me", (int) (byte) 1, (int) '#', 52, 51);
        boolean boolean18 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean20 = jSDocInfoBuilder1.recordLends("{}");
        boolean boolean21 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean16 = jSDocInfoBuilder1.addAuthor("STRING INSTANCEOF 50");
        boolean boolean18 = jSDocInfoBuilder1.hasParameter("{1162609263}");
        boolean boolean20 = jSDocInfoBuilder1.recordBlockDescription("IN [jsdoc_info: JSDocInfo] [source_file: OR hi!\n    OR hi!\n]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean9 = jSDocInfoBuilder1.recordFileOverview("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isTypeOf();
        com.google.javascript.rhino.Node node33 = node21.srcrefTree(node31);
        int int34 = node12.getIndexOfChild(node31);
        boolean boolean35 = node31.isArrayLit();
        boolean boolean36 = node31.isSyntheticBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder1.build(node31);
        boolean boolean38 = jSDocInfo37.isNoShadow();
        boolean boolean39 = jSDocInfo37.isOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList1 = visibilityEnumBuilder0.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection2 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean6 = jSDocInfoBuilder4.recordVisibility(visibility5);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean13 = jSDocInfoBuilder11.recordVisibility(visibility12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility18);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray20 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8, visibility9, visibility12, visibility15, visibility18 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList21 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList23 = visibilityEnumBuilder22.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo27.getVisibility();
        boolean boolean31 = jSDocInfo27.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo27.setVisibility(visibility32);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray34 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility32 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray34);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility36);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo56.getVisibility();
        boolean boolean60 = jSDocInfo56.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo56.setVisibility(visibility61);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray63 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility61 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder37.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection69 = visibilityEnumBuilder22.build();
        org.junit.Assert.assertNotNull(visibilityEnumList1);
        org.junit.Assert.assertNotNull(visibilityEnumCollection2);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder19);
        org.junit.Assert.assertNotNull(visibilityArray20);
        org.junit.Assert.assertNotNull(visibilityEnumList21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertNotNull(visibilityEnumList23);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(visibility30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertNotNull(visibilityEnumCollection69);
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("{}");
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        jSDocInfo0.setLicense("function (this:me, {281774727}): me");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.markName("{1560389945}", 0, 53);
        jSDocInfoBuilder1.markText("{1489504690}", 200716, 31, 4, (int) 'a');
        boolean boolean26 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordLends("OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder14.recordDefineType(jSTypeExpression15);
        jSDocInfoBuilder14.markAnnotation("None", 48, 51);
        boolean boolean21 = jSDocInfoBuilder14.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression27);
        boolean boolean30 = jSDocInfoBuilder23.recordMeaning("hi!");
        boolean boolean32 = jSDocInfoBuilder23.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordInterface();
        boolean boolean37 = jSDocInfoBuilder34.recordDescription("hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean56 = jSDocInfoBuilder53.recordDescription("hi!");
        boolean boolean57 = jSDocInfoBuilder53.recordHiddenness();
        boolean boolean58 = strSet49.remove((java.lang.Object) jSDocInfoBuilder53);
        boolean boolean59 = jSDocInfoBuilder53.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder61.addAuthor("");
        boolean boolean64 = jSDocInfoBuilder61.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = null;
        boolean boolean66 = jSDocInfoBuilder61.recordThrowType(jSTypeExpression65);
        boolean boolean67 = jSDocInfoBuilder61.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder61.markName("", staticSourceFile69, 29, 50);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node75.isDebugger();
        boolean boolean82 = node75.isSyntheticBlock();
        boolean boolean83 = node75.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node75, "Unknown class name");
        boolean boolean87 = jSDocInfoBuilder61.recordThrowDescription(jSTypeExpression85, "?");
        boolean boolean88 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression85);
        boolean boolean89 = jSDocInfoBuilder34.recordEnumParameterType(jSTypeExpression85);
        boolean boolean90 = jSDocInfoBuilder23.recordImplementedInterface(jSTypeExpression85);
        boolean boolean91 = jSDocInfoBuilder14.recordEnumParameterType(jSTypeExpression85);
        com.google.javascript.rhino.Node node92 = jSTypeExpression85.getRoot();
        boolean boolean93 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression85);
        boolean boolean94 = jSDocInfoBuilder1.recordThisType(jSTypeExpression85);
        boolean boolean95 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node4.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo6.getSuppressions();
        boolean boolean8 = jSDocInfo6.isNoSideEffects();
        java.lang.String str9 = jSDocInfo6.getReturnDescription();
        boolean boolean11 = jSDocInfo6.hasParameter("Not declared as a constructor");
        java.lang.String str12 = jSDocInfo6.getMeaning();
        boolean boolean13 = jSDocInfo6.isJavaDispatch();
        node4.setJSDocInfo(jSDocInfo6);
        boolean boolean15 = node4.isDo();
        com.google.javascript.rhino.InputId inputId17 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        node4.setInputId(inputId17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node24 = node23.cloneNode();
        boolean boolean25 = node24.isAssignAdd();
        boolean boolean26 = inputId17.equals((java.lang.Object) node24);
        node24.putIntProp(52, 52);
        node24.setSourceEncodedPosition(8202);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        boolean boolean42 = node37.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node37.setJSType(jSType43);
        com.google.javascript.rhino.Node node45 = node37.cloneNode();
        com.google.javascript.rhino.Node node46 = node45.cloneTree();
        boolean boolean47 = node46.isInc();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((-2147483648), node24, node46);
        boolean boolean49 = node24.isLabelName();
        boolean boolean50 = node24.isThis();
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isExterns();
        com.google.javascript.rhino.Node node38 = jSDocInfo36.getAssociatedNode();
        boolean boolean39 = jSDocInfo36.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getType();
        boolean boolean41 = jSDocInfo36.hasReturnType();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo36.getModifies();
        boolean boolean43 = nodeIterableList20.equals((java.lang.Object) strSet42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet55);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList58 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray59 = nodeIterableList58.toArray();
        boolean boolean60 = strSet55.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList58);
        java.lang.Object[] objArray61 = nodeIterableList58.toArray();
        java.lang.Object[] objArray62 = nodeIterableList58.toArray();
        boolean boolean64 = nodeIterableList58.equals((java.lang.Object) "Named type with empty name component");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = nodeIterableList20.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(nodeIterableList58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = nodeIterableList6.reverse();
        boolean boolean8 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getSuppressions();
        boolean boolean11 = jSDocInfo9.isNoSideEffects();
        java.lang.String str12 = jSDocInfo9.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        int int14 = jSDocInfo9.getImplementedInterfaceCount();
        boolean boolean15 = nodeIterableList6.contains((java.lang.Object) int14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder17.recordDefineType(jSTypeExpression21);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder17.recordThisType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder17.recordDefineType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder17.recordExport();
        boolean boolean29 = jSDocInfoBuilder17.recordExport();
        boolean boolean30 = nodeIterableList6.equals((java.lang.Object) boolean29);
        java.lang.Object[] objArray31 = nodeIterableList6.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList6.listIterator();
        boolean boolean33 = nodeIterableItor32.hasPrevious();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(50);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        boolean boolean45 = node38.isVoid();
        boolean boolean46 = node38.hasOneChild();
        boolean boolean47 = node38.isLabelName();
        java.lang.String str48 = node38.getQualifiedName();
        com.google.javascript.rhino.Node node49 = node35.useSourceInfoFromForTree(node38);
        boolean boolean50 = node38.isVar();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable51 = node38.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor32.set((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(ancestorIterable51);
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        node2.setSourceFileForTesting("");
        node2.setQuotedString();
        boolean boolean12 = node2.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo13.getSuppressions();
        boolean boolean15 = jSDocInfo13.isNoSideEffects();
        int int16 = jSDocInfo13.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo17.getType();
        boolean boolean20 = jSDocInfo17.isImplicitCast();
        boolean boolean21 = jSDocInfo17.isExport();
        java.lang.String str22 = jSDocInfo17.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo23.getType();
        boolean boolean26 = jSDocInfo23.isImplicitCast();
        boolean boolean27 = jSDocInfo23.isExport();
        boolean boolean28 = jSDocInfo23.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo23.getReturnType();
        boolean boolean30 = jSDocInfo23.containsDeclaration();
        int int31 = jSDocInfo23.getParameterCount();
        java.lang.String str32 = jSDocInfo23.getVersion();
        jSDocInfo23.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        boolean boolean38 = jSDocInfo35.isNoTypeCheck();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo35.setAssociatedNode(node41);
        jSDocInfo35.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.isExterns();
        com.google.javascript.rhino.Node node47 = jSDocInfo45.getAssociatedNode();
        boolean boolean48 = jSDocInfo45.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo49.getType();
        boolean boolean52 = jSDocInfo49.isImplicitCast();
        boolean boolean53 = jSDocInfo49.isOverride();
        boolean boolean54 = jSDocInfo49.isNoSideEffects();
        boolean boolean55 = jSDocInfo49.containsDeclaration();
        java.lang.String str56 = jSDocInfo49.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo57.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean60 = jSDocInfo59.isExterns();
        int int61 = jSDocInfo59.getParameterCount();
        boolean boolean62 = jSDocInfo59.isIdGenerator();
        boolean boolean63 = jSDocInfo59.isInterface();
        boolean boolean64 = jSDocInfo59.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo59.getThisType();
        java.lang.String str66 = jSDocInfo59.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo67.getSuppressions();
        boolean boolean69 = jSDocInfo67.isNoSideEffects();
        java.lang.String str70 = jSDocInfo67.getReturnDescription();
        boolean boolean72 = jSDocInfo67.hasParameter("Not declared as a constructor");
        java.lang.String str73 = jSDocInfo67.getMeaning();
        boolean boolean74 = jSDocInfo67.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isExterns();
        com.google.javascript.rhino.Node node77 = jSDocInfo75.getAssociatedNode();
        boolean boolean78 = jSDocInfo75.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo75.getType();
        boolean boolean81 = jSDocInfo75.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo82.getSuppressions();
        boolean boolean84 = jSDocInfo82.isNoSideEffects();
        java.lang.String str85 = jSDocInfo82.getReturnDescription();
        java.lang.String str86 = jSDocInfo82.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean88 = jSDocInfo87.hasFileOverview();
        boolean boolean89 = jSDocInfo87.hasModifies();
        int int90 = jSDocInfo87.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection91 = jSDocInfo87.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray92 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList93 = com.google.common.collect.ImmutableList.of(jSDocInfo13, jSDocInfo17, jSDocInfo23, jSDocInfo35, jSDocInfo45, jSDocInfo49, jSDocInfo57, jSDocInfo59, jSDocInfo67, jSDocInfo75, jSDocInfo82, jSDocInfo87, jSDocInfoArray92);
        node2.setJSDocInfo(jSDocInfo49);
        boolean boolean95 = jSDocInfo49.isJavaDispatch();
        boolean boolean96 = jSDocInfo49.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression97 = jSDocInfo49.getTypedefType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JSDocInfo" + "'", str22, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(nodeCollection91);
        org.junit.Assert.assertNotNull(jSDocInfoArray92);
        org.junit.Assert.assertNotNull(jSDocInfoList93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSTypeExpression97);
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder13.recordMeaning("hi!");
        boolean boolean22 = jSDocInfoBuilder13.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        boolean boolean78 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression75);
        boolean boolean79 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression75);
        boolean boolean80 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression75);
        boolean boolean82 = jSDocInfoBuilder1.recordType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean87 = node86.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = new com.google.javascript.rhino.JSTypeExpression(node86, "INSTANCEOF");
        boolean boolean90 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression89);
        java.lang.Object obj91 = null;
        boolean boolean92 = jSTypeExpression89.equals(obj91);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        boolean boolean53 = jSDocInfoBuilder1.recordExport();
        boolean boolean54 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean56 = jSDocInfoBuilder1.hasParameter("{785960677}");
        jSDocInfoBuilder1.markText("{331873443}", 0, (int) (byte) 100, 31, 0);
        boolean boolean63 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean64 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        int int15 = node2.getSourceOffset();
        boolean boolean16 = node2.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }
}


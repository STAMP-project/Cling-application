import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("{1229225967}");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        boolean boolean11 = node5.isDebugger();
        boolean boolean12 = node5.isVoid();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isTypeOf();
        com.google.javascript.rhino.Node node17 = node5.srcrefTree(node15);
        boolean boolean18 = node17.isObjectLit();
        boolean boolean19 = node17.isExprResult();
        com.google.javascript.rhino.Node node20 = node2.useSourceInfoIfMissingFrom(node17);
        boolean boolean21 = node2.isBlock();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        node24.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node33 = node24.getLastChild();
        boolean boolean34 = node24.isCall();
        boolean boolean35 = node2.isEquivalentToTyped(node24);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(43, node2, 1, 51);
        boolean boolean39 = node38.isRegExp();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean43 = jSDocInfoBuilder41.isJavaDispatch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDec();
        boolean boolean53 = node46.isBlock();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        int int68 = strSet65.size();
        strSet65.clear();
        node46.setDirectives((java.util.Set<java.lang.String>) strSet65);
        boolean boolean71 = jSDocInfoBuilder41.recordModifies((java.util.Set<java.lang.String>) strSet65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray73 = nodeIterableList72.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = nodeIterableList72.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition80 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray81 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition75, typePosition76, typePosition77, typePosition78, typePosition79, typePosition80 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray82 = nodeIterableList72.toArray(typePositionArray81);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder84 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean86 = jSDocInfoBuilder84.addAuthor("");
        boolean boolean87 = jSDocInfoBuilder84.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = null;
        boolean boolean89 = jSDocInfoBuilder84.recordReturnType(jSTypeExpression88);
        int int90 = nodeIterableList72.lastIndexOf((java.lang.Object) jSTypeExpression88);
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet92 = jSDocInfo91.getSuppressions();
        boolean boolean93 = nodeIterableList72.contains((java.lang.Object) strSet92);
        java.lang.Object[] objArray94 = nodeIterableList72.toArray();
        boolean boolean95 = strSet65.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet65);
        int int97 = strSet65.size();
        java.util.Iterator<java.lang.String> strItor98 = strSet65.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator99 = strSet65.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertNotNull(typePositionArray81);
        org.junit.Assert.assertNotNull(typePositionArray82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(strItor98);
        org.junit.Assert.assertNotNull(strSpliterator99);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray4 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        boolean boolean13 = node7.isDebugger();
        boolean boolean14 = node7.isVoid();
        boolean boolean15 = node7.hasOneChild();
        com.google.javascript.rhino.InputId inputId16 = node7.getInputId();
        java.lang.String str17 = node7.toStringTree();
        com.google.javascript.rhino.Node node18 = node7.removeFirstChild();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry20.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean29 = node24.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node30 = node24.cloneNode();
        boolean boolean31 = node24.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo35.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = jSDocInfo35.getVisibility();
        boolean boolean39 = jSDocInfo35.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo35.setVisibility(visibility40);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray42 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility40 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray42);
        java.lang.Object[] objArray44 = new java.lang.Object[] { node7, node24, visibilityArray42 };
        java.lang.Object[][] objArray45 = new java.lang.Object[][] { objArray44 };
        java.lang.Object[][][] objArray46 = new java.lang.Object[][][] { objArray45 };
        java.lang.Object[][][] objArray47 = nodeIterableList0.toArray(objArray46);
        boolean boolean48 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray50 = nodeIterableList49.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = nodeIterableList49.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray58 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition52, typePosition53, typePosition54, typePosition55, typePosition56, typePosition57 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray59 = nodeIterableList49.toArray(typePositionArray58);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor60 = nodeIterableList49.iterator();
        java.lang.Object[] objArray61 = nodeIterableList49.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList49.parallelStream();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean67 = node66.isObjectLit();
        int int68 = nodeIterableList49.indexOf((java.lang.Object) boolean67);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream69 = nodeIterableList49.stream();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator70 = nodeIterableList49.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = nodeIterableList49.asList();
        boolean boolean72 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = nodeIterableList71.get(131075);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (131075) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str17, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(visibility38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray42);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[OR hi!, PARAM_LIST, [PRIVATE]]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(typePositionArray58);
        org.junit.Assert.assertNotNull(typePositionArray59);
        org.junit.Assert.assertNotNull(nodeIterableItor60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream69);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator70);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        boolean boolean18 = strSet11.contains((java.lang.Object) nodeIterableList17);
        java.util.Iterator<java.lang.String> strItor19 = strSet11.iterator();
        java.util.Iterator<java.lang.String> strItor20 = strSet11.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = jSDocInfoBuilder22.recordConsistentIdGenerator();
        boolean boolean28 = jSDocInfoBuilder22.recordIdGenerator();
        boolean boolean29 = jSDocInfoBuilder22.recordExpose();
        boolean boolean30 = jSDocInfoBuilder22.isPopulated();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean35 = node34.isOptionalArg();
        boolean boolean36 = node34.isFalse();
        boolean boolean37 = node34.isVoid();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray40 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList41 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList41, jSTypeArray40);
        com.google.javascript.rhino.Node node43 = jSTypeRegistry39.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList41);
        boolean boolean44 = node43.isSwitch();
        boolean boolean45 = node34.hasChild(node43);
        jSDocInfoBuilder22.markTypeNode(node34, (int) (short) 0, (int) (byte) 1, (int) (short) 10, 100, true);
        boolean boolean53 = jSDocInfoBuilder22.addReference("{721844050}");
        boolean boolean54 = strSet11.contains((java.lang.Object) boolean53);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordInterface();
        boolean boolean59 = jSDocInfoBuilder56.recordDescription("hi!");
        boolean boolean60 = jSDocInfoBuilder56.recordHiddenness();
        boolean boolean61 = jSDocInfoBuilder56.recordExpose();
        boolean boolean62 = jSDocInfoBuilder56.recordNoCompile();
        boolean boolean63 = jSDocInfoBuilder56.isPopulatedWithFileOverview();
        boolean boolean64 = jSDocInfoBuilder56.isJavaDispatch();
        boolean boolean65 = jSDocInfoBuilder56.recordNoAlias();
        boolean boolean66 = strSet11.contains((java.lang.Object) jSDocInfoBuilder56);
        jSDocInfoBuilder56.markText("{793784210}", 49197, 45, 13, 13);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str4 = jSDocInfo0.getDescription();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.hasParameter("NAME");
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry34.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        int int39 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeList36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList0.reverse();
        boolean boolean41 = nodeIterableList0.isEmpty();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isDebugger();
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("");
        java.lang.String str48 = inputId47.getIdName();
        node44.setInputId(inputId47);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode68 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry67.setResolveMode(resolveMode68);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        boolean boolean72 = jSTypeRegistry67.canPropertyBeDefined(jSType70, "Unknown class name");
        jSTypeRegistry67.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode77 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry76.setResolveMode(resolveMode77);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry76.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.JSType jSType82 = jSTypeRegistry67.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType80, "");
        boolean boolean83 = jSType82.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = objectType65.testForEquality(jSType82);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSType82.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType86 = jSTypeRegistry51.createNullableType(jSType82);
        boolean boolean87 = jSType82.isTemplateType();
        boolean boolean88 = jSType82.isBooleanObjectType();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = jSType82.getPossibleToBooleanOutcomes();
        boolean boolean90 = inputId47.equals((java.lang.Object) jSType82);
        boolean boolean91 = jSType82.isNominalConstructor();
        boolean boolean92 = nodeIterableList0.contains((java.lang.Object) jSType82);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable94 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.add(4098, nodeIterable94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + resolveMode68 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode68.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + resolveMode77 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode77.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        node13.setLineno(51);
        boolean boolean17 = node13.isCase();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean20 = jSDocInfoBuilder1.recordThisType(jSTypeExpression19);
        boolean boolean21 = jSTypeExpression19.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean11 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean12 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder1.recordBlockDescription("function (this:me, {1856505431}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("java.io.IOException: None");
        boolean boolean11 = jSDocInfoBuilder1.recordReturnDescription("{218130081}");
        boolean boolean13 = jSDocInfoBuilder1.recordBlockDescription("{272877914}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = jSDocInfo14.getVisibility();
        boolean boolean18 = jSDocInfo14.shouldPreserveTry();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        java.lang.String str20 = jSDocInfo14.getOriginalCommentString();
        jSDocInfo14.setLicense("java.io.IOException: OR []");
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        int int25 = jSDocInfo23.getParameterCount();
        boolean boolean26 = jSDocInfo23.isIdGenerator();
        boolean boolean27 = jSDocInfo23.isInterface();
        java.lang.String str28 = jSDocInfo23.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo23.getThrownTypes();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList31 = visibilityEnumBuilder30.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection32 = visibilityEnumBuilder30.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean36 = jSDocInfoBuilder34.recordVisibility(visibility35);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility35);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean43 = jSDocInfoBuilder41.recordVisibility(visibility42);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder47.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility48);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray50 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility38, visibility39, visibility42, visibility45, visibility48 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList51 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray50);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray50);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList53 = visibilityEnumBuilder52.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList55 = visibilityEnumBuilder54.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo56.getVisibility();
        boolean boolean60 = jSDocInfo56.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo56.setVisibility(visibility61);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder64.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean68 = jSDocInfo67.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo67.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = jSDocInfo67.getVisibility();
        boolean boolean71 = jSDocInfo67.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo67.setVisibility(visibility72);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray74 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility72 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = visibilityEnumBuilder66.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray74);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder63.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray74);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder77 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray74);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder78 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList79 = visibilityEnumBuilder78.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean81 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo80.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = jSDocInfo80.getVisibility();
        boolean boolean84 = jSDocInfo80.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility85 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo80.setVisibility(visibility85);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder87 = visibilityEnumBuilder78.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility85);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder88 = visibilityEnumBuilder77.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility85);
        jSDocInfo23.setVisibility(visibility85);
        jSDocInfo14.setVisibility(visibility85);
        boolean boolean91 = jSDocInfoBuilder1.recordVisibility(visibility85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(visibility17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JSDocInfo" + "'", str28, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(visibilityEnumList31);
        org.junit.Assert.assertNotNull(visibilityEnumCollection32);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertNotNull(visibilityArray50);
        org.junit.Assert.assertNotNull(visibilityEnumList51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(visibilityEnumList53);
        org.junit.Assert.assertNotNull(visibilityEnumList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertTrue("'" + visibility65 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility65.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(visibility70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray74);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder77);
        org.junit.Assert.assertNotNull(visibilityEnumList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(visibility83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + visibility85 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility85.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder87);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        node8.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        boolean boolean21 = node19.isDelProp();
        boolean boolean22 = node19.hasChildren();
        boolean boolean23 = node19.isOr();
        java.lang.String str24 = node8.checkTreeEquals(node19);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        com.google.javascript.rhino.Node node40 = node19.copyInformationFrom(node38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = new com.google.javascript.rhino.JSTypeExpression(node38, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = jSTypeExpression42.getRoot();
        jSDocInfoBuilder1.markTypeNode(node43, (int) (short) 0, 40, (int) (short) 0, 0, true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry57.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean66 = node61.isEquivalentToTyped(node65);
        com.google.javascript.rhino.Node node67 = node61.cloneNode();
        com.google.javascript.rhino.InputId inputId68 = node61.getInputId();
        boolean boolean69 = node61.isLabelName();
        com.google.javascript.rhino.Node node70 = node52.srcref(node61);
        node52.setIsSyntheticBlock(true);
        node52.detachChildren();
        jSDocInfoBuilder1.markTypeNode(node52, 4095, 15, 42, 52, true);
        boolean boolean80 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str24, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(inputId68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression10);
        jSDocInfoBuilder1.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean16 = jSDocInfoBuilder1.recordOverride();
        java.lang.String[] strArray19 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        boolean boolean22 = strSet20.isEmpty();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList51 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray52 = nodeIterableList51.toArray();
        boolean boolean53 = strSet48.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList51);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList54 = com.google.common.collect.ImmutableList.of(strSet20, strSet34, strSet48);
        int int55 = strSet34.size();
        boolean boolean56 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet34);
        boolean boolean58 = jSDocInfoBuilder1.recordReturnDescription("undefined");
        boolean boolean59 = jSDocInfoBuilder1.recordDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(nodeIterableList51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSetList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        node2.setWasEmptyNode(true);
        node2.setVarArgs(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node2, "java.io.IOException: None");
        com.google.javascript.rhino.Node node15 = jSTypeExpression14.getRoot();
        boolean boolean16 = jSTypeExpression14.isVarArgs();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.addAuthor("");
        boolean boolean21 = jSDocInfoBuilder18.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression22);
        boolean boolean24 = jSDocInfoBuilder18.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        jSDocInfoBuilder18.markName("", staticSourceFile26, 29, 50);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node32.siblings();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.recordInterface();
        boolean boolean48 = jSDocInfoBuilder45.recordDescription("hi!");
        boolean boolean49 = jSDocInfoBuilder45.recordHiddenness();
        boolean boolean50 = strSet41.remove((java.lang.Object) jSDocInfoBuilder45);
        boolean boolean51 = jSDocInfoBuilder45.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.addAuthor("");
        boolean boolean56 = jSDocInfoBuilder53.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression57);
        boolean boolean59 = jSDocInfoBuilder53.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder53.markName("", staticSourceFile61, 29, 50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isSyntheticBlock();
        boolean boolean75 = node67.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node67, "Unknown class name");
        boolean boolean79 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean80 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression77);
        boolean boolean81 = jSDocInfoBuilder18.recordEnumParameterType(jSTypeExpression77);
        boolean boolean82 = jSTypeExpression77.isOptionalArg();
        boolean boolean83 = jSTypeExpression14.equals((java.lang.Object) jSTypeExpression77);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder1.recordBlockDescription("java.io.IOException: java.io.IOException: java.io.IOException: Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.hasModifies();
        boolean boolean10 = jSDocInfo0.isHidden();
        jSDocInfo0.setDeprecated(true);
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean13 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean14 = jSDocInfoBuilder1.recordExpose();
        boolean boolean15 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo4.getTypedefType();
        boolean boolean82 = jSDocInfo4.isDeprecated();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo4.getParameterNames();
        boolean boolean84 = jSDocInfo4.isDeprecated();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("{1367241414}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean10 = jSDocInfo0.isDefine();
        boolean boolean11 = jSDocInfo0.isDeprecated();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        boolean boolean13 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isOverride();
        boolean boolean15 = jSDocInfo10.isNoSideEffects();
        boolean boolean17 = jSDocInfo10.hasParameterType("OR hi!\n    OR hi!\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = jSDocInfo10.getTemplateTypeNames();
        boolean boolean19 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList18);
        boolean boolean21 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!\n");
        boolean boolean22 = jSDocInfoBuilder1.isPopulated();
        boolean boolean23 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markAnnotation("{48502360}", (int) (byte) -1, 45);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        java.lang.Object[] objArray6 = strSet3.toArray();
        java.lang.Object[] objArray7 = strSet3.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo8.getSuppressions();
        boolean boolean10 = jSDocInfo8.isNoSideEffects();
        java.lang.String str11 = jSDocInfo8.getReturnDescription();
        boolean boolean13 = jSDocInfo8.hasDescriptionForParameter("{...}");
        boolean boolean14 = jSDocInfo8.isExterns();
        java.lang.String str15 = jSDocInfo8.getBlockDescription();
        boolean boolean16 = jSDocInfo8.isIdGenerator();
        java.lang.String str17 = jSDocInfo8.getBlockDescription();
        boolean boolean18 = jSDocInfo8.isImplicitCast();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo8.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList21 = nodeIterableList20.asList();
        java.util.RandomAccess[][][][] randomAccessArray22 = new java.util.RandomAccess[][][][] {};
        java.util.RandomAccess[][][][] randomAccessArray23 = nodeIterableList21.toArray(randomAccessArray22);
        java.lang.Object[][][][] objArray24 = strSet19.toArray((java.lang.Object[][][][]) randomAccessArray22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        java.lang.Object[] objArray27 = nodeIterableList25.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getType();
        boolean boolean31 = nodeIterableList25.contains((java.lang.Object) jSTypeExpression30);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        boolean boolean38 = jSTypeRegistry33.canPropertyBeDefined(jSType36, "Unknown class name");
        jSTypeRegistry33.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode43 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry42.setResolveMode(resolveMode43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry42.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry33.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType46, "");
        com.google.javascript.rhino.jstype.UnionType unionType49 = objectType46.toMaybeUnionType();
        boolean boolean50 = objectType46.matchesObjectContext();
        boolean boolean51 = objectType46.hasAnyTemplate();
        boolean boolean52 = objectType46.isNullType();
        boolean boolean53 = objectType46.isNoType();
        boolean boolean54 = nodeIterableList25.contains((java.lang.Object) boolean53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isImplicitCast();
        boolean boolean57 = jSDocInfo55.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo55.getBaseType();
        boolean boolean59 = jSDocInfo55.isExpose();
        com.google.javascript.rhino.Node node60 = jSDocInfo55.getAssociatedNode();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo55.getModifies();
        int int62 = nodeIterableList25.lastIndexOf((java.lang.Object) strSet61);
        boolean boolean63 = strSet19.equals((java.lang.Object) strSet61);
        boolean boolean64 = strSet3.equals((java.lang.Object) boolean63);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[OR hi!\n, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[OR hi!\n, ]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[OR hi!\n, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[OR hi!\n, ]");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(nodeIterableList21);
        org.junit.Assert.assertNotNull(randomAccessArray22);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode43 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode43.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNull(unionType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.isOptionalArg();
        int int20 = node7.getIndexOfChild(node11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node7, "{441018204}");
        jSDocInfo0.setAssociatedNode(node7);
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo0.getType();
        boolean boolean27 = jSDocInfo0.isExport();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDebugger();
        boolean boolean19 = node12.isVoid();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isTypeOf();
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node22);
        boolean boolean25 = node24.isBreak();
        boolean boolean26 = node24.wasEmptyNode();
        jSDocInfoBuilder1.markTypeNode(node24, (int) (byte) 10, 53, 53, 38, true);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        boolean boolean43 = node38.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node38.setJSType(jSType44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder1.build(node38);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean51 = jSDocInfoBuilder49.isInterfaceRecorded();
        boolean boolean52 = jSDocInfoBuilder49.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean54 = jSDocInfoBuilder49.recordVisibility(visibility53);
        boolean boolean55 = jSDocInfoBuilder49.recordExpose();
        boolean boolean57 = jSDocInfoBuilder49.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node61.siblings();
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet70);
        node61.putBooleanProp(0, false);
        node61.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean78 = node61.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = node61.getStaticSourceFile();
        boolean boolean80 = staticSourceFile79.isExtern();
        int int82 = staticSourceFile79.getLineOffset(16);
        jSDocInfoBuilder49.markName("OR hi! [directives: []]\n", staticSourceFile79, 8, 41);
        boolean boolean86 = staticSourceFile79.isExtern();
        jSDocInfoBuilder1.markName("{1562088166}", staticSourceFile79, 1, (int) (byte) -1);
        boolean boolean90 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(staticSourceFile79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-2147483648) + "'", int82 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        jSDocInfo0.setDeprecated(true);
        boolean boolean14 = jSDocInfo0.hasType();
        boolean boolean15 = jSDocInfo0.isJavaDispatch();
        java.lang.String str16 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDebugger();
        boolean boolean19 = node12.isVoid();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isTypeOf();
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node22);
        boolean boolean25 = node24.isBreak();
        boolean boolean26 = node24.wasEmptyNode();
        jSDocInfoBuilder1.markTypeNode(node24, (int) (byte) 10, 53, 53, 38, true);
        boolean boolean33 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean37 = jSDocInfoBuilder35.recordVisibility(visibility36);
        boolean boolean38 = jSDocInfoBuilder35.recordDeprecated();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isSyntheticBlock();
        boolean boolean49 = node41.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node41, "Unknown class name");
        boolean boolean52 = jSTypeExpression51.isOptionalArg();
        boolean boolean53 = jSDocInfoBuilder35.recordTypedef(jSTypeExpression51);
        boolean boolean54 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordInterface();
        boolean boolean10 = jSDocInfoBuilder7.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder12.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder12.markName("", staticSourceFile20, 29, 50);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isSyntheticBlock();
        boolean boolean34 = node26.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node26, "Unknown class name");
        boolean boolean38 = jSDocInfoBuilder12.recordThrowDescription(jSTypeExpression36, "?");
        boolean boolean40 = jSDocInfoBuilder7.recordThrowDescription(jSTypeExpression36, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean41 = jSDocInfoBuilder7.recordNoCompile();
        boolean boolean42 = jSDocInfoBuilder7.recordConsistentIdGenerator();
        boolean boolean44 = jSDocInfoBuilder7.recordVersion("OR hi! [var_args_name: 1]\n");
        boolean boolean46 = jSDocInfoBuilder7.recordLends("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordInterface();
        boolean boolean51 = jSDocInfoBuilder48.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordDefineType(jSTypeExpression52);
        boolean boolean55 = jSDocInfoBuilder48.recordMeaning("hi!");
        boolean boolean57 = jSDocInfoBuilder48.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder59.addAuthor("");
        boolean boolean62 = jSDocInfoBuilder59.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = null;
        boolean boolean64 = jSDocInfoBuilder59.recordThrowType(jSTypeExpression63);
        boolean boolean65 = jSDocInfoBuilder59.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder59.markName("", staticSourceFile67, 29, 50);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node73.isDebugger();
        boolean boolean80 = node73.isSyntheticBlock();
        boolean boolean81 = node73.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node73, "Unknown class name");
        boolean boolean85 = jSDocInfoBuilder59.recordThrowDescription(jSTypeExpression83, "?");
        boolean boolean86 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression83);
        boolean boolean87 = jSDocInfoBuilder7.recordReturnType(jSTypeExpression83);
        boolean boolean88 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression83);
        jSDocInfoBuilder1.recordOriginalCommentString("{818905201}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression19);
        boolean boolean22 = jSDocInfoBuilder15.recordMeaning("hi!");
        boolean boolean24 = jSDocInfoBuilder15.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean29 = jSDocInfoBuilder26.recordDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node32.siblings();
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.recordInterface();
        boolean boolean48 = jSDocInfoBuilder45.recordDescription("hi!");
        boolean boolean49 = jSDocInfoBuilder45.recordHiddenness();
        boolean boolean50 = strSet41.remove((java.lang.Object) jSDocInfoBuilder45);
        boolean boolean51 = jSDocInfoBuilder45.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder53.addAuthor("");
        boolean boolean56 = jSDocInfoBuilder53.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression57);
        boolean boolean59 = jSDocInfoBuilder53.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = null;
        jSDocInfoBuilder53.markName("", staticSourceFile61, 29, 50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        boolean boolean74 = node67.isSyntheticBlock();
        boolean boolean75 = node67.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node67, "Unknown class name");
        boolean boolean79 = jSDocInfoBuilder53.recordThrowDescription(jSTypeExpression77, "?");
        boolean boolean80 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression77);
        boolean boolean81 = jSDocInfoBuilder26.recordEnumParameterType(jSTypeExpression77);
        boolean boolean82 = jSDocInfoBuilder15.recordImplementedInterface(jSTypeExpression77);
        boolean boolean83 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression77);
        boolean boolean84 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("{2076672844}");
        boolean boolean15 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        node18.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node18.getJsDocBuilderForNode();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node29 = node18.getNext();
        node18.setType(4098);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSDocInfoBuilder1.build(node18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo32);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        boolean boolean4 = jSTypeRegistry1.isForwardDeclaredType("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        boolean boolean12 = jSDocInfo5.hasParameter("Unknown class name");
        boolean boolean13 = jSDocInfo5.isHidden();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo5.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList15);
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        node5.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean13 = node5.isDec();
        node5.setLineno(35);
        com.google.javascript.rhino.Node node16 = node5.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isExterns();
        boolean boolean19 = jSDocInfo17.hasReturnType();
        jSDocInfo17.setLicense("hi!");
        int int22 = jSDocInfo17.getImplementedInterfaceCount();
        boolean boolean23 = jSDocInfo17.isExport();
        boolean boolean24 = jSDocInfo17.isImplicitCast();
        node16.setJSDocInfo(jSDocInfo17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node16.getJSDocInfo();
        boolean boolean28 = jSDocInfo26.hasDescriptionForParameter("{40221886}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList3 = nodeIterableList0.asList();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator4 = nodeIterableList3.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList5 = nodeIterableList3.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream6 = nodeIterableList3.parallelStream();
        boolean boolean7 = nodeIterableList3.isEmpty();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        boolean boolean24 = strSet19.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList22);
        java.lang.Object[] objArray25 = nodeIterableList22.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream26 = nodeIterableList22.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList27 = nodeIterableList22.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean31 = jSDocInfoBuilder29.isInterfaceRecorded();
        boolean boolean32 = jSDocInfoBuilder29.recordIdGenerator();
        boolean boolean33 = nodeIterableList27.contains((java.lang.Object) boolean32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        jSTypeRegistry36.clearNamedTypes();
        boolean boolean38 = nodeIterableList27.contains((java.lang.Object) jSTypeRegistry36);
        jSTypeRegistry36.clearTemplateTypeNames();
        jSTypeRegistry36.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        boolean boolean44 = jSTypeRegistry36.declareType("java.io.IOException: OR hi!\n    OR hi!\n", jSType43);
        boolean boolean46 = jSTypeRegistry36.isForwardDeclaredType("OR hi! [var_args_name: 1]\n");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList47 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray48 = nodeIterableList47.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = nodeIterableList47.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream50 = nodeIterableList47.stream();
        java.lang.String[] strArray52 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray53 = nodeIterableList47.toArray(strArray52);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator54 = nodeIterableList47.spliterator();
        boolean boolean55 = nodeIterableList47.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        boolean boolean62 = objectType61.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        boolean boolean69 = jSTypeRegistry64.canPropertyBeDefined(jSType67, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode72 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry71.setResolveMode(resolveMode72);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry71.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = objectType75.toObjectType();
        boolean boolean77 = objectType76.matchesInt32Context();
        boolean boolean78 = objectType76.isStringValueType();
        boolean boolean79 = objectType76.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter80);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode82 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry81.setResolveMode(resolveMode82);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry81.createObjectType(objectType84);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair86 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType76, (com.google.javascript.rhino.jstype.JSType) objectType85);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry64.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType76);
        com.google.javascript.rhino.jstype.FunctionType functionType88 = jSType87.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair89 = objectType61.getTypesUnderInequality(jSType87);
        boolean boolean90 = objectType61.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType91 = objectType61.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray92 = new com.google.javascript.rhino.jstype.ObjectType[] { objectType61 };
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray93 = nodeIterableList47.toArray(objectTypeArray92);
        com.google.javascript.rhino.Node node94 = jSTypeRegistry36.createParameters((com.google.javascript.rhino.jstype.JSType[]) objectTypeArray93);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[] jSTypeStaticScopeArray95 = nodeIterableList3.toArray((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[]) objectTypeArray93);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor96 = nodeIterableList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList3.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterableList3);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator4);
        org.junit.Assert.assertNotNull(nodeIterableList5);
        org.junit.Assert.assertNotNull(nodeIterableStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream26);
        org.junit.Assert.assertNotNull(nodeIterableList27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableList47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(nodeIterableStream50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + resolveMode72 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode72.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + resolveMode82 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode82.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(functionType88);
        org.junit.Assert.assertNotNull(typePair89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNotNull(objectTypeArray92);
        org.junit.Assert.assertNotNull(objectTypeArray93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(jSTypeStaticScopeArray95);
        org.junit.Assert.assertNotNull(nodeIterableItor96);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isNE();
        boolean boolean66 = node64.isInstanceOf();
        boolean boolean67 = node64.isThrow();
        node64.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable70 = node64.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable70);
        boolean boolean72 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isExterns();
        int int75 = jSDocInfo73.getParameterCount();
        jSDocInfo73.setLicense("None");
        boolean boolean78 = jSDocInfo73.hasFileOverview();
        boolean boolean79 = jSDocInfo73.isInterface();
        int int80 = jSDocInfo73.getImplementedInterfaceCount();
        boolean boolean82 = jSDocInfo73.hasParameter("{168285338}");
        boolean boolean83 = jSDocInfo73.isExpose();
        int int84 = nodeIterableList71.indexOf((java.lang.Object) boolean83);
        com.google.javascript.rhino.Node[] nodeArray88 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) 'a', nodeArray88, 8202, (int) (short) -1);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(4098, nodeArray88);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray88, 44, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray96 = nodeIterableList71.toArray((java.lang.Object[]) nodeArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: com.google.javascript.rhino.Node$AncestorIterable");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(ancestorIterable70);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(nodeArray88);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        boolean boolean12 = jSDocInfoBuilder1.recordParameterDescription("{325985449}", "{483838244}");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(31, 1, 10);
        boolean boolean17 = node16.isScript();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "{1729404217}");
        boolean boolean20 = jSDocInfoBuilder1.recordThisType(jSTypeExpression19);
        jSDocInfoBuilder1.markText("{653721112}", (int) (short) 10, 13, (int) (short) 100, (-1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection3 = jSDocInfo0.getTypeNodes();
        boolean boolean4 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getReturnType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList6 = com.google.common.collect.ImmutableList.of(jSDocInfo0);
        boolean boolean7 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSDocInfoList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordInterface();
        boolean boolean9 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean12 = jSDocInfoBuilder7.recordVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.containsDeclaration();
        boolean boolean15 = jSDocInfo0.isOverride();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.shouldParseDocumentation();
        jSDocInfoBuilder1.recordOriginalCommentString("{920144427}");
        jSDocInfoBuilder1.markText("{1560389945}", (int) (byte) 10, 45, (int) (byte) 100, 51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList1 = visibilityEnumBuilder0.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection2 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean6 = jSDocInfoBuilder4.recordVisibility(visibility5);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean13 = jSDocInfoBuilder11.recordVisibility(visibility12);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility15);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility18);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray20 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8, visibility9, visibility12, visibility15, visibility18 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList21 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray20);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList23 = visibilityEnumBuilder22.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection24 = visibilityEnumBuilder22.build();
        org.junit.Assert.assertNotNull(visibilityEnumList1);
        org.junit.Assert.assertNotNull(visibilityEnumCollection2);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder7);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder16);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder19);
        org.junit.Assert.assertNotNull(visibilityArray20);
        org.junit.Assert.assertNotNull(visibilityEnumList21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertNotNull(visibilityEnumList23);
        org.junit.Assert.assertNotNull(visibilityEnumCollection24);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("OR hi!\n    OR hi!\n");
        boolean boolean12 = jSDocInfoBuilder1.addReference("InputId: ");
        boolean boolean13 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean19 = jSDocInfoBuilder17.recordPreserveTry();
        boolean boolean20 = jSDocInfoBuilder17.isJavaDispatch();
        boolean boolean21 = jSDocInfoBuilder17.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        boolean boolean27 = jSDocInfoBuilder23.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder23.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder23.recordReturnType(jSTypeExpression31);
        boolean boolean34 = jSDocInfoBuilder23.recordDeprecationReason("Not declared as a constructor");
        boolean boolean35 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.addAuthor("");
        boolean boolean40 = jSDocInfoBuilder37.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = null;
        boolean boolean42 = jSDocInfoBuilder37.recordThrowType(jSTypeExpression41);
        boolean boolean43 = jSDocInfoBuilder37.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.addAuthor("");
        boolean boolean48 = jSDocInfoBuilder45.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder45.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder45.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = null;
        jSDocInfoBuilder45.markName("", staticSourceFile53, 29, 50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node59.isDebugger();
        boolean boolean66 = node59.isSyntheticBlock();
        boolean boolean67 = node59.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node59, "Unknown class name");
        boolean boolean71 = jSDocInfoBuilder45.recordThrowDescription(jSTypeExpression69, "?");
        boolean boolean72 = jSDocInfoBuilder37.recordExtendedInterface(jSTypeExpression69);
        boolean boolean73 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression69);
        boolean boolean75 = jSDocInfoBuilder17.recordThrowDescription(jSTypeExpression69, "?");
        boolean boolean76 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression69);
        boolean boolean78 = jSDocInfoBuilder1.recordReturnDescription("Node tree inequality:\nTree1:\nOR hi! [directives: []]\n\n\nTree2:\nNUMBER 100.0 0\n    OR hi!\n\n\nSubtree1: OR hi! [directives: []]\n\n\nSubtree2: NUMBER 100.0 0\n    OR hi!\n");
        boolean boolean80 = jSDocInfoBuilder1.addReference("function (this:me, {2040455666}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        java.lang.String str25 = node5.toStringTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getTypedefType();
        boolean boolean29 = jSDocInfo26.isExterns();
        boolean boolean30 = jSDocInfo26.isInterface();
        boolean boolean32 = jSDocInfo26.hasParameter("{914914044}");
        node5.setJSDocInfo(jSDocInfo26);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR hi!\n" + "'", str25, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node10 = null;
        jSDocInfo0.setAssociatedNode(node10);
        boolean boolean12 = jSDocInfo0.hasFileOverview();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        boolean boolean24 = node22.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        boolean boolean27 = jSDocInfo25.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getImplementedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        node22.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node51 = node36.srcref(node46);
        int int52 = node36.getCharno();
        boolean boolean53 = node36.isQuotedString();
        boolean boolean54 = node36.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        int int57 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet69);
        node60.putBooleanProp(0, false);
        node60.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean77 = node60.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node60.getStaticSourceFile();
        int int80 = staticSourceFile78.getLineOffset(40);
        java.lang.String str81 = staticSourceFile78.getName();
        int int83 = staticSourceFile78.getColumnOfOffset((int) '#');
        node36.setStaticSourceFile(staticSourceFile78);
        node22.setStaticSourceFile(staticSourceFile78);
        boolean boolean86 = staticSourceFile78.isExtern();
        int int88 = staticSourceFile78.getLineOfOffset(32);
        boolean boolean89 = staticSourceFile78.isExtern();
        int int91 = staticSourceFile78.getLineOffset((int) (byte) 100);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str81, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-2147483648) + "'", int91 == (-2147483648));
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.hasModifies();
        java.lang.String str5 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.lang.String str8 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.hasType();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        int int3 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("{918954233}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node9.siblings();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isAssign();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(51, node14, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable25 = node24.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator26 = ancestorIterable25.spliterator();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean37 = nodeIterableList36.add(nodeIterable10);
        boolean boolean38 = nodeIterableList36.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable25);
        boolean boolean39 = nodeIterableList36.add(nodeIterable35);
        java.lang.Object[] objArray40 = nodeIterableList36.toArray();
        boolean boolean41 = strSet4.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int44 = stringPosition43.getPositionOnEndLine();
        int int45 = stringPosition43.getEndLine();
        int int46 = stringPosition43.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition47 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int48 = stringPosition47.getStartLine();
        int int49 = stringPosition47.getPositionOnStartLine();
        int int50 = stringPosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition51 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int52 = stringPosition51.getStartLine();
        int int53 = stringPosition51.getPositionOnStartLine();
        int int54 = stringPosition51.getEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition55 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int56 = stringPosition55.getStartLine();
        int int57 = stringPosition55.getPositionOnStartLine();
        java.lang.String str58 = stringPosition55.getItem();
        stringPosition55.setPositionInformation(16, 53, 48, 5);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int65 = stringPosition64.getStartLine();
        int int66 = stringPosition64.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int68 = stringPosition67.getPositionOnEndLine();
        int int69 = stringPosition67.getPositionOnEndLine();
        int int70 = stringPosition67.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int72 = stringPosition71.getStartLine();
        int int73 = stringPosition71.getPositionOnStartLine();
        int int74 = stringPosition71.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList75 = com.google.common.collect.ImmutableList.of(stringPosition42, stringPosition43, stringPosition47, stringPosition51, stringPosition55, stringPosition64, stringPosition67, stringPosition71);
        int int76 = stringPosition42.getEndLine();
        int int77 = stringPosition42.getStartLine();
        boolean boolean78 = strSet4.contains((java.lang.Object) int77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ancestorIterable25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(stringPositionList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isVoid();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isSyntheticBlock();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(46);
        boolean boolean26 = node25.isCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(45, node8, node16, node25, node29, (int) (short) 10, 8);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 49, 12);
        com.google.javascript.rhino.Node node50 = node25.srcref(node49);
        boolean boolean51 = node3.isEquivalentTo(node50);
        java.lang.String str52 = node50.toStringTree();
        int int53 = node50.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean55 = jSDocInfo54.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo54.getType();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        jSDocInfo54.setAssociatedNode(node59);
        node50.addChildToBack(node59);
        java.util.Set<java.lang.String> strSet63 = null;
        node59.setDirectives(strSet63);
        int int65 = node59.getCharno();
        boolean boolean66 = node59.isSetterDef();
        boolean boolean67 = node59.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SHNE 49\n" + "'", str52, "SHNE 49\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 200716 + "'", int53 == 200716);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        java.lang.String str11 = jSDocInfo0.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean13 = jSDocInfo0.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean15 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean17 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList1 = visibilityEnumBuilder0.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection2 = visibilityEnumBuilder0.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean6 = jSDocInfoBuilder4.recordVisibility(visibility5);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection8 = visibilityEnumBuilder0.build();
        org.junit.Assert.assertNotNull(visibilityEnumList1);
        org.junit.Assert.assertNotNull(visibilityEnumCollection2);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder7);
        org.junit.Assert.assertNotNull(visibilityEnumCollection8);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        java.lang.String str11 = jSDocInfo0.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean13 = jSDocInfo0.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean15 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node21.isNot();
        int int25 = node21.getLineno();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        com.google.javascript.rhino.Node node36 = node21.srcref(node31);
        boolean boolean37 = node36.isDelProp();
        com.google.javascript.rhino.Node node38 = node36.getLastSibling();
        boolean boolean39 = node38.isSetterDef();
        node38.setSourceFileForTesting("{298532945}");
        int int42 = node38.getChildCount();
        boolean boolean43 = node38.isArrayLit();
        jSDocInfo0.setAssociatedNode(node38);
        java.lang.String str45 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(jSTypeExpression46);
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        boolean boolean10 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        int int3 = nodeIterableList0.size();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isExterns();
        boolean boolean7 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean9 = jSDocInfo8.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo8.getType();
        boolean boolean11 = jSDocInfo8.isImplicitCast();
        boolean boolean12 = jSDocInfo8.isExport();
        boolean boolean13 = jSDocInfo8.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo8.getReturnType();
        boolean boolean15 = jSDocInfo8.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder16 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = visibilityEnumBuilder16.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility17);
        jSDocInfo8.setVisibility(visibility17);
        jSDocInfo5.setVisibility(visibility17);
        java.lang.String str21 = jSDocInfo5.getMeaning();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo5.getParameterNames();
        int int23 = nodeIterableList0.indexOf((java.lang.Object) jSDocInfo5);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor24 = nodeIterableList0.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor24);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(50);
        node2.setLength((int) ' ');
        boolean boolean5 = node2.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        boolean boolean9 = jSDocInfo6.isImplicitCast();
        boolean boolean10 = jSDocInfo6.isOverride();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isVoid();
        boolean boolean25 = node17.isOptionalArg();
        int int26 = node13.getIndexOfChild(node17);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node13, "{441018204}");
        jSDocInfo6.setAssociatedNode(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(83, node2, node13);
        boolean boolean31 = node30.isCase();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node33 = node30.getParent();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        boolean boolean8 = jSDocInfoBuilder1.addReference("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        boolean boolean12 = jSDocInfo9.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo9.getTypeNodes();
        java.lang.String str15 = jSDocInfo9.getSourceName();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo9.getSuppressions();
        int int17 = strSet16.size();
        strSet16.clear();
        boolean boolean19 = jSDocInfoBuilder1.recordModifies(strSet16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        com.google.javascript.rhino.Node node29 = node22.getFirstChild();
        com.google.javascript.rhino.Node node30 = node29.removeFirstChild();
        boolean boolean31 = node29.isVarArgs();
        int int32 = node29.getCharno();
        boolean boolean33 = node29.isUnscopedQualifiedName();
        boolean boolean34 = node29.isVoid();
        boolean boolean35 = node29.isAssign();
        boolean boolean36 = strSet16.contains((java.lang.Object) boolean35);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strSet16.add("{81470232}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        boolean boolean1 = nodeIterableList0.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor2 = nodeIterableList0.iterator();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node6.siblings();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable22 = node21.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = ancestorIterable22.spliterator();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean34 = nodeIterableList33.add(nodeIterable7);
        boolean boolean35 = nodeIterableList33.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable22);
        boolean boolean36 = nodeIterableList33.add(nodeIterable32);
        java.lang.Object[] objArray37 = nodeIterableList33.toArray();
        java.lang.Object[] objArray38 = nodeIterableList33.toArray();
        boolean boolean39 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        boolean boolean45 = jSDocInfoBuilder41.recordHiddenness();
        boolean boolean46 = jSDocInfoBuilder41.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder41.recordType(jSTypeExpression47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo52.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = jSDocInfo52.getVisibility();
        boolean boolean56 = jSDocInfo52.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility57);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray59 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility57 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray59);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        boolean boolean66 = jSDocInfo63.isImplicitCast();
        boolean boolean67 = jSDocInfo63.isExport();
        boolean boolean68 = jSDocInfo63.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo63.getReturnType();
        boolean boolean70 = jSDocInfo63.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        jSDocInfo63.setVisibility(visibility72);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder75 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        boolean boolean76 = jSDocInfoBuilder41.recordVisibility(visibility72);
        boolean boolean77 = nodeIterableList0.equals((java.lang.Object) jSDocInfoBuilder41);
        java.lang.String str78 = nodeIterableList0.toString();
        java.lang.Object[] objArray79 = nodeIterableList0.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor2);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ancestorIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertNull(visibility55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isInstanceOf();
        boolean boolean16 = node13.isThrow();
        node13.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node13.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry21.createAnonymousObjectType();
        objectType29.clearResolved();
        node13.setJSType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        com.google.javascript.rhino.Node node41 = node34.getFirstChild();
        boolean boolean42 = node34.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType43 = jSTypeRegistry8.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType29, node34);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isNE();
        boolean boolean52 = node50.isInstanceOf();
        boolean boolean53 = node50.isThrow();
        node50.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node50.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        boolean boolean63 = jSTypeRegistry58.canPropertyBeDefined(jSType61, "Unknown class name");
        jSTypeRegistry58.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry58.createAnonymousObjectType();
        objectType66.clearResolved();
        node50.setJSType((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node71.isDebugger();
        com.google.javascript.rhino.Node node78 = node71.getFirstChild();
        boolean boolean79 = node71.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry45.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType66, node71);
        boolean boolean81 = objectType66.isArrayType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot83 = objectType66.getSlot("Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType84 = jSTypeRegistry1.createFunctionTypeWithNewThisType(functionType43, objectType66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo85.getType();
        boolean boolean88 = jSDocInfo85.isImplicitCast();
        boolean boolean89 = jSDocInfo85.isOverride();
        boolean boolean90 = jSDocInfo85.isNoSideEffects();
        boolean boolean92 = jSDocInfo85.hasParameterType("OR hi!\n    OR hi!\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList93 = jSDocInfo85.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList93);
        jSTypeRegistry1.identifyNonNullableName("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.ObjectType objectType97 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean98 = objectType97.isNominalType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo99 = objectType97.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(functionType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot83);
        org.junit.Assert.assertNotNull(functionType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(objectType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(jSDocInfo99);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("hi!");
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.hasThisType();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        jSDocInfo0.addSuppression("function (this:me, {616177144}): me");
        boolean boolean13 = jSDocInfo0.hasBaseType();
        boolean boolean14 = jSDocInfo0.hasThisType();
        boolean boolean15 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder13.recordMeaning("hi!");
        boolean boolean22 = jSDocInfoBuilder13.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        boolean boolean78 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression75);
        boolean boolean79 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression75);
        boolean boolean80 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression75);
        boolean boolean82 = jSDocInfoBuilder1.recordType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean84 = jSDocInfoBuilder1.isPopulated();
        boolean boolean86 = jSDocInfoBuilder1.recordDeprecationReason("OR hi! : None");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor20 = nodeIterableList19.iterator();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        boolean boolean27 = jSTypeRegistry22.canPropertyBeDefined(jSType25, "Unknown class name");
        jSTypeRegistry22.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode32 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry31.setResolveMode(resolveMode32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        boolean boolean36 = jSTypeRegistry31.canPropertyBeDefined(jSType34, "Unknown class name");
        jSTypeRegistry31.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry31.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        jSTypeRegistry42.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry45.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = objectType49.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot52 = objectType49.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType60 = objectType59.toMaybeEnumElementType();
        boolean boolean61 = jSTypeRegistry31.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType49, objectType59);
        boolean boolean63 = jSTypeRegistry22.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType49, "OR hi! [directives: []]\n");
        int int64 = nodeIterableList19.indexOf((java.lang.Object) jSTypeRegistry22);
        boolean boolean65 = nodeIterableList19.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean67 = jSDocInfo66.isExterns();
        boolean boolean68 = jSDocInfo66.hasReturnType();
        boolean boolean69 = jSDocInfo66.isOverride();
        jSDocInfo66.setLicense("hi!");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo66.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection73 = jSDocInfo66.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = nodeIterableList19.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableItor20);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode32 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode32.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNull(jSTypeStaticSlot52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNull(enumElementType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNotNull(nodeCollection73);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("java.io.IOException: None");
        boolean boolean11 = jSDocInfoBuilder1.recordReturnDescription("{218130081}");
        boolean boolean13 = jSDocInfoBuilder1.recordBlockDescription("{272877914}");
        boolean boolean14 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean16 = jSDocInfoBuilder1.recordLends("java.io.IOException: JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo5.getSuppressions();
        boolean boolean7 = jSDocInfo5.isNoSideEffects();
        java.lang.String str8 = jSDocInfo5.getReturnDescription();
        boolean boolean10 = jSDocInfo5.hasParameter("Not declared as a constructor");
        java.lang.String str11 = jSDocInfo5.getMeaning();
        boolean boolean12 = jSDocInfo5.isJavaDispatch();
        node3.setJSDocInfo(jSDocInfo5);
        boolean boolean14 = node3.isDo();
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        node3.setInputId(inputId16);
        boolean boolean18 = node3.isSwitch();
        com.google.javascript.rhino.Node node19 = node3.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isTypeOf();
        jSDocInfo20.setAssociatedNode(node25);
        boolean boolean28 = jSDocInfo20.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("OR hi!");
        boolean boolean33 = node32.isInc();
        jSDocInfo20.setAssociatedNode(node32);
        node32.setVarArgs(false);
        boolean boolean37 = node32.isQuotedString();
        boolean boolean38 = node32.isNew();
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node19.addChildBefore(node32, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        boolean boolean10 = node7.isAdd();
        boolean boolean11 = node7.isAnd();
        typePosition1.setItem(node7);
        com.google.javascript.rhino.Node node13 = node7.cloneTree();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(49, node13);
        boolean boolean15 = node13.isAssign();
        boolean boolean16 = node13.isDebugger();
        boolean boolean17 = node13.isDo();
        node13.detachChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        boolean boolean23 = node21.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo24.getType();
        boolean boolean27 = jSDocInfo24.isNoTypeCheck();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo24.setAssociatedNode(node30);
        boolean boolean32 = node30.isNoSideEffectsCall();
        boolean boolean33 = node21.isEquivalentTo(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDec();
        boolean boolean43 = node36.isBlock();
        boolean boolean44 = node36.isTrue();
        com.google.javascript.rhino.Node node45 = node36.cloneNode();
        boolean boolean46 = node36.isAdd();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isDebugger();
        com.google.javascript.rhino.InputId inputId53 = new com.google.javascript.rhino.InputId("");
        java.lang.String str54 = inputId53.getIdName();
        node50.setInputId(inputId53);
        boolean boolean56 = node50.isTypeOf();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        boolean boolean61 = node59.isDelProp();
        int int62 = node59.getChildCount();
        boolean boolean63 = node59.isComma();
        boolean boolean64 = node59.isNoSideEffectsCall();
        boolean boolean65 = node59.isSetterDef();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node71 = node70.cloneNode();
        com.google.javascript.rhino.Node node72 = node71.removeChildren();
        com.google.javascript.rhino.Node node73 = node59.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node74 = node50.useSourceInfoFrom(node71);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(39, node71, 54, 1);
        com.google.javascript.rhino.Node node78 = node36.useSourceInfoFrom(node71);
        boolean boolean79 = node36.isExprResult();
        // The following exception was thrown during execution in test generation
        try {
            node13.addChildrenAfter(node30, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        boolean boolean18 = nodeIterableList0.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.isOverride();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[][] { jSTypeArray24, jSTypeArray25, jSTypeArray26, jSTypeArray27, jSTypeArray28, jSTypeArray29 };
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray31 = strSet23.toArray(jSTypeArray30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition35, typePosition36, typePosition37, typePosition38, typePosition39, typePosition40 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray42 = nodeIterableList32.toArray(typePositionArray41);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor43 = nodeIterableList32.iterator();
        java.lang.Object[] objArray44 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node48.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList55 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean56 = nodeIterableList55.add(nodeIterable54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node59.siblings();
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet68);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray72 = nodeIterableList71.toArray();
        boolean boolean73 = strSet68.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        java.lang.Object[] objArray74 = nodeIterableList71.toArray();
        boolean boolean75 = nodeIterableList71.isEmpty();
        boolean boolean76 = nodeIterableList55.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList71);
        boolean boolean77 = nodeIterableList45.equals((java.lang.Object) nodeIterableList55);
        boolean boolean78 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList55);
        boolean boolean79 = strSet23.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.lang.Object[] objArray80 = nodeIterableList32.toArray();
        int int81 = nodeIterableList32.size();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("{955124464}");
        com.google.javascript.rhino.Node node84 = node83.getLastSibling();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable85 = node84.getAncestors();
        int int86 = nodeIterableList32.indexOf((java.lang.Object) ancestorIterable85);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.add((int) (short) 1, (java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable85);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertNotNull(typePositionArray42);
        org.junit.Assert.assertNotNull(nodeIterableItor43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(ancestorIterable85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDec();
        boolean boolean19 = node12.isString();
        boolean boolean20 = node12.isArrayLit();
        java.lang.String str24 = node12.toString(true, true, false);
        java.lang.String str25 = node12.getString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder1.build(node12);
        com.google.javascript.rhino.Node node27 = node12.cloneNode();
        java.lang.String str28 = node27.getString();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable29 = node27.getAncestors();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OR hi!" + "'", str24, "OR hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(ancestorIterable29);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean11 = jSDocInfoBuilder1.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.addAuthor("");
        boolean boolean21 = jSDocInfoBuilder18.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression22);
        boolean boolean24 = jSDocInfoBuilder18.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        jSDocInfoBuilder18.markName("", staticSourceFile26, 29, 50);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isSyntheticBlock();
        boolean boolean40 = node32.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = new com.google.javascript.rhino.JSTypeExpression(node32, "Unknown class name");
        boolean boolean44 = jSDocInfoBuilder18.recordThrowDescription(jSTypeExpression42, "?");
        boolean boolean46 = jSDocInfoBuilder13.recordThrowDescription(jSTypeExpression42, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean47 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression42);
        boolean boolean48 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean50 = jSDocInfoBuilder1.recordMeaning("java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean51 = jSDocInfoBuilder1.recordExterns();
        boolean boolean52 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean53 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder55.recordInterface();
        boolean boolean58 = jSDocInfoBuilder55.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean88 = jSDocInfoBuilder55.recordThrowDescription(jSTypeExpression84, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node89 = jSTypeExpression84.getRoot();
        boolean boolean90 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression91);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean14 = jSDocInfo0.hasParameter("java.io.IOException");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        node18.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node27 = node18.getLastChild();
        boolean boolean28 = node18.isCall();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node40 = node31.getLastChild();
        boolean boolean41 = node31.isCall();
        com.google.javascript.rhino.Node node42 = node18.copyInformationFrom(node31);
        boolean boolean43 = node42.isAnd();
        boolean boolean44 = node42.isLocalResultCall();
        jSDocInfo0.setAssociatedNode(node42);
        boolean boolean46 = jSDocInfo0.hasEnumParameterType();
        boolean boolean47 = jSDocInfo0.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder3.recordInterface();
        boolean boolean6 = jSDocInfoBuilder3.recordDescription("hi!");
        boolean boolean7 = jSDocInfoBuilder3.recordHiddenness();
        boolean boolean8 = jSDocInfoBuilder3.recordExpose();
        boolean boolean10 = jSDocInfoBuilder3.hasParameter("Not declared as a constructor");
        boolean boolean11 = jSDocInfoBuilder3.recordPreserveTry();
        boolean boolean13 = jSDocInfoBuilder3.addReference("Named type with empty name component");
        boolean boolean14 = jSDocInfoBuilder3.recordDeprecated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.addAuthor("");
        boolean boolean19 = jSDocInfoBuilder16.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder16.recordReturnType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder16.recordOverride();
        jSDocInfoBuilder16.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean29 = jSDocInfoBuilder16.recordHiddenness();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isNoTypeCheck();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo30.setAssociatedNode(node36);
        int int38 = jSDocInfo30.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo30.getExtendedInterfaces();
        com.google.javascript.rhino.Node node40 = null;
        jSDocInfo30.setAssociatedNode(node40);
        boolean boolean42 = jSDocInfo30.hasFileOverview();
        boolean boolean43 = jSDocInfo30.isIdGenerator();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo47.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = jSDocInfo47.getVisibility();
        boolean boolean51 = jSDocInfo47.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo47.setVisibility(visibility52);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray54 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility52 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray54);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility56);
        jSDocInfo30.setVisibility(visibility56);
        boolean boolean59 = jSDocInfoBuilder16.recordVisibility(visibility56);
        boolean boolean60 = jSDocInfoBuilder3.recordVisibility(visibility56);
        boolean boolean62 = jSDocInfoBuilder3.addReference("Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: PARAM_LIST\n");
        boolean boolean63 = strSet1.equals((java.lang.Object) boolean62);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(visibility50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList20.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = nodeIterableList36.asList();
        java.lang.Object[] objArray38 = nodeIterableList36.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        int int41 = jSDocInfo39.getParameterCount();
        jSDocInfo39.setLicense("None");
        boolean boolean44 = jSDocInfo39.hasFileOverview();
        boolean boolean45 = jSDocInfo39.isInterface();
        int int46 = jSDocInfo39.getImplementedInterfaceCount();
        boolean boolean48 = jSDocInfo39.hasParameter("{168285338}");
        boolean boolean49 = jSDocInfo39.isNoCompile();
        boolean boolean50 = jSDocInfo39.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection51 = jSDocInfo39.getTypeNodes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = nodeIterableList36.add((java.lang.Iterable<com.google.javascript.rhino.Node>) nodeCollection51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeCollection51);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasParameter("{764537935}");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("{955124464}");
        com.google.javascript.rhino.Node node8 = node7.getLastSibling();
        node7.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isAssign();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(51, node14, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = node14.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node29.getAncestors();
        boolean boolean31 = node29.isCall();
        com.google.javascript.rhino.Node node32 = node29.cloneNode();
        boolean boolean33 = node7.isEquivalentToTyped(node32);
        jSDocInfo0.setAssociatedNode(node7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.isInterface();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean9 = jSDocInfo0.hasParameter("{168285338}");
        boolean boolean10 = jSDocInfo0.isNoCompile();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("OR hi!\n    OR hi!\n");
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("{2076672844}");
        boolean boolean10 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean11 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean12 = jSDocInfoBuilder1.recordNoSideEffects();
        jSDocInfoBuilder1.markText("java.io.IOException: OR hi! [directives: []]\n", (int) '4', 100, 32, 0);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean22 = jSDocInfoBuilder20.recordPreserveTry();
        boolean boolean23 = jSDocInfoBuilder20.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.addAuthor("");
        boolean boolean28 = jSDocInfoBuilder25.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder25.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        jSDocInfoBuilder25.markName("", staticSourceFile33, 29, 50);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.recordInterface();
        boolean boolean55 = jSDocInfoBuilder52.recordDescription("hi!");
        boolean boolean56 = jSDocInfoBuilder52.recordHiddenness();
        boolean boolean57 = strSet48.remove((java.lang.Object) jSDocInfoBuilder52);
        boolean boolean58 = jSDocInfoBuilder52.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean87 = jSDocInfoBuilder52.recordThrowType(jSTypeExpression84);
        boolean boolean88 = jSDocInfoBuilder25.recordEnumParameterType(jSTypeExpression84);
        boolean boolean89 = jSDocInfoBuilder20.recordImplementedInterface(jSTypeExpression84);
        boolean boolean90 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression84);
        jSDocInfoBuilder1.markAnnotation("InputId: function (this:me, {726862509}): me", (-2147483648), 13);
        boolean boolean95 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean96 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean4 = node3.isVoid();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isSyntheticBlock();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(46);
        boolean boolean26 = node25.isCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.detachChildren();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(45, node8, node16, node25, node29, (int) (short) 10, 8);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n", 49, 12);
        com.google.javascript.rhino.Node node50 = node25.srcref(node49);
        boolean boolean51 = node3.isEquivalentTo(node50);
        java.lang.String str52 = node50.toStringTree();
        int int53 = node50.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean55 = jSDocInfo54.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo54.getType();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        jSDocInfo54.setAssociatedNode(node59);
        node50.addChildToBack(node59);
        java.util.Set<java.lang.String> strSet63 = null;
        node59.setDirectives(strSet63);
        node59.setOptionalArg(true);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node70.isDebugger();
        boolean boolean77 = node70.isAssign();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(51, node70, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = node70.useSourceInfoIfMissingFrom(node84);
        node70.putBooleanProp(32, false);
        boolean boolean89 = node70.isLabel();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder90 = node70.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node91 = node59.srcrefTree(node70);
        boolean boolean92 = node91.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SHNE 49\n" + "'", str52, "SHNE 49\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 200716 + "'", int53 == 200716);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isExterns();
        boolean boolean17 = jSDocInfo15.hasReturnType();
        boolean boolean18 = jSDocInfo15.isOverride();
        jSDocInfo15.setLicense("hi!");
        boolean boolean21 = strSet11.contains((java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair24 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType22, jSType23);
        boolean boolean25 = strSet11.equals((java.lang.Object) jSType23);
        java.util.Iterator<java.lang.String> strItor26 = strSet11.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getType();
        boolean boolean30 = jSDocInfo27.isImplicitCast();
        boolean boolean31 = jSDocInfo27.isExport();
        boolean boolean32 = jSDocInfo27.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo27.getReturnType();
        boolean boolean34 = jSDocInfo27.containsDeclaration();
        int int35 = jSDocInfo27.getParameterCount();
        java.lang.String str36 = jSDocInfo27.getVersion();
        jSDocInfo27.setLicense("Not declared as a type name");
        java.lang.String str39 = jSDocInfo27.getSourceName();
        java.lang.String str40 = jSDocInfo27.getDescription();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo27.getModifies();
        boolean boolean42 = strSet11.remove((java.lang.Object) jSDocInfo27);
        boolean boolean43 = jSDocInfo27.hasReturnType();
        java.lang.String str44 = jSDocInfo27.getOriginalCommentString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        java.lang.Object[] objArray2 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = nodeIterableList0.contains((java.lang.Object) jSTypeExpression5);
        boolean boolean7 = nodeIterableList0.isEmpty();
        java.lang.Object[] objArray8 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray10 = nodeIterableList9.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList9.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray18 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition12, typePosition13, typePosition14, typePosition15, typePosition16, typePosition17 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray19 = nodeIterableList9.toArray(typePositionArray18);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        boolean boolean31 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        boolean boolean32 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor33 = nodeIterableList20.listIterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream34 = nodeIterableList20.stream();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator35 = nodeIterableList20.spliterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(typePositionArray18);
        org.junit.Assert.assertNotNull(typePositionArray19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor33);
        org.junit.Assert.assertNotNull(nodeIterableStream34);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator35);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.hasParameterType("{483246824}");
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setLicense("{1761870988}");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("{1221148348}");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(40);
        boolean boolean3 = node2.isQualifiedName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node6.siblings();
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        boolean boolean22 = strSet15.remove((java.lang.Object) boolean21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getSuppressions();
        boolean boolean25 = jSDocInfo23.isNoSideEffects();
        boolean boolean26 = jSDocInfo23.isConsistentIdGenerator();
        boolean boolean27 = strSet15.contains((java.lang.Object) jSDocInfo23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        boolean boolean36 = node30.isDebugger();
        boolean boolean37 = node30.isVoid();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isTypeOf();
        com.google.javascript.rhino.Node node42 = node30.srcrefTree(node40);
        com.google.javascript.rhino.Node node43 = node30.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node43.setStaticSourceFile(staticSourceFile44);
        boolean boolean46 = strSet15.remove((java.lang.Object) node43);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node43.getStaticSourceFile();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        boolean boolean58 = node51.isVoid();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isTypeOf();
        com.google.javascript.rhino.Node node63 = node51.srcrefTree(node61);
        com.google.javascript.rhino.Node node64 = node51.getLastSibling();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean71 = node70.isThis();
        node67.addChildToBack(node70);
        boolean boolean73 = node67.isDebugger();
        com.google.javascript.rhino.Node node74 = node67.getFirstChild();
        boolean boolean75 = node51.hasChild(node74);
        typePosition48.setItem(node74);
        boolean boolean77 = node74.isLabel();
        com.google.javascript.rhino.Node node78 = node43.useSourceInfoFrom(node74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(53, node2, node78);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean86 = node85.isThis();
        node82.addChildToBack(node85);
        boolean boolean88 = node85.isNot();
        int int89 = node85.getLineno();
        boolean boolean90 = node85.isAdd();
        node85.setSourceEncodedPosition((int) (byte) 1);
        boolean boolean93 = node85.isDec();
        com.google.javascript.rhino.Node node94 = node85.getNext();
        boolean boolean95 = node85.isEmpty();
        com.google.javascript.rhino.Node node96 = node78.copyInformationFrom(node85);
        boolean boolean97 = node96.isName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node11.setJSType(jSType12);
        boolean boolean14 = node11.isString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        boolean boolean37 = node32.isAdd();
        boolean boolean38 = node26.hasChild(node32);
        boolean boolean39 = node32.isDefaultCase();
        int int40 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isTypeOf();
        boolean boolean45 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = node32.copyInformationFromForTree(node43);
        boolean boolean47 = node11.isEquivalentToTyped(node43);
        java.lang.String str48 = node11.getQualifiedName();
        com.google.javascript.rhino.Node node50 = node11.getChildAtIndex(0);
        boolean boolean51 = node11.isGetterDef();
        boolean boolean52 = node11.isCase();
        com.google.javascript.rhino.Node node53 = node11.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean55 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.Node node56 = jSDocInfo54.getAssociatedNode();
        boolean boolean57 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo54.getType();
        java.lang.String str59 = jSDocInfo54.getVersion();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo54.getType();
        boolean boolean61 = jSDocInfo54.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo54.getEnumParameterType();
        java.lang.String str63 = jSDocInfo54.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo54.getParameterNames();
        node11.setDirectives(strSet64);
        com.google.javascript.rhino.Node node66 = node11.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = node66.isStringKey();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String[] strArray15 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean18 = strSet16.isEmpty();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node21.siblings();
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray34 = nodeIterableList33.toArray();
        boolean boolean35 = strSet30.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList33);
        int int36 = strSet30.size();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean47 = nodeIterableList46.add(nodeIterable45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable56 = node50.siblings();
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet59);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList62 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray63 = nodeIterableList62.toArray();
        boolean boolean64 = strSet59.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        java.lang.Object[] objArray65 = nodeIterableList62.toArray();
        boolean boolean66 = nodeIterableList62.isEmpty();
        boolean boolean67 = nodeIterableList46.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        boolean boolean68 = strSet30.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        boolean boolean69 = strSet16.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList62);
        boolean boolean70 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags71 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags71.setMutatesArguments();
        sideEffectFlags71.setMutatesGlobalState();
        sideEffectFlags71.setThrows();
        int int75 = sideEffectFlags71.valueOf();
        boolean boolean76 = strSet16.contains((java.lang.Object) sideEffectFlags71);
        sideEffectFlags71.setThrows();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(nodeIterableList62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        boolean boolean44 = jSDocInfo33.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo33.getEnumParameterType();
        boolean boolean46 = jSDocInfo33.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        java.lang.String[] strArray10 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList42 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray43 = nodeIterableList42.toArray();
        boolean boolean44 = strSet39.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList42);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList45 = com.google.common.collect.ImmutableList.of(strSet11, strSet25, strSet39);
        boolean boolean46 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet11);
        boolean boolean48 = jSDocInfoBuilder1.recordMeaning("");
        boolean boolean49 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(nodeIterableList42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSetList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = nodeIterableList46.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray55 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition49, typePosition50, typePosition51, typePosition52, typePosition53, typePosition54 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray56 = nodeIterableList46.toArray(typePositionArray55);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray57 = nodeIterableList0.toArray((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) typePositionArray55);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor58 = nodeIterableList0.iterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList0.iterator();
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] {};
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList61 = com.google.common.collect.ImmutableList.of(typeArray60);
        java.lang.reflect.Type[] typeArray62 = nodeIterableList0.toArray(typeArray60);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor63 = nodeIterableList0.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList0.asList();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(typePositionArray55);
        org.junit.Assert.assertNotNull(typePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray57);
        org.junit.Assert.assertNotNull(nodeIterableItor58);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeList61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(nodeIterableItor63);
        org.junit.Assert.assertNotNull(nodeIterableList64);
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        int int30 = node24.getCharno();
        boolean boolean31 = node24.isNew();
        com.google.javascript.rhino.jstype.JSType jSType32 = node24.getJSType();
        boolean boolean33 = strSet20.contains((java.lang.Object) node24);
        boolean boolean34 = node24.isNoSideEffectsCall();
        boolean boolean35 = node24.isLocalResultCall();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.lang.String str4 = nodeIterableList0.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.hasReturnType();
        boolean boolean23 = jSDocInfo20.isOverride();
        jSDocInfo20.setLicense("hi!");
        boolean boolean26 = strSet16.contains((java.lang.Object) jSDocInfo20);
        boolean boolean27 = strSet16.isEmpty();
        boolean boolean28 = nodeIterableList0.equals((java.lang.Object) strSet16);
        java.lang.Object[] objArray29 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo30.getType();
        boolean boolean33 = jSDocInfo30.isImplicitCast();
        boolean boolean34 = jSDocInfo30.isExport();
        boolean boolean35 = jSDocInfo30.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo30.getReturnType();
        boolean boolean37 = jSDocInfo30.containsDeclaration();
        int int38 = jSDocInfo30.getParameterCount();
        java.lang.String str39 = jSDocInfo30.getVersion();
        jSDocInfo30.setLicense("Not declared as a type name");
        boolean boolean42 = jSDocInfo30.hasThisType();
        boolean boolean43 = jSDocInfo30.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo30.getExtendedInterfaces();
        int int45 = nodeIterableList0.lastIndexOf((java.lang.Object) jSDocInfo30);
        java.lang.String str47 = jSDocInfo30.getDescriptionForParameter("Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n");
        java.lang.String str48 = jSDocInfo30.getReturnDescription();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean3 = jSDocInfoBuilder1.recordExport();
        boolean boolean5 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet17);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        boolean boolean22 = strSet17.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.HashSet[] hashSetArray24 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray25 = (java.util.HashSet<java.lang.String>[]) hashSetArray24;
        strSetArray25[0] = strSet17;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList28 = com.google.common.collect.ImmutableList.copyOf(strSetArray25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        boolean boolean38 = node31.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.hasReturnType();
        boolean boolean42 = jSDocInfo39.isOverride();
        jSDocInfo39.setLicense("hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node60.isNot();
        int int64 = node60.getLineno();
        com.google.javascript.rhino.Node node65 = node50.srcref(node60);
        boolean boolean66 = node65.isDelProp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        node72.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = null;
        node72.setStaticSourceFile(staticSourceFile77);
        com.google.common.collect.ImmutableList<java.lang.Object> objList79 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray25, (java.lang.Object) node31, (java.lang.Object) "hi!", (java.lang.Object) boolean66, (java.lang.Object) node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = jSDocInfoBuilder1.build(node31);
        boolean boolean81 = jSDocInfo80.hasThisType();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo80.getParameterNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = strSet82.add("{884716401}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hashSetArray24);
        org.junit.Assert.assertNotNull(strSetArray25);
        org.junit.Assert.assertNotNull(strSetList28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        boolean boolean6 = jSDocInfo3.isImplicitCast();
        boolean boolean7 = jSDocInfo3.isExport();
        boolean boolean8 = jSDocInfo3.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo3.getReturnType();
        boolean boolean10 = jSDocInfo3.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        jSDocInfo3.setVisibility(visibility12);
        jSDocInfo0.setVisibility(visibility12);
        jSDocInfo0.setLicense("{1529389073}");
        java.lang.String str18 = jSDocInfo0.getSourceName();
        java.lang.String str19 = jSDocInfo0.toString();
        java.lang.String str20 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markAnnotation("", 4095, 2);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        boolean boolean14 = jSDocInfoBuilder10.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder10.recordThrowType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder10.recordConstancy();
        boolean boolean18 = jSDocInfoBuilder10.recordOverride();
        boolean boolean20 = jSDocInfoBuilder10.recordMeaning("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordDefineType(jSTypeExpression26);
        boolean boolean29 = jSDocInfoBuilder22.recordMeaning("hi!");
        boolean boolean31 = jSDocInfoBuilder22.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder33.markName("", staticSourceFile41, 29, 50);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isSyntheticBlock();
        boolean boolean55 = node47.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node47, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder33.recordThrowDescription(jSTypeExpression57, "?");
        boolean boolean60 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression57);
        boolean boolean61 = jSDocInfoBuilder10.recordType(jSTypeExpression57);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression57);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node65.siblings();
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet74);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList77 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray78 = nodeIterableList77.toArray();
        boolean boolean79 = strSet74.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList80 = com.google.common.collect.ImmutableList.of();
        boolean boolean81 = strSet74.contains((java.lang.Object) nodeIterableList80);
        java.util.Iterator<java.lang.String> strItor82 = strSet74.iterator();
        java.lang.String str83 = strItor82.next();
        boolean boolean84 = jSTypeExpression62.equals((java.lang.Object) str83);
        boolean boolean85 = jSDocInfoBuilder1.recordType(jSTypeExpression62);
        boolean boolean86 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableList77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterableList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean3 = jSTypeRegistry1.isForwardDeclaredType("{298532945}");
        com.google.javascript.rhino.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter4);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode6 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry5.setResolveMode(resolveMode6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        boolean boolean10 = jSTypeRegistry5.canPropertyBeDefined(jSType8, "Unknown class name");
        jSTypeRegistry5.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry5.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        jSTypeRegistry16.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode20 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry19.setResolveMode(resolveMode20);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry19.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = objectType23.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot26 = objectType23.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType34 = objectType33.toMaybeEnumElementType();
        boolean boolean35 = jSTypeRegistry5.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType23, objectType33);
        boolean boolean37 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType23, "JSDocInfo");
        jSTypeRegistry1.clearTemplateTypeNames();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        boolean boolean57 = strSet50.remove((java.lang.Object) boolean56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet59 = jSDocInfo58.getSuppressions();
        boolean boolean60 = jSDocInfo58.isNoSideEffects();
        boolean boolean61 = jSDocInfo58.isConsistentIdGenerator();
        boolean boolean62 = strSet50.contains((java.lang.Object) jSDocInfo58);
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo58.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        boolean boolean73 = jSTypeRegistry68.canPropertyBeDefined(jSType71, "Unknown class name");
        jSTypeRegistry68.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode78 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry77.setResolveMode(resolveMode78);
        com.google.javascript.rhino.jstype.ObjectType objectType80 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType81 = jSTypeRegistry77.createObjectType(objectType80);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry68.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType81, "");
        com.google.javascript.rhino.jstype.JSType jSType85 = objectType81.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType85.clearResolved();
        boolean boolean87 = jSType85.matchesUint32Context();
        boolean boolean88 = jSType85.isNoObjectType();
        com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry1.getGreatestSubtypeWithProperty(jSType85, "{13133096}");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType91 = jSType90.toMaybeParameterizedType();
        boolean boolean92 = jSType90.isBooleanObjectType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + resolveMode6 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode6.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertTrue("'" + resolveMode20 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode20.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNull(jSTypeStaticSlot26);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNull(enumElementType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(errorReporter66);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + resolveMode78 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode78.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSType90);
        org.junit.Assert.assertNull(parameterizedType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Unknown class name", 2, (int) ' ');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDec();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isVoid();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isTypeOf();
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node25);
        int int28 = node6.getIndexOfChild(node25);
        boolean boolean29 = node6.isTrue();
        boolean boolean30 = node3.isEquivalentToTyped(node6);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        int int42 = node33.getIntProp((int) (short) 1);
        node33.addSuppression("{1480997056}");
        com.google.javascript.rhino.Node node45 = node33.getLastChild();
        java.lang.String str46 = node45.getString();
        int int47 = node3.getIndexOfChild(node45);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        node51.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node65.isNot();
        int int69 = node65.getLineno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node75.isNot();
        int int79 = node75.getLineno();
        com.google.javascript.rhino.Node node80 = node65.srcref(node75);
        int int81 = node65.getCharno();
        com.google.javascript.rhino.Node node82 = node51.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node88 = node87.cloneNode();
        boolean boolean89 = node88.isAssignAdd();
        int int90 = node51.getIndexOfChild(node88);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node88.siblings();
        typePosition48.setItem(node88);
        int int93 = typePosition48.getPositionOnEndLine();
        int int94 = typePosition48.getPositionOnEndLine();
        com.google.javascript.rhino.Node node95 = typePosition48.getItem();
        com.google.javascript.rhino.Node node96 = node45.srcrefTree(node95);
        boolean boolean97 = node45.isFor();
        boolean boolean98 = node45.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isTypeOf();
        com.google.javascript.rhino.Node node14 = node2.srcrefTree(node12);
        com.google.javascript.rhino.Node node15 = node2.getLastSibling();
        com.google.javascript.rhino.Node node16 = node2.getNext();
        boolean boolean17 = node2.isThis();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder19.recordConstancy();
        boolean boolean27 = jSDocInfoBuilder19.recordOverride();
        jSDocInfoBuilder19.markName("None", 5, 0);
        java.lang.String[] strArray34 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        boolean boolean37 = strSet35.isEmpty();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node54.siblings();
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray67 = nodeIterableList66.toArray();
        boolean boolean68 = strSet63.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList66);
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList69 = com.google.common.collect.ImmutableList.of(strSet35, strSet49, strSet63);
        boolean boolean70 = jSDocInfoBuilder19.recordModifies((java.util.Set<java.lang.String>) strSet63);
        java.lang.Object obj71 = null;
        boolean boolean72 = strSet63.contains(obj71);
        int int73 = strSet63.size();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray76 = nodeIterableList75.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList77 = nodeIterableList75.reverse();
        boolean boolean78 = nodeIterableList75.isEmpty();
        int int79 = nodeIterableList75.size();
        boolean boolean80 = nodeIterableList75.isEmpty();
        boolean boolean81 = strSet63.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList75);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder83 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean84 = jSDocInfoBuilder83.recordInterface();
        boolean boolean85 = jSDocInfoBuilder83.recordPreserveTry();
        boolean boolean86 = jSDocInfoBuilder83.recordNoTypeCheck();
        int int87 = nodeIterableList75.lastIndexOf((java.lang.Object) boolean86);
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator88 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList75.replaceAll(nodeIterableUnaryOperator88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSetList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(nodeIterableList75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        jSDocInfo0.addSuppression("");
        boolean boolean10 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        int int12 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder21.recordDefineType(jSTypeExpression22);
        jSDocInfoBuilder21.markAnnotation("None", 48, 51);
        boolean boolean28 = jSDocInfoBuilder21.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.recordInterface();
        boolean boolean33 = jSDocInfoBuilder30.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordDefineType(jSTypeExpression34);
        boolean boolean37 = jSDocInfoBuilder30.recordMeaning("hi!");
        boolean boolean39 = jSDocInfoBuilder30.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.siblings();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = strSet56.remove((java.lang.Object) jSDocInfoBuilder60);
        boolean boolean66 = jSDocInfoBuilder60.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder68.addAuthor("");
        boolean boolean71 = jSDocInfoBuilder68.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = null;
        boolean boolean73 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression72);
        boolean boolean74 = jSDocInfoBuilder68.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile76 = null;
        jSDocInfoBuilder68.markName("", staticSourceFile76, 29, 50);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean86 = node85.isThis();
        node82.addChildToBack(node85);
        boolean boolean88 = node82.isDebugger();
        boolean boolean89 = node82.isSyntheticBlock();
        boolean boolean90 = node82.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = new com.google.javascript.rhino.JSTypeExpression(node82, "Unknown class name");
        boolean boolean94 = jSDocInfoBuilder68.recordThrowDescription(jSTypeExpression92, "?");
        boolean boolean95 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression92);
        boolean boolean96 = jSDocInfoBuilder41.recordEnumParameterType(jSTypeExpression92);
        boolean boolean97 = jSDocInfoBuilder30.recordImplementedInterface(jSTypeExpression92);
        boolean boolean98 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression92);
        int int99 = nodeIterableList19.lastIndexOf((java.lang.Object) jSDocInfoBuilder21);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection14 = jSDocInfo0.getMarkers();
        java.lang.String str15 = jSDocInfo0.getLicense();
        boolean boolean16 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        java.lang.String[] strArray13 = new java.lang.String[] { "Unknown class name", "OR hi! [directives: []]", "INSTANCEOF", "Not declared as a type name", "Named type with empty name component", "None", "OR []", "INSTANCEOF", "InputId: ", "Not declared as a constructor", "JSDocInfo", "Unknown class name", "Named type with empty name component" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.util.Spliterator<java.lang.String> strSpliterator16 = strSet14.spliterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder18.recordConstancy();
        boolean boolean26 = jSDocInfoBuilder18.recordOverride();
        boolean boolean27 = jSDocInfoBuilder18.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder18.recordBaseType(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder18.recordNoShadow();
        boolean boolean32 = jSDocInfoBuilder18.recordDeprecationReason("{1403969054}");
        boolean boolean33 = strSet14.equals((java.lang.Object) jSDocInfoBuilder18);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode61 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry60.setResolveMode(resolveMode61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry60.createObjectType(objectType63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = objectType64.toObjectType();
        boolean boolean66 = objectType65.matchesInt32Context();
        boolean boolean67 = objectType65.isStringValueType();
        boolean boolean68 = objectType65.canBeCalled();
        boolean boolean69 = objectType65.isAllType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType70 = objectType65.toMaybeEnumElementType();
        int int71 = nodeIterableList45.lastIndexOf((java.lang.Object) objectType65);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList45.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor73 = nodeIterableList45.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        int int75 = jSDocInfo74.getExtendedInterfacesCount();
        boolean boolean76 = jSDocInfo74.isInterface();
        boolean boolean78 = jSDocInfo74.hasParameter("JSDocInfo");
        boolean boolean79 = jSDocInfo74.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo74.getTypedefType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = nodeIterableList45.remove((java.lang.Object) jSDocInfo74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + resolveMode61 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode61.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(enumElementType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertNotNull(nodeIterableItor73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSTypeExpression80);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode21 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry20.setResolveMode(resolveMode21);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry20.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = objectType24.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        boolean boolean32 = jSTypeRegistry27.canPropertyBeDefined(jSType30, "Unknown class name");
        jSTypeRegistry27.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry27.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType40, "");
        boolean boolean43 = jSType42.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = objectType25.testForEquality(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType42.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry11.createNullableType(jSType42);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry1.createOptionalType(jSType46);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry1.createAnonymousObjectType();
        jSTypeRegistry1.setLastGeneration(true);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry1.createNamedType("?", "None", 30, 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo56.getEnumParameterType();
        boolean boolean58 = jSDocInfo56.hasBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo56.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList59);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry1.createNamedType("java.io.IOException: {1609442801}", "{({1354435764},{1233786300},{1645822162})}", 35, 6);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + resolveMode21 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode21.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(jSType65);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!");
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasDescriptionForParameter("{685436808}");
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        int int14 = strSet11.size();
        strSet11.clear();
        java.util.Spliterator<java.lang.String> strSpliterator16 = strSet11.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray18 = nodeIterableList17.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList17.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray26 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition20, typePosition21, typePosition22, typePosition23, typePosition24, typePosition25 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray27 = nodeIterableList17.toArray(typePositionArray26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor28 = nodeIterableList17.iterator();
        java.lang.Object[] objArray29 = nodeIterableList17.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream30 = nodeIterableList17.parallelStream();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean35 = node34.isObjectLit();
        int int36 = nodeIterableList17.indexOf((java.lang.Object) boolean35);
        boolean boolean37 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.hasFileOverview();
        boolean boolean40 = jSDocInfo38.hasModifies();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo38.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList42 = com.google.common.collect.ImmutableList.of();
        boolean boolean43 = strSet41.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList42);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor44 = nodeIterableList42.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList42.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = nodeIterableList45.asList();
        boolean boolean47 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        boolean boolean48 = nodeIterableList46.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(typePositionArray26);
        org.junit.Assert.assertNotNull(typePositionArray27);
        org.junit.Assert.assertNotNull(nodeIterableItor28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(nodeIterableList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor44);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder6.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean16 = jSDocInfoBuilder11.recordVisibility(visibility15);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean35 = jSDocInfoBuilder32.recordDescription("hi!");
        boolean boolean36 = jSDocInfoBuilder32.recordHiddenness();
        boolean boolean37 = strSet28.remove((java.lang.Object) jSDocInfoBuilder32);
        boolean boolean38 = jSDocInfoBuilder32.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder11.recordThisType(jSTypeExpression64);
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.JSType jSType73 = null;
        boolean boolean75 = jSTypeRegistry70.canPropertyBeDefined(jSType73, "Unknown class name");
        jSTypeRegistry70.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode80 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry79.setResolveMode(resolveMode80);
        com.google.javascript.rhino.jstype.ObjectType objectType82 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType83 = jSTypeRegistry79.createObjectType(objectType82);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry70.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType83, "");
        boolean boolean86 = jSType85.isInstanceType();
        boolean boolean87 = jSType85.isNumber();
        boolean boolean88 = jSTypeExpression64.equals((java.lang.Object) jSType85);
        boolean boolean89 = jSDocInfoBuilder6.recordThisType(jSTypeExpression64);
        boolean boolean91 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression64, "None");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression64);
        boolean boolean93 = jSTypeExpression64.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + resolveMode80 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode80.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean15 = jSDocInfoBuilder1.recordVersion("{2485467}");
        boolean boolean17 = jSDocInfoBuilder1.hasParameter("function (this:me, {1263208199}): me");
        boolean boolean19 = jSDocInfoBuilder1.addReference("NUMBER 1.0");
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo20.getSuppressions();
        boolean boolean22 = jSDocInfo20.isNoSideEffects();
        boolean boolean24 = jSDocInfo20.hasParameter("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getParameterType("STRING INSTANCEOF 50");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean30 = jSDocInfoBuilder28.isInterfaceRecorded();
        boolean boolean31 = jSDocInfoBuilder28.recordIdGenerator();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isGetElem();
        jSDocInfoBuilder28.markTypeNode(node34, (int) '#', (int) (short) -1, (int) '4', 2, false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder28.recordBaseType(jSTypeExpression42);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo47.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = jSDocInfo47.getVisibility();
        boolean boolean51 = jSDocInfo47.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo47.setVisibility(visibility52);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray54 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility52 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray54);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility56);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = visibilityEnumBuilder59.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility60);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isExterns();
        boolean boolean65 = jSDocInfo63.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean67 = jSDocInfo66.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo66.getType();
        boolean boolean69 = jSDocInfo66.isImplicitCast();
        boolean boolean70 = jSDocInfo66.isExport();
        boolean boolean71 = jSDocInfo66.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo66.getReturnType();
        boolean boolean73 = jSDocInfo66.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder74 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder74.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility75);
        jSDocInfo66.setVisibility(visibility75);
        jSDocInfo63.setVisibility(visibility75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder79 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility75);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder80 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility75);
        boolean boolean81 = jSDocInfoBuilder28.recordVisibility(visibility75);
        jSDocInfo20.setVisibility(visibility75);
        boolean boolean83 = jSDocInfoBuilder1.recordVisibility(visibility75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(visibility50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder57);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder58);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder61);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + visibility75 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility75.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder79);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getLineOfOffset(32);
        java.lang.String str43 = staticSourceFile31.getName();
        int int45 = staticSourceFile31.getColumnOfOffset((int) '4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str43, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isThis();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isString();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray9 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList10 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList10, jSTypeArray9);
        com.google.javascript.rhino.Node node12 = jSTypeRegistry8.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean17 = node12.isEquivalentToTyped(node16);
        com.google.javascript.rhino.Node node18 = node12.cloneNode();
        com.google.javascript.rhino.InputId inputId19 = node12.getInputId();
        boolean boolean20 = node12.isLabelName();
        com.google.javascript.rhino.Node node21 = node3.srcref(node12);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(3, node12);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node12.getJsDocBuilderForNode();
        fileLevelJsDocBuilder23.append("{1615692914}");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder23);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray24 = nodeIterableList23.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = nodeIterableList23.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray32 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition26, typePosition27, typePosition28, typePosition29, typePosition30, typePosition31 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray33 = nodeIterableList23.toArray(typePositionArray32);
        boolean boolean34 = nodeIterableList0.equals((java.lang.Object) nodeIterableList23);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor35 = nodeIterableList23.iterator();
        boolean boolean36 = nodeIterableList23.isEmpty();
        int int37 = nodeIterableList23.size();
        boolean boolean38 = nodeIterableList23.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        int int41 = jSDocInfo39.getParameterCount();
        boolean boolean42 = jSDocInfo39.isIdGenerator();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo39.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = jSDocInfo39.getTemplateTypeNames();
        boolean boolean45 = nodeIterableList23.equals((java.lang.Object) jSDocInfo39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordInterface();
        boolean boolean50 = jSDocInfoBuilder47.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = null;
        boolean boolean52 = jSDocInfoBuilder47.recordDefineType(jSTypeExpression51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = null;
        boolean boolean54 = jSDocInfoBuilder47.recordThisType(jSTypeExpression53);
        boolean boolean55 = jSDocInfoBuilder47.isPopulated();
        boolean boolean56 = jSDocInfoBuilder47.recordNoAlias();
        boolean boolean59 = jSDocInfoBuilder47.recordParameterDescription("hi!", "JSDocInfo");
        boolean boolean60 = jSDocInfoBuilder47.recordConstructor();
        boolean boolean63 = jSDocInfoBuilder47.recordParameterDescription("OR hi! [source_file: {298532945}]", "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean64 = jSDocInfoBuilder47.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder47.recordNoCompile();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("?", 42, 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = jSDocInfoBuilder47.build(node69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = nodeIterableList23.remove((java.lang.Object) node69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(typePositionArray32);
        org.junit.Assert.assertNotNull(typePositionArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(jSDocInfo70);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        java.util.Set<java.lang.String> strSet81 = jSDocInfo0.getSuppressions();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo0.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList83 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray84 = nodeIterableList83.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = nodeIterableList83.reverse();
        boolean boolean86 = nodeIterableList83.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList83.iterator();
        boolean boolean88 = strSet82.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList83);
        boolean boolean89 = nodeIterableList83.isEmpty();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator90 = nodeIterableList83.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(nodeIterableList83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator90);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isSyntheticBlock();
        boolean boolean23 = node15.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node15, "Unknown class name");
        boolean boolean27 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression25, "?");
        jSDocInfoBuilder1.markAnnotation("java.io.IOException: OR hi!\n    OR hi!\n", 38, 41);
        boolean boolean33 = jSDocInfoBuilder1.recordReturnDescription("{556367677}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean5 = jSDocInfo0.hasParameterType("{1624976459}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        int int41 = staticSourceFile31.getColumnOfOffset(2);
        int int43 = staticSourceFile31.getColumnOfOffset(83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        jSDocInfo0.setLicense("{483323349}");
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean11 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node13 = null;
        jSDocInfo0.setAssociatedNode(node13);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        int int39 = staticSourceFile31.getColumnOfOffset(4);
        java.lang.String str40 = staticSourceFile31.getName();
        int int42 = staticSourceFile31.getLineOfOffset((int) (byte) 100);
        boolean boolean43 = staticSourceFile31.isExtern();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str40, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean3 = jSDocInfo0.hasType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isExport();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("{441018204}");
        boolean boolean8 = jSDocInfo0.isExport();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition6 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList9 = com.google.common.collect.ImmutableList.of(namePosition8);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList11 = com.google.common.collect.ImmutableList.of(namePosition10);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList17 = com.google.common.collect.ImmutableList.of(namePosition16);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition18 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList19 = com.google.common.collect.ImmutableList.of(namePosition5, namePosition6, namePosition7, namePosition8, namePosition10, namePosition12, namePosition13, namePosition14, namePosition15, namePosition16, namePosition18);
        int int20 = namePosition10.getStartLine();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry22.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean31 = node26.isEquivalentToTyped(node30);
        boolean boolean32 = node30.isWhile();
        namePosition10.setItem(node30);
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean35 = jSDocInfo0.isNoTypeCheck();
        boolean boolean36 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(namePositionList9);
        org.junit.Assert.assertNotNull(namePositionList11);
        org.junit.Assert.assertNotNull(namePositionList17);
        org.junit.Assert.assertNotNull(namePositionList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("NAME");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getVersion();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.Node node14 = jSDocInfo0.getAssociatedNode();
        node14.setLineno(41);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordExport();
        boolean boolean17 = jSDocInfoBuilder1.recordReturnDescription("{13133096}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordDefineType(jSTypeExpression23);
        boolean boolean26 = jSDocInfoBuilder19.recordMeaning("hi!");
        boolean boolean28 = jSDocInfoBuilder19.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.recordInterface();
        boolean boolean33 = jSDocInfoBuilder30.recordDescription("hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean52 = jSDocInfoBuilder49.recordDescription("hi!");
        boolean boolean53 = jSDocInfoBuilder49.recordHiddenness();
        boolean boolean54 = strSet45.remove((java.lang.Object) jSDocInfoBuilder49);
        boolean boolean55 = jSDocInfoBuilder49.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder57.addAuthor("");
        boolean boolean60 = jSDocInfoBuilder57.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = null;
        boolean boolean62 = jSDocInfoBuilder57.recordThrowType(jSTypeExpression61);
        boolean boolean63 = jSDocInfoBuilder57.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        jSDocInfoBuilder57.markName("", staticSourceFile65, 29, 50);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node71.isDebugger();
        boolean boolean78 = node71.isSyntheticBlock();
        boolean boolean79 = node71.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node71, "Unknown class name");
        boolean boolean83 = jSDocInfoBuilder57.recordThrowDescription(jSTypeExpression81, "?");
        boolean boolean84 = jSDocInfoBuilder49.recordThrowType(jSTypeExpression81);
        boolean boolean85 = jSDocInfoBuilder30.recordEnumParameterType(jSTypeExpression81);
        boolean boolean86 = jSDocInfoBuilder19.recordImplementedInterface(jSTypeExpression81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression81);
        boolean boolean88 = jSTypeExpression87.isOptionalArg();
        boolean boolean89 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression87);
        jSDocInfoBuilder1.markText("InputId: java.io.IOException: java.io.IOException: ", (-1), (int) (byte) 100, 1, 10);
        boolean boolean97 = jSDocInfoBuilder1.recordFileOverview("{1234408834}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        java.lang.Object obj12 = null;
        boolean boolean13 = strSet11.equals(obj12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7, 8202, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) 'a', nodeArray7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(35, nodeArray7, 100, 36);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(83, nodeArray7, (int) (byte) 1, 4093);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(42, nodeArray7);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(38, nodeArray7, (int) (short) 0, 43);
        node22.addSuppression("{547455454}");
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder12.recordParameter("OR hi!", jSTypeExpression17);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean23 = jSDocInfoBuilder20.recordDescription("hi!");
        boolean boolean24 = jSDocInfoBuilder20.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder20.recordConstancy();
        boolean boolean28 = jSDocInfoBuilder20.recordOverride();
        boolean boolean29 = jSDocInfoBuilder20.recordNoTypeCheck();
        boolean boolean31 = jSDocInfoBuilder20.recordMeaning("{...}");
        boolean boolean32 = jSDocInfoBuilder20.isConstructorRecorded();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node36, "");
        boolean boolean39 = jSTypeExpression38.isVarArgs();
        boolean boolean40 = jSDocInfoBuilder20.recordThisType(jSTypeExpression38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression38);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isTypeOf();
        node45.setLineno(51);
        boolean boolean49 = node45.isCase();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node45, "java.io.IOException: java.io.IOException: java.io.IOException");
        boolean boolean52 = jSDocInfoBuilder12.recordThisType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder55.recordInterface();
        boolean boolean58 = jSDocInfoBuilder55.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.addAuthor("");
        boolean boolean63 = jSDocInfoBuilder60.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = null;
        boolean boolean65 = jSDocInfoBuilder60.recordThrowType(jSTypeExpression64);
        boolean boolean66 = jSDocInfoBuilder60.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder60.markName("", staticSourceFile68, 29, 50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isThis();
        node74.addChildToBack(node77);
        boolean boolean80 = node74.isDebugger();
        boolean boolean81 = node74.isSyntheticBlock();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = new com.google.javascript.rhino.JSTypeExpression(node74, "Unknown class name");
        boolean boolean86 = jSDocInfoBuilder60.recordThrowDescription(jSTypeExpression84, "?");
        boolean boolean88 = jSDocInfoBuilder55.recordThrowDescription(jSTypeExpression84, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean89 = jSTypeExpression84.isOptionalArg();
        boolean boolean90 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("Unknown class name");
        jSDocInfoBuilder1.markAnnotation("{1229225967}", 8, (int) (byte) -1);
        jSDocInfoBuilder1.recordOriginalCommentString("OR hi! [var_args_name: 1]");
        boolean boolean16 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean17 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("{298532945}");
        boolean boolean17 = jSDocInfoBuilder1.hasParameter("{1098173523}");
        boolean boolean18 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean19 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean21 = jSDocInfoBuilder1.addAuthor("OR hi! 43 [length: 46]\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        node13.putBooleanProp(0, false);
        node13.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean30 = node13.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = node13.getStaticSourceFile();
        boolean boolean32 = staticSourceFile31.isExtern();
        int int34 = staticSourceFile31.getLineOffset(16);
        jSDocInfoBuilder1.markName("None", staticSourceFile31, (int) (byte) 1, 43);
        boolean boolean39 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean40 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean41 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(staticSourceFile31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2147483648) + "'", int34 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.addReference("");
        boolean boolean6 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isThis();
        node10.addChildToBack(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node10.siblings();
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isExterns();
        boolean boolean25 = jSDocInfo23.hasReturnType();
        boolean boolean26 = jSDocInfo23.isOverride();
        jSDocInfo23.setLicense("hi!");
        boolean boolean29 = strSet19.contains((java.lang.Object) jSDocInfo23);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair32 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType30, jSType31);
        boolean boolean33 = strSet19.equals((java.lang.Object) jSType31);
        boolean boolean35 = strSet19.add("hi!");
        boolean boolean36 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet19);
        boolean boolean37 = jSDocInfoBuilder1.recordOverride();
        boolean boolean39 = jSDocInfoBuilder1.hasParameter("InputId: Node tree inequality:\nTree1:\nOR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nTree2:\nTHROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n\n\nSubtree1: OR hi! [quoted: 1] [empty_block: 1]\n    OR hi!\n\n\nSubtree2: THROW 49\n    OR hi! [length: 40] : {}\n    OR hi! [directives: []]\n");
        boolean boolean40 = jSDocInfoBuilder1.recordConstancy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean16 = jSDocInfoBuilder1.recordParameterDescription("InputId: ", "OR hi!\n    OR hi!\n");
        boolean boolean17 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isOverride();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(visibility9);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo12.getVisibility();
        boolean boolean16 = jSDocInfo12.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo12.setVisibility(visibility17);
        boolean boolean19 = jSDocInfo12.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo12.getVisibility();
        jSDocInfo0.setVisibility(visibility20);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor5 = strSet4.iterator();
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = strItor6.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strItor6);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordFileOverview("java.io.IOException: []");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean16 = jSDocInfoBuilder11.recordVisibility(visibility15);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean35 = jSDocInfoBuilder32.recordDescription("hi!");
        boolean boolean36 = jSDocInfoBuilder32.recordHiddenness();
        boolean boolean37 = strSet28.remove((java.lang.Object) jSDocInfoBuilder32);
        boolean boolean38 = jSDocInfoBuilder32.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder11.recordThisType(jSTypeExpression64);
        boolean boolean69 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression64);
        boolean boolean70 = jSDocInfoBuilder1.isPopulated();
        boolean boolean72 = jSDocInfoBuilder1.recordReturnDescription("{1919182226}");
        boolean boolean74 = jSDocInfoBuilder1.recordLends("{1153189768}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.hasParameter("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        node15.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        node29.setOptionalArg(false);
        com.google.javascript.rhino.Node node34 = node15.srcref(node29);
        jSDocInfoBuilder1.markTypeNode(node29, 51, (int) (short) 100, 0, (int) (short) 0, false);
        boolean boolean41 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean43 = jSDocInfoBuilder1.recordFileOverview("{441018204}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordInterface();
        boolean boolean49 = jSDocInfoBuilder46.recordDescription("hi!");
        boolean boolean50 = jSDocInfoBuilder46.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = null;
        boolean boolean52 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder46.recordConstancy();
        boolean boolean54 = jSDocInfoBuilder46.recordOverride();
        boolean boolean55 = jSDocInfoBuilder46.recordNoTypeCheck();
        boolean boolean56 = jSDocInfoBuilder46.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder58.addAuthor("");
        boolean boolean61 = jSDocInfoBuilder58.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = null;
        boolean boolean63 = jSDocInfoBuilder58.recordThrowType(jSTypeExpression62);
        boolean boolean64 = jSDocInfoBuilder58.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        jSDocInfoBuilder58.markName("", staticSourceFile66, 29, 50);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node72.isDebugger();
        boolean boolean79 = node72.isSyntheticBlock();
        boolean boolean80 = node72.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node72, "Unknown class name");
        boolean boolean84 = jSDocInfoBuilder58.recordThrowDescription(jSTypeExpression82, "?");
        com.google.javascript.rhino.Node node85 = jSTypeExpression82.getRoot();
        boolean boolean86 = jSDocInfoBuilder46.recordEnumParameterType(jSTypeExpression82);
        boolean boolean87 = jSTypeExpression82.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression82);
        boolean boolean89 = jSDocInfoBuilder1.recordParameter("{854479168}", jSTypeExpression88);
        boolean boolean90 = jSDocInfoBuilder1.recordPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        jSDocInfoBuilder1.markName("{298532945}", (int) (short) -1, 40);
        boolean boolean18 = jSDocInfoBuilder1.recordVersion("{1483462980}");
        boolean boolean19 = jSDocInfoBuilder1.isPopulated();
        boolean boolean21 = jSDocInfoBuilder1.recordFileOverview("{({347511123},{1849089634})}");
        boolean boolean22 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        int int27 = strSet24.size();
        strSet24.clear();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        boolean boolean32 = jSDocInfo30.hasModifies();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        boolean boolean35 = strSet33.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList34.iterator();
        java.lang.Object[] objArray38 = nodeIterableList34.toArray();
        boolean boolean39 = strSet24.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList34.iterator();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node43.isDebugger();
        boolean boolean50 = node43.isVoid();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isTypeOf();
        com.google.javascript.rhino.Node node55 = node43.srcrefTree(node53);
        com.google.javascript.rhino.Node node56 = node43.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node56.setStaticSourceFile(staticSourceFile57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry60.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean69 = node64.isEquivalentToTyped(node68);
        com.google.javascript.rhino.Node node70 = node64.cloneNode();
        boolean boolean71 = node64.isEmpty();
        com.google.javascript.rhino.Node node72 = node56.useSourceInfoFromForTree(node64);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 10);
        boolean boolean75 = node74.isBreak();
        com.google.javascript.rhino.Node node76 = node72.clonePropsFrom(node74);
        java.lang.String[] strArray90 = new java.lang.String[] { "Unknown class name", "OR hi! [directives: []]", "INSTANCEOF", "Not declared as a type name", "Named type with empty name component", "None", "OR []", "INSTANCEOF", "InputId: ", "Not declared as a constructor", "JSDocInfo", "Unknown class name", "Named type with empty name component" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        java.util.Spliterator<java.lang.String> strSpliterator93 = strSet91.spliterator();
        java.lang.Object[] objArray94 = strSet91.toArray();
        node72.setDirectives((java.util.Set<java.lang.String>) strSet91);
        boolean boolean96 = nodeIterableList34.equals((java.lang.Object) strSet91);
        java.lang.Object[] objArray97 = strSet91.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[Unknown class name, OR hi! [directives: []], INSTANCEOF, Not declared as a type name, Named type with empty name component, None, OR [], InputId: , Not declared as a constructor, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[Unknown class name, OR hi! [directives: []], INSTANCEOF, Not declared as a type name, Named type with empty name component, None, OR [], InputId: , Not declared as a constructor, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[Unknown class name, OR hi! [directives: []], INSTANCEOF, Not declared as a type name, Named type with empty name component, None, OR [], InputId: , Not declared as a constructor, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[Unknown class name, OR hi! [directives: []], INSTANCEOF, Not declared as a type name, Named type with empty name component, None, OR [], InputId: , Not declared as a constructor, JSDocInfo]");
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean14 = jSDocInfoBuilder1.recordExpose();
        boolean boolean15 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean16 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo17.getType();
        boolean boolean20 = jSDocInfo17.isImplicitCast();
        boolean boolean21 = jSDocInfo17.isExport();
        boolean boolean22 = jSDocInfo17.isNoShadow();
        boolean boolean24 = jSDocInfo17.hasParameter("Unknown class name");
        java.lang.String str25 = jSDocInfo17.getDescription();
        java.lang.String str26 = jSDocInfo17.getFileOverview();
        boolean boolean27 = jSDocInfo17.hasFileOverview();
        int int28 = jSDocInfo17.getExtendedInterfacesCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo17.getTemplateTypeNames();
        boolean boolean30 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList29);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder1.recordDescription("{1480997056}");
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nNAME\n    OR hi!\n        OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: NAME\n    OR hi!\n        OR hi!\n", 12, 0);
        boolean boolean22 = jSDocInfoBuilder1.recordLends("{734735021}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDec();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node40.isDebugger();
        boolean boolean47 = node40.isVoid();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isTypeOf();
        com.google.javascript.rhino.Node node52 = node40.srcrefTree(node50);
        int int53 = node31.getIndexOfChild(node50);
        int int54 = node31.getSourceOffset();
        boolean boolean55 = node26.isEquivalentToTyped(node31);
        boolean boolean56 = node26.isDec();
        boolean boolean57 = node26.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getSuppressions();
        boolean boolean61 = jSDocInfo59.isNoSideEffects();
        java.lang.String str62 = jSDocInfo59.getReturnDescription();
        boolean boolean64 = jSDocInfo59.hasParameter("Not declared as a constructor");
        int int65 = jSDocInfo59.getParameterCount();
        com.google.javascript.rhino.Node node66 = jSDocInfo59.getAssociatedNode();
        boolean boolean67 = jSDocInfo59.isExpose();
        node26.putProp(0, (java.lang.Object) jSDocInfo59);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo59.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        boolean boolean53 = jSDocInfoBuilder1.recordExport();
        boolean boolean54 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean55 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordInterface();
        boolean boolean61 = jSDocInfoBuilder58.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = null;
        boolean boolean63 = jSDocInfoBuilder58.recordDefineType(jSTypeExpression62);
        boolean boolean65 = jSDocInfoBuilder58.recordMeaning("hi!");
        boolean boolean67 = jSDocInfoBuilder58.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder69.addAuthor("");
        boolean boolean72 = jSDocInfoBuilder69.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder69.recordThrowType(jSTypeExpression73);
        boolean boolean75 = jSDocInfoBuilder69.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = null;
        jSDocInfoBuilder69.markName("", staticSourceFile77, 29, 50);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean87 = node86.isThis();
        node83.addChildToBack(node86);
        boolean boolean89 = node83.isDebugger();
        boolean boolean90 = node83.isSyntheticBlock();
        boolean boolean91 = node83.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = new com.google.javascript.rhino.JSTypeExpression(node83, "Unknown class name");
        boolean boolean95 = jSDocInfoBuilder69.recordThrowDescription(jSTypeExpression93, "?");
        boolean boolean96 = jSDocInfoBuilder58.recordThrowType(jSTypeExpression93);
        com.google.javascript.rhino.Node node97 = jSTypeExpression93.getRoot();
        boolean boolean98 = jSDocInfoBuilder1.recordParameter("{141481777}", jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordNoShadow();
        jSDocInfoBuilder1.markAnnotation("{464938482}", 38, 42);
        boolean boolean14 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean16 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR 4\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR 4\n");
        boolean boolean17 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean18 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node2.siblings();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node18.siblings();
        node18.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType27 = node18.getJSType();
        com.google.javascript.rhino.Node node28 = node2.clonePropsFrom(node18);
        node18.setSourceEncodedPositionForTree((int) (short) 10);
        boolean boolean31 = node18.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        boolean boolean22 = node5.isQuotedString();
        boolean boolean23 = node5.isBreak();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        boolean boolean42 = strSet35.remove((java.lang.Object) boolean41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo43.getSuppressions();
        boolean boolean45 = jSDocInfo43.isNoSideEffects();
        boolean boolean46 = jSDocInfo43.isConsistentIdGenerator();
        boolean boolean47 = strSet35.contains((java.lang.Object) jSDocInfo43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node50.isDebugger();
        boolean boolean57 = node50.isVoid();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isTypeOf();
        com.google.javascript.rhino.Node node62 = node50.srcrefTree(node60);
        com.google.javascript.rhino.Node node63 = node50.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node63.setStaticSourceFile(staticSourceFile64);
        boolean boolean66 = strSet35.remove((java.lang.Object) node63);
        node63.setOptionalArg(true);
        boolean boolean69 = node63.isSwitch();
        node5.addChildToFront(node63);
        com.google.javascript.rhino.Node node71 = node63.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder10.recordDefineType(jSTypeExpression14);
        boolean boolean17 = jSDocInfoBuilder10.recordMeaning("hi!");
        boolean boolean19 = jSDocInfoBuilder10.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.recordInterface();
        boolean boolean43 = jSDocInfoBuilder40.recordDescription("hi!");
        boolean boolean44 = jSDocInfoBuilder40.recordHiddenness();
        boolean boolean45 = strSet36.remove((java.lang.Object) jSDocInfoBuilder40);
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression72);
        boolean boolean77 = jSDocInfoBuilder10.recordImplementedInterface(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression72);
        boolean boolean79 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = null;
        boolean boolean81 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordLends("OR hi!\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean12 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordInterface();
        boolean boolean17 = jSDocInfoBuilder14.recordDescription("hi!");
        boolean boolean18 = jSDocInfoBuilder14.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder14.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder14.recordReturnType(jSTypeExpression22);
        boolean boolean25 = jSDocInfoBuilder14.recordDeprecationReason("Not declared as a constructor");
        boolean boolean26 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder36.addAuthor("");
        boolean boolean39 = jSDocInfoBuilder36.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder36.recordThrowType(jSTypeExpression40);
        boolean boolean42 = jSDocInfoBuilder36.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        jSDocInfoBuilder36.markName("", staticSourceFile44, 29, 50);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node50.isDebugger();
        boolean boolean57 = node50.isSyntheticBlock();
        boolean boolean58 = node50.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node50, "Unknown class name");
        boolean boolean62 = jSDocInfoBuilder36.recordThrowDescription(jSTypeExpression60, "?");
        boolean boolean63 = jSDocInfoBuilder28.recordExtendedInterface(jSTypeExpression60);
        boolean boolean64 = jSDocInfoBuilder14.recordDefineType(jSTypeExpression60);
        boolean boolean65 = jSDocInfoBuilder14.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean68 = jSDocInfoBuilder67.recordInterface();
        boolean boolean70 = jSDocInfoBuilder67.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = null;
        boolean boolean72 = jSDocInfoBuilder67.recordTypedef(jSTypeExpression71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node76, "");
        boolean boolean79 = jSTypeExpression78.isVarArgs();
        boolean boolean80 = jSDocInfoBuilder67.recordDefineType(jSTypeExpression78);
        boolean boolean81 = jSDocInfoBuilder14.recordTypedef(jSTypeExpression78);
        boolean boolean82 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression78);
        boolean boolean83 = jSTypeExpression78.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        jSDocInfoBuilder1.markName("hi!", (int) (byte) -1, 29);
        boolean boolean71 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.isExterns();
        com.google.javascript.rhino.Node node74 = jSDocInfo72.getAssociatedNode();
        boolean boolean75 = jSDocInfo72.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo72.getType();
        boolean boolean78 = jSDocInfo72.hasParameter("");
        java.util.Set<java.lang.String> strSet79 = jSDocInfo72.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet79.spliterator();
        boolean boolean81 = jSDocInfoBuilder1.recordModifies(strSet79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = strSet79.add("{1742699508}");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isStringKey();
        boolean boolean25 = node5.isEmpty();
        boolean boolean26 = node5.isRegExp();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node30.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo32.getSuppressions();
        boolean boolean34 = jSDocInfo32.isNoSideEffects();
        java.lang.String str35 = jSDocInfo32.getReturnDescription();
        boolean boolean37 = jSDocInfo32.hasParameter("Not declared as a constructor");
        java.lang.String str38 = jSDocInfo32.getMeaning();
        boolean boolean39 = jSDocInfo32.isJavaDispatch();
        node30.setJSDocInfo(jSDocInfo32);
        boolean boolean41 = node30.isDo();
        com.google.javascript.rhino.InputId inputId43 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        node30.setInputId(inputId43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node50 = node49.cloneNode();
        boolean boolean51 = node50.isAssignAdd();
        boolean boolean52 = inputId43.equals((java.lang.Object) node50);
        boolean boolean53 = node50.hasChildren();
        node5.addChildrenToFront(node50);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode12 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry11.setResolveMode(resolveMode12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        boolean boolean16 = jSTypeRegistry11.canPropertyBeDefined(jSType14, "Unknown class name");
        jSTypeRegistry11.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry11.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        jSTypeRegistry22.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry25.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = objectType29.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot32 = objectType29.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry35.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType40 = objectType39.toMaybeEnumElementType();
        boolean boolean41 = jSTypeRegistry11.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType29, objectType39);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList43 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray44 = nodeIterableList43.toArray();
        boolean boolean45 = nodeIterableList43.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo52.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = jSDocInfo52.getVisibility();
        boolean boolean56 = jSDocInfo52.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility57 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo52.setVisibility(visibility57);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray59 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility57 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray59);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder61 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder63 = visibilityEnumBuilder61.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean65 = jSDocInfo64.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo64.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility67 = jSDocInfo64.getVisibility();
        boolean boolean68 = jSDocInfo64.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo64.setVisibility(visibility69);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray71 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility69 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder63.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder74 = visibilityEnumBuilder48.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray75 = nodeIterableList43.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray71);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList79 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList79, jSTypeArray78);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry77.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        int int82 = nodeIterableList43.lastIndexOf((java.lang.Object) jSTypeList79);
        com.google.javascript.rhino.Node node83 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        com.google.javascript.rhino.jstype.ObjectType objectType84 = jSTypeRegistry1.createAnonymousObjectType();
        boolean boolean85 = objectType84.isCheckedUnknownType();
        boolean boolean86 = objectType84.matchesInt32Context();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode12 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode12.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNull(jSTypeStaticSlot32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNull(enumElementType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNotNull(nodeIterableList43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertNull(visibility55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + visibility57 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility57.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray59);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + visibility62 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility62.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertNull(visibility67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray71);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder74);
        org.junit.Assert.assertNotNull(visibilityEnumArray75);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean6 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        boolean boolean24 = jSDocInfoBuilder19.recordExpose();
        boolean boolean25 = jSDocInfoBuilder19.recordConstructor();
        boolean boolean27 = jSDocInfoBuilder19.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder19.recordTypedef(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder19.shouldParseDocumentation();
        boolean boolean31 = jSDocInfoBuilder19.recordIdGenerator();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isCatch();
        boolean boolean47 = node35.hasChild(node41);
        node41.setCharno(43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node41, "java.io.IOException: function (this:me, {988702852}): me");
        boolean boolean52 = jSDocInfoBuilder19.recordThisType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression51);
        boolean boolean54 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList4 = com.google.common.collect.ImmutableList.of(namePosition3);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition5);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition9 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition11 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList12 = com.google.common.collect.ImmutableList.of(namePosition11);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList14 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition5, namePosition7, namePosition8, namePosition9, namePosition10, namePosition11, namePosition13);
        int int15 = namePosition8.getStartLine();
        com.google.javascript.rhino.Node node16 = namePosition8.getItem();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(46);
        namePosition8.setItem(node18);
        boolean boolean20 = node18.isAnd();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        boolean boolean32 = node27.isAdd();
        com.google.javascript.rhino.Node node33 = node27.cloneTree();
        java.lang.Object obj35 = node33.getProp((int) (byte) 0);
        int int36 = node33.getChildCount();
        boolean boolean37 = node33.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node33 };
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(12, nodeArray38);
        com.google.javascript.rhino.Node node40 = node18.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        boolean boolean45 = node43.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo46.getType();
        boolean boolean49 = jSDocInfo46.isNoTypeCheck();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo46.setAssociatedNode(node52);
        boolean boolean54 = node52.isNoSideEffectsCall();
        boolean boolean55 = node43.isEquivalentTo(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isNot();
        int int65 = node61.getLineno();
        boolean boolean66 = node61.isAdd();
        com.google.javascript.rhino.Node node67 = node61.cloneTree();
        boolean boolean68 = node61.isWith();
        com.google.javascript.rhino.Node node69 = node52.srcrefTree(node61);
        node61.setLength((int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node40.useSourceInfoIfMissingFromForTree(node61);
        com.google.javascript.rhino.Node node73 = node40.getLastSibling();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(42, "OR hi!\n    OR hi!\n");
        int int77 = node76.getChildCount();
        com.google.javascript.rhino.Node node78 = node76.getLastSibling();
        com.google.javascript.rhino.Node node79 = node73.clonePropsFrom(node76);
        boolean boolean80 = node76.isSwitch();
        org.junit.Assert.assertNotNull(namePositionList4);
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertNotNull(namePositionList12);
        org.junit.Assert.assertNotNull(namePositionList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        int int2 = jSDocInfo0.getParameterCount();
        java.lang.String str3 = jSDocInfo0.toString();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markAnnotation("", 4095, 2);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        boolean boolean14 = jSDocInfoBuilder10.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder10.recordThrowType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder10.recordConstancy();
        boolean boolean18 = jSDocInfoBuilder10.recordOverride();
        boolean boolean20 = jSDocInfoBuilder10.recordMeaning("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordDefineType(jSTypeExpression26);
        boolean boolean29 = jSDocInfoBuilder22.recordMeaning("hi!");
        boolean boolean31 = jSDocInfoBuilder22.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder33.markName("", staticSourceFile41, 29, 50);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isSyntheticBlock();
        boolean boolean55 = node47.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node47, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder33.recordThrowDescription(jSTypeExpression57, "?");
        boolean boolean60 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression57);
        boolean boolean61 = jSDocInfoBuilder10.recordType(jSTypeExpression57);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression57);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node65.siblings();
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        node65.setDirectives((java.util.Set<java.lang.String>) strSet74);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList77 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray78 = nodeIterableList77.toArray();
        boolean boolean79 = strSet74.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList80 = com.google.common.collect.ImmutableList.of();
        boolean boolean81 = strSet74.contains((java.lang.Object) nodeIterableList80);
        java.util.Iterator<java.lang.String> strItor82 = strSet74.iterator();
        java.lang.String str83 = strItor82.next();
        boolean boolean84 = jSTypeExpression62.equals((java.lang.Object) str83);
        boolean boolean85 = jSDocInfoBuilder1.recordType(jSTypeExpression62);
        boolean boolean87 = jSDocInfoBuilder1.recordDeprecationReason("OR hi! [directives: []]\n");
        boolean boolean88 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableList77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterableList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean15 = jSDocInfoBuilder1.recordMeaning("TYPEOF OR hi!\n");
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo7.getType();
        boolean boolean10 = jSDocInfo7.isImplicitCast();
        boolean boolean11 = jSDocInfo7.isExport();
        boolean boolean12 = jSDocInfo7.isNoShadow();
        boolean boolean14 = jSDocInfo7.hasParameter("Unknown class name");
        java.lang.String str15 = jSDocInfo7.getDescription();
        java.lang.String str16 = jSDocInfo7.getFileOverview();
        boolean boolean17 = jSDocInfo7.hasFileOverview();
        boolean boolean18 = nodeIterableList0.equals((java.lang.Object) jSDocInfo7);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo7.getModifies();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordInterface();
        boolean boolean38 = jSDocInfoBuilder35.recordDescription("hi!");
        boolean boolean39 = jSDocInfoBuilder35.recordHiddenness();
        boolean boolean40 = strSet31.remove((java.lang.Object) jSDocInfoBuilder35);
        boolean boolean41 = jSDocInfoBuilder35.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = null;
        boolean boolean43 = jSDocInfoBuilder35.recordExtendedInterface(jSTypeExpression42);
        boolean boolean44 = jSDocInfoBuilder35.recordHiddenness();
        boolean boolean47 = jSDocInfoBuilder35.recordParameterDescription("function (this:me, {1630586030}): me", "java.io.IOException: java.io.IOException: java.io.IOException: java.io.IOException: Unknown class name");
        boolean boolean48 = strSet19.remove((java.lang.Object) "java.io.IOException: java.io.IOException: java.io.IOException: java.io.IOException: Unknown class name");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        boolean boolean43 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.recordInterface();
        boolean boolean48 = jSDocInfoBuilder45.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.addAuthor("");
        boolean boolean53 = jSDocInfoBuilder50.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = null;
        boolean boolean55 = jSDocInfoBuilder50.recordThrowType(jSTypeExpression54);
        boolean boolean56 = jSDocInfoBuilder50.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        jSDocInfoBuilder50.markName("", staticSourceFile58, 29, 50);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        boolean boolean71 = node64.isSyntheticBlock();
        boolean boolean72 = node64.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = new com.google.javascript.rhino.JSTypeExpression(node64, "Unknown class name");
        boolean boolean76 = jSDocInfoBuilder50.recordThrowDescription(jSTypeExpression74, "?");
        boolean boolean78 = jSDocInfoBuilder45.recordThrowDescription(jSTypeExpression74, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean79 = jSTypeExpression74.isOptionalArg();
        boolean boolean80 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression74);
        boolean boolean81 = jSDocInfoBuilder1.recordPreserveTry();
        jSDocInfoBuilder1.markName("{1221148348}", 16, (int) (byte) 1);
        jSDocInfoBuilder1.markName("{2075923167}", 143360, (int) (short) 10);
        boolean boolean91 = jSDocInfoBuilder1.recordVersion("enum{{298532945}}");
        boolean boolean92 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        boolean boolean27 = node20.isWith();
        com.google.javascript.rhino.Node node28 = node11.srcrefTree(node20);
        boolean boolean29 = node11.isSwitch();
        boolean boolean30 = node11.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean32 = jSDocInfo31.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo31.getType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isTypeOf();
        jSDocInfo31.setAssociatedNode(node36);
        boolean boolean39 = jSDocInfo31.containsDeclaration();
        boolean boolean40 = jSDocInfo31.hasType();
        boolean boolean41 = jSDocInfo31.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = jSDocInfo31.getTemplateTypeNames();
        int int43 = jSDocInfo31.getExtendedInterfacesCount();
        boolean boolean45 = jSDocInfo31.hasParameter("java.io.IOException");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = jSDocInfo31.getVisibility();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node49.siblings();
        node49.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node58 = node49.getLastChild();
        boolean boolean59 = node49.isCall();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node62.siblings();
        node62.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node71 = node62.getLastChild();
        boolean boolean72 = node62.isCall();
        com.google.javascript.rhino.Node node73 = node49.copyInformationFrom(node62);
        boolean boolean74 = node73.isAnd();
        boolean boolean75 = node73.isLocalResultCall();
        jSDocInfo31.setAssociatedNode(node73);
        boolean boolean77 = jSDocInfo31.hasEnumParameterType();
        boolean boolean78 = jSDocInfo31.isInterface();
        int int79 = jSDocInfo31.getParameterCount();
        boolean boolean80 = nodeIterableList19.contains((java.lang.Object) jSDocInfo31);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator81 = nodeIterableList19.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(visibility46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator81);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo6.hasEnumParameterType();
        boolean boolean14 = jSDocInfo6.isDefine();
        java.lang.String str15 = jSDocInfo6.getLendsName();
        boolean boolean16 = jSDocInfo6.hasModifies();
        boolean boolean17 = jSDocInfo6.isNoSideEffects();
        boolean boolean18 = strSet3.equals((java.lang.Object) boolean17);
        boolean boolean20 = strSet3.add("{1526667826}");
        java.util.Iterator<java.lang.String> strItor21 = strSet3.iterator();
        boolean boolean23 = strSet3.equals((java.lang.Object) "OR hi! 0");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray25 = nodeIterableList24.toArray();
        boolean boolean26 = nodeIterableList24.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder27.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder30.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo33.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = jSDocInfo33.getVisibility();
        boolean boolean37 = jSDocInfo33.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo33.setVisibility(visibility38);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray40 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility38 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray40);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder42 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility43 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder44 = visibilityEnumBuilder42.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean46 = jSDocInfo45.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo45.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = jSDocInfo45.getVisibility();
        boolean boolean49 = jSDocInfo45.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo45.setVisibility(visibility50);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray52 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility50 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = visibilityEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray52);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray56 = nodeIterableList24.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray52);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry58.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        int int63 = nodeIterableList24.lastIndexOf((java.lang.Object) jSTypeList60);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = nodeIterableList24.reverse();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList66 = nodeIterableList64.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = nodeIterableList66.asList();
        boolean boolean68 = strSet3.equals((java.lang.Object) nodeIterableList66);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNull(visibility36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray40);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder41);
        org.junit.Assert.assertTrue("'" + visibility43 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility43.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(visibility48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray52);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder53);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertNotNull(visibilityEnumArray56);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList66);
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        java.lang.String str5 = jSDocInfo0.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getBaseType();
        boolean boolean4 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("{1094662025}");
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.util.HashSet[] hashSetArray18 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray19 = (java.util.HashSet<java.lang.String>[]) hashSetArray18;
        strSetArray19[0] = strSet11;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList22 = com.google.common.collect.ImmutableList.copyOf(strSetArray19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.hasReturnType();
        boolean boolean36 = jSDocInfo33.isOverride();
        jSDocInfo33.setLicense("hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node59 = node44.srcref(node54);
        boolean boolean60 = node59.isDelProp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        node66.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node66.setStaticSourceFile(staticSourceFile71);
        com.google.common.collect.ImmutableList<java.lang.Object> objList73 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray19, (java.lang.Object) node25, (java.lang.Object) "hi!", (java.lang.Object) boolean60, (java.lang.Object) node66);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node25.setStaticSourceFile(staticSourceFile74);
        boolean boolean76 = node25.hasOneChild();
        node25.setType((-2147483648));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hashSetArray18);
        org.junit.Assert.assertNotNull(strSetArray19);
        org.junit.Assert.assertNotNull(strSetList22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.hasParameter("PARAM_LIST\n");
        java.lang.String str10 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean15 = jSDocInfoBuilder1.recordFileOverview("JSDocInfo");
        boolean boolean17 = jSDocInfoBuilder1.recordReturnDescription("java.io.IOException: OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean51 = jSTypeExpression47.equals((java.lang.Object) "Not declared as a type name");
        boolean boolean52 = jSTypeExpression47.isOptionalArg();
        boolean boolean54 = jSDocInfoBuilder19.recordThrowDescription(jSTypeExpression47, "InputId: ");
        boolean boolean55 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean57 = jSDocInfoBuilder1.recordDeprecationReason("{272877914}");
        boolean boolean59 = jSDocInfoBuilder1.recordLends("function (this:me, {1876565561}): me");
        jSDocInfoBuilder1.markName("InputId: function (this:me, {726862509}): me", 46, 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        boolean boolean82 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.Set<java.lang.String> strSet83 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo0.getThisType();
        boolean boolean85 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        boolean boolean13 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        boolean boolean42 = jSDocInfo39.isImplicitCast();
        boolean boolean43 = jSDocInfo39.isInterface();
        boolean boolean44 = jSDocInfo39.hasFileOverview();
        node37.setJSDocInfo(jSDocInfo39);
        node37.addSuppression("[]");
        boolean boolean48 = node37.isCall();
        java.lang.Object obj50 = node37.getProp((int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        boolean boolean55 = node53.isDelProp();
        int int56 = node53.getChildCount();
        java.lang.String str57 = node53.toStringTree();
        com.google.javascript.rhino.Node node58 = node53.removeChildren();
        boolean boolean60 = node53.getBooleanProp(40960);
        java.lang.String str61 = node53.getString();
        boolean boolean62 = node53.isGetterDef();
        boolean boolean63 = node37.isEquivalentToTyped(node53);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR hi!\n" + "'", str57, "OR hi!\n");
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isUnscopedQualifiedName();
        boolean boolean24 = node22.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        boolean boolean27 = jSDocInfo25.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getImplementedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        node22.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        com.google.javascript.rhino.Node node51 = node36.srcref(node46);
        int int52 = node36.getCharno();
        boolean boolean53 = node36.isQuotedString();
        boolean boolean54 = node36.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        node36.setStaticSourceFile(staticSourceFile55);
        int int57 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet69);
        node60.putBooleanProp(0, false);
        node60.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean77 = node60.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node60.getStaticSourceFile();
        int int80 = staticSourceFile78.getLineOffset(40);
        java.lang.String str81 = staticSourceFile78.getName();
        int int83 = staticSourceFile78.getColumnOfOffset((int) '#');
        node36.setStaticSourceFile(staticSourceFile78);
        node22.setStaticSourceFile(staticSourceFile78);
        int int87 = staticSourceFile78.getLineOfOffset(35);
        java.lang.String str88 = staticSourceFile78.getName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str81, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str88, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1.0f));
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean6 = node5.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.isExterns();
        com.google.javascript.rhino.Node node9 = jSDocInfo7.getAssociatedNode();
        boolean boolean10 = jSDocInfo7.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo7.getType();
        boolean boolean12 = jSDocInfo7.hasReturnType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo7.getModifies();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor45 = nodeIterableList23.iterator();
        boolean boolean46 = strSet13.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        node5.setDirectives(strSet13);
        boolean boolean48 = node5.isNoSideEffectsCall();
        boolean boolean49 = node5.isNumber();
        int int50 = node1.getIndexOfChild(node5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.isHidden();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        jSDocInfo0.setLicense("OR hi! [var_args_name: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExterns();
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nNUMBER 100.0 0\n\n\nSubtree1: OR hi!\n\n\nSubtree2: NUMBER 100.0 0\n", 0, 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean60 = nodeIterableList2.equals((java.lang.Object) (short) 1);
        int int61 = nodeIterableList2.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream62 = nodeIterableList2.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor63 = nodeIterableList2.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor64 = nodeIterableList2.iterator();
        boolean boolean65 = nodeIterableList2.isEmpty();
        boolean boolean66 = nodeIterableList2.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        int int68 = jSDocInfo67.getExtendedInterfacesCount();
        boolean boolean69 = jSDocInfo67.isInterface();
        boolean boolean71 = jSDocInfo67.hasParameter("JSDocInfo");
        boolean boolean72 = jSDocInfo67.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo67.getTypedefType();
        boolean boolean74 = nodeIterableList2.equals((java.lang.Object) jSTypeExpression73);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList75 = nodeIterableList2.asList();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream62);
        org.junit.Assert.assertNotNull(nodeIterableItor63);
        org.junit.Assert.assertNotNull(nodeIterableItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeIterableList75);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        boolean boolean81 = jSDocInfo4.isNoCompile();
        boolean boolean82 = jSDocInfo4.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression2);
        boolean boolean6 = jSDocInfoBuilder1.recordParameterDescription("Not declared as a constructor", "java.io.IOException: OR hi!\n    OR hi!\n");
        jSDocInfoBuilder1.markAnnotation("{1461140244}", 4095, 36);
        boolean boolean12 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDec();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node24.isDebugger();
        boolean boolean31 = node24.isVoid();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isTypeOf();
        com.google.javascript.rhino.Node node36 = node24.srcrefTree(node34);
        int int37 = node15.getIndexOfChild(node34);
        boolean boolean38 = node34.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node34.getJsDocBuilderForNode();
        boolean boolean40 = node34.isExprResult();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable41 = node34.getAncestors();
        java.lang.String str42 = node34.getQualifiedName();
        jSDocInfoBuilder1.markTypeNode(node34, 3, 143360, 51, 3, false);
        boolean boolean49 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(ancestorIterable41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder1.isPopulated();
        boolean boolean13 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean14 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder16.recordExtendedInterface(jSTypeExpression17);
        boolean boolean21 = jSDocInfoBuilder16.recordParameterDescription("Not declared as a constructor", "java.io.IOException: OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression27);
        boolean boolean30 = jSDocInfoBuilder23.recordMeaning("hi!");
        boolean boolean32 = jSDocInfoBuilder23.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordInterface();
        boolean boolean37 = jSDocInfoBuilder34.recordDescription("hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordInterface();
        boolean boolean56 = jSDocInfoBuilder53.recordDescription("hi!");
        boolean boolean57 = jSDocInfoBuilder53.recordHiddenness();
        boolean boolean58 = strSet49.remove((java.lang.Object) jSDocInfoBuilder53);
        boolean boolean59 = jSDocInfoBuilder53.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder61.addAuthor("");
        boolean boolean64 = jSDocInfoBuilder61.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = null;
        boolean boolean66 = jSDocInfoBuilder61.recordThrowType(jSTypeExpression65);
        boolean boolean67 = jSDocInfoBuilder61.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder61.markName("", staticSourceFile69, 29, 50);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean79 = node78.isThis();
        node75.addChildToBack(node78);
        boolean boolean81 = node75.isDebugger();
        boolean boolean82 = node75.isSyntheticBlock();
        boolean boolean83 = node75.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = new com.google.javascript.rhino.JSTypeExpression(node75, "Unknown class name");
        boolean boolean87 = jSDocInfoBuilder61.recordThrowDescription(jSTypeExpression85, "?");
        boolean boolean88 = jSDocInfoBuilder53.recordThrowType(jSTypeExpression85);
        boolean boolean89 = jSDocInfoBuilder34.recordEnumParameterType(jSTypeExpression85);
        boolean boolean90 = jSDocInfoBuilder23.recordImplementedInterface(jSTypeExpression85);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression85);
        boolean boolean92 = jSTypeExpression91.isOptionalArg();
        boolean boolean93 = jSTypeExpression91.isVarArgs();
        boolean boolean94 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression91);
        boolean boolean95 = jSDocInfoBuilder1.recordThisType(jSTypeExpression91);
        boolean boolean97 = jSDocInfoBuilder1.recordBlockDescription("{26312583}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList0.iterator();
        java.lang.Object[] objArray19 = nodeIterableList0.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator20 = nodeIterableList0.spliterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor21 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isAnd();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node29.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        java.lang.String str34 = jSDocInfo31.getReturnDescription();
        boolean boolean36 = jSDocInfo31.hasParameter("Not declared as a constructor");
        java.lang.String str37 = jSDocInfo31.getMeaning();
        boolean boolean38 = jSDocInfo31.isJavaDispatch();
        node29.setJSDocInfo(jSDocInfo31);
        boolean boolean40 = node24.isEquivalentToTyped(node29);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean45 = node44.isRegExp();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean52 = node51.isThis();
        node48.addChildToBack(node51);
        boolean boolean54 = node48.isDec();
        boolean boolean55 = node48.isBlock();
        boolean boolean56 = node48.isTrue();
        com.google.javascript.rhino.Node node57 = node48.cloneNode();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        boolean boolean66 = node63.isNot();
        int int67 = node63.getLineno();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node73.isNot();
        int int77 = node73.getLineno();
        com.google.javascript.rhino.Node node78 = node63.srcref(node73);
        int int79 = node63.getCharno();
        boolean boolean80 = node63.isQuotedString();
        boolean boolean81 = node63.isIf();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean88 = node87.isThis();
        node84.addChildToBack(node87);
        boolean boolean90 = node87.isNot();
        int int91 = node87.getLineno();
        boolean boolean92 = node87.isAdd();
        com.google.javascript.rhino.Node node93 = node63.useSourceInfoFromForTree(node87);
        com.google.javascript.rhino.Node node94 = node48.useSourceInfoFromForTree(node63);
        boolean boolean95 = node44.isEquivalentTo(node94);
        com.google.javascript.rhino.Node node96 = node24.srcrefTree(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable97 = node44.children();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor21.set(nodeIterable97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator20);
        org.junit.Assert.assertNotNull(nodeIterableItor21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(nodeIterable97);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean31 = nodeIterableList30.add(nodeIterable29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node34.siblings();
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        boolean boolean48 = strSet43.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        java.lang.Object[] objArray49 = nodeIterableList46.toArray();
        boolean boolean50 = nodeIterableList46.isEmpty();
        boolean boolean51 = nodeIterableList30.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList46);
        boolean boolean52 = strSet11.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList30);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator55 = nodeIterableList53.spliterator();
        boolean boolean56 = nodeIterableList30.addAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean57 = nodeIterableList53.isEmpty();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor58 = nodeIterableList53.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(nodeIterableSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor58);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator16 = nodeIterableList0.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList0.listIterator(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (54) must not be greater than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator16);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.lang.String str4 = nodeIterableList0.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.hasReturnType();
        boolean boolean23 = jSDocInfo20.isOverride();
        jSDocInfo20.setLicense("hi!");
        boolean boolean26 = strSet16.contains((java.lang.Object) jSDocInfo20);
        boolean boolean27 = strSet16.isEmpty();
        boolean boolean28 = nodeIterableList0.equals((java.lang.Object) strSet16);
        java.lang.Object[] objArray29 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream30 = nodeIterableList0.stream();
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.replaceAll(nodeIterableUnaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream30);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        fileLevelJsDocBuilder34.append("java.io.IOException: JSDocInfo");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.recordInterface();
        boolean boolean8 = jSDocInfoBuilder5.recordDescription("hi!");
        boolean boolean9 = jSDocInfoBuilder5.recordHiddenness();
        boolean boolean10 = jSDocInfoBuilder5.recordExpose();
        boolean boolean12 = jSDocInfoBuilder5.hasParameter("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder5.recordNoCompile();
        jSDocInfoBuilder5.recordOriginalCommentString("{416963772}");
        boolean boolean17 = jSDocInfoBuilder5.recordDescription("{325985449}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder19.recordConstancy();
        boolean boolean27 = jSDocInfoBuilder19.recordOverride();
        boolean boolean28 = jSDocInfoBuilder19.recordNoTypeCheck();
        boolean boolean29 = jSDocInfoBuilder19.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.addAuthor("");
        boolean boolean34 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression35);
        boolean boolean37 = jSDocInfoBuilder31.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        jSDocInfoBuilder31.markName("", staticSourceFile39, 29, 50);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node45.isDebugger();
        boolean boolean52 = node45.isSyntheticBlock();
        boolean boolean53 = node45.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        boolean boolean57 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression55, "?");
        com.google.javascript.rhino.Node node58 = jSTypeExpression55.getRoot();
        boolean boolean59 = jSDocInfoBuilder19.recordEnumParameterType(jSTypeExpression55);
        boolean boolean60 = jSTypeExpression55.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression55);
        boolean boolean62 = jSDocInfoBuilder5.recordEnumParameterType(jSTypeExpression61);
        boolean boolean63 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        boolean boolean13 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        com.google.javascript.rhino.Node node34 = node19.srcref(node29);
        boolean boolean35 = node29.isComma();
        node29.setVarArgs(true);
        boolean boolean38 = node29.isThrow();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        boolean boolean46 = objectType45.matchesInt32Context();
        boolean boolean47 = objectType45.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType48 = objectType45.collapseUnion();
        node29.setJSType((com.google.javascript.rhino.jstype.JSType) objectType45);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node52.siblings();
        node52.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node52.getJsDocBuilderForNode();
        node52.setQuotedString();
        com.google.javascript.rhino.Node node63 = node29.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean64 = node29.isGetterDef();
        boolean boolean65 = node29.isInc();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node29, "OR []");
        java.lang.String str68 = node29.toString();
        jSDocInfoBuilder1.markTypeNode(node29, 0, 35, (int) (byte) 10, (int) (short) 1, true);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean77 = jSDocInfoBuilder76.recordInterface();
        boolean boolean79 = jSDocInfoBuilder76.recordDescription("hi!");
        boolean boolean80 = jSDocInfoBuilder76.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder76.recordThrowType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder76.recordConstancy();
        boolean boolean84 = jSDocInfoBuilder76.recordOverride();
        boolean boolean85 = jSDocInfoBuilder76.recordNoTypeCheck();
        boolean boolean87 = jSDocInfoBuilder76.recordMeaning("{...}");
        boolean boolean88 = jSDocInfoBuilder76.isConstructorRecorded();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = new com.google.javascript.rhino.JSTypeExpression(node92, "");
        boolean boolean95 = jSTypeExpression94.isVarArgs();
        boolean boolean96 = jSDocInfoBuilder76.recordThisType(jSTypeExpression94);
        boolean boolean97 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "OR hi! [var_args_name: 1] : {...}" + "'", str68, "OR hi! [var_args_name: 1] : {...}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean7 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("Unknown class name");
        boolean boolean10 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean19 = jSDocInfoBuilder1.recordLends("{1332928501}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean23 = jSDocInfoBuilder21.recordVisibility(visibility22);
        boolean boolean24 = jSDocInfoBuilder21.isConstructorRecorded();
        boolean boolean25 = jSDocInfoBuilder21.isPopulatedWithFileOverview();
        boolean boolean26 = jSDocInfoBuilder21.recordDeprecated();
        boolean boolean28 = jSDocInfoBuilder21.hasParameter("{1609442801}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.addAuthor("");
        boolean boolean34 = jSDocInfoBuilder31.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression35);
        boolean boolean37 = jSDocInfoBuilder31.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        jSDocInfoBuilder31.markName("", staticSourceFile39, 29, 50);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node45.isDebugger();
        boolean boolean52 = node45.isSyntheticBlock();
        boolean boolean53 = node45.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node45, "Unknown class name");
        boolean boolean57 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression55, "?");
        com.google.javascript.rhino.Node node58 = jSTypeExpression55.getRoot();
        boolean boolean59 = jSDocInfoBuilder21.recordParameter("java.io.IOException: OR []", jSTypeExpression55);
        boolean boolean60 = jSDocInfoBuilder1.recordThisType(jSTypeExpression55);
        boolean boolean61 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression15);
        boolean boolean17 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean22 = jSDocInfoBuilder19.recordDescription("hi!");
        boolean boolean23 = jSDocInfoBuilder19.recordHiddenness();
        boolean boolean24 = jSDocInfoBuilder19.recordExpose();
        boolean boolean25 = jSDocInfoBuilder19.recordConstructor();
        boolean boolean27 = jSDocInfoBuilder19.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = null;
        boolean boolean29 = jSDocInfoBuilder19.recordTypedef(jSTypeExpression28);
        boolean boolean30 = jSDocInfoBuilder19.shouldParseDocumentation();
        boolean boolean31 = jSDocInfoBuilder19.recordIdGenerator();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("hi!", (int) 'a', 10);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node41.isNot();
        int int45 = node41.getLineno();
        boolean boolean46 = node41.isCatch();
        boolean boolean47 = node35.hasChild(node41);
        node41.setCharno(43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node41, "java.io.IOException: function (this:me, {988702852}): me");
        boolean boolean52 = jSDocInfoBuilder19.recordThisType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression51);
        boolean boolean54 = jSDocInfoBuilder1.recordExpose();
        boolean boolean55 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean17 = nodeIterableList16.add(nodeIterable15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        boolean boolean34 = strSet29.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.lang.Object[] objArray35 = nodeIterableList32.toArray();
        boolean boolean36 = nodeIterableList32.isEmpty();
        boolean boolean37 = nodeIterableList16.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList32);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor38 = nodeIterableList16.iterator();
        boolean boolean39 = strSet6.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList16);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList16.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = com.google.common.collect.ImmutableList.of();
        boolean boolean42 = nodeIterableList41.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor43 = nodeIterableList41.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList44 = nodeIterableList41.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList41.asList();
        int int46 = nodeIterableList41.size();
        boolean boolean47 = nodeIterableList16.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList41);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = nodeIterableList41.asList();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor43);
        org.junit.Assert.assertNotNull(nodeIterableList44);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterableList48);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder6.recordThisType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder6.recordInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder6.recordBaseType(jSTypeExpression15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder18.recordDefineType(jSTypeExpression22);
        boolean boolean25 = jSDocInfoBuilder18.recordMeaning("hi!");
        boolean boolean27 = jSDocInfoBuilder18.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordInterface();
        boolean boolean32 = jSDocInfoBuilder29.recordDescription("hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node35.siblings();
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet44);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordInterface();
        boolean boolean51 = jSDocInfoBuilder48.recordDescription("hi!");
        boolean boolean52 = jSDocInfoBuilder48.recordHiddenness();
        boolean boolean53 = strSet44.remove((java.lang.Object) jSDocInfoBuilder48);
        boolean boolean54 = jSDocInfoBuilder48.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.addAuthor("");
        boolean boolean59 = jSDocInfoBuilder56.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder56.recordThrowType(jSTypeExpression60);
        boolean boolean62 = jSDocInfoBuilder56.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        jSDocInfoBuilder56.markName("", staticSourceFile64, 29, 50);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean74 = node73.isThis();
        node70.addChildToBack(node73);
        boolean boolean76 = node70.isDebugger();
        boolean boolean77 = node70.isSyntheticBlock();
        boolean boolean78 = node70.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = new com.google.javascript.rhino.JSTypeExpression(node70, "Unknown class name");
        boolean boolean82 = jSDocInfoBuilder56.recordThrowDescription(jSTypeExpression80, "?");
        boolean boolean83 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression80);
        boolean boolean84 = jSDocInfoBuilder29.recordEnumParameterType(jSTypeExpression80);
        boolean boolean85 = jSDocInfoBuilder18.recordImplementedInterface(jSTypeExpression80);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression80);
        boolean boolean87 = jSDocInfoBuilder6.recordType(jSTypeExpression86);
        boolean boolean88 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression86);
        boolean boolean89 = jSTypeExpression86.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression47);
        boolean boolean51 = jSTypeExpression47.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression52);
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("{2028162337}");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.isInterface();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("{794583267}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("hi!");
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean6 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        int int8 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean4 = jSDocInfoBuilder1.recordFileOverview("OR []");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        boolean boolean14 = node8.isDebugger();
        boolean boolean15 = node8.isAssign();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(51, node8, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node19 = node18.getLastChild();
        boolean boolean20 = node18.isHook();
        boolean boolean21 = node18.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = jSDocInfoBuilder1.build(node18);
        boolean boolean23 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean24 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getTypedefType();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean38 = nodeIterableList37.add(nodeIterable36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        boolean boolean55 = strSet50.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray56 = nodeIterableList53.toArray();
        boolean boolean57 = nodeIterableList53.isEmpty();
        boolean boolean58 = nodeIterableList37.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean59 = strSet18.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.lang.Object[] objArray60 = nodeIterableList37.toArray();
        boolean boolean61 = strSet6.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.util.function.UnaryOperator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableUnaryOperator62 = null;
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList37.replaceAll(nodeIterableUnaryOperator62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isTypeOf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node24 = node9.srcref(node19);
        boolean boolean25 = node9.isString();
        boolean boolean26 = node9.isTry();
        boolean boolean27 = node9.isHook();
        com.google.javascript.rhino.Node node28 = node2.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        node31.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        node45.setOptionalArg(false);
        com.google.javascript.rhino.Node node50 = node31.srcref(node45);
        com.google.javascript.rhino.InputId inputId52 = new com.google.javascript.rhino.InputId("");
        java.lang.String str53 = inputId52.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode56 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry55.setResolveMode(resolveMode56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry55.createObjectType(objectType58);
        boolean boolean60 = objectType59.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode63 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry62.setResolveMode(resolveMode63);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry62.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.ObjectType objectType67 = objectType66.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = objectType59.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.jstype.JSType jSType69 = objectType59.collapseUnion();
        boolean boolean70 = inputId52.equals((java.lang.Object) objectType59);
        node31.setInputId(inputId52);
        node9.setInputId(inputId52);
        com.google.javascript.rhino.InputId inputId74 = new com.google.javascript.rhino.InputId("");
        java.lang.String str75 = inputId74.getIdName();
        java.lang.String str76 = inputId74.getIdName();
        java.lang.String str77 = inputId74.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        int int79 = jSDocInfo78.getExtendedInterfacesCount();
        boolean boolean80 = jSDocInfo78.isInterface();
        boolean boolean82 = jSDocInfo78.hasParameter("JSDocInfo");
        boolean boolean83 = jSDocInfo78.isExterns();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection84 = jSDocInfo78.getMarkers();
        java.lang.String str85 = jSDocInfo78.getBlockDescription();
        boolean boolean86 = inputId74.equals((java.lang.Object) str85);
        com.google.javascript.rhino.InputId inputId88 = new com.google.javascript.rhino.InputId("{13133096}");
        com.google.javascript.rhino.InputId inputId90 = new com.google.javascript.rhino.InputId("{464938482}");
        com.google.javascript.rhino.InputId inputId92 = new com.google.javascript.rhino.InputId("OR hi! [directives: []]\n");
        java.lang.String str93 = inputId92.getIdName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList94 = com.google.common.collect.ImmutableList.of(inputId52, inputId74, inputId88, inputId90, inputId92);
        java.lang.String str95 = inputId90.getIdName();
        java.lang.String str96 = inputId90.getIdName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "InputId: " + "'", str53, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode56 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode56.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + resolveMode63 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode63.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(typePair68);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "InputId: " + "'", str77, "InputId: ");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(markerCollection84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "OR hi! [directives: []]\n" + "'", str93, "OR hi! [directives: []]\n");
        org.junit.Assert.assertNotNull(inputIdList94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "{464938482}" + "'", str95, "{464938482}");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "{464938482}" + "'", str96, "{464938482}");
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        boolean boolean11 = jSDocInfoBuilder1.recordDescription("[]");
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordMeaning("{775928261}");
        boolean boolean16 = jSDocInfoBuilder1.recordExport();
        boolean boolean17 = jSDocInfoBuilder1.isPopulated();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray19 = nodeIterableList18.toArray();
        boolean boolean20 = nodeIterableList18.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder24 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder24.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility25);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean28 = jSDocInfo27.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo27.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo27.getVisibility();
        boolean boolean31 = jSDocInfo27.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo27.setVisibility(visibility32);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray34 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility32 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray34);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder36 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = visibilityEnumBuilder36.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = jSDocInfo39.getVisibility();
        boolean boolean43 = jSDocInfo39.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo39.setVisibility(visibility44);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray46 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility44 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder47 = visibilityEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray46);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder35.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray46);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder49 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray46);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray50 = nodeIterableList18.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray46);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry52.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        int int57 = nodeIterableList18.lastIndexOf((java.lang.Object) jSTypeList54);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList58 = nodeIterableList18.reverse();
        boolean boolean59 = nodeIterableList18.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder62 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo63.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = jSDocInfo63.getVisibility();
        boolean boolean67 = jSDocInfo63.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo63.setVisibility(visibility68);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray70 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility68 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder62.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray70);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder73 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility72);
        int int74 = nodeIterableList18.lastIndexOf((java.lang.Object) visibilityEnumBuilder71);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder76 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility75);
        boolean boolean77 = jSDocInfoBuilder1.recordVisibility(visibility75);
        boolean boolean79 = jSDocInfoBuilder1.recordLends("{2032908549}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertTrue("'" + visibility25 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility25.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(visibility30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(visibility42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray46);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder47);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder49);
        org.junit.Assert.assertNotNull(visibilityEnumArray50);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNull(visibility66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray70);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + visibility75 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility75.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        java.lang.String[] strArray2 = new java.lang.String[] { "OR hi!\n", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean5 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        boolean boolean13 = jSDocInfo6.hasEnumParameterType();
        boolean boolean14 = jSDocInfo6.isDefine();
        java.lang.String str15 = jSDocInfo6.getLendsName();
        boolean boolean16 = jSDocInfo6.hasModifies();
        boolean boolean17 = jSDocInfo6.isNoSideEffects();
        boolean boolean18 = strSet3.equals((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasFileOverview();
        boolean boolean21 = jSDocInfo19.hasModifies();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo19.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = com.google.common.collect.ImmutableList.of();
        boolean boolean24 = strSet22.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor25 = nodeIterableList23.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor26 = nodeIterableList23.iterator();
        boolean boolean27 = strSet3.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray29 = nodeIterableList28.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = nodeIterableList28.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray37 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray38 = nodeIterableList28.toArray(typePositionArray37);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor39 = nodeIterableList28.iterator();
        java.lang.Object[] objArray40 = nodeIterableList28.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream41 = nodeIterableList28.parallelStream();
        java.lang.Object[] objArray42 = nodeIterableList28.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isImplicitCast();
        boolean boolean45 = jSDocInfo43.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo43.getBaseType();
        boolean boolean47 = nodeIterableList28.contains((java.lang.Object) jSDocInfo43);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean52 = jSDocInfoBuilder49.recordDescription("hi!");
        boolean boolean53 = jSDocInfoBuilder49.recordHiddenness();
        boolean boolean54 = jSDocInfoBuilder49.recordExpose();
        boolean boolean55 = jSDocInfoBuilder49.recordIdGenerator();
        boolean boolean57 = jSDocInfoBuilder49.addReference("OR hi!");
        boolean boolean58 = nodeIterableList28.equals((java.lang.Object) "OR hi!");
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList28.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = nodeIterableList23.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(nodeIterableList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor25);
        org.junit.Assert.assertNotNull(nodeIterableItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertNotNull(typePositionArray37);
        org.junit.Assert.assertNotNull(typePositionArray38);
        org.junit.Assert.assertNotNull(nodeIterableItor39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode23 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry22.setResolveMode(resolveMode23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        boolean boolean27 = jSTypeRegistry22.canPropertyBeDefined(jSType25, "Unknown class name");
        jSTypeRegistry22.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry22.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        jSTypeRegistry33.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode37 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry36.setResolveMode(resolveMode37);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry36.createObjectType(objectType39);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = objectType40.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot43 = objectType40.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode47 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry46.setResolveMode(resolveMode47);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry46.createObjectType(objectType49);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType51 = objectType50.toMaybeEnumElementType();
        boolean boolean52 = jSTypeRegistry22.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType40, objectType50);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode55 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry54.setResolveMode(resolveMode55);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry54.createObjectType(objectType57);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = objectType58.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = objectType65.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        boolean boolean73 = jSTypeRegistry68.canPropertyBeDefined(jSType71, "Unknown class name");
        jSTypeRegistry68.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode78 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry77.setResolveMode(resolveMode78);
        com.google.javascript.rhino.jstype.ObjectType objectType80 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType81 = jSTypeRegistry77.createObjectType(objectType80);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry68.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType81, "");
        boolean boolean84 = jSType83.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = objectType66.testForEquality(jSType83);
        com.google.javascript.rhino.jstype.JSType jSType86 = jSType83.collapseUnion();
        boolean boolean87 = objectType59.differsFrom(jSType83);
        boolean boolean88 = jSType83.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType89 = jSTypeRegistry22.createOptionalType(jSType83);
        com.google.javascript.rhino.jstype.ObjectType objectType90 = jSType83.dereference();
        boolean boolean91 = objectType90.isInterface();
        boolean boolean92 = strSet11.equals((java.lang.Object) boolean91);
        boolean boolean93 = strSet11.isEmpty();
        strSet11.clear();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + resolveMode23 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode23.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertTrue("'" + resolveMode37 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode37.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNull(jSTypeStaticSlot43);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + resolveMode47 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode47.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNull(enumElementType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + resolveMode55 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode55.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + resolveMode78 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode78.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType81);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertNotNull(objectType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean3 = jSDocInfoBuilder1.recordExport();
        boolean boolean5 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet17);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        boolean boolean22 = strSet17.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        java.util.HashSet[] hashSetArray24 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray25 = (java.util.HashSet<java.lang.String>[]) hashSetArray24;
        strSetArray25[0] = strSet17;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList28 = com.google.common.collect.ImmutableList.copyOf(strSetArray25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node31.isDebugger();
        boolean boolean38 = node31.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isExterns();
        boolean boolean41 = jSDocInfo39.hasReturnType();
        boolean boolean42 = jSDocInfo39.isOverride();
        jSDocInfo39.setLicense("hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node60.isNot();
        int int64 = node60.getLineno();
        com.google.javascript.rhino.Node node65 = node50.srcref(node60);
        boolean boolean66 = node65.isDelProp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean73 = node72.isThis();
        node69.addChildToBack(node72);
        node72.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = null;
        node72.setStaticSourceFile(staticSourceFile77);
        com.google.common.collect.ImmutableList<java.lang.Object> objList79 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray25, (java.lang.Object) node31, (java.lang.Object) "hi!", (java.lang.Object) boolean66, (java.lang.Object) node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = jSDocInfoBuilder1.build(node31);
        boolean boolean81 = jSDocInfo80.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo80.getReferences();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hashSetArray24);
        org.junit.Assert.assertNotNull(strSetArray25);
        org.junit.Assert.assertNotNull(strSetList28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(jSDocInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(strCollection82);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder15.recordConstancy();
        boolean boolean23 = jSDocInfoBuilder15.recordOverride();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "None", "{298532945}", "OR hi! [directives: []]\n", "{298532945}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = jSDocInfoBuilder15.recordTemplateTypeNames((java.util.List<java.lang.String>) strList34);
        boolean boolean37 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList34);
        boolean boolean38 = jSDocInfoBuilder1.recordExpose();
        boolean boolean41 = jSDocInfoBuilder1.recordParameterDescription("Not declared as a constructor", "{1171785831}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        boolean boolean42 = jSDocInfo39.isImplicitCast();
        boolean boolean43 = jSDocInfo39.isInterface();
        boolean boolean44 = jSDocInfo39.hasFileOverview();
        node37.setJSDocInfo(jSDocInfo39);
        com.google.javascript.rhino.Node node46 = node37.cloneTree();
        com.google.javascript.rhino.Node node47 = node46.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.addAuthor("");
        boolean boolean9 = jSDocInfoBuilder6.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder6.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder14.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.addAuthor("");
        boolean boolean25 = jSDocInfoBuilder22.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder22.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder22.markName("", staticSourceFile30, 29, 50);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isSyntheticBlock();
        boolean boolean44 = node36.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node36, "Unknown class name");
        boolean boolean48 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression46, "?");
        boolean boolean49 = jSDocInfoBuilder14.recordExtendedInterface(jSTypeExpression46);
        boolean boolean50 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression46);
        boolean boolean51 = jSDocInfoBuilder1.recordType(jSTypeExpression46);
        boolean boolean53 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean57 = node56.isOr();
        jSDocInfoBuilder1.markTypeNode(node56, 48, 1, (int) '4', (int) (byte) -1, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo64.getSuppressions();
        boolean boolean66 = jSDocInfo64.isNoSideEffects();
        java.lang.String str67 = jSDocInfo64.getReturnDescription();
        boolean boolean69 = jSDocInfo64.hasParameter("Not declared as a constructor");
        int int70 = jSDocInfo64.getParameterCount();
        com.google.javascript.rhino.Node node71 = jSDocInfo64.getAssociatedNode();
        java.lang.String str72 = jSDocInfo64.getBlockDescription();
        java.util.Set<java.lang.String> strSet73 = jSDocInfo64.getModifies();
        boolean boolean74 = jSDocInfoBuilder1.recordSuppressions(strSet73);
        boolean boolean77 = jSDocInfoBuilder1.recordParameterDescription("{1919182226}", "STRING InputId: java.io.IOException: OR hi!\n    OR hi!\n 44\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        java.lang.Object obj13 = node11.getProp((int) (byte) 0);
        int int14 = node11.getChildCount();
        boolean boolean15 = node11.isThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean17 = jSDocInfo16.isImplicitCast();
        int int18 = jSDocInfo16.getParameterCount();
        node11.setJSDocInfo(jSDocInfo16);
        boolean boolean20 = jSDocInfo16.isDeprecated();
        java.lang.String str21 = jSDocInfo16.getLicense();
        java.lang.String str22 = jSDocInfo16.getDescription();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder68.recordLends("Not declared as a constructor");
        boolean boolean78 = jSDocInfoBuilder68.isPopulated();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        boolean boolean81 = jSDocInfo79.hasModifies();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo79.getModifies();
        boolean boolean84 = strSet82.contains((java.lang.Object) (-1.0d));
        boolean boolean85 = jSDocInfoBuilder68.recordSuppressions(strSet82);
        boolean boolean86 = jSDocInfoBuilder68.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList1 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray2 = nodeIterableList1.toArray();
        boolean boolean3 = nodeIterableList1.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder4 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = visibilityEnumBuilder4.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility5);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder7 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder9 = visibilityEnumBuilder7.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo10.getVisibility();
        boolean boolean14 = jSDocInfo10.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo10.setVisibility(visibility15);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray17 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility15 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = visibilityEnumBuilder9.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray17);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder19 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = visibilityEnumBuilder19.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility25 = jSDocInfo22.getVisibility();
        boolean boolean26 = jSDocInfo22.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo22.setVisibility(visibility27);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray29 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility27 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray33 = nodeIterableList1.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node39.isAdd();
        boolean boolean43 = node39.isExprResult();
        boolean boolean44 = node39.isThrow();
        boolean boolean45 = nodeIterableList1.contains((java.lang.Object) boolean44);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator46 = nodeIterableList1.spliterator();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        java.lang.String str51 = node49.getSourceFileName();
        boolean boolean52 = node49.isString();
        int int53 = nodeIterableList1.indexOf((java.lang.Object) node49);
        boolean boolean54 = node49.isThis();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 10, node49, 38, (int) (short) 1);
        boolean boolean58 = node57.isString();
        com.google.javascript.rhino.Node node59 = node57.getNext();
        org.junit.Assert.assertNotNull(nodeIterableList1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder6);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(visibility13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray17);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder18);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(visibility25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertNotNull(visibilityEnumArray33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo3.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo3.getVisibility();
        boolean boolean7 = jSDocInfo3.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo3.setVisibility(visibility8);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray10 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility8 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray10);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList12 = visibilityEnumBuilder11.build();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList13 = visibilityEnumBuilder11.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection14 = visibilityEnumBuilder11.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + visibility8 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility8.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray10);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder11);
        org.junit.Assert.assertNotNull(visibilityEnumList12);
        org.junit.Assert.assertNotNull(visibilityEnumList13);
        org.junit.Assert.assertNotNull(visibilityEnumCollection14);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        node1.setLength((int) ' ');
        boolean boolean4 = node1.isTrue();
        boolean boolean5 = node1.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        boolean boolean15 = node9.isDebugger();
        boolean boolean16 = node9.isAssign();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(51, node9, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = node9.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable25 = node24.getAncestors();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node29.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        java.lang.String str34 = jSDocInfo31.getReturnDescription();
        boolean boolean36 = jSDocInfo31.hasParameter("Not declared as a constructor");
        java.lang.String str37 = jSDocInfo31.getMeaning();
        boolean boolean38 = jSDocInfo31.isJavaDispatch();
        node29.setJSDocInfo(jSDocInfo31);
        boolean boolean40 = node29.isDo();
        com.google.javascript.rhino.InputId inputId42 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        node29.setInputId(inputId42);
        boolean boolean44 = node29.isSwitch();
        com.google.javascript.rhino.Node node45 = node29.cloneNode();
        boolean boolean46 = node45.isAnd();
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node24, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(ancestorIterable25);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.lang.Object[] objArray18 = nodeIterableList14.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isAssign();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(51, node22, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node32.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator34 = ancestorIterable33.spliterator();
        int int35 = nodeIterableList14.lastIndexOf((java.lang.Object) ancestorIterable33);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList14.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray38 = nodeIterableList37.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = nodeIterableList37.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray46 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition40, typePosition41, typePosition42, typePosition43, typePosition44, typePosition45 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray47 = nodeIterableList37.toArray(typePositionArray46);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray48 = nodeIterableList14.toArray((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) typePositionArray47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordInterface();
        boolean boolean53 = jSDocInfoBuilder50.recordDescription("hi!");
        boolean boolean54 = jSDocInfoBuilder50.recordHiddenness();
        boolean boolean55 = jSDocInfoBuilder50.recordExpose();
        boolean boolean57 = jSDocInfoBuilder50.hasParameter("Not declared as a constructor");
        boolean boolean58 = jSDocInfoBuilder50.recordPreserveTry();
        boolean boolean60 = jSDocInfoBuilder50.addReference("Named type with empty name component");
        boolean boolean61 = jSDocInfoBuilder50.recordIdGenerator();
        int int62 = nodeIterableList14.lastIndexOf((java.lang.Object) jSDocInfoBuilder50);
        boolean boolean63 = jSDocInfoBuilder50.recordNoTypeCheck();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(typePositionArray46);
        org.junit.Assert.assertNotNull(typePositionArray47);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.hasThisType();
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean9 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean11 = jSDocInfoBuilder1.addReference("OR hi! [source_file: OR hi!\n    OR hi!\n]\n    OR hi!\n");
        boolean boolean12 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean13 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean15 = jSDocInfoBuilder1.recordMeaning("{({859455974},{1300572353},{961945883})}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        jSDocInfoBuilder1.markName("{298532945}", (int) (short) -1, 40);
        boolean boolean18 = jSDocInfoBuilder1.recordVersion("{1483462980}");
        boolean boolean19 = jSDocInfoBuilder1.isPopulated();
        boolean boolean21 = jSDocInfoBuilder1.recordFileOverview("{({347511123},{1849089634})}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordInterface();
        boolean boolean26 = jSDocInfoBuilder23.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder23.recordThisType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder23.isPopulated();
        boolean boolean32 = jSDocInfoBuilder23.recordNoAlias();
        boolean boolean33 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean34 = jSDocInfoBuilder23.isPopulatedWithFileOverview();
        boolean boolean36 = jSDocInfoBuilder23.addReference("None");
        boolean boolean37 = jSDocInfoBuilder23.recordConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo38.getType();
        boolean boolean41 = jSDocInfo38.isImplicitCast();
        boolean boolean42 = jSDocInfo38.isInterface();
        boolean boolean43 = jSDocInfo38.hasFileOverview();
        boolean boolean44 = jSDocInfo38.hasFileOverview();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo38.getModifies();
        boolean boolean46 = jSDocInfoBuilder23.recordSuppressions(strSet45);
        boolean boolean47 = jSDocInfoBuilder1.recordSuppressions(strSet45);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder43.addReference("Not declared as a type name");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = null;
        jSDocInfoBuilder43.markName("OR hi! [source_file: ]\n    OR hi!\n", staticSourceFile79, (int) (short) 100, 8);
        boolean boolean83 = jSDocInfoBuilder43.recordPreserveTry();
        boolean boolean84 = jSDocInfoBuilder43.shouldParseDocumentation();
        boolean boolean85 = jSDocInfoBuilder43.isConstructorRecorded();
        boolean boolean86 = jSDocInfoBuilder43.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry13.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean22 = node17.isEquivalentToTyped(node21);
        com.google.javascript.rhino.Node node23 = node17.cloneNode();
        boolean boolean24 = node17.isEmpty();
        boolean boolean25 = node5.hasChild(node17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node5.setStaticSourceFile(staticSourceFile26);
        int int28 = node5.getType();
        node5.addSuppression("");
        node5.setCharno(51);
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 83 + "'", int28 == 83);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("hi!");
        java.lang.String str5 = jSDocInfo0.getLicense();
        jSDocInfo0.setLicense("InputId: {556367677}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean9 = jSDocInfoBuilder1.recordBlockDescription("function (this:me, {239358713}): me");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        jSDocInfo0.setLicense("?");
        boolean boolean9 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("None");
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.isConstant();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder13.recordDefineType(jSTypeExpression17);
        boolean boolean20 = jSDocInfoBuilder13.recordMeaning("hi!");
        boolean boolean22 = jSDocInfoBuilder13.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordInterface();
        boolean boolean27 = jSDocInfoBuilder24.recordDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean48 = strSet39.remove((java.lang.Object) jSDocInfoBuilder43);
        boolean boolean49 = jSDocInfoBuilder43.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        boolean boolean78 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression75);
        boolean boolean79 = jSDocInfoBuilder24.recordEnumParameterType(jSTypeExpression75);
        boolean boolean80 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression75);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression75);
        boolean boolean82 = jSTypeExpression81.isOptionalArg();
        boolean boolean83 = jSTypeExpression81.isVarArgs();
        boolean boolean84 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression81);
        java.lang.Class<?> wildcardClass85 = jSDocInfoBuilder1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isExport();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(markerCollection11);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo5.getSuppressions();
        boolean boolean7 = jSDocInfo5.isNoSideEffects();
        java.lang.String str8 = jSDocInfo5.getReturnDescription();
        boolean boolean10 = jSDocInfo5.hasParameter("Not declared as a constructor");
        java.lang.String str11 = jSDocInfo5.getMeaning();
        boolean boolean12 = jSDocInfo5.isJavaDispatch();
        node3.setJSDocInfo(jSDocInfo5);
        java.lang.String str14 = jSDocInfo5.getLendsName();
        boolean boolean15 = jSDocInfo5.hasType();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isThis();
        node18.addChildToBack(node21);
        boolean boolean24 = node18.isDec();
        boolean boolean25 = node18.isBlock();
        boolean boolean26 = node18.hasOneChild();
        java.lang.String str27 = node18.getSourceFileName();
        boolean boolean28 = node18.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node31.siblings();
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet40);
        java.lang.Object[] objArray43 = strSet40.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isExterns();
        boolean boolean46 = jSDocInfo44.hasReturnType();
        boolean boolean47 = jSDocInfo44.isOverride();
        jSDocInfo44.setLicense("hi!");
        boolean boolean50 = strSet40.contains((java.lang.Object) jSDocInfo44);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair53 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType51, jSType52);
        boolean boolean54 = strSet40.equals((java.lang.Object) jSType52);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet40);
        jSDocInfo5.setAssociatedNode(node18);
        boolean boolean57 = node18.isOnlyModifiesThisCall();
        boolean boolean58 = node18.isOptionalArg();
        int int59 = node18.getSourceOffset();
        boolean boolean60 = node18.isQuotedString();
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean11 = jSDocInfoBuilder1.addReference("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo12.getType();
        boolean boolean15 = jSDocInfo12.isImplicitCast();
        boolean boolean16 = jSDocInfo12.isExport();
        boolean boolean17 = jSDocInfo12.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo12.getReturnType();
        boolean boolean19 = jSDocInfo12.containsDeclaration();
        int int20 = jSDocInfo12.getParameterCount();
        java.lang.String str21 = jSDocInfo12.getVersion();
        jSDocInfo12.setLicense("Not declared as a type name");
        java.lang.String str24 = jSDocInfo12.getSourceName();
        boolean boolean25 = jSDocInfo12.isInterface();
        boolean boolean26 = jSDocInfo12.isDefine();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo12.getParameterNames();
        boolean boolean28 = jSDocInfoBuilder1.recordModifies(strSet27);
        boolean boolean31 = jSDocInfoBuilder1.recordParameterDescription("{441018204}", "{1197029056}");
        boolean boolean32 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node12.isDebugger();
        boolean boolean19 = node12.isVoid();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isTypeOf();
        com.google.javascript.rhino.Node node24 = node12.srcrefTree(node22);
        boolean boolean25 = node24.isBreak();
        boolean boolean26 = node24.wasEmptyNode();
        jSDocInfoBuilder1.markTypeNode(node24, (int) (byte) 10, 53, 53, 38, true);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        boolean boolean43 = node38.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node38.setJSType(jSType44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder1.build(node38);
        boolean boolean47 = jSDocInfo46.hasThisType();
        boolean boolean48 = jSDocInfo46.isInterface();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection49 = jSDocInfo46.getTypeNodes();
        boolean boolean50 = jSDocInfo46.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(nodeCollection49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node29.isNot();
        int int33 = node29.getLineno();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node39.isNot();
        int int43 = node39.getLineno();
        com.google.javascript.rhino.Node node44 = node29.srcref(node39);
        boolean boolean45 = node29.isString();
        boolean boolean46 = node29.isTry();
        boolean boolean47 = node29.isHook();
        boolean boolean48 = node29.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.isExterns();
        com.google.javascript.rhino.Node node51 = jSDocInfo49.getAssociatedNode();
        boolean boolean52 = jSDocInfo49.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo49.getType();
        node29.setJSDocInfo(jSDocInfo49);
        int int56 = node29.getIntProp((int) (short) -1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean58 = jSDocInfo57.isExterns();
        com.google.javascript.rhino.Node node59 = jSDocInfo57.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList60 = jSDocInfo57.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo57.getTypedefType();
        node29.setJSDocInfo(jSDocInfo57);
        com.google.javascript.rhino.Node node63 = node29.getLastSibling();
        boolean boolean64 = node63.isWith();
        com.google.javascript.rhino.Node node65 = node5.useSourceInfoIfMissingFromForTree(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node65.siblings();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(jSTypeExpressionList60);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(nodeIterable66);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("{441018204}");
        jSDocInfo0.setLicense("");
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.hasType();
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        int int4 = nodeIterableList0.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression7);
        jSDocInfoBuilder6.markAnnotation("None", 48, 51);
        boolean boolean13 = jSDocInfoBuilder6.recordNoShadow();
        boolean boolean15 = jSDocInfoBuilder6.addReference("OR hi!");
        boolean boolean16 = jSDocInfoBuilder6.isJavaDispatch();
        int int17 = nodeIterableList0.indexOf((java.lang.Object) jSDocInfoBuilder6);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList0.iterator();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream19 = nodeIterableList0.parallelStream();
        java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableCollection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = nodeIterableList0.addAll(nodeIterableCollection20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertNotNull(nodeIterableStream19);
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.ObjectType objectType4 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType5 = jSTypeRegistry1.createObjectType(objectType4);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = objectType5.toObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        boolean boolean13 = jSTypeRegistry8.canPropertyBeDefined(jSType11, "Unknown class name");
        jSTypeRegistry8.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry17.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType21, "");
        boolean boolean24 = jSType23.isInstanceType();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = objectType6.testForEquality(jSType23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isExterns();
        boolean boolean28 = jSDocInfo26.hasReturnType();
        boolean boolean29 = jSDocInfo26.isOverride();
        boolean boolean30 = jSDocInfo26.isNoCompile();
        java.lang.String str31 = jSDocInfo26.getLendsName();
        boolean boolean32 = jSType23.equals((java.lang.Object) str31);
        boolean boolean33 = jSType23.isUnknownType();
        boolean boolean34 = jSType23.isUnionType();
        boolean boolean35 = jSType23.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType37 = jSType23.getRestrictedTypeGivenToBooleanOutcome(false);
        boolean boolean38 = jSType37.isBooleanObjectType();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType5);
        org.junit.Assert.assertNotNull(objectType6);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        com.google.javascript.rhino.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter1);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        boolean boolean7 = jSTypeRegistry2.canPropertyBeDefined(jSType5, "Unknown class name");
        jSTypeRegistry2.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType10 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode14 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry13.setResolveMode(resolveMode14);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isNE();
        boolean boolean20 = node18.isInstanceOf();
        boolean boolean21 = node18.isThrow();
        node18.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node18.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        boolean boolean31 = jSTypeRegistry26.canPropertyBeDefined(jSType29, "Unknown class name");
        jSTypeRegistry26.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry26.createAnonymousObjectType();
        objectType34.clearResolved();
        node18.setJSType((com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        boolean boolean45 = node39.isDebugger();
        com.google.javascript.rhino.Node node46 = node39.getFirstChild();
        boolean boolean47 = node39.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType48 = jSTypeRegistry13.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType34, node39);
        boolean boolean49 = jSTypeRegistry2.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry51.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry2.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        int int57 = node56.getType();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node60.siblings();
        node60.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType69 = node60.getJSType();
        com.google.javascript.rhino.Node node70 = node60.getParent();
        com.google.javascript.rhino.Node node71 = node56.srcref(node60);
        java.lang.String str72 = node60.getString();
        boolean boolean73 = node60.isInc();
        boolean boolean74 = node60.isCall();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4098, node60);
        node75.addSuppression("{639146324}");
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertTrue("'" + resolveMode14 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode14.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(functionType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 83 + "'", int57 == 83);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition17);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList20 = com.google.common.collect.ImmutableList.of(namePosition19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList26 = com.google.common.collect.ImmutableList.of(namePosition25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList28 = com.google.common.collect.ImmutableList.of(namePosition14, namePosition15, namePosition16, namePosition17, namePosition19, namePosition21, namePosition22, namePosition23, namePosition24, namePosition25, namePosition27);
        namePosition27.setPositionInformation((int) (short) 0, 0, 47, 41);
        int int34 = namePosition27.getStartLine();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node37 = node36.getLastChild();
        boolean boolean38 = node36.isNumber();
        boolean boolean39 = node36.isNull();
        boolean boolean40 = node36.isCall();
        namePosition27.setItem(node36);
        jSDocInfoBuilder1.markTypeNode(node36, 40960, 35, (int) (byte) 0, 50, false);
        boolean boolean49 = jSDocInfoBuilder1.recordLends("{1192445396}");
        boolean boolean51 = jSDocInfoBuilder1.recordDescription("{778346541}");
        boolean boolean54 = jSDocInfoBuilder1.recordParameterDescription("STRING {694195918}", "InputId: java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertNotNull(namePositionList20);
        org.junit.Assert.assertNotNull(namePositionList26);
        org.junit.Assert.assertNotNull(namePositionList28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        boolean boolean15 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean17 = jSDocInfoBuilder1.recordLends("{694195918}");
        boolean boolean18 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean20 = jSDocInfoBuilder1.recordFileOverview("{1853673356}");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        com.google.javascript.rhino.Node node29 = node23.cloneNode();
        boolean boolean30 = node23.isDec();
        int int31 = node23.getLength();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node23, "OR hi!\n");
        boolean boolean34 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression33);
        boolean boolean35 = jSTypeExpression33.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("hi!", "JSDocInfo");
        boolean boolean14 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder1.recordExport();
        boolean boolean17 = jSDocInfoBuilder1.recordVersion("function (this:me, {1360418766}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node10 = typePosition9.getItem();
        com.google.javascript.rhino.Node node11 = typePosition9.getItem();
        int int12 = typePosition9.getPositionOnEndLine();
        com.google.javascript.rhino.Node node13 = typePosition9.getItem();
        int int14 = typePosition9.getEndLine();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        boolean boolean19 = node17.isDelProp();
        boolean boolean20 = node17.hasChildren();
        boolean boolean21 = node17.isOr();
        boolean boolean22 = node17.isAnd();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node28.isNot();
        int int32 = node28.getLineno();
        boolean boolean33 = node28.isAdd();
        com.google.javascript.rhino.Node node34 = node28.cloneTree();
        java.lang.Object obj36 = node34.getProp((int) (byte) 0);
        boolean boolean37 = node17.isEquivalentTo(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        boolean boolean46 = node43.isNot();
        int int47 = node43.getLineno();
        boolean boolean48 = node43.isAdd();
        com.google.javascript.rhino.Node node49 = node43.cloneTree();
        boolean boolean50 = node43.isWith();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isThis();
        node53.addChildToBack(node56);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node53.siblings();
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet62);
        int int65 = strSet62.size();
        strSet62.clear();
        node43.setDirectives((java.util.Set<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node68 = node34.srcref(node43);
        typePosition9.setItem(node34);
        boolean boolean70 = strSet8.contains((java.lang.Object) typePosition9);
        int int71 = typePosition9.getPositionOnStartLine();
        int int72 = typePosition9.getEndLine();
        com.google.javascript.rhino.Node node73 = typePosition9.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray59 = nodeIterableList2.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList2.listIterator((int) (short) 0);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node64.siblings();
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet73);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList76 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray77 = nodeIterableList76.toArray();
        boolean boolean78 = strSet73.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList76);
        java.lang.Object[] objArray79 = nodeIterableList76.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream80 = nodeIterableList76.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList81 = nodeIterableList76.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder83 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean84 = jSDocInfoBuilder83.recordInterface();
        boolean boolean85 = jSDocInfoBuilder83.isInterfaceRecorded();
        boolean boolean86 = jSDocInfoBuilder83.recordIdGenerator();
        boolean boolean87 = nodeIterableList81.contains((java.lang.Object) boolean86);
        boolean boolean88 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList81);
        java.io.IOException iOException89 = new java.io.IOException();
        java.io.IOException iOException90 = new java.io.IOException((java.lang.Throwable) iOException89);
        java.lang.Throwable[] throwableArray91 = iOException89.getSuppressed();
        java.lang.Throwable[] throwableArray92 = nodeIterableList2.toArray(throwableArray91);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList93 = nodeIterableList2.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable95 = nodeIterableList2.remove(40960);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(nodeIterableList76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream80);
        org.junit.Assert.assertNotNull(nodeIterableList81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(nodeIterableList93);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node14 = node5.useSourceInfoFrom(node13);
        node5.setLineno(5);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node19.isBlock();
        boolean boolean27 = node19.hasOneChild();
        com.google.javascript.rhino.jstype.JSType jSType28 = node19.getJSType();
        com.google.javascript.rhino.Node node29 = node5.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean34 = jSDocInfoBuilder31.recordDescription("hi!");
        boolean boolean35 = jSDocInfoBuilder31.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder31.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder31.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder31.recordReturnType(jSTypeExpression39);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder31.markTypeNode(node42, 29, 48, 46, (int) (byte) 100, true);
        com.google.javascript.rhino.Node node49 = node19.clonePropsFrom(node42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.addAuthor("");
        boolean boolean54 = jSDocInfoBuilder51.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder51.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder51.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder51.markName("", staticSourceFile59, 29, 50);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isSyntheticBlock();
        boolean boolean73 = node65.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = new com.google.javascript.rhino.JSTypeExpression(node65, "Unknown class name");
        boolean boolean77 = jSDocInfoBuilder51.recordThrowDescription(jSTypeExpression75, "?");
        com.google.javascript.rhino.Node node78 = jSTypeExpression75.getRoot();
        com.google.javascript.rhino.Node node79 = node19.useSourceInfoFrom(node78);
        node19.setSourceEncodedPosition(0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.isImplicitCast();
        boolean boolean13 = jSDocInfo0.isConstructor();
        boolean boolean14 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isVoid();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isTypeOf();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node13);
        com.google.javascript.rhino.Node node16 = node3.getLastSibling();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node19.isDebugger();
        com.google.javascript.rhino.Node node26 = node19.getFirstChild();
        boolean boolean27 = node3.hasChild(node26);
        typePosition0.setItem(node26);
        boolean boolean29 = node26.isFor();
        boolean boolean30 = node26.isComma();
        node26.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        boolean boolean36 = node26.hasChild(node35);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList37 = com.google.common.collect.ImmutableList.of(node26);
        boolean boolean38 = node26.isAdd();
        boolean boolean39 = node26.isCase();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        boolean boolean44 = node42.isDelProp();
        int int45 = node42.getChildCount();
        boolean boolean46 = node42.isComma();
        boolean boolean47 = node42.isNoSideEffectsCall();
        boolean boolean48 = node42.isSetterDef();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node54 = node53.cloneNode();
        com.google.javascript.rhino.Node node55 = node54.removeChildren();
        com.google.javascript.rhino.Node node56 = node42.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node57 = node26.srcrefTree(node42);
        node57.addSuppression("(null|{})");
        boolean boolean60 = node57.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(40);
        boolean boolean2 = node1.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.siblings();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node9.isNot();
        int int13 = node9.getLineno();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node19.isNot();
        int int23 = node19.getLineno();
        com.google.javascript.rhino.Node node24 = node9.srcref(node19);
        boolean boolean25 = node9.isString();
        boolean boolean26 = node9.isTry();
        boolean boolean27 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node9);
        node1.detachChildren();
        int int30 = node1.getType();
        node1.addSuppression("{1986107045}");
        boolean boolean33 = node1.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 40 + "'", int30 == 40);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean15 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node18 = node17.getLastChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        com.google.javascript.rhino.Node node28 = node21.getFirstChild();
        com.google.javascript.rhino.Node node29 = node17.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node32.isDebugger();
        boolean boolean39 = node32.isVoid();
        boolean boolean40 = node32.hasOneChild();
        com.google.javascript.rhino.InputId inputId41 = node32.getInputId();
        java.lang.String str42 = node32.toStringTree();
        com.google.javascript.rhino.Node node43 = node32.removeFirstChild();
        boolean boolean44 = node32.isVarArgs();
        node17.addChildToBack(node32);
        boolean boolean46 = node17.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node17, "{proxy:{1538954470}}");
        boolean boolean49 = jSDocInfoBuilder1.recordType(jSTypeExpression48);
        com.google.javascript.rhino.Node node50 = jSTypeExpression48.getRoot();
        boolean boolean51 = jSTypeExpression48.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str42, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        boolean boolean10 = jSDocInfoBuilder6.recordHiddenness();
        boolean boolean11 = jSDocInfoBuilder6.recordExpose();
        boolean boolean12 = jSDocInfoBuilder6.recordNoCompile();
        boolean boolean13 = jSDocInfoBuilder6.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder6.recordJavaDispatch();
        boolean boolean15 = jSDocInfoBuilder6.recordNoAlias();
        boolean boolean17 = jSDocInfoBuilder6.addAuthor("{}");
        boolean boolean19 = jSDocInfoBuilder6.recordDeprecationReason("{694195918}");
        boolean boolean20 = jSDocInfoBuilder6.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = jSDocInfoBuilder22.recordExpose();
        boolean boolean28 = jSDocInfoBuilder22.recordIdGenerator();
        boolean boolean30 = jSDocInfoBuilder22.addReference("OR hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordInterface();
        boolean boolean49 = jSDocInfoBuilder46.recordDescription("hi!");
        boolean boolean50 = jSDocInfoBuilder46.recordHiddenness();
        boolean boolean51 = strSet42.remove((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean52 = jSDocInfoBuilder46.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder54.addAuthor("");
        boolean boolean57 = jSDocInfoBuilder54.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordThrowType(jSTypeExpression58);
        boolean boolean60 = jSDocInfoBuilder54.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder54.markName("", staticSourceFile62, 29, 50);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        boolean boolean74 = node68.isDebugger();
        boolean boolean75 = node68.isSyntheticBlock();
        boolean boolean76 = node68.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node68, "Unknown class name");
        boolean boolean80 = jSDocInfoBuilder54.recordThrowDescription(jSTypeExpression78, "?");
        boolean boolean81 = jSDocInfoBuilder46.recordThrowType(jSTypeExpression78);
        boolean boolean82 = jSDocInfoBuilder22.recordEnumParameterType(jSTypeExpression78);
        boolean boolean83 = jSDocInfoBuilder6.recordExtendedInterface(jSTypeExpression78);
        boolean boolean84 = jSDocInfoBuilder1.recordThisType(jSTypeExpression78);
        boolean boolean85 = jSTypeExpression78.isOptionalArg();
        boolean boolean86 = jSTypeExpression78.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean10 = nodeIterableList9.add(nodeIterable8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        boolean boolean29 = nodeIterableList25.isEmpty();
        boolean boolean30 = nodeIterableList9.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray46 = nodeIterableList45.toArray();
        boolean boolean47 = strSet42.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        java.lang.Object[] objArray48 = nodeIterableList45.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor49 = nodeIterableList45.listIterator();
        boolean boolean50 = nodeIterableList45.isEmpty();
        boolean boolean51 = nodeIterableList9.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray53 = nodeIterableList52.toArray();
        int int55 = nodeIterableList52.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean57 = nodeIterableList52.contains((java.lang.Object) 1.0d);
        boolean boolean58 = nodeIterableList45.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList52);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList45.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList60 = nodeIterableList45.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList60.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder63.recordInterface();
        boolean boolean66 = jSDocInfoBuilder63.recordDescription("hi!");
        boolean boolean67 = jSDocInfoBuilder63.recordHiddenness();
        boolean boolean68 = jSDocInfoBuilder63.recordExpose();
        boolean boolean69 = jSDocInfoBuilder63.recordConstructor();
        boolean boolean71 = jSDocInfoBuilder63.addAuthor("Unknown class name");
        boolean boolean73 = jSDocInfoBuilder63.recordDescription("[]");
        boolean boolean74 = jSDocInfoBuilder63.recordDeprecated();
        boolean boolean75 = jSDocInfoBuilder63.recordConsistentIdGenerator();
        boolean boolean77 = jSDocInfoBuilder63.recordMeaning("{775928261}");
        boolean boolean78 = jSDocInfoBuilder63.isDescriptionRecorded();
        int int79 = nodeIterableList60.lastIndexOf((java.lang.Object) jSDocInfoBuilder63);
        boolean boolean80 = jSDocInfoBuilder63.recordDeprecated();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(31, 1, 10);
        boolean boolean85 = node84.isScript();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node84, "{1729404217}");
        boolean boolean88 = jSTypeExpression87.isVarArgs();
        boolean boolean89 = jSDocInfoBuilder63.recordDefineType(jSTypeExpression87);
        boolean boolean90 = jSDocInfoBuilder63.recordJavaDispatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(nodeIterableList60);
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        boolean boolean10 = jSDocInfo0.hasType();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean13 = jSDocInfoBuilder1.addReference("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        boolean boolean14 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getSuppressions();
        boolean boolean18 = jSDocInfo16.isNoSideEffects();
        java.lang.String str19 = jSDocInfo16.getReturnDescription();
        boolean boolean21 = jSDocInfo16.hasParameter("Not declared as a constructor");
        int int22 = jSDocInfo16.getImplementedInterfaceCount();
        int int23 = jSDocInfo16.getParameterCount();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo16.getParameterNames();
        boolean boolean25 = jSDocInfoBuilder1.recordSuppressions(strSet24);
        boolean boolean26 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str12 = jSDocInfo0.getSourceName();
        boolean boolean14 = jSDocInfo0.hasParameterType("{694195918}");
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray17 = nodeIterableList16.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = nodeIterableList16.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray25 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition19, typePosition20, typePosition21, typePosition22, typePosition23, typePosition24 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray26 = nodeIterableList16.toArray(typePositionArray25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordReturnType(jSTypeExpression32);
        int int34 = nodeIterableList16.lastIndexOf((java.lang.Object) jSTypeExpression32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo35.getSuppressions();
        boolean boolean37 = nodeIterableList16.contains((java.lang.Object) strSet36);
        java.lang.Object[] objArray38 = nodeIterableList16.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean49 = nodeIterableList48.add(nodeIterable47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isThis();
        node52.addChildToBack(node55);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node52.siblings();
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet61);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray65 = nodeIterableList64.toArray();
        boolean boolean66 = strSet61.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList64);
        java.lang.Object[] objArray67 = nodeIterableList64.toArray();
        boolean boolean68 = nodeIterableList64.isEmpty();
        boolean boolean69 = nodeIterableList48.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList64);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node72.siblings();
        java.lang.String[] strArray80 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList84 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray85 = nodeIterableList84.toArray();
        boolean boolean86 = strSet81.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        java.lang.Object[] objArray87 = nodeIterableList84.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor88 = nodeIterableList84.listIterator();
        boolean boolean89 = nodeIterableList84.isEmpty();
        boolean boolean90 = nodeIterableList48.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        boolean boolean91 = nodeIterableList16.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        int int92 = nodeIterableList84.size();
        boolean boolean93 = strSet15.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList84);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor94 = nodeIterableList84.iterator();
        java.lang.Object[] objArray95 = nodeIterableList84.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(typePositionArray25);
        org.junit.Assert.assertNotNull(typePositionArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(nodeIterableList64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(nodeIterableList84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean13 = node12.isOptionalArg();
        com.google.javascript.rhino.Node node14 = node12.getLastChild();
        boolean boolean15 = node12.isNumber();
        jSDocInfo0.setAssociatedNode(node12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = strSet11.remove((java.lang.Object) jSDocInfoBuilder15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        com.google.javascript.rhino.Node node41 = node26.srcref(node36);
        int int42 = node26.getCharno();
        boolean boolean43 = node26.isQuotedString();
        boolean boolean44 = node26.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node50.isNot();
        int int54 = node50.getLineno();
        boolean boolean55 = node50.isAdd();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node62.cloneTree();
        java.lang.Object obj70 = node68.getProp((int) (byte) 0);
        int int71 = node68.getChildCount();
        node56.addChildrenToFront(node68);
        boolean boolean73 = strSet11.contains((java.lang.Object) node56);
        boolean boolean74 = node56.isDefaultCase();
        com.google.javascript.rhino.Node node75 = node56.cloneTree();
        int int76 = node56.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        com.google.javascript.rhino.Node node10 = node3.getFirstChild();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isIn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        boolean boolean22 = node16.isDebugger();
        boolean boolean23 = node16.isAssign();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(51, node16, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node26.getAncestors();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(1, node3, node26, 54, 10);
        boolean boolean31 = node26.isArrayLit();
        java.util.Set<java.lang.String> strSet32 = node26.getDirectives();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        boolean boolean43 = node38.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node38.setJSType(jSType44);
        boolean boolean46 = node38.isOptionalArg();
        java.util.Set<java.lang.String> strSet47 = node38.getDirectives();
        boolean boolean48 = node38.isHook();
        com.google.javascript.rhino.Node node49 = node26.useSourceInfoFrom(node38);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = jSDocInfoBuilder51.recordExpose();
        boolean boolean57 = jSDocInfoBuilder51.recordIdGenerator();
        boolean boolean59 = jSDocInfoBuilder51.addReference("OR hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder51.recordDefineType(jSTypeExpression60);
        jSDocInfoBuilder51.recordOriginalCommentString("OR hi! [directives: []]");
        boolean boolean64 = jSDocInfoBuilder51.recordImplicitCast();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node68.siblings();
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet77);
        node68.putBooleanProp(0, false);
        node68.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean85 = node68.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile86 = node68.getStaticSourceFile();
        int int88 = staticSourceFile86.getLineOfOffset(53);
        jSDocInfoBuilder51.markName("TYPEOF hi!", staticSourceFile86, 52, 0);
        java.lang.String str92 = staticSourceFile86.getName();
        int int94 = staticSourceFile86.getLineOfOffset((int) (short) 10);
        int int96 = staticSourceFile86.getLineOffset(47);
        boolean boolean97 = staticSourceFile86.isExtern();
        java.lang.String str98 = staticSourceFile86.getName();
        node49.setStaticSourceFile(staticSourceFile86);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(staticSourceFile86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str92, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-2147483648) + "'", int96 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str98, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getVersion();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.isExpose();
        boolean boolean10 = jSDocInfo0.isDefine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean76 = jSDocInfoBuilder32.recordNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean78 = jSDocInfo77.isExterns();
        boolean boolean79 = jSDocInfo77.hasReturnType();
        boolean boolean80 = jSDocInfo77.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo77.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo77.getTypedefType();
        boolean boolean84 = jSDocInfo77.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo77.getThrownTypes();
        jSDocInfo77.addSuppression("{1480997056}");
        com.google.common.collect.ImmutableList<java.lang.String> strList88 = jSDocInfo77.getTemplateTypeNames();
        boolean boolean89 = jSDocInfoBuilder32.recordTemplateTypeNames((java.util.List<java.lang.String>) strList88);
        boolean boolean90 = jSDocInfoBuilder32.recordPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean8 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean10 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        java.lang.Class<?> wildcardClass14 = jSDocInfoBuilder1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        boolean boolean18 = strSet11.contains((java.lang.Object) nodeIterableList17);
        strSet11.clear();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList20.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor24 = nodeIterableList20.iterator();
        boolean boolean25 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo26.getVisibility();
        boolean boolean30 = jSDocInfo26.shouldPreserveTry();
        java.lang.String str31 = jSDocInfo26.getReturnDescription();
        boolean boolean32 = jSDocInfo26.isNoCompile();
        boolean boolean33 = strSet11.equals((java.lang.Object) jSDocInfo26);
        java.util.Collection<java.lang.String> strCollection34 = jSDocInfo26.getAuthors();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(nodeIterableItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(strCollection34);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        boolean boolean14 = jSDocInfoBuilder1.recordHiddenness();
        jSDocInfoBuilder1.markAnnotation("[]", 0, 5);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node22.siblings();
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet31);
        node22.putBooleanProp(0, false);
        node22.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean39 = node22.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = node22.getStaticSourceFile();
        boolean boolean41 = staticSourceFile40.isExtern();
        jSDocInfoBuilder1.markName("OR hi! [source_file: ]\n    OR hi!\n", staticSourceFile40, 3, (int) ' ');
        int int46 = staticSourceFile40.getLineOfOffset(2);
        int int48 = staticSourceFile40.getLineOfOffset(16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(staticSourceFile40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node17.getJSDocInfo();
        jSDocInfoBuilder1.markTypeNode(node17, 35, 29, 0, 100, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        boolean boolean29 = jSDocInfo26.isImplicitCast();
        boolean boolean30 = jSDocInfo26.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo26.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo26.getReferences();
        boolean boolean33 = jSDocInfo26.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo26.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo26.getImplementedInterfaces();
        node17.setJSDocInfo(jSDocInfo26);
        java.lang.String str37 = jSDocInfo26.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo26.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.hasParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isInterface();
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean2 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean3 = jSDocInfoBuilder1.recordExport();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        jSDocInfo0.setLicense("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("OR hi!");
        boolean boolean8 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList25 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray26 = nodeIterableList25.toArray();
        boolean boolean27 = strSet22.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.Object[] objArray28 = nodeIterableList25.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream29 = nodeIterableList25.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = nodeIterableList25.reverse();
        boolean boolean31 = strSet10.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList25);
        java.lang.String[] strArray33 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray35 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray33, strArray35 };
        java.lang.String[] strArray38 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray40 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray41 = new java.lang.String[][] { strArray38, strArray40 };
        java.lang.String[][][] strArray42 = new java.lang.String[][][] { strArray36, strArray41 };
        java.lang.String[] strArray44 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray46 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray44, strArray46 };
        java.lang.String[] strArray49 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray51 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray52 = new java.lang.String[][] { strArray49, strArray51 };
        java.lang.String[][][] strArray53 = new java.lang.String[][][] { strArray47, strArray52 };
        java.lang.String[] strArray55 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray57 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray58 = new java.lang.String[][] { strArray55, strArray57 };
        java.lang.String[] strArray60 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray62 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray63 = new java.lang.String[][] { strArray60, strArray62 };
        java.lang.String[][][] strArray64 = new java.lang.String[][][] { strArray58, strArray63 };
        java.lang.String[] strArray66 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray68 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray69 = new java.lang.String[][] { strArray66, strArray68 };
        java.lang.String[] strArray71 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray73 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray74 = new java.lang.String[][] { strArray71, strArray73 };
        java.lang.String[][][] strArray75 = new java.lang.String[][][] { strArray69, strArray74 };
        java.lang.String[] strArray77 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray79 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray80 = new java.lang.String[][] { strArray77, strArray79 };
        java.lang.String[] strArray82 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray84 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray85 = new java.lang.String[][] { strArray82, strArray84 };
        java.lang.String[][][] strArray86 = new java.lang.String[][][] { strArray80, strArray85 };
        java.lang.String[] strArray88 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray90 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray91 = new java.lang.String[][] { strArray88, strArray90 };
        java.lang.String[] strArray93 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[] strArray95 = new java.lang.String[] { "OR hi! [source_file: {298532945}]" };
        java.lang.String[][] strArray96 = new java.lang.String[][] { strArray93, strArray95 };
        java.lang.String[][][] strArray97 = new java.lang.String[][][] { strArray91, strArray96 };
        java.lang.String[][][][] strArray98 = new java.lang.String[][][][] { strArray42, strArray53, strArray64, strArray75, strArray86, strArray97 };
        java.lang.String[][][][] strArray99 = strSet10.toArray(strArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(nodeIterableList25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream29);
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(strArray98);
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("{81470232}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder18.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder18.recordReturnType(jSTypeExpression26);
        boolean boolean29 = jSDocInfoBuilder18.recordDeprecationReason("Not declared as a constructor");
        boolean boolean30 = jSDocInfoBuilder18.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.addAuthor("");
        boolean boolean35 = jSDocInfoBuilder32.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder32.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordExtendedInterface(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder18.recordDefineType(jSTypeExpression64);
        boolean boolean69 = jSDocInfoBuilder18.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder71 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder71.recordInterface();
        boolean boolean74 = jSDocInfoBuilder71.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = null;
        boolean boolean76 = jSDocInfoBuilder71.recordTypedef(jSTypeExpression75);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node80, "");
        boolean boolean83 = jSTypeExpression82.isVarArgs();
        boolean boolean84 = jSDocInfoBuilder71.recordDefineType(jSTypeExpression82);
        boolean boolean85 = jSDocInfoBuilder18.recordTypedef(jSTypeExpression82);
        boolean boolean86 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression82);
        com.google.javascript.rhino.Node node87 = jSTypeExpression82.getRoot();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, 29, 50);
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean15 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.addAuthor("");
        boolean boolean25 = jSDocInfoBuilder22.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder22.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder22.markName("", staticSourceFile30, 29, 50);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isSyntheticBlock();
        boolean boolean44 = node36.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node36, "Unknown class name");
        boolean boolean48 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression46, "?");
        boolean boolean50 = jSDocInfoBuilder17.recordThrowDescription(jSTypeExpression46, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean51 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression46);
        boolean boolean53 = jSDocInfoBuilder1.recordFileOverview("{2007238598}");
        boolean boolean54 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getSuppressions();
        boolean boolean62 = jSDocInfo60.isNoSideEffects();
        boolean boolean63 = jSDocInfo60.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo60.getReturnType();
        boolean boolean65 = jSDocInfo60.isNoAlias();
        boolean boolean66 = nodeIterableList53.contains((java.lang.Object) jSDocInfo60);
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition68 = marker67.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker67.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition70 = marker67.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker71 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition72 = marker71.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition73 = marker71.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition75 = marker74.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition76 = marker74.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker74.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition79 = marker78.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition80 = marker78.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition81 = marker78.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition84 = marker83.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition85 = marker83.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition86 = marker83.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker87 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition88 = marker87.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition89 = marker87.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition90 = marker87.getDescription();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList91 = com.google.common.collect.ImmutableList.of(marker67, marker71, marker74, marker78, marker82, marker83, marker87);
        int int92 = nodeIterableList53.indexOf((java.lang.Object) marker83);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream93 = nodeIterableList53.stream();
        java.lang.String str94 = nodeIterableList53.toString();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor95 = nodeIterableList53.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(nodeSourcePosition68);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(nodeSourcePosition70);
        org.junit.Assert.assertNull(nodeSourcePosition72);
        org.junit.Assert.assertNull(nodeSourcePosition73);
        org.junit.Assert.assertNull(stringPosition75);
        org.junit.Assert.assertNull(stringPosition76);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(nodeSourcePosition79);
        org.junit.Assert.assertNull(nodeSourcePosition80);
        org.junit.Assert.assertNull(nodeSourcePosition81);
        org.junit.Assert.assertNull(nodeSourcePosition84);
        org.junit.Assert.assertNull(nodeSourcePosition85);
        org.junit.Assert.assertNull(nodeSourcePosition86);
        org.junit.Assert.assertNull(nodeSourcePosition88);
        org.junit.Assert.assertNull(nodeSourcePosition89);
        org.junit.Assert.assertNull(stringPosition90);
        org.junit.Assert.assertNotNull(markerList91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableStream93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor95);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.recordPreserveTry();
        boolean boolean9 = nodeIterableList0.equals((java.lang.Object) boolean8);
        java.util.stream.Stream[] streamArray11 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray12 = (java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray11;
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray13 = nodeIterableList0.toArray((java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray11);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor14 = nodeIterableList0.listIterator();
        boolean boolean15 = nodeIterableItor14.hasNext();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(streamArray11);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray12);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray13);
        org.junit.Assert.assertNotNull(nodeIterableItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isOverride();
        boolean boolean10 = jSDocInfo5.isNoSideEffects();
        boolean boolean12 = jSDocInfo5.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet13 = jSDocInfo5.getModifies();
        java.lang.String str14 = jSDocInfo5.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo5.getBaseType();
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo5.getAuthors();
        java.lang.String str17 = jSDocInfo5.toString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo5.getVisibility();
        boolean boolean19 = jSDocInfo5.isConstructor();
        boolean boolean20 = strSet4.equals((java.lang.Object) boolean19);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JSDocInfo" + "'", str17, "JSDocInfo");
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean2 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasParameter("JSDocInfo");
        boolean boolean5 = jSDocInfo0.isExterns();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.lang.String str8 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        boolean boolean10 = node3.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(51, node3, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node14 = node13.getLastChild();
        boolean boolean15 = node13.isTrue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 1);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node17.setJSType(jSType18);
        com.google.javascript.rhino.Node node20 = node13.copyInformationFrom(node17);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode24 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry23.setResolveMode(resolveMode24);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry23.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = objectType27.toObjectType();
        boolean boolean29 = objectType28.matchesInt32Context();
        boolean boolean30 = objectType28.isStringValueType();
        boolean boolean31 = objectType28.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode34 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry33.setResolveMode(resolveMode34);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry33.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair38 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType28, (com.google.javascript.rhino.jstype.JSType) objectType37);
        java.lang.String str39 = objectType37.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40);
        jSTypeRegistry41.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType48 = jSTypeRegistry41.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        boolean boolean49 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType) objectType37, jSType48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = objectType37.getPossibleToBooleanOutcomes();
        boolean boolean51 = objectType37.hasDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        boolean boolean59 = objectType58.matchesInt32Context();
        boolean boolean60 = objectType58.isStringValueType();
        boolean boolean61 = objectType58.canBeCalled();
        boolean boolean62 = objectType58.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        boolean boolean69 = jSTypeRegistry64.canPropertyBeDefined(jSType67, "Unknown class name");
        jSTypeRegistry64.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry64.createAnonymousObjectType();
        objectType72.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType75 = objectType72.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean76 = objectType72.isNoResolvedType();
        boolean boolean77 = objectType58.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType72);
        boolean boolean78 = objectType72.isNoType();
        com.google.javascript.rhino.jstype.JSType jSType79 = objectType37.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.jstype.JSType jSType80 = objectType72.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder82 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean83 = jSDocInfoBuilder82.recordInterface();
        boolean boolean85 = jSDocInfoBuilder82.recordDescription("hi!");
        boolean boolean86 = jSDocInfoBuilder82.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = null;
        boolean boolean88 = jSDocInfoBuilder82.recordThrowType(jSTypeExpression87);
        boolean boolean89 = jSDocInfoBuilder82.recordConstancy();
        boolean boolean90 = jSDocInfoBuilder82.recordOverride();
        boolean boolean91 = jSDocInfoBuilder82.recordNoTypeCheck();
        boolean boolean92 = jSDocInfoBuilder82.recordConstancy();
        boolean boolean94 = jSDocInfoBuilder82.recordVersion("{1246504462}");
        boolean boolean95 = jSType80.equals((java.lang.Object) jSDocInfoBuilder82);
        node13.putProp(49, (java.lang.Object) jSDocInfoBuilder82);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + resolveMode24 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode24.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + resolveMode34 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode34.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{...}" + "'", str39, "{...}");
        org.junit.Assert.assertNotNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str6 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode13 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry12.setResolveMode(resolveMode13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isNE();
        boolean boolean19 = node17.isInstanceOf();
        boolean boolean20 = node17.isThrow();
        node17.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable23 = node17.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry25.createAnonymousObjectType();
        objectType33.clearResolved();
        node17.setJSType((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        boolean boolean44 = node38.isDebugger();
        com.google.javascript.rhino.Node node45 = node38.getFirstChild();
        boolean boolean46 = node38.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry12.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType33, node38);
        boolean boolean48 = jSTypeRegistry1.declareType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry50.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        int int56 = node55.getType();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node59.siblings();
        node59.setSourceFileForTesting("[]");
        com.google.javascript.rhino.jstype.JSType jSType68 = node59.getJSType();
        com.google.javascript.rhino.Node node69 = node59.getParent();
        com.google.javascript.rhino.Node node70 = node55.srcref(node59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean72 = jSDocInfo71.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo71.getType();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isTypeOf();
        jSDocInfo71.setAssociatedNode(node76);
        boolean boolean79 = jSDocInfo71.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo71.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("OR hi!");
        boolean boolean84 = node83.isInc();
        jSDocInfo71.setAssociatedNode(node83);
        node55.setJSDocInfo(jSDocInfo71);
        int int87 = jSDocInfo71.getParameterCount();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + resolveMode13 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode13.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable23);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(functionType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 83 + "'", int56 == 83);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = jSDocInfo37.getVisibility();
        boolean boolean45 = jSDocInfo37.isInterface();
        boolean boolean46 = jSDocInfo37.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(visibility44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        int int11 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isInterface();
        java.lang.String str8 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        boolean boolean10 = jSDocInfoBuilder6.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder6.recordConstancy();
        boolean boolean14 = jSDocInfoBuilder6.recordOverride();
        boolean boolean15 = jSDocInfoBuilder6.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder6.recordBaseType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder6.isPopulatedWithFileOverview();
        boolean boolean19 = jSDocInfoBuilder6.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder21.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder21.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder21.recordReturnType(jSTypeExpression29);
        boolean boolean32 = jSDocInfoBuilder21.recordDeprecationReason("Not declared as a constructor");
        boolean boolean33 = jSDocInfoBuilder21.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder43.addAuthor("");
        boolean boolean46 = jSDocInfoBuilder43.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression47);
        boolean boolean49 = jSDocInfoBuilder43.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = null;
        jSDocInfoBuilder43.markName("", staticSourceFile51, 29, 50);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        boolean boolean63 = node57.isDebugger();
        boolean boolean64 = node57.isSyntheticBlock();
        boolean boolean65 = node57.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node57, "Unknown class name");
        boolean boolean69 = jSDocInfoBuilder43.recordThrowDescription(jSTypeExpression67, "?");
        boolean boolean70 = jSDocInfoBuilder35.recordExtendedInterface(jSTypeExpression67);
        boolean boolean71 = jSDocInfoBuilder21.recordDefineType(jSTypeExpression67);
        boolean boolean72 = jSTypeExpression67.isVarArgs();
        boolean boolean73 = jSDocInfoBuilder6.recordThisType(jSTypeExpression67);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression67);
        boolean boolean75 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression74);
        boolean boolean77 = jSDocInfoBuilder1.recordReturnDescription("{982195199}");
        boolean boolean78 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean9 = node8.isThis();
        node5.addChildToBack(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node5.siblings();
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet14);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList17 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray18 = nodeIterableList17.toArray();
        boolean boolean19 = strSet14.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList17);
        java.util.HashSet[] hashSetArray21 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray22 = (java.util.HashSet<java.lang.String>[]) hashSetArray21;
        strSetArray22[0] = strSet14;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList25 = com.google.common.collect.ImmutableList.copyOf(strSetArray22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isExterns();
        boolean boolean38 = jSDocInfo36.hasReturnType();
        boolean boolean39 = jSDocInfo36.isOverride();
        jSDocInfo36.setLicense("hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node57.isNot();
        int int61 = node57.getLineno();
        com.google.javascript.rhino.Node node62 = node47.srcref(node57);
        boolean boolean63 = node62.isDelProp();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isThis();
        node66.addChildToBack(node69);
        node69.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node69.setStaticSourceFile(staticSourceFile74);
        com.google.common.collect.ImmutableList<java.lang.Object> objList76 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray22, (java.lang.Object) node28, (java.lang.Object) "hi!", (java.lang.Object) boolean63, (java.lang.Object) node69);
        boolean boolean77 = node69.isInstanceOf();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(35, 37, 39);
        com.google.javascript.rhino.Node node82 = node69.srcrefTree(node81);
        int int83 = nodeIterableList2.lastIndexOf((java.lang.Object) node81);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList84 = nodeIterableList2.reverse();
        boolean boolean85 = nodeIterableList84.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList86 = nodeIterableList84.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList86.iterator();
        java.lang.Object[] objArray88 = nodeIterableList86.toArray();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeIterableList17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(hashSetArray21);
        org.junit.Assert.assertNotNull(strSetArray22);
        org.junit.Assert.assertNotNull(strSetList25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(nodeIterableList86);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        node37.addSuppression("{199755887}");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder12.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.addAuthor("");
        boolean boolean23 = jSDocInfoBuilder20.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder20.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder28.markName("", staticSourceFile36, 29, 50);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        boolean boolean54 = jSDocInfoBuilder28.recordThrowDescription(jSTypeExpression52, "?");
        boolean boolean55 = jSDocInfoBuilder20.recordExtendedInterface(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression52);
        boolean boolean57 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression52);
        boolean boolean58 = jSTypeExpression52.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(39, "{1591389062}", 83, 0);
        boolean boolean5 = node4.isWith();
        node4.setCharno(16);
        node4.addSuppression("{1461140244}");
        int int10 = node4.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 39 + "'", int10 == 39);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder35.recordTypedef(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder35.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        boolean boolean44 = jSDocInfo0.isImplicitCast();
        boolean boolean45 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(markerCollection6);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isExpose();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        java.lang.Object[] objArray12 = strSet11.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean15 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean16 = jSDocInfoBuilder1.recordInterface();
        boolean boolean18 = jSDocInfoBuilder1.recordDeprecationReason("{2055972345}");
        boolean boolean19 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("hi!", "JSDocInfo");
        jSDocInfoBuilder1.markText("{424067794}", 49, 49, 4, 0);
        boolean boolean20 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean21 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean22 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        int int3 = nodeIterableList0.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean5 = nodeIterableList0.contains((java.lang.Object) 1.0d);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = nodeIterableList6.reverse();
        boolean boolean8 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList6);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getSuppressions();
        boolean boolean11 = jSDocInfo9.isNoSideEffects();
        java.lang.String str12 = jSDocInfo9.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        int int14 = jSDocInfo9.getImplementedInterfaceCount();
        boolean boolean15 = nodeIterableList6.contains((java.lang.Object) int14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder17.recordDefineType(jSTypeExpression21);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder17.recordThisType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder17.recordDefineType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder17.recordExport();
        boolean boolean29 = jSDocInfoBuilder17.recordExport();
        boolean boolean30 = nodeIterableList6.equals((java.lang.Object) boolean29);
        boolean boolean31 = nodeIterableList6.isEmpty();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor32 = nodeIterableList6.listIterator();
        boolean boolean34 = nodeIterableList6.contains((java.lang.Object) "{({1354435764},{1233786300},{1645822162})}");
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("OR hi!\n    OR hi!\n");
        jSTypeRegistry1.identifyNonNullableName("{...}");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable12 = jSTypeRegistry1.getTypesWithProperty("{225764511}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isExterns();
        boolean boolean15 = jSDocInfo13.hasReturnType();
        jSDocInfo13.setLicense("hi!");
        int int18 = jSDocInfo13.getImplementedInterfaceCount();
        boolean boolean19 = jSDocInfo13.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo13.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList20);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable23 = jSTypeRegistry1.getEachReferenceTypeWithProperty("{168895621}");
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(objectTypeIterable23);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        boolean boolean19 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean20 = jSDocInfoBuilder15.recordConsistentIdGenerator();
        jSDocInfoBuilder15.markText("hi!", 36, 0, 49, 4);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean31 = jSDocInfoBuilder28.recordDescription("hi!");
        boolean boolean32 = jSDocInfoBuilder28.recordHiddenness();
        boolean boolean33 = jSDocInfoBuilder28.recordExpose();
        boolean boolean35 = jSDocInfoBuilder28.hasParameter("Not declared as a constructor");
        boolean boolean36 = jSDocInfoBuilder28.recordNoCompile();
        boolean boolean38 = jSDocInfoBuilder28.recordMeaning("Not declared as a type name");
        boolean boolean39 = jSDocInfoBuilder28.recordHiddenness();
        boolean boolean40 = jSDocInfoBuilder28.isPopulated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder42.addAuthor("");
        boolean boolean45 = jSDocInfoBuilder42.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder42.recordParameter("OR hi!", jSTypeExpression47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordInterface();
        boolean boolean53 = jSDocInfoBuilder50.recordDescription("hi!");
        boolean boolean54 = jSDocInfoBuilder50.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = null;
        boolean boolean56 = jSDocInfoBuilder50.recordThrowType(jSTypeExpression55);
        boolean boolean57 = jSDocInfoBuilder50.recordConstancy();
        boolean boolean58 = jSDocInfoBuilder50.recordOverride();
        boolean boolean59 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean61 = jSDocInfoBuilder50.recordMeaning("{...}");
        boolean boolean62 = jSDocInfoBuilder50.isConstructorRecorded();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = new com.google.javascript.rhino.JSTypeExpression(node66, "");
        boolean boolean69 = jSTypeExpression68.isVarArgs();
        boolean boolean70 = jSDocInfoBuilder50.recordThisType(jSTypeExpression68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression68);
        boolean boolean72 = jSDocInfoBuilder42.recordThrowType(jSTypeExpression68);
        boolean boolean73 = jSDocInfoBuilder28.recordExtendedInterface(jSTypeExpression68);
        boolean boolean74 = jSDocInfoBuilder15.recordTypedef(jSTypeExpression68);
        boolean boolean75 = jSDocInfoBuilder1.recordThisType(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray8 = nodeIterableList7.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = nodeIterableList7.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream10 = nodeIterableList7.stream();
        java.lang.String[] strArray12 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray13 = nodeIterableList7.toArray(strArray12);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = nodeIterableList14.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream17 = nodeIterableList14.stream();
        java.lang.String[] strArray19 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray20 = nodeIterableList14.toArray(strArray19);
        java.lang.String[] strArray25 = new java.lang.String[] { "Not declared as a type name", "INSTANCEOF", "{441018204}", "OR hi!\n    OR hi!\n" };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList26 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray27 = nodeIterableList26.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList28 = nodeIterableList26.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream29 = nodeIterableList26.stream();
        java.lang.String[] strArray31 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray32 = nodeIterableList26.toArray(strArray31);
        com.google.common.collect.ImmutableList<java.lang.String[]> strArrayList33 = com.google.common.collect.ImmutableList.of(strArray5, strArray12, strArray20, strArray25, strArray32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo34.getSuppressions();
        boolean boolean36 = jSDocInfo34.isNoSideEffects();
        java.lang.String str37 = jSDocInfo34.getReturnDescription();
        boolean boolean39 = jSDocInfo34.hasDescriptionForParameter("{...}");
        java.lang.String str40 = jSDocInfo34.getSourceName();
        boolean boolean41 = jSDocInfo34.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo34.getParameterType("None");
        boolean boolean44 = jSDocInfo34.isNoSideEffects();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo34.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = nodeIterableList46.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream49 = nodeIterableList46.stream();
        java.lang.String[] strArray51 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray52 = nodeIterableList46.toArray(strArray51);
        java.lang.String[] strArray53 = strSet45.toArray(strArray52);
        com.google.common.collect.ImmutableList<java.lang.CharSequence[]> charSequenceArrayList54 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence[]) strArray5, (java.lang.CharSequence[]) strArray52);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableStream10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(nodeIterableStream17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(nodeIterableList26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList28);
        org.junit.Assert.assertNotNull(nodeIterableStream29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(nodeIterableStream49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(charSequenceArrayList54);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean3 = jSDocInfoBuilder1.recordVisibility(visibility2);
        boolean boolean4 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("DELPROP 41\n    NUMBER 3.0\n    OR hi! 0\n        OR hi! 0\n");
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        jSDocInfoBuilder1.markText("hi!", 30, 100, 1, 30);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean16 = jSDocInfoBuilder1.recordBlockDescription("{177858107}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordParameter("Unknown class name", jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isBlock();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        int int24 = strSet21.size();
        strSet21.clear();
        node2.setDirectives((java.util.Set<java.lang.String>) strSet21);
        boolean boolean27 = node2.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isExterns();
        int int30 = jSDocInfo28.getParameterCount();
        jSDocInfo28.setLicense("None");
        node2.setJSDocInfo(jSDocInfo28);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo28.getTypedefType();
        boolean boolean35 = jSDocInfo28.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean15 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean18 = jSDocInfoBuilder1.recordFileOverview("OR hi! [source_file: {...}]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("{1221148348}");
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        jSDocInfo0.setDeprecated(true);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        java.lang.String str14 = jSDocInfo0.getBlockDescription();
        int int15 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str16 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo0.getParameterType("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(jSTypeExpression18);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean76 = jSDocInfoBuilder43.isDescriptionRecorded();
        boolean boolean78 = jSDocInfoBuilder43.recordFileOverview("Not declared as a type name");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean85 = node84.isThis();
        node81.addChildToBack(node84);
        boolean boolean87 = node81.isDebugger();
        boolean boolean88 = node81.isSyntheticBlock();
        boolean boolean89 = node81.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = new com.google.javascript.rhino.JSTypeExpression(node81, "Unknown class name");
        boolean boolean92 = jSTypeExpression91.isOptionalArg();
        boolean boolean93 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression91);
        boolean boolean95 = jSDocInfoBuilder43.recordFileOverview("{298532945}");
        boolean boolean96 = jSDocInfoBuilder43.recordHiddenness();
        boolean boolean97 = jSDocInfoBuilder43.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        boolean boolean53 = jSDocInfoBuilder1.recordExport();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility55);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder59 = visibilityEnumBuilder57.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean61 = jSDocInfo60.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo60.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = jSDocInfo60.getVisibility();
        boolean boolean64 = jSDocInfo60.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo60.setVisibility(visibility65);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray67 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility65 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder59.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray67);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo72.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = jSDocInfo72.getVisibility();
        boolean boolean76 = jSDocInfo72.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo72.setVisibility(visibility77);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray79 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility77 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder80 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray79);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray79);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder56.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray79);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder83 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility84 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder85 = visibilityEnumBuilder83.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility84);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder86 = visibilityEnumBuilder82.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility84);
        boolean boolean87 = jSDocInfoBuilder1.recordVisibility(visibility84);
        boolean boolean88 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean89 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean91 = jSDocInfoBuilder1.recordFileOverview("{2032908549}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder56);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNull(visibility63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + visibility65 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility65.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNull(visibility75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray79);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder80);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertTrue("'" + visibility84 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility84.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder85);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean14 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean15 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder1.recordInterface();
        boolean boolean17 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean24 = node23.isThis();
        node20.addChildToBack(node23);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node20.siblings();
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet29);
        node20.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isArrayLit();
        boolean boolean46 = node37.isOnlyModifiesThisCall();
        boolean boolean47 = node37.isNE();
        com.google.javascript.rhino.Node node48 = node20.useSourceInfoFrom(node37);
        node20.setOptionalArg(true);
        jSDocInfoBuilder1.markTypeNode(node20, 0, 143360, (-2147483648), 13, false);
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nSTRING OR hi!\n    OR hi!\n 16\n\n\nTree2:\nOR hi!\n\n\nSubtree1: STRING OR hi!\n    OR hi!\n 16\n\n\nSubtree2: OR hi!\n", 0, 30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        int int30 = node24.getCharno();
        boolean boolean31 = node24.isNew();
        com.google.javascript.rhino.jstype.JSType jSType32 = node24.getJSType();
        boolean boolean33 = strSet20.contains((java.lang.Object) node24);
        boolean boolean34 = node24.isSetterDef();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        node37.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node46 = node37.getLastChild();
        java.lang.String str47 = node46.getString();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        boolean boolean58 = node53.isAdd();
        com.google.javascript.rhino.Node node59 = node53.cloneTree();
        com.google.javascript.rhino.Node node60 = node46.clonePropsFrom(node53);
        boolean boolean61 = node53.isLabel();
        com.google.javascript.rhino.Node node62 = node24.useSourceInfoIfMissingFrom(node53);
        boolean boolean63 = node62.isQuotedString();
        boolean boolean64 = node62.isReturn();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isDebugger();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(0, node68, 8, 16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node68.children();
        com.google.javascript.rhino.Node node74 = node62.useSourceInfoFromForTree(node68);
        com.google.javascript.rhino.Node node75 = node68.cloneTree();
        java.lang.Appendable appendable76 = null;
        // The following exception was thrown during execution in test generation
        try {
            node68.appendStringTree(appendable76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.addAuthor("");
        boolean boolean9 = jSDocInfoBuilder6.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder6.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder14.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.addAuthor("");
        boolean boolean25 = jSDocInfoBuilder22.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder22.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder22.markName("", staticSourceFile30, 29, 50);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isSyntheticBlock();
        boolean boolean44 = node36.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node36, "Unknown class name");
        boolean boolean48 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression46, "?");
        boolean boolean49 = jSDocInfoBuilder14.recordExtendedInterface(jSTypeExpression46);
        boolean boolean50 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression46);
        boolean boolean51 = jSDocInfoBuilder1.recordType(jSTypeExpression46);
        boolean boolean53 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean55 = jSDocInfoBuilder1.recordMeaning("{1095745650}");
        boolean boolean56 = jSDocInfoBuilder1.recordExterns();
        boolean boolean57 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        boolean boolean13 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.addAuthor("");
        boolean boolean9 = jSDocInfoBuilder6.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression10);
        boolean boolean12 = jSDocInfoBuilder6.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.addAuthor("");
        boolean boolean17 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder14.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.addAuthor("");
        boolean boolean25 = jSDocInfoBuilder22.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder22.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder22.markName("", staticSourceFile30, 29, 50);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isSyntheticBlock();
        boolean boolean44 = node36.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node36, "Unknown class name");
        boolean boolean48 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression46, "?");
        boolean boolean49 = jSDocInfoBuilder14.recordExtendedInterface(jSTypeExpression46);
        boolean boolean50 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression46);
        boolean boolean51 = jSDocInfoBuilder1.recordType(jSTypeExpression46);
        boolean boolean53 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean55 = jSDocInfoBuilder1.recordMeaning("{1095745650}");
        boolean boolean56 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean57 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isVoid();
        com.google.javascript.rhino.Node node10 = node2.getParent();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean12 = jSDocInfo11.hasFileOverview();
        boolean boolean13 = jSDocInfo11.hasModifies();
        boolean boolean15 = jSDocInfo11.hasParameter("OR hi!");
        java.lang.String str16 = jSDocInfo11.getDeprecationReason();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo11.getSuppressions();
        node2.setDirectives(strSet17);
        boolean boolean19 = node2.isNew();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry21.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean30 = node25.isEquivalentToTyped(node29);
        boolean boolean31 = node25.isThis();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node37.isNot();
        int int41 = node37.getLineno();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node47.isNot();
        int int51 = node47.getLineno();
        com.google.javascript.rhino.Node node52 = node37.srcref(node47);
        int int53 = node37.getCharno();
        boolean boolean54 = node37.isQuotedString();
        boolean boolean55 = node37.isIf();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean62 = node61.isThis();
        node58.addChildToBack(node61);
        boolean boolean64 = node61.isNot();
        int int65 = node61.getLineno();
        boolean boolean66 = node61.isAdd();
        com.google.javascript.rhino.Node node67 = node37.useSourceInfoFromForTree(node61);
        boolean boolean68 = node25.hasChild(node61);
        boolean boolean69 = node25.isHook();
        int int70 = node25.getSideEffectFlags();
        boolean boolean71 = node25.isWhile();
        boolean boolean72 = node25.isTrue();
        boolean boolean73 = node2.isEquivalentToTyped(node25);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        boolean boolean19 = nodeIterableList0.isEmpty();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isThis();
        boolean boolean4 = node2.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isNoTypeCheck();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo5.setAssociatedNode(node11);
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node2.isEquivalentTo(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        boolean boolean25 = node20.isAdd();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        boolean boolean27 = node20.isWith();
        com.google.javascript.rhino.Node node28 = node11.srcrefTree(node20);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(40);
        boolean boolean31 = node30.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node30.siblings();
        boolean boolean33 = node30.isDebugger();
        boolean boolean34 = node28.isEquivalentToTyped(node30);
        java.lang.String str35 = node28.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordDeprecationReason("enum{{298532945}}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean11 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition17);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList20 = com.google.common.collect.ImmutableList.of(namePosition19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList26 = com.google.common.collect.ImmutableList.of(namePosition25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList28 = com.google.common.collect.ImmutableList.of(namePosition14, namePosition15, namePosition16, namePosition17, namePosition19, namePosition21, namePosition22, namePosition23, namePosition24, namePosition25, namePosition27);
        namePosition27.setPositionInformation((int) (short) 0, 0, 47, 41);
        int int34 = namePosition27.getStartLine();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node37 = node36.getLastChild();
        boolean boolean38 = node36.isNumber();
        boolean boolean39 = node36.isNull();
        boolean boolean40 = node36.isCall();
        namePosition27.setItem(node36);
        jSDocInfoBuilder1.markTypeNode(node36, 40960, 35, (int) (byte) 0, 50, false);
        boolean boolean49 = jSDocInfoBuilder1.recordFileOverview("{1560899362}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertNotNull(namePositionList20);
        org.junit.Assert.assertNotNull(namePositionList26);
        org.junit.Assert.assertNotNull(namePositionList28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableCollection13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = strSet12.retainAll(nodeIterableCollection13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        jSDocInfoBuilder1.markName("Unknown class name", staticSourceFile6, 48, 5);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder12.recordHiddenness();
        boolean boolean17 = jSDocInfoBuilder12.recordExpose();
        boolean boolean18 = jSDocInfoBuilder12.recordNoCompile();
        boolean boolean19 = jSDocInfoBuilder12.isPopulatedWithFileOverview();
        boolean boolean20 = jSDocInfoBuilder12.isPopulated();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.siblings();
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet33);
        node24.putBooleanProp(0, false);
        node24.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean41 = node24.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = node24.getStaticSourceFile();
        boolean boolean43 = staticSourceFile42.isExtern();
        int int45 = staticSourceFile42.getLineOffset(16);
        jSDocInfoBuilder12.markName("None", staticSourceFile42, (int) (byte) 1, 43);
        int int50 = staticSourceFile42.getColumnOfOffset(4);
        java.lang.String str51 = staticSourceFile42.getName();
        jSDocInfoBuilder1.markName("function (this:me, {988702852}): me", staticSourceFile42, (int) (short) -1, 43);
        jSDocInfoBuilder1.markText("OR hi! 0", (-1), (int) (byte) -1, 100, 16);
        boolean boolean61 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(staticSourceFile42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2147483648) + "'", int45 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str51, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDec();
        boolean boolean13 = node6.isBlock();
        boolean boolean14 = node6.isTrue();
        com.google.javascript.rhino.Node node15 = node6.cloneNode();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(38, node6, (int) (short) 100, 39);
        jSDocInfo0.setAssociatedNode(node18);
        java.lang.String str20 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        jSDocInfo0.setLicense("OR hi! [directives: []]\n");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        java.lang.String str9 = jSDocInfo0.getLicense();
        boolean boolean10 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        boolean boolean9 = jSDocInfo6.isNoTypeCheck();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo6.setAssociatedNode(node12);
        boolean boolean14 = node12.isNoSideEffectsCall();
        boolean boolean15 = node3.isEquivalentTo(node12);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(40);
        boolean boolean18 = node17.isReturn();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node21.isDebugger();
        boolean boolean28 = node21.isVoid();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isTypeOf();
        com.google.javascript.rhino.Node node33 = node21.srcrefTree(node31);
        boolean boolean34 = node33.isBreak();
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        com.google.javascript.rhino.Node node40 = jSTypeRegistry36.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean45 = node40.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node46 = node40.cloneNode();
        com.google.javascript.rhino.InputId inputId47 = node40.getInputId();
        boolean boolean48 = node33.hasChild(node40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        boolean boolean53 = node52.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isNE();
        boolean boolean58 = node56.isInstanceOf();
        boolean boolean59 = node56.isThrow();
        node56.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable62 = node56.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode65 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry64.setResolveMode(resolveMode65);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        boolean boolean69 = jSTypeRegistry64.canPropertyBeDefined(jSType67, "Unknown class name");
        jSTypeRegistry64.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry64.createAnonymousObjectType();
        objectType72.clearResolved();
        node56.setJSType((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.jstype.JSType jSType75 = node56.getJSType();
        boolean boolean76 = jSType75.isNominalConstructor();
        node52.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(100, node3, node17, node40, node52, (int) (short) -1, 52);
        node52.setLength(53);
        boolean boolean83 = node52.isSyntheticBlock();
        com.google.javascript.rhino.Node node84 = node52.getParent();
        boolean boolean85 = node84.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(ancestorIterable62);
        org.junit.Assert.assertTrue("'" + resolveMode65 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode65.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean14 = node13.isOptionalArg();
        boolean boolean15 = node13.isFalse();
        boolean boolean16 = node13.isVoid();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry18.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        boolean boolean23 = node22.isSwitch();
        boolean boolean24 = node13.hasChild(node22);
        jSDocInfoBuilder1.markTypeNode(node13, (int) (short) 0, (int) (byte) 1, (int) (short) 10, 100, true);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDec();
        boolean boolean41 = node34.isBlock();
        boolean boolean42 = node34.hasOneChild();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        boolean boolean49 = jSDocInfoBuilder44.recordExpose();
        boolean boolean50 = jSDocInfoBuilder44.recordNoCompile();
        boolean boolean51 = jSDocInfoBuilder44.isPopulatedWithFileOverview();
        boolean boolean52 = jSDocInfoBuilder44.isPopulated();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        node56.putBooleanProp(0, false);
        node56.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean73 = node56.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = node56.getStaticSourceFile();
        boolean boolean75 = staticSourceFile74.isExtern();
        int int77 = staticSourceFile74.getLineOffset(16);
        jSDocInfoBuilder44.markName("None", staticSourceFile74, (int) (byte) 1, 43);
        int int82 = staticSourceFile74.getColumnOfOffset(4);
        node34.setStaticSourceFile(staticSourceFile74);
        jSDocInfoBuilder1.markName("None", staticSourceFile74, 16, 42);
        int int88 = staticSourceFile74.getLineOffset(50);
        java.lang.String str89 = staticSourceFile74.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = staticSourceFile74.getLineOffset(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Should not call getLineOffset with line number 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(staticSourceFile74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-2147483648) + "'", int77 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-2147483648) + "'", int88 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str89, "OR hi!\n    OR hi!\n");
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList0.iterator();
        java.lang.Object[] objArray19 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray29 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition23, typePosition24, typePosition25, typePosition26, typePosition27, typePosition28 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray30 = nodeIterableList20.toArray(typePositionArray29);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor31 = nodeIterableList20.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray55 = nodeIterableList54.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = nodeIterableList54.reverse();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList56, 52, node63 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = nodeIterableList70.reverse();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean80 = node79.isThis();
        node76.addChildToBack(node79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList72, 52, node79 };
        java.lang.Object[][] objArray83 = new java.lang.Object[][] { objArray50, objArray66, objArray82 };
        java.lang.Object[][] objArray84 = nodeIterableList34.toArray(objArray83);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray86 = nodeIterableList85.toArray();
        int int88 = nodeIterableList85.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray89 = nodeIterableList85.toArray();
        boolean boolean90 = nodeIterableList34.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList85);
        java.lang.Object[] objArray91 = nodeIterableList34.toArray();
        boolean boolean92 = nodeIterableList20.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        java.util.Iterator[] iteratorArray94 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.lang.String>[] strItorArray95 = (java.util.Iterator<java.lang.String>[]) iteratorArray94;
        java.util.Iterator<java.lang.String>[] strItorArray96 = nodeIterableList34.toArray((java.util.Iterator<java.lang.String>[]) iteratorArray94);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList97 = nodeIterableList34.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList98 = nodeIterableList34.asList();
        boolean boolean99 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList98);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(typePositionArray29);
        org.junit.Assert.assertNotNull(typePositionArray30);
        org.junit.Assert.assertNotNull(nodeIterableItor31);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(nodeIterableList85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(iteratorArray94);
        org.junit.Assert.assertNotNull(strItorArray95);
        org.junit.Assert.assertNotNull(strItorArray96);
        org.junit.Assert.assertNotNull(nodeIterableList97);
        org.junit.Assert.assertNotNull(nodeIterableList98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo2.getSuppressions();
        boolean boolean4 = jSDocInfo2.isNoSideEffects();
        java.lang.String str5 = jSDocInfo2.getReturnDescription();
        boolean boolean7 = jSDocInfo2.hasParameter("Not declared as a constructor");
        java.lang.String str8 = jSDocInfo2.getMeaning();
        boolean boolean9 = jSDocInfo2.isInterface();
        boolean boolean10 = strSet1.remove((java.lang.Object) jSDocInfo2);
        java.lang.String str11 = jSDocInfo2.getSourceName();
        boolean boolean12 = jSDocInfo2.hasType();
        boolean boolean13 = jSDocInfo2.isExterns();
        boolean boolean14 = jSDocInfo2.isIdGenerator();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection15 = jSDocInfo2.getMarkers();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(markerCollection15);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.markAnnotation("", 4095, 2);
        boolean boolean9 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean3 = jSDocInfoBuilder1.recordVisibility(visibility2);
        boolean boolean4 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isTypeOf();
        jSDocInfo5.setAssociatedNode(node10);
        boolean boolean13 = jSDocInfo5.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo5.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo5.getTemplateTypeNames();
        boolean boolean16 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList15);
        boolean boolean18 = jSDocInfoBuilder1.recordMeaning("java.io.IOException: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) 'a', "INSTANCEOF");
        boolean boolean22 = node21.isOr();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node21, "INSTANCEOF");
        boolean boolean25 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression24);
        boolean boolean28 = jSDocInfoBuilder1.recordParameterDescription("java.io.IOException: OR hi! [directives: []]\n", "{721844050}");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isNE();
        boolean boolean33 = node31.isInstanceOf();
        boolean boolean34 = node31.isThrow();
        boolean boolean35 = node31.isWhile();
        com.google.javascript.rhino.Node node36 = node31.cloneTree();
        java.lang.String str37 = node36.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = jSDocInfoBuilder1.build(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node59 = node44.srcref(node54);
        boolean boolean60 = node59.isDelProp();
        com.google.javascript.rhino.Node node61 = node59.getLastSibling();
        boolean boolean62 = node61.isFunction();
        boolean boolean63 = node61.isComma();
        int int64 = node61.getCharno();
        java.lang.String str65 = node36.checkTreeEquals(node61);
        boolean boolean66 = node36.isStringKey();
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(jSDocInfo38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isSetterDef();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean28 = node27.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType29 = node27.getJSType();
        node22.addChildrenToBack(node27);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList31 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray32 = nodeIterableList31.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList33 = nodeIterableList31.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray40 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition34, typePosition35, typePosition36, typePosition37, typePosition38, typePosition39 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray41 = nodeIterableList31.toArray(typePositionArray40);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder43.addAuthor("");
        boolean boolean46 = jSDocInfoBuilder43.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = null;
        boolean boolean48 = jSDocInfoBuilder43.recordReturnType(jSTypeExpression47);
        int int49 = nodeIterableList31.lastIndexOf((java.lang.Object) jSTypeExpression47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getSuppressions();
        boolean boolean52 = nodeIterableList31.contains((java.lang.Object) strSet51);
        node22.setDirectives(strSet51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean61 = node60.isThis();
        node57.addChildToBack(node60);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node57.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList64 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean65 = nodeIterableList64.add(nodeIterable63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isThis();
        node68.addChildToBack(node71);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node68.siblings();
        java.lang.String[] strArray76 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet77);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList80 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray81 = nodeIterableList80.toArray();
        boolean boolean82 = strSet77.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        java.lang.Object[] objArray83 = nodeIterableList80.toArray();
        boolean boolean84 = nodeIterableList80.isEmpty();
        boolean boolean85 = nodeIterableList64.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList80);
        boolean boolean86 = nodeIterableList54.equals((java.lang.Object) nodeIterableList64);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor87 = nodeIterableList54.iterator();
        boolean boolean88 = strSet51.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList54);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor89 = nodeIterableList54.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNotNull(nodeIterableList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList33);
        org.junit.Assert.assertNotNull(typePositionArray40);
        org.junit.Assert.assertNotNull(typePositionArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(nodeIterableList80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor89);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str11 = jSDocInfo0.getVersion();
        boolean boolean12 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        boolean boolean43 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDebugger();
        boolean boolean53 = node46.isVoid();
        boolean boolean54 = node46.hasOneChild();
        com.google.javascript.rhino.InputId inputId55 = node46.getInputId();
        java.lang.String str56 = node46.toStringTree();
        com.google.javascript.rhino.Node node57 = node46.removeFirstChild();
        boolean boolean58 = node46.isVarArgs();
        boolean boolean59 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        int int68 = node62.getCharno();
        java.lang.String str69 = node62.toStringTree();
        boolean boolean70 = node62.isVoid();
        boolean boolean71 = node62.isObjectLit();
        boolean boolean72 = node46.isEquivalentTo(node62);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = new com.google.javascript.rhino.JSTypeExpression(node62, "{2096407833}");
        boolean boolean76 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression74, "Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [source_file: ]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean77 = jSTypeExpression74.isVarArgs();
        com.google.javascript.rhino.Node node78 = jSTypeExpression74.getRoot();
        boolean boolean79 = node78.isInc();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(inputId55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str56, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR hi!\n    OR hi!\n" + "'", str69, "OR hi!\n    OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) '#', 37, 0);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node17.getJSDocInfo();
        jSDocInfoBuilder1.markTypeNode(node17, 35, 29, 0, 100, false);
        node17.removeProp(45);
        node17.setVarArgs(false);
        node17.setType(42);
        boolean boolean32 = node17.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo19.getParameterType("");
        jSDocInfo19.addSuppression("function (this:me, {925150786}): me");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(jSTypeExpression26);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("OR []");
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        boolean boolean12 = jSDocInfo0.hasReturnType();
        boolean boolean13 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("None");
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.isConstant();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        java.lang.String str13 = jSDocInfo0.getOriginalCommentString();
        boolean boolean14 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder1 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = visibilityEnumBuilder1.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder4 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility2);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder9 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.isExterns();
        boolean boolean12 = jSDocInfo10.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isExport();
        boolean boolean18 = jSDocInfo13.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo13.getReturnType();
        boolean boolean20 = jSDocInfo13.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = visibilityEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        jSDocInfo13.setVisibility(visibility22);
        jSDocInfo10.setVisibility(visibility22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility22);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder32 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility30);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder33 = com.google.common.collect.ImmutableList.builder();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder36 = visibilityEnumBuilder34.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility35);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder37 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility35);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder38 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder40 = visibilityEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = visibilityEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = jSDocInfo44.getVisibility();
        boolean boolean48 = jSDocInfo44.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo44.setVisibility(visibility49);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray51 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility49 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray51);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder53 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder55 = visibilityEnumBuilder53.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean57 = jSDocInfo56.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo56.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo56.getVisibility();
        boolean boolean60 = jSDocInfo56.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo56.setVisibility(visibility61);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray63 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility61 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder64 = visibilityEnumBuilder55.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder65 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder66 = visibilityEnumBuilder40.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder67 = visibilityEnumBuilder33.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder68 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray63);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder71 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo72.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility75 = jSDocInfo72.getVisibility();
        boolean boolean76 = jSDocInfo72.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility77 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo72.setVisibility(visibility77);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray79 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility77 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder80 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray79);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder71.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo83.getType();
        boolean boolean86 = jSDocInfo83.isImplicitCast();
        boolean boolean87 = jSDocInfo83.isExport();
        boolean boolean88 = jSDocInfo83.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo83.getReturnType();
        boolean boolean90 = jSDocInfo83.hasTypedefType();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder91 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility92 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder93 = visibilityEnumBuilder91.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility92);
        jSDocInfo83.setVisibility(visibility92);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder95 = visibilityEnumBuilder82.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility92);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder96 = visibilityEnumBuilder32.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility92);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder97 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility92);
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection98 = visibilityEnumBuilder97.build();
        org.junit.Assert.assertNotNull(visibilityEnumBuilder0);
        org.junit.Assert.assertTrue("'" + visibility2 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility2.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder3);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder4);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder23);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder32);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder33);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder36);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder37);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder40);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(visibility47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray51);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSTypeExpression58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + visibility61 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility61.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray63);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder64);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder65);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder66);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder67);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder68);
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNull(visibility75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + visibility77 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility77.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray79);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder80);
        org.junit.Assert.assertTrue("'" + visibility81 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility81.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + visibility92 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility92.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder93);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder95);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder96);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder97);
        org.junit.Assert.assertNotNull(visibilityEnumCollection98);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        com.google.javascript.rhino.Node node23 = node5.getAncestor((int) (short) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isImplicitCast();
        boolean boolean26 = jSDocInfo24.isNoShadow();
        boolean boolean27 = jSDocInfo24.hasBaseType();
        boolean boolean28 = jSDocInfo24.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo24.getTemplateTypeNames();
        node5.setJSDocInfo(jSDocInfo24);
        boolean boolean31 = jSDocInfo24.isConstructor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.isConstructor();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        boolean boolean12 = jSDocInfo0.hasModifies();
        boolean boolean14 = jSDocInfo0.hasParameterType("InputId: Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(visibility11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        int int4 = nodeIterableList0.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression7);
        jSDocInfoBuilder6.markAnnotation("None", 48, 51);
        boolean boolean13 = jSDocInfoBuilder6.recordNoShadow();
        boolean boolean15 = jSDocInfoBuilder6.addReference("OR hi!");
        boolean boolean16 = jSDocInfoBuilder6.isJavaDispatch();
        int int17 = nodeIterableList0.indexOf((java.lang.Object) jSDocInfoBuilder6);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node21.siblings();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        boolean boolean32 = node26.isDebugger();
        boolean boolean33 = node26.isAssign();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(51, node26, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node36.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator38 = ancestorIterable37.spliterator();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean49 = nodeIterableList48.add(nodeIterable22);
        boolean boolean50 = nodeIterableList48.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable37);
        boolean boolean51 = nodeIterableList48.add(nodeIterable47);
        java.lang.Object[] objArray52 = nodeIterableList48.toArray();
        boolean boolean53 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.javascript.rhino.jstype.ObjectType[][] objectTypeArray54 = new com.google.javascript.rhino.jstype.ObjectType[][] {};
        com.google.javascript.rhino.jstype.ObjectType[][] objectTypeArray55 = nodeIterableList0.toArray(objectTypeArray54);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType[]> objectTypeArrayList56 = com.google.common.collect.ImmutableList.of(objectTypeArray55);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[]> jSTypeStaticScopeArrayList57 = com.google.common.collect.ImmutableList.copyOf((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>[][]) objectTypeArray55);
        com.google.javascript.rhino.jstype.JSType[][] jSTypeArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType[][]> jSTypeArrayList59 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.jstype.JSType[][]) objectTypeArray55, jSTypeArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 1");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectTypeArray54);
        org.junit.Assert.assertNotNull(objectTypeArray55);
        org.junit.Assert.assertNotNull(objectTypeArrayList56);
        org.junit.Assert.assertNotNull(jSTypeStaticScopeArrayList57);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean14 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        boolean boolean23 = node20.isNot();
        int int24 = node20.getLineno();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        boolean boolean33 = node30.isNot();
        int int34 = node30.getLineno();
        com.google.javascript.rhino.Node node35 = node20.srcref(node30);
        int int36 = node20.getCharno();
        com.google.javascript.rhino.Node node38 = node20.getAncestor((int) (short) 1);
        boolean boolean39 = node38.isNull();
        com.google.javascript.rhino.Node node40 = node38.cloneNode();
        jSDocInfoBuilder1.markTypeNode(node38, (int) '4', 41, (int) (short) 100, 39, false);
        boolean boolean47 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("{523843733}", 0, 97);
        jSDocInfoBuilder1.markTypeNode(node51, 54, (int) (short) 0, 40, 0, true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object[] objArray14 = strSet11.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isExterns();
        boolean boolean17 = jSDocInfo15.hasReturnType();
        boolean boolean18 = jSDocInfo15.isOverride();
        jSDocInfo15.setLicense("hi!");
        boolean boolean21 = strSet11.contains((java.lang.Object) jSDocInfo15);
        jSDocInfo15.setLicense("{884716401}");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        java.lang.Object[] objArray22 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean33 = nodeIterableList32.add(nodeIterable31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray49 = nodeIterableList48.toArray();
        boolean boolean50 = strSet45.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        java.lang.Object[] objArray51 = nodeIterableList48.toArray();
        boolean boolean52 = nodeIterableList48.isEmpty();
        boolean boolean53 = nodeIterableList32.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList48);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList68 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray69 = nodeIterableList68.toArray();
        boolean boolean70 = strSet65.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        java.lang.Object[] objArray71 = nodeIterableList68.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList68.listIterator();
        boolean boolean73 = nodeIterableList68.isEmpty();
        boolean boolean74 = nodeIterableList32.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        boolean boolean75 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList68);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList76 = nodeIterableList0.asList();
        java.lang.Object[] objArray77 = nodeIterableList76.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor78 = nodeIterableList76.iterator();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(nodeIterableList68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(nodeIterableList76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor78);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode26 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry25.setResolveMode(resolveMode26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        boolean boolean30 = jSTypeRegistry25.canPropertyBeDefined(jSType28, "Unknown class name");
        jSTypeRegistry25.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry25.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType38, "");
        com.google.javascript.rhino.jstype.UnionType unionType41 = objectType38.toMaybeUnionType();
        boolean boolean42 = objectType38.matchesObjectContext();
        boolean boolean43 = objectType38.hasAnyTemplate();
        boolean boolean44 = strSet11.equals((java.lang.Object) objectType38);
        boolean boolean45 = objectType38.isNominalConstructor();
        com.google.javascript.rhino.jstype.JSType jSType46 = objectType38.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType47 = objectType38.autoboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry49.getType("[]");
        jSTypeRegistry49.forwardDeclareType("Not declared as a constructor");
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry49.createNamedType("INSTANCEOF", "{2076672844}", (int) (short) 1, 49);
        boolean boolean66 = jSType65.isStringObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode69 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry68.setResolveMode(resolveMode69);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry68.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = objectType72.toObjectType();
        boolean boolean74 = objectType73.matchesInt32Context();
        boolean boolean75 = objectType73.isStringValueType();
        boolean boolean76 = objectType73.canBeCalled();
        boolean boolean77 = objectType73.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType78 = objectType73.getTypeOfThis();
        boolean boolean79 = objectType73.isEnumType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType65, (com.google.javascript.rhino.jstype.JSType) objectType73);
        boolean boolean81 = jSType65.isEmptyType();
        boolean boolean82 = jSType65.isBooleanObjectType();
        boolean boolean83 = objectType38.canTestForEqualityWith(jSType65);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + resolveMode26 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode26.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNull(unionType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + resolveMode69 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode69.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nOR hi! 37 [directives: []]\n    OR hi!\n\n\nTree2:\nOR hi! [source_file: OR hi!\n    OR hi!\n]\n\n\nSubtree1: OR hi! 37 [directives: []]\n    OR hi!\n\n\nSubtree2: OR hi! [source_file: OR hi!\n    OR hi!\n]\n");
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder11 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = visibilityEnumBuilder11.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo14.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = jSDocInfo14.getVisibility();
        boolean boolean18 = jSDocInfo14.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo14.setVisibility(visibility19);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray21 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility19 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray21);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder23 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder25 = visibilityEnumBuilder23.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo26.getVisibility();
        boolean boolean30 = jSDocInfo26.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo26.setVisibility(visibility31);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray33 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility31 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder34 = visibilityEnumBuilder25.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray33);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder35 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo36.getSuppressions();
        boolean boolean38 = jSDocInfo36.isNoSideEffects();
        boolean boolean39 = jSDocInfo36.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo36.getReturnType();
        boolean boolean41 = jSDocInfo36.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean45 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean48 = jSDocInfoBuilder43.recordVisibility(visibility47);
        jSDocInfo36.setVisibility(visibility47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder50 = visibilityEnumBuilder22.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = visibilityEnumBuilder50.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility51);
        jSDocInfo0.setVisibility(visibility51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node56.siblings();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node56.new FileLevelJsDocBuilder();
        jSDocInfo0.setAssociatedNode(node56);
        boolean boolean65 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertNull(visibility17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray21);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray33);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder34);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder50);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor17 = nodeIterableList0.listIterator(0);
        java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableCollection18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = nodeIterableList0.retainAll(nodeIterableCollection18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor17);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.lang.String str4 = nodeIterableList0.toString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean21 = jSDocInfo20.isExterns();
        boolean boolean22 = jSDocInfo20.hasReturnType();
        boolean boolean23 = jSDocInfo20.isOverride();
        jSDocInfo20.setLicense("hi!");
        boolean boolean26 = strSet16.contains((java.lang.Object) jSDocInfo20);
        boolean boolean27 = strSet16.isEmpty();
        boolean boolean28 = nodeIterableList0.equals((java.lang.Object) strSet16);
        java.lang.Object obj29 = null;
        int int30 = nodeIterableList0.lastIndexOf(obj29);
        java.lang.Object[] objArray31 = nodeIterableList0.toArray();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        boolean boolean42 = node36.isDebugger();
        boolean boolean43 = node36.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(51, node36, (int) (short) 10, 0);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, (int) ' ', (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = node36.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node51.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = nodeIterableList0.set((int) (short) 1, (java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(ancestorIterable52);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("{...}", 52, 44);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean9 = jSDocInfoBuilder6.recordDescription("hi!");
        boolean boolean10 = jSDocInfoBuilder6.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder6.recordThrowType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder6.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder6.recordReturnType(jSTypeExpression14);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(50);
        jSDocInfoBuilder6.markTypeNode(node17, 29, 48, 46, (int) (byte) 100, true);
        boolean boolean25 = jSDocInfoBuilder6.recordDescription("{1221148348}");
        boolean boolean26 = jSDocInfoBuilder6.recordConstructor();
        node3.putProp((int) (short) 100, (java.lang.Object) jSDocInfoBuilder6);
        boolean boolean28 = node3.isVoid();
        boolean boolean29 = node3.isTrue();
        boolean boolean30 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean76 = jSDocInfoBuilder43.isDescriptionRecorded();
        boolean boolean78 = jSDocInfoBuilder43.recordFileOverview("Not declared as a type name");
        boolean boolean79 = jSDocInfoBuilder43.recordOverride();
        boolean boolean80 = jSDocInfoBuilder43.isDescriptionRecorded();
        boolean boolean82 = jSDocInfoBuilder43.recordDeprecationReason("{250391391}");
        boolean boolean84 = jSDocInfoBuilder43.hasParameter("{1197029056}");
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) (short) 10, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = jSDocInfoBuilder43.build(node87);
        boolean boolean89 = jSDocInfo88.isNoAlias();
        boolean boolean91 = jSDocInfo88.hasParameter("Node tree inequality:\nTree1:\nNUMBER 100.0\n\n\nTree2:\nIN 10\n    OR hi!\n        OR hi!\n\n\nSubtree1: NUMBER 100.0\n\n\nSubtree2: IN 10\n    OR hi!\n        OR hi!\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility92 = jSDocInfo88.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + visibility92 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility92.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.isDefine();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("java.io.IOException: OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isAnd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.children();
        int int5 = node2.getSourcePosition();
        boolean boolean6 = node2.isInstanceOf();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder7 = node2.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder7.append("java.io.IOException: OR hi! [source_file: OR hi!\n    OR hi!\n]\n    OR hi!\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        boolean boolean11 = node9.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo13.getType();
        boolean boolean16 = jSDocInfo13.isImplicitCast();
        boolean boolean17 = jSDocInfo13.isExport();
        java.lang.String str18 = jSDocInfo13.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo13.getType();
        boolean boolean20 = jSDocInfo13.isDeprecated();
        node9.putProp(32, (java.lang.Object) jSDocInfo13);
        boolean boolean22 = jSDocInfo13.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo13.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo13.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo13.getBaseType();
        boolean boolean26 = jSDocInfo13.isNoSideEffects();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JSDocInfo" + "'", str18, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean11 = node10.isThis();
        node7.addChildToBack(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node7.siblings();
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordInterface();
        boolean boolean23 = jSDocInfoBuilder20.recordDescription("hi!");
        boolean boolean24 = jSDocInfoBuilder20.recordHiddenness();
        boolean boolean25 = strSet16.remove((java.lang.Object) jSDocInfoBuilder20);
        boolean boolean26 = jSDocInfoBuilder20.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.addAuthor("");
        boolean boolean31 = jSDocInfoBuilder28.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = null;
        boolean boolean33 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression32);
        boolean boolean34 = jSDocInfoBuilder28.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder28.markName("", staticSourceFile36, 29, 50);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isSyntheticBlock();
        boolean boolean50 = node42.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node42, "Unknown class name");
        boolean boolean54 = jSDocInfoBuilder28.recordThrowDescription(jSTypeExpression52, "?");
        boolean boolean55 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression52);
        boolean boolean57 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean58 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isOverride();
        boolean boolean9 = jSDocInfo4.isNoSideEffects();
        boolean boolean11 = jSDocInfo4.hasParameterType("OR hi!\n    OR hi!\n");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo4.getModifies();
        java.lang.String str13 = jSDocInfo4.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.isExterns();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isOverride();
        jSDocInfo14.setLicense("hi!");
        java.lang.String str20 = jSDocInfo14.getDeprecationReason();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getSuppressions();
        boolean boolean24 = jSDocInfo22.isNoSideEffects();
        java.lang.String str25 = jSDocInfo22.getReturnDescription();
        boolean boolean27 = jSDocInfo22.hasParameter("Not declared as a constructor");
        java.lang.String str28 = jSDocInfo22.getMeaning();
        boolean boolean29 = jSDocInfo22.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isExterns();
        boolean boolean32 = jSDocInfo30.hasReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        java.lang.String str36 = jSDocInfo33.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        boolean boolean40 = jSDocInfo37.isNoTypeCheck();
        boolean boolean41 = jSDocInfo37.isHidden();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList43 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo14, jSDocInfo22, jSDocInfo30, jSDocInfo33, jSDocInfo37);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo22.getType();
        boolean boolean45 = jSDocInfo22.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList43);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str11 = jSDocInfo0.getVersion();
        boolean boolean12 = jSDocInfo0.isDeprecated();
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        boolean boolean15 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        jSDocInfoBuilder1.markText("[]", 1, 10, (int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordParameter("Unknown class name", jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("{694195918}", 12, 45);
        jSDocInfoBuilder1.markTypeNode(node17, 39, 5, 8202, 36, false);
        boolean boolean24 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean29 = jSDocInfoBuilder26.recordDescription("hi!");
        boolean boolean30 = jSDocInfoBuilder26.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression31);
        boolean boolean33 = jSDocInfoBuilder26.recordConstancy();
        boolean boolean34 = jSDocInfoBuilder26.recordOverride();
        boolean boolean35 = jSDocInfoBuilder26.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder26.recordBaseType(jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder26.isPopulatedWithFileOverview();
        boolean boolean39 = jSDocInfoBuilder26.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.recordInterface();
        boolean boolean44 = jSDocInfoBuilder41.recordDescription("hi!");
        boolean boolean45 = jSDocInfoBuilder41.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = null;
        boolean boolean47 = jSDocInfoBuilder41.recordThrowType(jSTypeExpression46);
        boolean boolean48 = jSDocInfoBuilder41.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder41.recordReturnType(jSTypeExpression49);
        boolean boolean52 = jSDocInfoBuilder41.recordDeprecationReason("Not declared as a constructor");
        boolean boolean53 = jSDocInfoBuilder41.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder55.addAuthor("");
        boolean boolean58 = jSDocInfoBuilder55.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = null;
        boolean boolean60 = jSDocInfoBuilder55.recordThrowType(jSTypeExpression59);
        boolean boolean61 = jSDocInfoBuilder55.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = null;
        boolean boolean68 = jSDocInfoBuilder63.recordThrowType(jSTypeExpression67);
        boolean boolean69 = jSDocInfoBuilder63.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder63.markName("", staticSourceFile71, 29, 50);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean81 = node80.isThis();
        node77.addChildToBack(node80);
        boolean boolean83 = node77.isDebugger();
        boolean boolean84 = node77.isSyntheticBlock();
        boolean boolean85 = node77.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node77, "Unknown class name");
        boolean boolean89 = jSDocInfoBuilder63.recordThrowDescription(jSTypeExpression87, "?");
        boolean boolean90 = jSDocInfoBuilder55.recordExtendedInterface(jSTypeExpression87);
        boolean boolean91 = jSDocInfoBuilder41.recordDefineType(jSTypeExpression87);
        boolean boolean92 = jSTypeExpression87.isVarArgs();
        boolean boolean93 = jSDocInfoBuilder26.recordThisType(jSTypeExpression87);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression87);
        boolean boolean96 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression87, "{1189945538}");
        boolean boolean97 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean98 = jSDocInfoBuilder1.recordConstancy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        int int27 = strSet24.size();
        strSet24.clear();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        boolean boolean32 = jSDocInfo30.hasModifies();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        boolean boolean35 = strSet33.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList34.iterator();
        java.lang.Object[] objArray38 = nodeIterableList34.toArray();
        boolean boolean39 = strSet24.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor41 = nodeIterableList34.iterator();
        boolean boolean42 = nodeIterableList34.isEmpty();
        boolean boolean43 = nodeIterableList34.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor44 = nodeIterableList34.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertNotNull(nodeIterableItor41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor44);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.addReference("OR hi!");
        boolean boolean11 = jSDocInfoBuilder1.recordLends("{424067794}");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder43.addReference("Not declared as a type name");
        boolean boolean79 = jSDocInfoBuilder43.recordReturnDescription("OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean80 = jSDocInfoBuilder43.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordDescription("{}");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet17);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        boolean boolean26 = strSet17.remove((java.lang.Object) jSDocInfoBuilder21);
        boolean boolean27 = jSDocInfoBuilder21.recordPreserveTry();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder21.markName("JSDocInfo", staticSourceFile29, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node35.isDebugger();
        boolean boolean42 = node35.isSyntheticBlock();
        boolean boolean43 = node35.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node35, "Unknown class name");
        boolean boolean46 = jSDocInfoBuilder21.recordReturnType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression45);
        boolean boolean49 = jSDocInfoBuilder1.hasParameter("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isNE();
        boolean boolean4 = node2.isInstanceOf();
        boolean boolean5 = node2.isThrow();
        node2.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList9 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable8);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor10 = nodeIterableList9.listIterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList9.iterator();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node14.siblings();
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.recordInterface();
        boolean boolean30 = jSDocInfoBuilder27.recordDescription("hi!");
        boolean boolean31 = jSDocInfoBuilder27.recordHiddenness();
        boolean boolean32 = strSet23.remove((java.lang.Object) jSDocInfoBuilder27);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isNot();
        int int42 = node38.getLineno();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean49 = node48.isThis();
        node45.addChildToBack(node48);
        boolean boolean51 = node48.isNot();
        int int52 = node48.getLineno();
        com.google.javascript.rhino.Node node53 = node38.srcref(node48);
        int int54 = node38.getCharno();
        boolean boolean55 = node38.isQuotedString();
        boolean boolean56 = node38.isIf();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        boolean boolean65 = node62.isNot();
        int int66 = node62.getLineno();
        boolean boolean67 = node62.isAdd();
        com.google.javascript.rhino.Node node68 = node38.useSourceInfoFromForTree(node62);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node74.isNot();
        int int78 = node74.getLineno();
        boolean boolean79 = node74.isAdd();
        com.google.javascript.rhino.Node node80 = node74.cloneTree();
        java.lang.Object obj82 = node80.getProp((int) (byte) 0);
        int int83 = node80.getChildCount();
        node68.addChildrenToFront(node80);
        boolean boolean85 = strSet23.contains((java.lang.Object) node68);
        boolean boolean86 = node68.isQuotedString();
        boolean boolean87 = node68.isVoid();
        com.google.javascript.rhino.Node node88 = node68.getLastSibling();
        com.google.javascript.rhino.Node node89 = node88.detachFromParent();
        int int90 = nodeIterableList9.lastIndexOf((java.lang.Object) node89);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeIterableList9);
        org.junit.Assert.assertNotNull(nodeIterableItor10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExport();
        boolean boolean10 = jSDocInfoBuilder1.recordFileOverview("java.io.IOException: java.io.IOException: None");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean27 = node26.isThis();
        node23.addChildToBack(node26);
        boolean boolean29 = node26.isNot();
        int int30 = node26.getLineno();
        boolean boolean31 = node26.isAdd();
        node26.setSourceEncodedPosition((int) (byte) 1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.getJsDocBuilderForNode();
        int int35 = nodeIterableList20.lastIndexOf((java.lang.Object) fileLevelJsDocBuilder34);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList20.asList();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList20.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = nodeIterableList20.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.recordVersion("hi!");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node49.isNot();
        int int53 = node49.getLineno();
        boolean boolean54 = node49.isAdd();
        com.google.javascript.rhino.Node node55 = node49.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node55.setJSType(jSType56);
        boolean boolean58 = node55.isString();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean65 = node64.isThis();
        node61.addChildToBack(node64);
        boolean boolean67 = node64.isNot();
        int int68 = node64.getLineno();
        boolean boolean69 = node64.isAdd();
        com.google.javascript.rhino.Node node70 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        boolean boolean79 = node76.isNot();
        int int80 = node76.getLineno();
        boolean boolean81 = node76.isAdd();
        boolean boolean82 = node70.hasChild(node76);
        boolean boolean83 = node76.isDefaultCase();
        int int84 = node76.getSourcePosition();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean88 = node87.isTypeOf();
        boolean boolean89 = node87.isRegExp();
        com.google.javascript.rhino.Node node90 = node76.copyInformationFromForTree(node87);
        boolean boolean91 = node55.isEquivalentToTyped(node87);
        jSDocInfoBuilder40.markTypeNode(node55, 83, 31, 83, (-1), false);
        int int98 = nodeIterableList38.indexOf((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList38.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray2 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList3 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList3, jSTypeArray2);
        com.google.javascript.rhino.Node node5 = jSTypeRegistry1.createParametersWithVarArgs((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList3);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        boolean boolean10 = node5.isEquivalentToTyped(node9);
        com.google.javascript.rhino.Node node11 = node5.cloneNode();
        int int12 = node5.getCharno();
        boolean boolean13 = node5.wasEmptyNode();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = node16.isCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getType();
        boolean boolean22 = jSDocInfo19.isNoTypeCheck();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo19.setAssociatedNode(node25);
        boolean boolean27 = node25.isNoSideEffectsCall();
        boolean boolean28 = node16.isEquivalentTo(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node34.isNot();
        int int38 = node34.getLineno();
        boolean boolean39 = node34.isAdd();
        com.google.javascript.rhino.Node node40 = node34.cloneTree();
        boolean boolean41 = node34.isWith();
        com.google.javascript.rhino.Node node42 = node25.srcrefTree(node34);
        boolean boolean43 = node25.isSwitch();
        com.google.javascript.rhino.Node node44 = node5.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.Node node45 = node44.cloneNode();
        boolean boolean46 = node44.isTypeOf();
        boolean boolean47 = node44.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(jSTypeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getType();
        boolean boolean8 = jSDocInfo5.isImplicitCast();
        boolean boolean9 = jSDocInfo5.isExport();
        boolean boolean10 = jSDocInfo5.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo5.getMarkers();
        java.lang.String str13 = jSDocInfo5.getSourceName();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo5.getReferences();
        boolean boolean15 = nodeIterableList0.contains((java.lang.Object) jSDocInfo5);
        jSDocInfo5.setDeprecated(false);
        boolean boolean18 = jSDocInfo5.isInterface();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean25 = node24.isThis();
        node21.addChildToBack(node24);
        boolean boolean27 = node24.isNot();
        int int28 = node24.getLineno();
        boolean boolean29 = node24.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node24.setJSType(jSType30);
        boolean boolean32 = node24.isOptionalArg();
        boolean boolean33 = node24.isNumber();
        com.google.javascript.rhino.Node node35 = node24.getAncestor(46);
        jSDocInfo5.setAssociatedNode(node35);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str9 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean14 = jSDocInfo0.isInterface();
        boolean boolean15 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        boolean boolean43 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean44 = jSDocInfoBuilder1.recordExterns();
        boolean boolean46 = jSDocInfoBuilder1.recordBlockDescription("{1275608813}");
        boolean boolean48 = jSDocInfoBuilder1.recordMeaning("InputId: InputId: ");
        boolean boolean49 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean50 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.recordInterface();
        boolean boolean5 = jSDocInfoBuilder2.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder2.recordDefineType(jSTypeExpression6);
        boolean boolean9 = jSDocInfoBuilder2.recordMeaning("hi!");
        boolean boolean11 = jSDocInfoBuilder2.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordInterface();
        boolean boolean16 = jSDocInfoBuilder13.recordDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node19.siblings();
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.recordInterface();
        boolean boolean35 = jSDocInfoBuilder32.recordDescription("hi!");
        boolean boolean36 = jSDocInfoBuilder32.recordHiddenness();
        boolean boolean37 = strSet28.remove((java.lang.Object) jSDocInfoBuilder32);
        boolean boolean38 = jSDocInfoBuilder32.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = null;
        jSDocInfoBuilder40.markName("", staticSourceFile48, 29, 50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean58 = node57.isThis();
        node54.addChildToBack(node57);
        boolean boolean60 = node54.isDebugger();
        boolean boolean61 = node54.isSyntheticBlock();
        boolean boolean62 = node54.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node54, "Unknown class name");
        boolean boolean66 = jSDocInfoBuilder40.recordThrowDescription(jSTypeExpression64, "?");
        boolean boolean67 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression64);
        boolean boolean68 = jSDocInfoBuilder13.recordEnumParameterType(jSTypeExpression64);
        boolean boolean69 = jSDocInfoBuilder2.recordImplementedInterface(jSTypeExpression64);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression64);
        boolean boolean71 = jSTypeExpression70.isVarArgs();
        com.google.javascript.rhino.Node node72 = jSTypeExpression70.getRoot();
        boolean boolean73 = node72.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(40);
        java.lang.String str76 = node75.getQualifiedName();
        boolean boolean77 = node75.isLabelName();
        node75.putBooleanProp(46, false);
        boolean boolean81 = node75.isGetElem();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(12, node72, node75, 0, 4079);
        boolean boolean85 = node72.isReturn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.addAuthor("");
        boolean boolean15 = jSDocInfoBuilder12.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder12.recordReturnType(jSTypeExpression16);
        int int18 = nodeIterableList0.lastIndexOf((java.lang.Object) jSTypeExpression16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = nodeIterableList0.contains((java.lang.Object) strSet20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        int int30 = node24.getCharno();
        boolean boolean31 = node24.isNew();
        com.google.javascript.rhino.jstype.JSType jSType32 = node24.getJSType();
        boolean boolean33 = strSet20.contains((java.lang.Object) node24);
        boolean boolean34 = node24.isSetterDef();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        node37.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node46 = node37.getLastChild();
        java.lang.String str47 = node46.getString();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        boolean boolean56 = node53.isNot();
        int int57 = node53.getLineno();
        boolean boolean58 = node53.isAdd();
        com.google.javascript.rhino.Node node59 = node53.cloneTree();
        com.google.javascript.rhino.Node node60 = node46.clonePropsFrom(node53);
        boolean boolean61 = node53.isLabel();
        com.google.javascript.rhino.Node node62 = node24.useSourceInfoIfMissingFrom(node53);
        boolean boolean63 = node62.isThis();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        boolean boolean19 = node16.isNot();
        int int20 = node16.getLineno();
        boolean boolean21 = node16.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node16.setJSType(jSType22);
        com.google.javascript.rhino.Node node24 = node16.cloneNode();
        com.google.javascript.rhino.Node node25 = node24.cloneTree();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node31.isNot();
        int int35 = node31.getLineno();
        boolean boolean36 = node31.isAdd();
        com.google.javascript.rhino.Node node37 = node31.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node37.setJSType(jSType38);
        boolean boolean40 = node37.isString();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isThis();
        node43.addChildToBack(node46);
        boolean boolean49 = node46.isNot();
        int int50 = node46.getLineno();
        boolean boolean51 = node46.isAdd();
        com.google.javascript.rhino.Node node52 = node46.cloneTree();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node58.isNot();
        int int62 = node58.getLineno();
        boolean boolean63 = node58.isAdd();
        boolean boolean64 = node52.hasChild(node58);
        boolean boolean65 = node58.isDefaultCase();
        int int66 = node58.getSourcePosition();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isTypeOf();
        boolean boolean71 = node69.isRegExp();
        com.google.javascript.rhino.Node node72 = node58.copyInformationFromForTree(node69);
        boolean boolean73 = node37.isEquivalentToTyped(node69);
        com.google.javascript.rhino.Node node74 = node25.copyInformationFrom(node69);
        boolean boolean75 = node25.isAssignAdd();
        node25.setWasEmptyNode(true);
        int int78 = node25.getLineno();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(45, node25, 43, 43);
        jSDocInfo0.setAssociatedNode(node81);
        boolean boolean83 = jSDocInfo0.hasModifies();
        java.lang.String str84 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor12 = nodeIterableList0.listIterator();
        java.lang.Object[] objArray13 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList16 = nodeIterableList14.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream17 = nodeIterableList14.stream();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo19.getType();
        boolean boolean22 = jSDocInfo19.isImplicitCast();
        boolean boolean23 = jSDocInfo19.isExport();
        boolean boolean24 = jSDocInfo19.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo19.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo19.getMarkers();
        java.lang.String str27 = jSDocInfo19.getSourceName();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo19.getReferences();
        boolean boolean29 = nodeIterableList14.contains((java.lang.Object) jSDocInfo19);
        boolean boolean30 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream31 = nodeIterableList14.parallelStream();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(31, 15, 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node35.children();
        boolean boolean37 = node35.isFunction();
        boolean boolean38 = node35.isVarArgs();
        boolean boolean39 = node35.isFalse();
        boolean boolean40 = node35.isDelProp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 100.0f);
        com.google.javascript.rhino.Node node43 = node42.getLastChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        boolean boolean52 = node46.isDebugger();
        com.google.javascript.rhino.Node node53 = node46.getFirstChild();
        com.google.javascript.rhino.Node node54 = node42.copyInformationFrom(node53);
        node42.setSourceEncodedPositionForTree(5);
        boolean boolean57 = node42.isReturn();
        boolean boolean58 = node42.isLabelName();
        node35.addChildrenToFront(node42);
        int int60 = nodeIterableList14.lastIndexOf((java.lang.Object) node42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = nodeIterableList14.remove(409600);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(nodeIterableItor12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList16);
        org.junit.Assert.assertNotNull(nodeIterableStream17);
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream31);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        boolean boolean5 = jSDocInfo0.isDefine();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("TYPEOF OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node3 = jSDocInfo0.getAssociatedNode();
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.lang.String str10 = jSDocInfo0.toString();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        java.lang.String str12 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry10.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType14, "");
        boolean boolean17 = jSType16.isInstanceType();
        boolean boolean18 = jSType16.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType20 = jSType16.findPropertyType("{1275608813}");
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        boolean boolean24 = jSDocInfo21.isNoTypeCheck();
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo21.getReferences();
        boolean boolean26 = jSDocInfo21.isJavaDispatch();
        boolean boolean27 = jSType16.equals((java.lang.Object) boolean26);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode30 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry29.setResolveMode(resolveMode30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry29.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = objectType33.toObjectType();
        boolean boolean35 = objectType34.matchesInt32Context();
        boolean boolean36 = objectType34.isStringValueType();
        boolean boolean37 = objectType34.canBeCalled();
        boolean boolean38 = objectType34.isAllType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType34.toMaybeEnumElementType();
        boolean boolean40 = objectType34.isObject();
        boolean boolean41 = objectType34.isGlobalThisType();
        boolean boolean42 = jSType16.isEquivalentTo((com.google.javascript.rhino.jstype.JSType) objectType34);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + resolveMode30 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode30.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.lang.String str10 = jSDocInfo0.toString();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        boolean boolean12 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Unknown class name", 2, (int) ' ');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDec();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        boolean boolean21 = node15.isDebugger();
        boolean boolean22 = node15.isVoid();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isTypeOf();
        com.google.javascript.rhino.Node node27 = node15.srcrefTree(node25);
        int int28 = node6.getIndexOfChild(node25);
        boolean boolean29 = node6.isTrue();
        boolean boolean30 = node3.isEquivalentToTyped(node6);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node33.isDebugger();
        boolean boolean40 = node33.isVoid();
        int int42 = node33.getIntProp((int) (short) 1);
        node33.addSuppression("{1480997056}");
        com.google.javascript.rhino.Node node45 = node33.getLastChild();
        java.lang.String str46 = node45.getString();
        int int47 = node3.getIndexOfChild(node45);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        node51.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node65.isNot();
        int int69 = node65.getLineno();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean76 = node75.isThis();
        node72.addChildToBack(node75);
        boolean boolean78 = node75.isNot();
        int int79 = node75.getLineno();
        com.google.javascript.rhino.Node node80 = node65.srcref(node75);
        int int81 = node65.getCharno();
        com.google.javascript.rhino.Node node82 = node51.copyInformationFrom(node65);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node88 = node87.cloneNode();
        boolean boolean89 = node88.isAssignAdd();
        int int90 = node51.getIndexOfChild(node88);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node88.siblings();
        typePosition48.setItem(node88);
        int int93 = typePosition48.getPositionOnEndLine();
        int int94 = typePosition48.getPositionOnEndLine();
        com.google.javascript.rhino.Node node95 = typePosition48.getItem();
        com.google.javascript.rhino.Node node96 = node45.srcrefTree(node95);
        node95.putBooleanProp(23, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.listIterator();
        boolean boolean19 = nodeIterableList14.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray21 = nodeIterableList20.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = nodeIterableList20.reverse();
        boolean boolean23 = nodeIterableList20.isEmpty();
        int int24 = nodeIterableList20.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression27);
        jSDocInfoBuilder26.markAnnotation("None", 48, 51);
        boolean boolean33 = jSDocInfoBuilder26.recordNoShadow();
        boolean boolean35 = jSDocInfoBuilder26.addReference("OR hi!");
        boolean boolean36 = jSDocInfoBuilder26.isJavaDispatch();
        int int37 = nodeIterableList20.indexOf((java.lang.Object) jSDocInfoBuilder26);
        boolean boolean38 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList20);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode41 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry40.setResolveMode(resolveMode41);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry40.createObjectType(objectType43);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = objectType44.toObjectType();
        boolean boolean46 = objectType45.matchesInt32Context();
        boolean boolean47 = objectType45.isStringValueType();
        boolean boolean48 = objectType45.canBeCalled();
        boolean boolean49 = objectType45.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        boolean boolean56 = jSTypeRegistry51.canPropertyBeDefined(jSType54, "Unknown class name");
        jSTypeRegistry51.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType59 = jSTypeRegistry51.createAnonymousObjectType();
        objectType59.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType62 = objectType59.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean63 = objectType59.isNoResolvedType();
        boolean boolean64 = objectType45.differsFrom((com.google.javascript.rhino.jstype.JSType) objectType59);
        boolean boolean65 = objectType59.isFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType67 = objectType59.getRestrictedTypeGivenToBooleanOutcome(true);
        boolean boolean68 = jSType67.matchesInt32Context();
        boolean boolean69 = nodeIterableList20.equals((java.lang.Object) boolean68);
        int int70 = nodeIterableList20.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList71 = nodeIterableList20.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean73 = jSDocInfo72.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo72.getType();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean78 = node77.isTypeOf();
        jSDocInfo72.setAssociatedNode(node77);
        boolean boolean80 = jSDocInfo72.shouldPreserveTry();
        boolean boolean81 = jSDocInfo72.isIdGenerator();
        boolean boolean82 = jSDocInfo72.isExpose();
        boolean boolean83 = jSDocInfo72.hasBaseType();
        boolean boolean84 = jSDocInfo72.isOverride();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = nodeIterableList20.remove((java.lang.Object) boolean84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + resolveMode41 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode41.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objectType59);
        org.junit.Assert.assertNotNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean11 = jSDocInfo0.hasParameterType("{1480997056}");
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean8 = jSDocInfoBuilder1.hasParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression15);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = null;
        boolean boolean18 = jSDocInfoBuilder11.recordThisType(jSTypeExpression17);
        boolean boolean19 = jSDocInfoBuilder11.isPopulated();
        boolean boolean20 = jSDocInfoBuilder11.recordNoAlias();
        boolean boolean23 = jSDocInfoBuilder11.recordParameterDescription("hi!", "JSDocInfo");
        boolean boolean24 = jSDocInfoBuilder11.recordConstructor();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean43 = strSet36.remove((java.lang.Object) stringPosition42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean50 = node49.isThis();
        node46.addChildToBack(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node46.siblings();
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet55);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.recordInterface();
        boolean boolean62 = jSDocInfoBuilder59.recordDescription("hi!");
        boolean boolean63 = jSDocInfoBuilder59.recordHiddenness();
        boolean boolean64 = strSet55.remove((java.lang.Object) jSDocInfoBuilder59);
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList65 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet36, (java.util.HashSet<java.lang.String>) strSet55);
        java.lang.Object obj66 = null;
        boolean boolean67 = strSet55.contains(obj66);
        boolean boolean68 = jSDocInfoBuilder11.recordModifies((java.util.Set<java.lang.String>) strSet55);
        boolean boolean69 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet55);
        boolean boolean71 = jSDocInfoBuilder1.recordDeprecationReason("BITXOR Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nSTRING INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: STRING INSTANCEOF\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSetList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("hi!", "JSDocInfo");
        boolean boolean14 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray30 = nodeIterableList29.toArray();
        boolean boolean31 = strSet26.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList29);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean33 = strSet26.remove((java.lang.Object) stringPosition32);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean40 = node39.isThis();
        node36.addChildToBack(node39);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node36.siblings();
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordInterface();
        boolean boolean52 = jSDocInfoBuilder49.recordDescription("hi!");
        boolean boolean53 = jSDocInfoBuilder49.recordHiddenness();
        boolean boolean54 = strSet45.remove((java.lang.Object) jSDocInfoBuilder49);
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList55 = com.google.common.collect.ImmutableList.of((java.util.HashSet<java.lang.String>) strSet26, (java.util.HashSet<java.lang.String>) strSet45);
        java.lang.Object obj56 = null;
        boolean boolean57 = strSet45.contains(obj56);
        boolean boolean58 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet45);
        boolean boolean60 = jSDocInfoBuilder1.recordLends("{({1418886928},{691641921})}");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = jSDocInfoBuilder1.build(node62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSetList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSDocInfo63);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        boolean boolean69 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean70 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean71 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean72 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean73 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        int int6 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean12 = jSDocInfo0.isJavaDispatch();
        java.lang.String str13 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        jSDocInfoBuilder1.markAnnotation("None", 48, 51);
        boolean boolean9 = jSDocInfoBuilder1.recordReturnDescription("{993598045}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", 43, 46);
        node3.setWasEmptyNode(true);
        int int6 = node3.getLength();
        boolean boolean7 = node3.isStringKey();
        node3.addSuppression("java.io.IOException: OR hi! [directives: []]\n");
        java.lang.String str13 = node3.toString(false, false, true);
        boolean boolean14 = node3.isIn();
        node3.setSourceFileForTesting("{767546855}");
        boolean boolean17 = node3.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING Not declared as a constructor" + "'", str13, "STRING Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream3 = nodeIterableList0.stream();
        java.lang.String[] strArray5 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray6 = nodeIterableList0.toArray(strArray5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.isExterns();
        com.google.javascript.rhino.Node node9 = jSDocInfo7.getAssociatedNode();
        boolean boolean10 = jSDocInfo7.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo7.getType();
        boolean boolean12 = jSDocInfo7.hasReturnType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo7.getModifies();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList23 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean24 = nodeIterableList23.add(nodeIterable22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        node27.addChildToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node27.siblings();
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        boolean boolean41 = strSet36.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.lang.Object[] objArray42 = nodeIterableList39.toArray();
        boolean boolean43 = nodeIterableList39.isEmpty();
        boolean boolean44 = nodeIterableList23.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList39);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor45 = nodeIterableList23.iterator();
        boolean boolean46 = strSet13.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor47 = nodeIterableList23.iterator();
        boolean boolean48 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList23);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableStream3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean4 = jSDocInfoBuilder2.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder2.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder2.recordReturnType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder2.recordOverride();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node14.isAdd();
        boolean boolean18 = node14.isExprResult();
        boolean boolean19 = node14.isThrow();
        boolean boolean20 = node14.isVarArgs();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node23 = node14.useSourceInfoFrom(node22);
        node14.setLineno(5);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node29.isDebugger();
        com.google.javascript.rhino.Node node36 = node29.getFirstChild();
        boolean boolean37 = node29.isNot();
        boolean boolean38 = node29.isIn();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean46 = node45.isThis();
        node42.addChildToBack(node45);
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isAssign();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(51, node42, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable53 = node52.getAncestors();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(1, node29, node52, 54, 10);
        int int57 = node14.getIndexOfChild(node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = jSDocInfoBuilder2.build(node56);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((-1), node56);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(45, 83, 12);
        com.google.javascript.rhino.Node node64 = node56.useSourceInfoIfMissingFrom(node63);
        node56.setOptionalArg(true);
        boolean boolean67 = node56.isTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ancestorIterable53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(jSDocInfo58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getTypedefType();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean34 = node33.isThis();
        node30.addChildToBack(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList37 = new java.util.ArrayList<java.lang.Iterable<com.google.javascript.rhino.Node>>();
        boolean boolean38 = nodeIterableList37.add(nodeIterable36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node41.siblings();
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        boolean boolean55 = strSet50.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.lang.Object[] objArray56 = nodeIterableList53.toArray();
        boolean boolean57 = nodeIterableList53.isEmpty();
        boolean boolean58 = nodeIterableList37.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        boolean boolean59 = strSet18.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.lang.Object[] objArray60 = nodeIterableList37.toArray();
        boolean boolean61 = strSet6.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList37);
        java.lang.Object[] objArray62 = strSet6.toArray();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordBlockDescription("InputId: ");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("Unknown class name", "Unknown class name");
        boolean boolean10 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder1.addReference("");
        jSDocInfoBuilder1.markText("{168285338}", 12, 0, 100, 54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.isImplicitCast();
        boolean boolean21 = jSDocInfo19.isNoShadow();
        java.lang.String str22 = jSDocInfo19.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo19.getTemplateTypeNames();
        boolean boolean24 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList23);
        boolean boolean26 = jSDocInfoBuilder1.recordBlockDescription("{1199858553}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordInterface();
        boolean boolean31 = jSDocInfoBuilder28.recordDescription("hi!");
        boolean boolean32 = jSDocInfoBuilder28.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = null;
        boolean boolean34 = jSDocInfoBuilder28.recordThrowType(jSTypeExpression33);
        boolean boolean35 = jSDocInfoBuilder28.recordConstancy();
        boolean boolean36 = jSDocInfoBuilder28.recordOverride();
        boolean boolean37 = jSDocInfoBuilder28.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo38.getType();
        boolean boolean41 = jSDocInfo38.isNoTypeCheck();
        boolean boolean42 = jSDocInfo38.isOverride();
        boolean boolean44 = jSDocInfo38.hasParameterType("{764537935}");
        java.util.Set<java.lang.String> strSet45 = jSDocInfo38.getModifies();
        boolean boolean46 = jSDocInfoBuilder28.recordModifies(strSet45);
        boolean boolean47 = jSDocInfoBuilder1.recordSuppressions(strSet45);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasBaseType();
        boolean boolean4 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        java.lang.String str7 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("{...}");
        boolean boolean6 = jSDocInfo0.isExterns();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isThis();
        node4.addChildToBack(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node4.siblings();
        com.google.javascript.rhino.jstype.JSType jSType11 = node4.getJSType();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node15.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo17.getSuppressions();
        boolean boolean19 = jSDocInfo17.isNoSideEffects();
        java.lang.String str20 = jSDocInfo17.getReturnDescription();
        boolean boolean22 = jSDocInfo17.hasParameter("Not declared as a constructor");
        java.lang.String str23 = jSDocInfo17.getMeaning();
        boolean boolean24 = jSDocInfo17.isJavaDispatch();
        node15.setJSDocInfo(jSDocInfo17);
        java.lang.String str26 = node4.checkTreeEquals(node15);
        boolean boolean27 = node4.isRegExp();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(217100, node4, 29, 217100);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(217100, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nGETELEM 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: GETELEM 2 [jsdoc_info: JSDocInfo]\n" + "'", str26, "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nGETELEM 2 [jsdoc_info: JSDocInfo]\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: GETELEM 2 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo0.setAssociatedNode(node6);
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getVersion();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder13 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList14 = visibilityEnumBuilder13.build();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo15.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = jSDocInfo15.getVisibility();
        boolean boolean19 = jSDocInfo15.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo15.setVisibility(visibility20);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder22 = visibilityEnumBuilder13.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility20);
        jSDocInfo0.setVisibility(visibility20);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection24 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node29.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getSuppressions();
        boolean boolean33 = jSDocInfo31.isNoSideEffects();
        java.lang.String str34 = jSDocInfo31.getReturnDescription();
        boolean boolean36 = jSDocInfo31.hasParameter("Not declared as a constructor");
        java.lang.String str37 = jSDocInfo31.getMeaning();
        boolean boolean38 = jSDocInfo31.isJavaDispatch();
        node29.setJSDocInfo(jSDocInfo31);
        boolean boolean40 = node29.isDo();
        com.google.javascript.rhino.InputId inputId42 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n");
        node29.setInputId(inputId42);
        boolean boolean44 = node29.isSwitch();
        com.google.javascript.rhino.Node node45 = node29.cloneNode();
        jSDocInfo0.setAssociatedNode(node45);
        boolean boolean47 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(visibilityEnumList14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNull(visibility18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder22);
        org.junit.Assert.assertNotNull(markerCollection24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.hasThisType();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean10 = jSDocInfoBuilder1.recordBlockDescription("{1526667826}");
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isNE();
        boolean boolean16 = node14.isInstanceOf();
        boolean boolean17 = node14.isThrow();
        node14.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node14.getAncestors();
        java.util.Set<java.lang.String> strSet21 = node14.getDirectives();
        boolean boolean22 = node14.isNumber();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = jSDocInfoBuilder1.build(node14);
        boolean boolean24 = jSDocInfo23.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        java.lang.String str7 = jSDocInfo0.getVersion();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str10 = jSDocInfo0.getVersion();
        boolean boolean11 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        int int53 = nodeIterableList2.size();
        int int54 = nodeIterableList2.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordInterface();
        boolean boolean59 = jSDocInfoBuilder56.recordDescription("hi!");
        boolean boolean60 = jSDocInfoBuilder56.recordHiddenness();
        boolean boolean61 = jSDocInfoBuilder56.recordExpose();
        boolean boolean62 = jSDocInfoBuilder56.recordNoCompile();
        boolean boolean63 = jSDocInfoBuilder56.recordConstructor();
        jSDocInfoBuilder56.recordOriginalCommentString("OR hi!");
        int int66 = nodeIterableList2.indexOf((java.lang.Object) jSDocInfoBuilder56);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node70.siblings();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = nodeIterableList2.add(nodeIterable71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable71);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        int int17 = nodeIterableList14.size();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor18 = nodeIterableList14.listIterator();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray20 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray21 = (com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray20;
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray22 = nodeIterableList14.toArray(nodeIterableCollectionArray21);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor23 = nodeIterableList14.listIterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean28 = jSDocInfoBuilder25.recordDescription("hi!");
        boolean boolean29 = jSDocInfoBuilder25.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder25.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = null;
        boolean boolean34 = jSDocInfoBuilder25.recordReturnType(jSTypeExpression33);
        boolean boolean36 = jSDocInfoBuilder25.hasParameter("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean43 = node42.isThis();
        node39.addChildToBack(node42);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.siblings();
        node39.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean54 = node53.isThis();
        node50.addChildToBack(node53);
        node53.setOptionalArg(false);
        com.google.javascript.rhino.Node node58 = node39.srcref(node53);
        jSDocInfoBuilder25.markTypeNode(node53, 51, (int) (short) 100, 0, (int) (short) 0, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node53.getJSDocInfo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable66 = node53.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableItor23.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor18);
        org.junit.Assert.assertNotNull(immutableCollectionArray20);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray21);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray22);
        org.junit.Assert.assertNotNull(nodeIterableItor23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertNotNull(ancestorIterable66);
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        java.lang.String[] strArray57 = new java.lang.String[] { "PARAM_LIST", "java.io.IOException: OR hi!\n    OR hi!\n", "function (this:me, {1562136275}): me", "OR hi! [source_file: {298532945}]", "Node tree inequality:\nTree1:\nOR hi!\n    OR hi!\n\n\nTree2:\nASSIGN_MOD INSTANCEOF\n\n\nSubtree1: OR hi!\n    OR hi!\n\n\nSubtree2: ASSIGN_MOD INSTANCEOF\n", "[]", "{1359454508}", "function (this:me, {1272646282}): me", "function (this:me, {611559679}): me", "PARAM_LIST\n", "java.io.IOException: OR hi! [directives: []]\n", "{1270085847}", "{1359454508}", "SHNE 49\n", "{272877914}", "{775928261}", "OR hi!", "{371307473}", "{1480997056}", "[]", "GETELEM 2 [jsdoc_info: JSDocInfo]", "{1165562229}", "{764537935}", "java.io.IOException: java.io.IOException: Unknown class name", "{483323349}", "Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [empty_block: 1]\n    OR hi!\n", "{2485467}", "{1199858553}", "OR hi! [var_args_name: 1]\n", "{764537935}", "Unknown class name", "{764537935}", "{2485467}", "java.io.IOException: Unknown class name", "{764537935}", "Node tree inequality:\nTree1:\nOR hi!\n\n\nTree2:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree1: OR hi!\n\n\nSubtree2: OR hi! [empty_block: 1]\n    OR hi!\n", "{1562088166}", "{225764511}", "{1359454508}", "java.io.IOException: OR []", "OR hi! [directives: []]", "{689871749}", "{168285338}", "{694195918}", "Unknown class name", "OR hi! [source_file: OR hi!\n    OR hi!\n]\n    OR hi!\n", "{1221148348}", "java.io.IOException: Unknown class name", "function (this:me, {190244343}): me", "OR hi! [input_id: InputId: ]", "undefined", "{721844050}", "{1136398642}", "{1242212142}", "{168285338}", "{1242212142}", "{1609442801}" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean60 = strSet58.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList61 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray62 = nodeIterableList61.toArray();
        boolean boolean63 = nodeIterableList61.isEmpty();
        boolean boolean64 = nodeIterableList61.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor65 = nodeIterableList61.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList61.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList67 = nodeIterableList61.asList();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream68 = nodeIterableList61.parallelStream();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node71.siblings();
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node71.setDirectives((java.util.Set<java.lang.String>) strSet80);
        java.lang.Object[] objArray83 = strSet80.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean85 = jSDocInfo84.isExterns();
        boolean boolean86 = jSDocInfo84.hasReturnType();
        boolean boolean87 = jSDocInfo84.isOverride();
        jSDocInfo84.setLicense("hi!");
        boolean boolean90 = strSet80.contains((java.lang.Object) jSDocInfo84);
        boolean boolean91 = strSet80.isEmpty();
        int int92 = nodeIterableList61.lastIndexOf((java.lang.Object) boolean91);
        boolean boolean93 = strSet58.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList61);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterableList61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor65);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertNotNull(nodeIterableList67);
        org.junit.Assert.assertNotNull(nodeIterableStream68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        int int21 = node5.getCharno();
        java.lang.String str25 = node5.toString(true, true, true);
        int int26 = node5.getSourceOffset();
        node5.removeProp(36);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean35 = node34.isThis();
        node31.addChildToBack(node34);
        boolean boolean37 = node34.isNot();
        int int38 = node34.getLineno();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node49 = node34.srcref(node44);
        boolean boolean50 = node49.isDelProp();
        com.google.javascript.rhino.Node node51 = node49.getLastSibling();
        boolean boolean52 = node51.isFunction();
        boolean boolean53 = node51.isComma();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node51.getAncestors();
        node51.setCharno((int) (short) 100);
        com.google.javascript.rhino.Node node57 = node5.srcrefTree(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node5.getJSDocInfo();
        boolean boolean59 = node5.isString();
        boolean boolean60 = node5.isRegExp();
        boolean boolean61 = node5.isBreak();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        boolean boolean71 = node64.isVoid();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isTypeOf();
        com.google.javascript.rhino.Node node76 = node64.srcrefTree(node74);
        com.google.javascript.rhino.Node node77 = node64.getLastSibling();
        java.lang.Object obj79 = node64.getProp((int) ' ');
        boolean boolean80 = node64.isDelProp();
        node5.addChildrenToBack(node64);
        node64.addSuppression("{1269690791}");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable84 = node64.siblings();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR hi!" + "'", str25, "OR hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(nodeIterable84);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean72 = node71.isNE();
        boolean boolean73 = node71.isInstanceOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = jSDocInfoBuilder1.build(node71);
        boolean boolean76 = jSDocInfo74.hasParameter("{1562088166}");
        jSDocInfo74.addSuppression("{225764511}");
        boolean boolean80 = jSDocInfo74.hasParameter("");
        boolean boolean81 = jSDocInfo74.hasBaseType();
        boolean boolean82 = jSDocInfo74.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        boolean boolean18 = strSet11.remove((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo19.getSuppressions();
        boolean boolean21 = jSDocInfo19.isNoSideEffects();
        boolean boolean22 = jSDocInfo19.isConsistentIdGenerator();
        boolean boolean23 = strSet11.contains((java.lang.Object) jSDocInfo19);
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo19.getTemplateTypeNames();
        int int25 = jSDocInfo19.getExtendedInterfacesCount();
        java.lang.String str26 = jSDocInfo19.getBlockDescription();
        boolean boolean27 = jSDocInfo19.hasTypedefType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean8 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.addAuthor("OR hi!");
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean31 = node30.isThis();
        boolean boolean32 = strSet25.remove((java.lang.Object) boolean31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo33.getSuppressions();
        boolean boolean35 = jSDocInfo33.isNoSideEffects();
        boolean boolean36 = jSDocInfo33.isConsistentIdGenerator();
        boolean boolean37 = strSet25.contains((java.lang.Object) jSDocInfo33);
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo33.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo33.getParameterType("");
        boolean boolean41 = jSDocInfo33.isConstant();
        boolean boolean42 = jSDocInfo33.isHidden();
        boolean boolean43 = jSDocInfo33.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo33.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = jSDocInfo33.getTemplateTypeNames();
        boolean boolean46 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList45);
        boolean boolean48 = jSDocInfoBuilder1.recordDeprecationReason("function (this:me, {1476191226}): me");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable32 = jSTypeRegistry28.getTypesWithProperty("INSTANCEOF");
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.resetForTypeCheck();
        boolean boolean35 = jSTypeRegistry28.shouldTolerateUndefinedValues();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        boolean boolean22 = node17.isAdd();
        boolean boolean23 = node11.hasChild(node17);
        boolean boolean24 = node17.isDefaultCase();
        int int25 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isTypeOf();
        boolean boolean30 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = node17.copyInformationFromForTree(node28);
        java.lang.Object obj33 = null;
        node17.putProp(3, obj33);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDec();
        boolean boolean44 = node37.isBlock();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node47.siblings();
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet56);
        int int59 = strSet56.size();
        strSet56.clear();
        node37.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean62 = node37.isCase();
        com.google.javascript.rhino.Node node63 = node17.clonePropsFrom(node37);
        boolean boolean64 = node37.isNew();
        node37.putIntProp(4095, 10);
        boolean boolean68 = node37.isCase();
        boolean boolean69 = node37.isName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo70.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = jSDocInfo70.getVisibility();
        boolean boolean74 = jSDocInfo70.isOverride();
        com.google.javascript.rhino.Node node75 = jSDocInfo70.getAssociatedNode();
        boolean boolean76 = jSDocInfo70.isExpose();
        node37.setJSDocInfo(jSDocInfo70);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertNull(visibility73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean19 = jSDocInfoBuilder1.recordLends("{1332928501}");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder1.recordThisType(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("{298532945}");
        boolean boolean17 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!\n    OR hi!\n");
        boolean boolean18 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean19 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo4.getType();
        boolean boolean7 = jSDocInfo4.isImplicitCast();
        boolean boolean8 = jSDocInfo4.isExport();
        java.lang.String str9 = jSDocInfo4.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo10.getType();
        boolean boolean13 = jSDocInfo10.isImplicitCast();
        boolean boolean14 = jSDocInfo10.isExport();
        boolean boolean15 = jSDocInfo10.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo10.getReturnType();
        boolean boolean17 = jSDocInfo10.containsDeclaration();
        int int18 = jSDocInfo10.getParameterCount();
        java.lang.String str19 = jSDocInfo10.getVersion();
        jSDocInfo10.setLicense("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo22.getType();
        boolean boolean25 = jSDocInfo22.isNoTypeCheck();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo22.setAssociatedNode(node28);
        jSDocInfo22.addSuppression("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean33 = jSDocInfo32.isExterns();
        com.google.javascript.rhino.Node node34 = jSDocInfo32.getAssociatedNode();
        boolean boolean35 = jSDocInfo32.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo36.getType();
        boolean boolean39 = jSDocInfo36.isImplicitCast();
        boolean boolean40 = jSDocInfo36.isOverride();
        boolean boolean41 = jSDocInfo36.isNoSideEffects();
        boolean boolean42 = jSDocInfo36.containsDeclaration();
        java.lang.String str43 = jSDocInfo36.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isExterns();
        int int48 = jSDocInfo46.getParameterCount();
        boolean boolean49 = jSDocInfo46.isIdGenerator();
        boolean boolean50 = jSDocInfo46.isInterface();
        boolean boolean51 = jSDocInfo46.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo46.getThisType();
        java.lang.String str53 = jSDocInfo46.getLendsName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo54.getSuppressions();
        boolean boolean56 = jSDocInfo54.isNoSideEffects();
        java.lang.String str57 = jSDocInfo54.getReturnDescription();
        boolean boolean59 = jSDocInfo54.hasParameter("Not declared as a constructor");
        java.lang.String str60 = jSDocInfo54.getMeaning();
        boolean boolean61 = jSDocInfo54.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        com.google.javascript.rhino.Node node64 = jSDocInfo62.getAssociatedNode();
        boolean boolean65 = jSDocInfo62.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = jSDocInfo62.getType();
        boolean boolean68 = jSDocInfo62.hasParameter("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo69.getSuppressions();
        boolean boolean71 = jSDocInfo69.isNoSideEffects();
        java.lang.String str72 = jSDocInfo69.getReturnDescription();
        java.lang.String str73 = jSDocInfo69.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        boolean boolean76 = jSDocInfo74.hasModifies();
        int int77 = jSDocInfo74.getParameterCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection78 = jSDocInfo74.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo[] jSDocInfoArray79 = new com.google.javascript.rhino.JSDocInfo[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList80 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo4, jSDocInfo10, jSDocInfo22, jSDocInfo32, jSDocInfo36, jSDocInfo44, jSDocInfo46, jSDocInfo54, jSDocInfo62, jSDocInfo69, jSDocInfo74, jSDocInfoArray79);
        boolean boolean81 = jSDocInfo62.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo62.getType();
        boolean boolean83 = jSDocInfo62.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(nodeCollection78);
        org.junit.Assert.assertNotNull(jSDocInfoArray79);
        org.junit.Assert.assertNotNull(jSDocInfoList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.addSuppression("{1529389073}");
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!");
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean43 = jSDocInfoBuilder1.recordVisibility(visibility42);
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nPARAM_LIST\n\n\nTree2:\nOR hi! 0\n\n\nSubtree1: PARAM_LIST\n\n\nSubtree2: OR hi! 0\n", 2, 36, 47, 31);
        boolean boolean50 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean52 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean54 = jSDocInfoBuilder1.recordFileOverview("OR hi!");
        boolean boolean55 = jSDocInfoBuilder1.recordExport();
        boolean boolean56 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + visibility42 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility42.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        boolean boolean81 = jSDocInfoBuilder51.recordBlockDescription("InputId: ");
        boolean boolean82 = jSDocInfoBuilder51.recordConstructor();
        jSDocInfoBuilder51.recordOriginalCommentString("java.io.IOException: REGEXP Unknown class name 100\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        jSDocInfo0.setLicense("None");
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList0.iterator();
        java.lang.Object[] objArray12 = nodeIterableList0.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream13 = nodeIterableList0.parallelStream();
        java.lang.Object[] objArray14 = nodeIterableList0.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean16 = jSDocInfo15.isImplicitCast();
        boolean boolean17 = jSDocInfo15.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = jSDocInfo15.getBaseType();
        boolean boolean19 = nodeIterableList0.contains((java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        boolean boolean26 = jSDocInfoBuilder21.recordExpose();
        boolean boolean27 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean29 = jSDocInfoBuilder21.addReference("OR hi!");
        boolean boolean30 = nodeIterableList0.equals((java.lang.Object) "OR hi!");
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor31 = nodeIterableList0.listIterator();
        boolean boolean32 = nodeIterableList0.isEmpty();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isGetElem();
        boolean boolean37 = node35.isTry();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable38 = node35.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = nodeIterableList0.add((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(ancestorIterable38);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        boolean boolean17 = jSDocInfoBuilder1.recordNoShadow();
        jSDocInfoBuilder1.markText("{272877914}", (int) (short) 1, (int) ' ', (int) (short) 100, 49);
        boolean boolean24 = jSDocInfoBuilder1.recordExpose();
        boolean boolean26 = jSDocInfoBuilder1.hasParameter("(null|undefined|{})");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node2 = jSDocInfo0.getAssociatedNode();
        boolean boolean3 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50);
        node12.setLength((int) ' ');
        jSDocInfo0.setAssociatedNode(node12);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(visibility16);
        org.junit.Assert.assertNull(jSTypeExpression17);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isAdd();
        boolean boolean9 = node5.isExprResult();
        boolean boolean10 = node5.isThrow();
        boolean boolean11 = node5.isVarArgs();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) ' ', "hi!", 38, (int) (short) 0);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 100, node17);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean36 = node35.isThis();
        node32.addChildToBack(node35);
        boolean boolean38 = node35.isNot();
        int int39 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = node25.srcref(node35);
        int int41 = node25.getCharno();
        com.google.javascript.rhino.Node node43 = node25.getAncestor((int) (short) 1);
        com.google.javascript.rhino.Node node44 = node17.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean45 = node44.isUnscopedQualifiedName();
        boolean boolean46 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node47 = node5.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordInterface();
        boolean boolean52 = jSDocInfoBuilder50.isInterfaceRecorded();
        boolean boolean53 = jSDocInfoBuilder50.recordIdGenerator();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean57 = node56.isGetElem();
        jSDocInfoBuilder50.markTypeNode(node56, (int) '#', (int) (short) -1, (int) '4', 2, false);
        java.lang.String str64 = node56.toStringTree();
        node47.putProp(30, (java.lang.Object) str64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR hi!\n" + "'", str64, "OR hi!\n");
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean9 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        com.google.javascript.rhino.Node node30 = node15.srcref(node25);
        boolean boolean31 = node30.isDelProp();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        boolean boolean33 = node32.isFunction();
        java.lang.Object obj35 = node32.getProp((int) ' ');
        jSDocInfoBuilder1.markTypeNode(node32, 35, (int) (byte) 0, 16, 49, true);
        java.lang.String str42 = node32.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OR hi!" + "'", str42, "OR hi!");
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("hi!");
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordInterface();
        boolean boolean18 = jSDocInfoBuilder15.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.addAuthor("");
        boolean boolean23 = jSDocInfoBuilder20.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder20.recordThrowType(jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder20.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder20.markName("", staticSourceFile28, 29, 50);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        boolean boolean41 = node34.isSyntheticBlock();
        boolean boolean42 = node34.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = new com.google.javascript.rhino.JSTypeExpression(node34, "Unknown class name");
        boolean boolean46 = jSDocInfoBuilder20.recordThrowDescription(jSTypeExpression44, "?");
        boolean boolean48 = jSDocInfoBuilder15.recordThrowDescription(jSTypeExpression44, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node49 = jSTypeExpression44.getRoot();
        boolean boolean50 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression44);
        jSDocInfoBuilder1.markAnnotation("{1242212142}", 0, 46);
        boolean boolean55 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean56 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("Unknown class name");
        java.lang.String str7 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList19.asList();
        int int21 = nodeIterableList20.size();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor22 = nodeIterableList20.iterator();
        int int23 = nodeIterableList20.size();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray25 = nodeIterableList24.toArray();
        int int27 = nodeIterableList24.lastIndexOf((java.lang.Object) (short) 0);
        boolean boolean29 = nodeIterableList24.contains((java.lang.Object) 1.0d);
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor30 = nodeIterableList24.listIterator();
        boolean boolean31 = nodeIterableList24.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("{298532945}");
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        boolean boolean42 = jSTypeRegistry37.canPropertyBeDefined(jSType40, "Unknown class name");
        jSTypeRegistry37.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry37.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        jSTypeRegistry48.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode52 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry51.setResolveMode(resolveMode52);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry51.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = objectType55.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot58 = objectType55.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType55);
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode62 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry61.setResolveMode(resolveMode62);
        com.google.javascript.rhino.jstype.ObjectType objectType64 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType65 = jSTypeRegistry61.createObjectType(objectType64);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType66 = objectType65.toMaybeEnumElementType();
        boolean boolean67 = jSTypeRegistry37.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType55, objectType65);
        boolean boolean69 = jSTypeRegistry33.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType55, "JSDocInfo");
        jSTypeRegistry33.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry33.getType("OR hi!\n");
        jSTypeRegistry33.forwardDeclareType("Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo75.getType();
        boolean boolean78 = jSDocInfo75.isImplicitCast();
        boolean boolean79 = jSDocInfo75.isExport();
        java.lang.String str80 = jSDocInfo75.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo75.getType();
        java.lang.String str82 = jSDocInfo75.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList83 = jSDocInfo75.getTemplateTypeNames();
        jSTypeRegistry33.setTemplateTypeNames((java.util.List<java.lang.String>) strList83);
        boolean boolean85 = nodeIterableList24.equals((java.lang.Object) jSTypeRegistry33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = nodeIterableList20.addAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeIterableItor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertTrue("'" + resolveMode52 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode52.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(objectType56);
        org.junit.Assert.assertNull(jSTypeStaticSlot58);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertTrue("'" + resolveMode62 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode62.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType65);
        org.junit.Assert.assertNull(enumElementType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "JSDocInfo" + "'", str80, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        boolean boolean3 = nodeIterableList0.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor4 = nodeIterableList0.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.recordInterface();
        boolean boolean8 = jSDocInfoBuilder6.recordPreserveTry();
        boolean boolean9 = nodeIterableList0.equals((java.lang.Object) boolean8);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList0.asList();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = nodeIterableList0.reverse();
        int int12 = nodeIterableList11.size();
        int int13 = nodeIterableList11.size();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream14 = nodeIterableList11.stream();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeIterableStream14);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        boolean boolean15 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordInterface();
        boolean boolean21 = jSDocInfoBuilder18.recordDescription("hi!");
        boolean boolean22 = jSDocInfoBuilder18.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder18.recordThrowType(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder18.recordConstancy();
        boolean boolean26 = jSDocInfoBuilder18.recordOverride();
        boolean boolean28 = jSDocInfoBuilder18.recordMeaning("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.recordInterface();
        boolean boolean33 = jSDocInfoBuilder30.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordDefineType(jSTypeExpression34);
        boolean boolean37 = jSDocInfoBuilder30.recordMeaning("hi!");
        boolean boolean39 = jSDocInfoBuilder30.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder41.addAuthor("");
        boolean boolean44 = jSDocInfoBuilder41.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = null;
        boolean boolean46 = jSDocInfoBuilder41.recordThrowType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder41.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder41.markName("", staticSourceFile49, 29, 50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node55.isDebugger();
        boolean boolean62 = node55.isSyntheticBlock();
        boolean boolean63 = node55.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = new com.google.javascript.rhino.JSTypeExpression(node55, "Unknown class name");
        boolean boolean67 = jSDocInfoBuilder41.recordThrowDescription(jSTypeExpression65, "?");
        boolean boolean68 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression65);
        boolean boolean69 = jSDocInfoBuilder18.recordType(jSTypeExpression65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression65);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean77 = node76.isThis();
        node73.addChildToBack(node76);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node73.siblings();
        java.lang.String[] strArray81 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet82);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray86 = nodeIterableList85.toArray();
        boolean boolean87 = strSet82.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList85);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList88 = com.google.common.collect.ImmutableList.of();
        boolean boolean89 = strSet82.contains((java.lang.Object) nodeIterableList88);
        java.util.Iterator<java.lang.String> strItor90 = strSet82.iterator();
        java.lang.String str91 = strItor90.next();
        boolean boolean92 = jSTypeExpression70.equals((java.lang.Object) str91);
        boolean boolean93 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression70);
        boolean boolean94 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(nodeIterableList85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(nodeIterableList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.util.HashSet[] hashSetArray18 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray19 = (java.util.HashSet<java.lang.String>[]) hashSetArray18;
        strSetArray19[0] = strSet11;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList22 = com.google.common.collect.ImmutableList.copyOf(strSetArray19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.hasReturnType();
        boolean boolean36 = jSDocInfo33.isOverride();
        jSDocInfo33.setLicense("hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node59 = node44.srcref(node54);
        boolean boolean60 = node59.isDelProp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        node66.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node66.setStaticSourceFile(staticSourceFile71);
        com.google.common.collect.ImmutableList<java.lang.Object> objList73 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray19, (java.lang.Object) node25, (java.lang.Object) "hi!", (java.lang.Object) boolean60, (java.lang.Object) node66);
        boolean boolean74 = node66.isInstanceOf();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(35, 37, 39);
        com.google.javascript.rhino.Node node79 = node66.srcrefTree(node78);
        java.lang.String str80 = node78.getSourceFileName();
        java.lang.Object obj82 = node78.getProp(40960);
        boolean boolean83 = node78.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hashSetArray18);
        org.junit.Assert.assertNotNull(strSetArray19);
        org.junit.Assert.assertNotNull(strSetList22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression7);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordInterface();
        boolean boolean13 = jSDocInfoBuilder10.recordDescription("hi!");
        boolean boolean14 = jSDocInfoBuilder10.recordHiddenness();
        boolean boolean15 = jSDocInfoBuilder10.recordExpose();
        boolean boolean16 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordParameter("OR hi! [directives: []]\n", jSTypeExpression18);
        jSDocInfoBuilder10.markName("None", 39, 46);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.addAuthor("");
        boolean boolean28 = jSDocInfoBuilder25.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder25.recordThrowType(jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder25.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder41.addAuthor("");
        boolean boolean44 = jSDocInfoBuilder41.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = null;
        boolean boolean46 = jSDocInfoBuilder41.recordThrowType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder41.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder41.markName("", staticSourceFile49, 29, 50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean59 = node58.isThis();
        node55.addChildToBack(node58);
        boolean boolean61 = node55.isDebugger();
        boolean boolean62 = node55.isSyntheticBlock();
        boolean boolean63 = node55.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = new com.google.javascript.rhino.JSTypeExpression(node55, "Unknown class name");
        boolean boolean67 = jSDocInfoBuilder41.recordThrowDescription(jSTypeExpression65, "?");
        boolean boolean68 = jSDocInfoBuilder33.recordExtendedInterface(jSTypeExpression65);
        boolean boolean69 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression65);
        boolean boolean70 = jSDocInfoBuilder10.recordThisType(jSTypeExpression65);
        boolean boolean71 = jSDocInfoBuilder1.recordType(jSTypeExpression65);
        boolean boolean72 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean73 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo74.getType();
        boolean boolean77 = jSDocInfo74.isNoTypeCheck();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((int) ' ', "OR hi!\n");
        jSDocInfo74.setAssociatedNode(node80);
        int int82 = jSDocInfo74.getImplementedInterfaceCount();
        java.lang.String str83 = jSDocInfo74.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList84 = jSDocInfo74.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo74.getType();
        int int86 = jSDocInfo74.getExtendedInterfacesCount();
        java.lang.String str87 = jSDocInfo74.getDeprecationReason();
        boolean boolean88 = jSDocInfo74.hasBaseType();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo74.getParameterNames();
        boolean boolean90 = jSDocInfoBuilder1.recordModifies(strSet89);
        boolean boolean91 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(jSTypeExpressionList84);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        boolean boolean69 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isExterns();
        com.google.javascript.rhino.Node node72 = jSDocInfo70.getAssociatedNode();
        boolean boolean73 = jSDocInfo70.hasThisType();
        boolean boolean74 = jSDocInfo70.isOverride();
        java.lang.String str75 = jSDocInfo70.getMeaning();
        boolean boolean76 = jSDocInfo70.isExterns();
        boolean boolean77 = jSDocInfo70.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo70.getTemplateTypeNames();
        boolean boolean79 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList78);
        boolean boolean80 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean87 = node86.isThis();
        node83.addChildToBack(node86);
        boolean boolean89 = node86.isNot();
        int int90 = node86.getLineno();
        boolean boolean91 = node86.isCatch();
        boolean boolean93 = node86.getBooleanProp((int) '#');
        boolean boolean94 = node86.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = jSDocInfoBuilder1.build(node86);
        boolean boolean96 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSDocInfo95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        boolean boolean2 = nodeIterableList0.isEmpty();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder6 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder8 = visibilityEnumBuilder6.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo9.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo9.getVisibility();
        boolean boolean13 = jSDocInfo9.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo9.setVisibility(visibility14);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray16 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility14 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder8.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray16);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder18 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder20 = visibilityEnumBuilder18.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean22 = jSDocInfo21.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo21.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo21.getVisibility();
        boolean boolean25 = jSDocInfo21.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo21.setVisibility(visibility26);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray28 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility26 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = visibilityEnumBuilder20.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder30 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder31 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[] visibilityEnumArray32 = nodeIterableList0.toArray((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node38.isAdd();
        boolean boolean42 = node38.isExprResult();
        boolean boolean43 = node38.isThrow();
        boolean boolean44 = nodeIterableList0.contains((java.lang.Object) boolean43);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList45 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList46 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray47 = nodeIterableList46.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList48 = nodeIterableList46.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray55 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition49, typePosition50, typePosition51, typePosition52, typePosition53, typePosition54 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray56 = nodeIterableList46.toArray(typePositionArray55);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray57 = nodeIterableList0.toArray((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) typePositionArray55);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor58 = nodeIterableList0.iterator();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor59 = nodeIterableList0.iterator();
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] {};
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList61 = com.google.common.collect.ImmutableList.of(typeArray60);
        java.lang.reflect.Type[] typeArray62 = nodeIterableList0.toArray(typeArray60);
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList0.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray16);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(visibility24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray28);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder29);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder30);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder31);
        org.junit.Assert.assertNotNull(visibilityEnumArray32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterableList45);
        org.junit.Assert.assertNotNull(nodeIterableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList48);
        org.junit.Assert.assertNotNull(typePositionArray55);
        org.junit.Assert.assertNotNull(typePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray57);
        org.junit.Assert.assertNotNull(nodeIterableItor58);
        org.junit.Assert.assertNotNull(nodeIterableItor59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeList61);
        org.junit.Assert.assertNotNull(typeArray62);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean8 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean9 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.addAuthor("");
        boolean boolean14 = jSDocInfoBuilder11.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder11.recordReturnType(jSTypeExpression15);
        jSDocInfoBuilder11.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean22 = jSDocInfoBuilder11.recordDeprecationReason("hi!");
        boolean boolean23 = jSDocInfoBuilder11.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordInterface();
        boolean boolean28 = jSDocInfoBuilder25.recordDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean58 = jSDocInfoBuilder25.recordThrowDescription(jSTypeExpression54, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node59 = jSTypeExpression54.getRoot();
        boolean boolean60 = jSDocInfoBuilder11.recordEnumParameterType(jSTypeExpression54);
        boolean boolean61 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression54);
        boolean boolean63 = jSDocInfoBuilder1.recordDescription("{2075923167}");
        boolean boolean64 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean66 = jSDocInfoBuilder1.addReference("{1145417908}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("java.io.IOException", (int) (short) 100, 54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordInterface();
        boolean boolean15 = jSDocInfoBuilder12.recordDescription("hi!");
        boolean boolean16 = jSDocInfoBuilder12.recordHiddenness();
        boolean boolean17 = jSDocInfoBuilder12.recordExpose();
        boolean boolean18 = jSDocInfoBuilder12.recordIdGenerator();
        boolean boolean20 = jSDocInfoBuilder12.addReference("OR hi!");
        boolean boolean22 = jSDocInfoBuilder12.recordLends("{424067794}");
        boolean boolean24 = jSDocInfoBuilder12.recordDeprecationReason("Not declared as a constructor");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordInterface();
        boolean boolean29 = jSDocInfoBuilder26.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression30);
        boolean boolean33 = jSDocInfoBuilder26.recordMeaning("hi!");
        boolean boolean35 = jSDocInfoBuilder26.recordVersion("OR hi!\n    OR hi!\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.addAuthor("");
        boolean boolean40 = jSDocInfoBuilder37.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = null;
        boolean boolean42 = jSDocInfoBuilder37.recordThrowType(jSTypeExpression41);
        boolean boolean43 = jSDocInfoBuilder37.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        jSDocInfoBuilder37.markName("", staticSourceFile45, 29, 50);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node51.isDebugger();
        boolean boolean58 = node51.isSyntheticBlock();
        boolean boolean59 = node51.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node51, "Unknown class name");
        boolean boolean63 = jSDocInfoBuilder37.recordThrowDescription(jSTypeExpression61, "?");
        boolean boolean64 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression61);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression61);
        boolean boolean66 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression61);
        boolean boolean67 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression61);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("hi!");
        boolean boolean5 = jSDocInfo0.isHidden();
        java.lang.String str7 = jSDocInfo0.getDescriptionForParameter("?");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean8 = node7.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        boolean boolean19 = node11.isOptionalArg();
        int int20 = node7.getIndexOfChild(node11);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node7, "{441018204}");
        jSDocInfo0.setAssociatedNode(node7);
        jSDocInfo0.setDeprecated(false);
        java.lang.String str26 = jSDocInfo0.getFileOverview();
        boolean boolean27 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray29 = strSet28.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList30 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray31 = nodeIterableList30.toArray();
        boolean boolean32 = nodeIterableList30.isEmpty();
        boolean boolean33 = nodeIterableList30.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor34 = nodeIterableList30.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor35 = nodeIterableList30.listIterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList30.asList();
        java.lang.String str37 = nodeIterableList36.toString();
        boolean boolean38 = strSet28.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor34);
        org.junit.Assert.assertNotNull(nodeIterableItor35);
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode9 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry8.setResolveMode(resolveMode9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isInstanceOf();
        boolean boolean16 = node13.isThrow();
        node13.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable19 = node13.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode22 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry21.setResolveMode(resolveMode22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        boolean boolean26 = jSTypeRegistry21.canPropertyBeDefined(jSType24, "Unknown class name");
        jSTypeRegistry21.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry21.createAnonymousObjectType();
        objectType29.clearResolved();
        node13.setJSType((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean38 = node37.isThis();
        node34.addChildToBack(node37);
        boolean boolean40 = node34.isDebugger();
        com.google.javascript.rhino.Node node41 = node34.getFirstChild();
        boolean boolean42 = node34.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType43 = jSTypeRegistry8.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType29, node34);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode46 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry45.setResolveMode(resolveMode46);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isNE();
        boolean boolean52 = node50.isInstanceOf();
        boolean boolean53 = node50.isThrow();
        node50.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node50.getAncestors();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        boolean boolean63 = jSTypeRegistry58.canPropertyBeDefined(jSType61, "Unknown class name");
        jSTypeRegistry58.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry58.createAnonymousObjectType();
        objectType66.clearResolved();
        node50.setJSType((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean75 = node74.isThis();
        node71.addChildToBack(node74);
        boolean boolean77 = node71.isDebugger();
        com.google.javascript.rhino.Node node78 = node71.getFirstChild();
        boolean boolean79 = node71.isNot();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSTypeRegistry45.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType66, node71);
        boolean boolean81 = objectType66.isArrayType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot83 = objectType66.getSlot("Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType84 = jSTypeRegistry1.createFunctionTypeWithNewThisType(functionType43, objectType66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = jSDocInfo85.getType();
        boolean boolean88 = jSDocInfo85.isImplicitCast();
        boolean boolean89 = jSDocInfo85.isOverride();
        boolean boolean90 = jSDocInfo85.isNoSideEffects();
        boolean boolean92 = jSDocInfo85.hasParameterType("OR hi!\n    OR hi!\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList93 = jSDocInfo85.getTemplateTypeNames();
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList93);
        jSTypeRegistry1.identifyNonNullableName("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.ObjectType objectType97 = jSTypeRegistry1.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative98 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType99 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode9 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode9.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ancestorIterable19);
        org.junit.Assert.assertTrue("'" + resolveMode22 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode22.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(functionType43);
        org.junit.Assert.assertTrue("'" + resolveMode46 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode46.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable56);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot83);
        org.junit.Assert.assertNotNull(functionType84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSTypeExpression87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(objectType97);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = null;
        boolean boolean13 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression12);
        boolean boolean14 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean16 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder1.hasParameter("{424067794}");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node25.isNot();
        int int29 = node25.getLineno();
        boolean boolean30 = node25.isAdd();
        com.google.javascript.rhino.Node node31 = node25.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node31.setJSType(jSType32);
        boolean boolean34 = node31.isString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node37.siblings();
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList49 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray50 = nodeIterableList49.toArray();
        boolean boolean51 = strSet46.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList49);
        boolean boolean52 = strSet46.isEmpty();
        node31.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean54 = node31.isObjectLit();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node31, "Named type with empty name component");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean63 = node62.isThis();
        node59.addChildToBack(node62);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node59.siblings();
        java.lang.String[] strArray67 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet68);
        node59.putBooleanProp(0, false);
        node59.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean76 = node59.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = node59.getStaticSourceFile();
        boolean boolean78 = staticSourceFile77.isExtern();
        int int80 = staticSourceFile77.getLineOffset(16);
        int int82 = staticSourceFile77.getLineOffset(42);
        node31.setStaticSourceFile(staticSourceFile77);
        jSDocInfoBuilder1.markName("{...}", staticSourceFile77, 35, (int) (short) -1);
        boolean boolean87 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean88 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean89 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(nodeIterableList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable65);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(staticSourceFile77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-2147483648) + "'", int80 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-2147483648) + "'", int82 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        int int2 = jSDocInfo0.getParameterCount();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("OR hi! [source_file: {298532945}]");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        boolean boolean8 = jSDocInfoBuilder1.recordLends("OR hi!\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder1.addAuthor("function (this:me, {2000841007}): me");
        boolean boolean14 = jSDocInfoBuilder1.recordPreserveTry();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean21 = node20.isThis();
        node17.addChildToBack(node20);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node17.siblings();
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder30.recordInterface();
        boolean boolean33 = jSDocInfoBuilder30.recordDescription("hi!");
        boolean boolean34 = jSDocInfoBuilder30.recordHiddenness();
        boolean boolean35 = strSet26.remove((java.lang.Object) jSDocInfoBuilder30);
        boolean boolean36 = jSDocInfoBuilder30.recordPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder30.recordExtendedInterface(jSTypeExpression37);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder40.addAuthor("");
        boolean boolean43 = jSDocInfoBuilder40.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder40.recordThrowType(jSTypeExpression44);
        boolean boolean46 = jSDocInfoBuilder40.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.addAuthor("");
        boolean boolean51 = jSDocInfoBuilder48.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder48.recordThrowType(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder48.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder48.markName("", staticSourceFile56, 29, 50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean66 = node65.isThis();
        node62.addChildToBack(node65);
        boolean boolean68 = node62.isDebugger();
        boolean boolean69 = node62.isSyntheticBlock();
        boolean boolean70 = node62.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node62, "Unknown class name");
        boolean boolean74 = jSDocInfoBuilder48.recordThrowDescription(jSTypeExpression72, "?");
        boolean boolean75 = jSDocInfoBuilder40.recordExtendedInterface(jSTypeExpression72);
        boolean boolean76 = jSDocInfoBuilder30.recordImplementedInterface(jSTypeExpression72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression72);
        boolean boolean78 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression77);
        boolean boolean80 = jSDocInfoBuilder1.recordFileOverview("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.lang.String str3 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getMeaning();
        jSDocInfo0.setLicense("OR hi! [directives: []]\n");
        boolean boolean9 = jSDocInfo0.isInterface();
        boolean boolean11 = jSDocInfo0.hasParameterType("Not declared as a constructor");
        boolean boolean12 = jSDocInfo0.isExterns();
        boolean boolean13 = jSDocInfo0.isConstructor();
        boolean boolean14 = jSDocInfo0.isDefine();
        boolean boolean15 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean5 = jSDocInfoBuilder1.recordDeprecationReason("OR hi!\n");
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("Unknown class name", "Node tree inequality:\nTree1:\nEQ function (this:me, {726862509}): me\n\n\nTree2:\nOR hi! 2\n    OR hi! 2\n\n\nSubtree1: EQ function (this:me, {726862509}): me\n\n\nSubtree2: OR hi! 2\n    OR hi! 2\n");
        boolean boolean12 = jSDocInfoBuilder1.recordParameterDescription("{1298388198}", "{1322965755}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isExpose();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getReferences();
        java.lang.String str13 = jSDocInfo0.toString();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        boolean boolean4 = jSDocInfo0.hasParameter("OR hi!\n    OR hi!\n");
        java.lang.String str5 = jSDocInfo0.getVersion();
        jSDocInfo0.setLicense("InputId: ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str13 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "InputId: " + "'", str13, "InputId: ");
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("{764537935}");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(markerCollection9);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isInterface();
        boolean boolean5 = jSDocInfo0.hasFileOverview();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        boolean boolean8 = jSDocInfo0.hasType();
        java.lang.String str9 = jSDocInfo0.toString();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.lang.String str11 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        node2.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean23 = node22.isThis();
        node19.addChildToBack(node22);
        boolean boolean25 = node22.isNot();
        int int26 = node22.getLineno();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        boolean boolean35 = node32.isNot();
        int int36 = node32.getLineno();
        com.google.javascript.rhino.Node node37 = node22.srcref(node32);
        boolean boolean38 = node37.isDelProp();
        com.google.javascript.rhino.Node node39 = node37.getLastSibling();
        java.lang.String str40 = node39.toStringTree();
        boolean boolean41 = node2.isEquivalentTo(node39);
        boolean boolean42 = node39.isSyntheticBlock();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(40);
        boolean boolean45 = node44.isReturn();
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("");
        java.lang.String str48 = inputId47.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter49);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode51 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry50.setResolveMode(resolveMode51);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry50.createObjectType(objectType53);
        boolean boolean55 = objectType54.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode58 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry57.setResolveMode(resolveMode58);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry57.createObjectType(objectType60);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = objectType61.toObjectType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair63 = objectType54.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType) objectType61);
        com.google.javascript.rhino.jstype.JSType jSType64 = objectType54.collapseUnion();
        boolean boolean65 = inputId47.equals((java.lang.Object) objectType54);
        node44.setInputId(inputId47);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean70 = node69.isAnd();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node74.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo76.getSuppressions();
        boolean boolean78 = jSDocInfo76.isNoSideEffects();
        java.lang.String str79 = jSDocInfo76.getReturnDescription();
        boolean boolean81 = jSDocInfo76.hasParameter("Not declared as a constructor");
        java.lang.String str82 = jSDocInfo76.getMeaning();
        boolean boolean83 = jSDocInfo76.isJavaDispatch();
        node74.setJSDocInfo(jSDocInfo76);
        boolean boolean85 = node69.isEquivalentToTyped(node74);
        java.lang.String str86 = node74.getQualifiedName();
        boolean boolean87 = node74.isComma();
        java.lang.String str88 = node74.toString();
        boolean boolean89 = inputId47.equals((java.lang.Object) str88);
        node39.setInputId(inputId47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable91 = node39.children();
        boolean boolean92 = node39.isTypeOf();
        com.google.javascript.rhino.Node node95 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean96 = node95.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node97 = node39.removeChildAfter(node95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR hi!\n" + "'", str40, "OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "InputId: " + "'", str48, "InputId: ");
        org.junit.Assert.assertTrue("'" + resolveMode51 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode51.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + resolveMode58 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode58.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(typePair63);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GETELEM 2 [jsdoc_info: JSDocInfo]" + "'", str88, "GETELEM 2 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterable91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean5 = jSDocInfoBuilder1.addReference("InputId: ");
        boolean boolean7 = jSDocInfoBuilder1.recordBlockDescription("{298532945}");
        boolean boolean8 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("None", 5, 0);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        jSDocInfoBuilder15.markName("", staticSourceFile23, 29, 50);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder42.recordInterface();
        boolean boolean45 = jSDocInfoBuilder42.recordDescription("hi!");
        boolean boolean46 = jSDocInfoBuilder42.recordHiddenness();
        boolean boolean47 = strSet38.remove((java.lang.Object) jSDocInfoBuilder42);
        boolean boolean48 = jSDocInfoBuilder42.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.addAuthor("");
        boolean boolean53 = jSDocInfoBuilder50.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = null;
        boolean boolean55 = jSDocInfoBuilder50.recordThrowType(jSTypeExpression54);
        boolean boolean56 = jSDocInfoBuilder50.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        jSDocInfoBuilder50.markName("", staticSourceFile58, 29, 50);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean68 = node67.isThis();
        node64.addChildToBack(node67);
        boolean boolean70 = node64.isDebugger();
        boolean boolean71 = node64.isSyntheticBlock();
        boolean boolean72 = node64.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = new com.google.javascript.rhino.JSTypeExpression(node64, "Unknown class name");
        boolean boolean76 = jSDocInfoBuilder50.recordThrowDescription(jSTypeExpression74, "?");
        boolean boolean77 = jSDocInfoBuilder42.recordThrowType(jSTypeExpression74);
        boolean boolean78 = jSDocInfoBuilder15.recordEnumParameterType(jSTypeExpression74);
        boolean boolean79 = jSTypeExpression74.isVarArgs();
        boolean boolean81 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression74, "OR hi! [source_file: ]\n    OR hi!\n");
        boolean boolean83 = jSDocInfoBuilder1.recordFileOverview("{}");
        boolean boolean84 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean85 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean86 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean14 = jSDocInfoBuilder1.recordNoShadow();
        jSDocInfoBuilder1.recordOriginalCommentString("OR hi! [source_file: OR hi!\n    OR hi!\n]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = null;
        boolean boolean11 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression10);
        jSDocInfoBuilder1.markName("OR hi!\n    OR hi!\n", 51, 3);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression16);
        boolean boolean20 = jSDocInfoBuilder1.recordParameterDescription("{1263143819}", "{38818022}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        java.lang.String str13 = jSDocInfo0.getLicense();
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression2);
        boolean boolean6 = jSDocInfoBuilder1.recordParameterDescription("Not declared as a constructor", "java.io.IOException: OR hi!\n    OR hi!\n");
        boolean boolean9 = jSDocInfoBuilder1.recordParameterDescription("{13133096}", "{}");
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("{1761870988}", (int) (short) 100, (int) '4', 43, (int) (short) 1);
        boolean boolean18 = jSDocInfoBuilder1.recordDeprecationReason("{2096407833}");
        boolean boolean19 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean6 = jSDocInfoBuilder1.recordVisibility(visibility5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean13 = node12.isThis();
        node9.addChildToBack(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node9.siblings();
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordInterface();
        boolean boolean25 = jSDocInfoBuilder22.recordDescription("hi!");
        boolean boolean26 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean27 = strSet18.remove((java.lang.Object) jSDocInfoBuilder22);
        boolean boolean28 = jSDocInfoBuilder22.recordPreserveTry();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.addAuthor("");
        boolean boolean33 = jSDocInfoBuilder30.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = null;
        boolean boolean35 = jSDocInfoBuilder30.recordThrowType(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder30.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = null;
        jSDocInfoBuilder30.markName("", staticSourceFile38, 29, 50);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        boolean boolean50 = node44.isDebugger();
        boolean boolean51 = node44.isSyntheticBlock();
        boolean boolean52 = node44.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node44, "Unknown class name");
        boolean boolean56 = jSDocInfoBuilder30.recordThrowDescription(jSTypeExpression54, "?");
        boolean boolean57 = jSDocInfoBuilder22.recordThrowType(jSTypeExpression54);
        boolean boolean58 = jSDocInfoBuilder1.recordThisType(jSTypeExpression54);
        jSDocInfoBuilder1.recordOriginalCommentString("{2076672844}");
        boolean boolean62 = jSDocInfoBuilder1.addAuthor("java.io.IOException");
        boolean boolean63 = jSDocInfoBuilder1.recordExport();
        boolean boolean64 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean66 = jSDocInfoBuilder1.recordLends("OR hi! [source_file: OR hi!\n    OR hi!\n]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.recordInterface();
        boolean boolean12 = jSDocInfoBuilder9.recordDescription("hi!");
        boolean boolean13 = jSDocInfoBuilder9.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder9.recordThrowType(jSTypeExpression14);
        boolean boolean16 = jSDocInfoBuilder9.recordConstancy();
        boolean boolean17 = jSDocInfoBuilder9.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordInterface();
        boolean boolean21 = jSDocInfoBuilder19.isInterfaceRecorded();
        boolean boolean22 = jSDocInfoBuilder19.recordImplicitCast();
        boolean boolean24 = jSDocInfoBuilder19.recordDescription("Unknown class name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder19.recordThrowType(jSTypeExpression25);
        boolean boolean27 = jSDocInfoBuilder19.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder29.recordDefineType(jSTypeExpression30);
        jSDocInfoBuilder29.markAnnotation("None", 48, 51);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean42 = node41.isThis();
        node38.addChildToBack(node41);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node38.siblings();
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.recordInterface();
        boolean boolean54 = jSDocInfoBuilder51.recordDescription("hi!");
        boolean boolean55 = jSDocInfoBuilder51.recordHiddenness();
        boolean boolean56 = strSet47.remove((java.lang.Object) jSDocInfoBuilder51);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = null;
        boolean boolean58 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression57);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.recordInterface();
        boolean boolean63 = jSDocInfoBuilder60.recordDescription("hi!");
        boolean boolean64 = jSDocInfoBuilder60.recordHiddenness();
        boolean boolean65 = jSDocInfoBuilder60.recordExpose();
        boolean boolean66 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean68 = jSDocInfoBuilder60.addAuthor("Unknown class name");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean73 = jSDocInfoBuilder70.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = null;
        boolean boolean75 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression74);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder70.recordThisType(jSTypeExpression76);
        boolean boolean78 = jSDocInfoBuilder70.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList79 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder9, jSDocInfoBuilder19, jSDocInfoBuilder29, jSDocInfoBuilder51, jSDocInfoBuilder60, jSDocInfoBuilder70);
        jSDocInfoBuilder60.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 100.0\n\n\nTree2:\nIN 10\n    OR hi!\n        OR hi!\n\n\nSubtree1: NUMBER 100.0\n\n\nSubtree2: IN 10\n    OR hi!\n        OR hi!\n");
        boolean boolean83 = jSDocInfoBuilder60.recordFileOverview("{558277069}");
        boolean boolean85 = jSDocInfoBuilder60.recordBlockDescription("function (this:me, {897704133}): me");
        boolean boolean87 = jSDocInfoBuilder60.recordMeaning("{1095745650}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.lang.Object[] objArray18 = nodeIterableList14.toArray();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean26 = node25.isThis();
        node22.addChildToBack(node25);
        boolean boolean28 = node22.isDebugger();
        boolean boolean29 = node22.isAssign();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(51, node22, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node32.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator34 = ancestorIterable33.spliterator();
        int int35 = nodeIterableList14.lastIndexOf((java.lang.Object) ancestorIterable33);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList14.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.isExterns();
        int int39 = jSDocInfo37.getParameterCount();
        boolean boolean40 = jSDocInfo37.isIdGenerator();
        boolean boolean41 = jSDocInfo37.isInterface();
        boolean boolean42 = jSDocInfo37.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo37.getThrownTypes();
        java.lang.String str44 = jSDocInfo37.getLendsName();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo37.getParameterNames();
        boolean boolean46 = nodeIterableList14.equals((java.lang.Object) strSet45);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder2 = visibilityEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility1);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder3 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder5 = visibilityEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo6.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo6.getVisibility();
        boolean boolean10 = jSDocInfo6.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo6.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray13 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility11 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder14 = visibilityEnumBuilder5.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray13);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder15 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder17 = visibilityEnumBuilder15.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean19 = jSDocInfo18.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo18.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = jSDocInfo18.getVisibility();
        boolean boolean22 = jSDocInfo18.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo18.setVisibility(visibility23);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray25 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility23 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder26 = visibilityEnumBuilder17.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder27 = visibilityEnumBuilder14.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder28 = visibilityEnumBuilder2.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray25);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder29 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList30 = visibilityEnumBuilder29.build();
        com.google.common.collect.ImmutableCollection<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumCollection31 = visibilityEnumBuilder29.build();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean35 = jSDocInfoBuilder33.recordVisibility(visibility34);
        com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder36 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility34);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility41 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean42 = jSDocInfoBuilder40.recordVisibility(visibility41);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder43 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder45 = visibilityEnumBuilder43.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility44);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder46 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility47 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder48 = visibilityEnumBuilder46.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility47);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray49 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility37, visibility38, visibility41, visibility44, visibility47 };
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList50 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder51 = visibilityEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder52 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder54 = visibilityEnumBuilder52.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility53);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList55 = visibilityEnumBuilder54.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList57 = visibilityEnumBuilder56.build();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder58 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder60 = visibilityEnumBuilder58.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean62 = jSDocInfo61.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = jSDocInfo61.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = jSDocInfo61.getVisibility();
        boolean boolean65 = jSDocInfo61.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo61.setVisibility(visibility66);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray68 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility66 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder69 = visibilityEnumBuilder60.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray68);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder70 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder72 = visibilityEnumBuilder70.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo73.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = jSDocInfo73.getVisibility();
        boolean boolean77 = jSDocInfo73.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo73.setVisibility(visibility78);
        com.google.javascript.rhino.JSDocInfo.Visibility[] visibilityArray80 = new com.google.javascript.rhino.JSDocInfo.Visibility[] { visibility78 };
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder81 = visibilityEnumBuilder72.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray80);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder82 = visibilityEnumBuilder69.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>[]) visibilityArray80);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList83 = visibilityEnumBuilder69.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>>> visibilityEnumBuilderList84 = com.google.common.collect.ImmutableList.of(visibilityEnumBuilder29, visibilityEnumBuilder54, visibilityEnumBuilder56, visibilityEnumBuilder69);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder86 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        boolean boolean88 = jSDocInfoBuilder86.recordVisibility(visibility87);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder89 = visibilityEnumBuilder54.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility87);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder91 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean92 = jSDocInfoBuilder91.recordInterface();
        boolean boolean93 = jSDocInfoBuilder91.isInterfaceRecorded();
        boolean boolean94 = jSDocInfoBuilder91.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility95 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean96 = jSDocInfoBuilder91.recordVisibility(visibility95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder97 = visibilityEnumBuilder89.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility95);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumBuilder98 = visibilityEnumBuilder28.add((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility95);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList99 = visibilityEnumBuilder98.build();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder2);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray13);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(visibility21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray25);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder26);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder27);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder28);
        org.junit.Assert.assertNotNull(visibilityEnumList30);
        org.junit.Assert.assertNotNull(visibilityEnumCollection31);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder36);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + visibility41 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility41.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder45);
        org.junit.Assert.assertTrue("'" + visibility47 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility47.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder48);
        org.junit.Assert.assertNotNull(visibilityArray49);
        org.junit.Assert.assertNotNull(visibilityEnumList50);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder51);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder54);
        org.junit.Assert.assertNotNull(visibilityEnumList55);
        org.junit.Assert.assertNotNull(visibilityEnumList57);
        org.junit.Assert.assertTrue("'" + visibility59 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility59.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSTypeExpression63);
        org.junit.Assert.assertNull(visibility64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray68);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder69);
        org.junit.Assert.assertTrue("'" + visibility71 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility71.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(visibilityEnumBuilder72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(visibility76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(visibilityArray80);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder81);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder82);
        org.junit.Assert.assertNotNull(visibilityEnumList83);
        org.junit.Assert.assertNotNull(visibilityEnumBuilderList84);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + visibility95 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility95.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder97);
        org.junit.Assert.assertNotNull(visibilityEnumBuilder98);
        org.junit.Assert.assertNotNull(visibilityEnumList99);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("{13133096}");
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node5.isString();
        boolean boolean22 = node5.isTry();
        boolean boolean23 = node5.isHook();
        boolean boolean24 = node5.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isExterns();
        com.google.javascript.rhino.Node node27 = jSDocInfo25.getAssociatedNode();
        boolean boolean28 = jSDocInfo25.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo25.getType();
        node5.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo25.getThisType();
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo25.getReferences();
        java.lang.String str33 = jSDocInfo25.getMeaning();
        boolean boolean34 = jSDocInfo25.isExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isTypeOf();
        jSDocInfo0.setAssociatedNode(node5);
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        int int13 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean14 = jSDocInfo0.hasModifies();
        boolean boolean15 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.isPopulated();
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("OR hi! [directives: []]\n");
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("OR hi! [directives: []]\n");
        boolean boolean14 = jSDocInfoBuilder1.recordHiddenness();
        jSDocInfoBuilder1.markAnnotation("[]", 0, 5);
        boolean boolean19 = jSDocInfoBuilder1.isPopulated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        java.lang.String str9 = jSDocInfo0.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isVoid();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean22 = node21.isTypeOf();
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node21);
        int int24 = node2.getIndexOfChild(node21);
        boolean boolean25 = node21.isDelProp();
        com.google.javascript.rhino.Node node26 = node21.cloneTree();
        node26.setCharno((int) '#');
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode31 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry30.setResolveMode(resolveMode31);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry30.createObjectType(objectType33);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = objectType34.toObjectType();
        boolean boolean36 = objectType35.matchesInt32Context();
        boolean boolean37 = objectType35.isStringValueType();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node40.siblings();
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        boolean boolean56 = strSet49.remove((java.lang.Object) boolean55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo57.getSuppressions();
        boolean boolean59 = jSDocInfo57.isNoSideEffects();
        boolean boolean60 = jSDocInfo57.isConsistentIdGenerator();
        boolean boolean61 = strSet49.contains((java.lang.Object) jSDocInfo57);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        boolean boolean68 = jSTypeRegistry63.canPropertyBeDefined(jSType66, "Unknown class name");
        jSTypeRegistry63.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode73 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry72.setResolveMode(resolveMode73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType76 = jSTypeRegistry72.createObjectType(objectType75);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry63.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType76, "");
        com.google.javascript.rhino.jstype.UnionType unionType79 = objectType76.toMaybeUnionType();
        boolean boolean80 = objectType76.matchesObjectContext();
        boolean boolean81 = objectType76.hasAnyTemplate();
        boolean boolean82 = strSet49.equals((java.lang.Object) objectType76);
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType35.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType76);
        boolean boolean84 = jSType83.isNominalType();
        boolean boolean85 = jSType83.matchesStringContext();
        node26.setJSType(jSType83);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + resolveMode31 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode31.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + resolveMode73 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode73.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNull(unionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression5);
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markText("OR hi!\n    OR hi!\n", 48, 0, 1, 8);
        boolean boolean14 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.recordInterface();
        boolean boolean20 = jSDocInfoBuilder17.recordDescription("hi!");
        boolean boolean21 = jSDocInfoBuilder17.recordHiddenness();
        boolean boolean22 = jSDocInfoBuilder17.recordExpose();
        boolean boolean23 = jSDocInfoBuilder17.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean25 = jSDocInfoBuilder17.isPopulated();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean33 = node32.isThis();
        node29.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node29.siblings();
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet38);
        node29.putBooleanProp(0, false);
        node29.setSourceFileForTesting("OR hi!\n    OR hi!\n");
        boolean boolean46 = node29.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node29.getStaticSourceFile();
        boolean boolean48 = staticSourceFile47.isExtern();
        int int50 = staticSourceFile47.getLineOffset(16);
        jSDocInfoBuilder17.markName("None", staticSourceFile47, (int) (byte) 1, 43);
        int int55 = staticSourceFile47.getColumnOfOffset(4);
        int int57 = staticSourceFile47.getColumnOfOffset(2);
        jSDocInfoBuilder1.markName("STRING INSTANCEOF 50", staticSourceFile47, 29, 53);
        jSDocInfoBuilder1.markText("OR hi!", 2, 0, 30, 54);
        boolean boolean68 = jSDocInfoBuilder1.hasParameter("OR hi! 0\n");
        boolean boolean69 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isExterns();
        com.google.javascript.rhino.Node node72 = jSDocInfo70.getAssociatedNode();
        boolean boolean73 = jSDocInfo70.hasThisType();
        boolean boolean74 = jSDocInfo70.isOverride();
        java.lang.String str75 = jSDocInfo70.getMeaning();
        boolean boolean76 = jSDocInfo70.isExterns();
        boolean boolean77 = jSDocInfo70.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo70.getTemplateTypeNames();
        boolean boolean79 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList78);
        boolean boolean81 = jSDocInfoBuilder1.recordLends("STRING  10");
        boolean boolean83 = jSDocInfoBuilder1.recordMeaning("{1166636316}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getSuppressions();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        int int3 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList7 = com.google.common.collect.ImmutableList.of();
        boolean boolean8 = nodeIterableList7.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor9 = nodeIterableList7.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList10 = nodeIterableList7.asList();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor11 = nodeIterableList10.iterator();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList12 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray13 = nodeIterableList12.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = nodeIterableList12.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList18 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray19 = nodeIterableList18.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList20 = nodeIterableList18.reverse();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList20, 52, node27 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray35 = nodeIterableList34.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList36 = nodeIterableList34.reverse();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean44 = node43.isThis();
        node40.addChildToBack(node43);
        java.lang.Object[] objArray46 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList36, 52, node43 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList50 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray51 = nodeIterableList50.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList52 = nodeIterableList50.reverse();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isThis();
        node56.addChildToBack(node59);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList52, 52, node59 };
        java.lang.Object[][] objArray63 = new java.lang.Object[][] { objArray30, objArray46, objArray62 };
        java.lang.Object[][] objArray64 = nodeIterableList14.toArray(objArray63);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList65 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray66 = nodeIterableList65.toArray();
        int int68 = nodeIterableList65.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray69 = nodeIterableList65.toArray();
        boolean boolean70 = nodeIterableList14.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList65);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor71 = nodeIterableList65.iterator();
        java.util.ListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor72 = nodeIterableList65.listIterator();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray74 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray75 = (com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74;
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray76 = nodeIterableList65.toArray((com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74);
        com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableCollectionArray77 = nodeIterableList10.toArray((com.google.common.collect.ImmutableCollection<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) immutableCollectionArray74);
        boolean boolean78 = strSet5.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList10);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder80 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = null;
        boolean boolean82 = jSDocInfoBuilder80.recordDefineType(jSTypeExpression81);
        boolean boolean83 = jSDocInfoBuilder80.recordExterns();
        boolean boolean84 = jSDocInfoBuilder80.recordExpose();
        jSDocInfoBuilder80.markText("OR hi! [source_file: ]\n    OR hi!\n", 49, 2, 49, 10);
        int int91 = nodeIterableList10.indexOf((java.lang.Object) 49);
        java.lang.String str92 = nodeIterableList10.toString();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(nodeIterableList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor9);
        org.junit.Assert.assertNotNull(nodeIterableList10);
        org.junit.Assert.assertNotNull(nodeIterableItor11);
        org.junit.Assert.assertNotNull(nodeIterableList12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(nodeIterableList18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(nodeIterableList65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor71);
        org.junit.Assert.assertNotNull(nodeIterableItor72);
        org.junit.Assert.assertNotNull(immutableCollectionArray74);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray75);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray76);
        org.junit.Assert.assertNotNull(nodeIterableCollectionArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[]" + "'", str92, "[]");
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(visibility7);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        int int8 = jSDocInfo0.getParameterCount();
        boolean boolean9 = jSDocInfo0.isExport();
        boolean boolean10 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        boolean boolean13 = jSDocInfo0.hasParameter("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getThisType();
        int int15 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        jSTypeRegistry1.identifyNonNullableName("OR hi!");
        com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeRegistry1.createNamedType("JSDocInfo", "OR hi!", (int) (byte) 10, 0);
        jSTypeRegistry1.resetForTypeCheck();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.siblings();
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray25 = nodeIterableList24.toArray();
        boolean boolean26 = strSet21.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList24);
        java.lang.Object[] objArray27 = nodeIterableList24.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream28 = nodeIterableList24.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList29 = nodeIterableList24.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.recordInterface();
        boolean boolean33 = jSDocInfoBuilder31.isInterfaceRecorded();
        boolean boolean34 = jSDocInfoBuilder31.recordIdGenerator();
        boolean boolean35 = nodeIterableList29.contains((java.lang.Object) boolean34);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        jSTypeRegistry38.clearNamedTypes();
        boolean boolean40 = nodeIterableList29.contains((java.lang.Object) jSTypeRegistry38);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable42 = jSTypeRegistry38.getTypesWithProperty("INSTANCEOF");
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        jSTypeRegistry38.unregisterPropertyOnType("", jSType44);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode48 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry47.setResolveMode(resolveMode48);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry47.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType52 = objectType51.toMaybeEnumElementType();
        boolean boolean53 = objectType51.isEnumElementType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope54 = objectType51.getParentScope();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        boolean boolean61 = jSTypeRegistry56.canPropertyBeDefined(jSType59, "Unknown class name");
        jSTypeRegistry56.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry56.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        jSTypeRegistry67.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter69 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter69);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode71 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry70.setResolveMode(resolveMode71);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry70.createObjectType(objectType73);
        com.google.javascript.rhino.jstype.ObjectType objectType75 = objectType74.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot77 = objectType74.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry67.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType74);
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter79);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode81 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry80.setResolveMode(resolveMode81);
        com.google.javascript.rhino.jstype.ObjectType objectType83 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType84 = jSTypeRegistry80.createObjectType(objectType83);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType85 = objectType84.toMaybeEnumElementType();
        boolean boolean86 = jSTypeRegistry56.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType74, objectType84);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet87 = objectType84.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType88 = jSTypeRegistry38.createParameterizedType(objectType51, (com.google.javascript.rhino.jstype.JSType) objectType84);
        com.google.javascript.rhino.jstype.JSType jSType89 = objectType51.collapseUnion();
        com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType51, "{1526019385}");
        com.google.javascript.rhino.jstype.JSType jSType93 = jSTypeRegistry1.getType("Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(jSType8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream28);
        org.junit.Assert.assertNotNull(nodeIterableList29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable42);
        org.junit.Assert.assertTrue("'" + resolveMode48 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode48.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNull(enumElementType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope54);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertTrue("'" + resolveMode71 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode71.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNull(jSTypeStaticSlot77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertTrue("'" + resolveMode81 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode81.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertNull(enumElementType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet87 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet87.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(parameterizedType88);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertNotNull(jSType91);
        org.junit.Assert.assertNull(jSType93);
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.forwardDeclareType("hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode11 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry10.setResolveMode(resolveMode11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        boolean boolean15 = jSTypeRegistry10.canPropertyBeDefined(jSType13, "Unknown class name");
        jSTypeRegistry10.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry10.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        jSTypeRegistry21.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode25 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry24.setResolveMode(resolveMode25);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry24.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = objectType28.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot31 = objectType28.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode35 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry34.setResolveMode(resolveMode35);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry34.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType39 = objectType38.toMaybeEnumElementType();
        boolean boolean40 = jSTypeRegistry10.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType28, objectType38);
        boolean boolean42 = jSTypeRegistry1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType28, "OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordInterface();
        boolean boolean47 = jSDocInfoBuilder44.recordDescription("hi!");
        boolean boolean48 = jSDocInfoBuilder44.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression49);
        boolean boolean51 = jSDocInfoBuilder44.recordConstancy();
        boolean boolean52 = jSDocInfoBuilder44.recordOverride();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "None", "{298532945}", "OR hi! [directives: []]\n", "{298532945}", "OR hi! [directives: []]\n", "", "OR hi!\n    OR hi!\n", "None" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        boolean boolean65 = jSDocInfoBuilder44.recordTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList63);
        boolean boolean68 = jSTypeRegistry1.isForwardDeclaredType("hi!");
        jSTypeRegistry1.forwardDeclareType("function (this:me, {190244343}): me");
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry1.createNamedType("{13133096}", "{1882647117}", 1, 40);
        boolean boolean76 = jSType75.canBeCalled();
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + resolveMode11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode11.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertTrue("'" + resolveMode25 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode25.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNull(jSTypeStaticSlot31);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + resolveMode35 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode35.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNull(enumElementType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean3 = node2.isAnd();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) '#', 2, (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node7.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getSuppressions();
        boolean boolean11 = jSDocInfo9.isNoSideEffects();
        java.lang.String str12 = jSDocInfo9.getReturnDescription();
        boolean boolean14 = jSDocInfo9.hasParameter("Not declared as a constructor");
        java.lang.String str15 = jSDocInfo9.getMeaning();
        boolean boolean16 = jSDocInfo9.isJavaDispatch();
        node7.setJSDocInfo(jSDocInfo9);
        boolean boolean18 = node2.isEquivalentToTyped(node7);
        java.lang.String str19 = node7.getQualifiedName();
        boolean boolean20 = node7.isComma();
        com.google.javascript.rhino.Node node21 = node7.getNext();
        node7.removeProp(54);
        boolean boolean24 = node7.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean7 = node6.isThis();
        node3.addChildToBack(node6);
        boolean boolean9 = node3.isDebugger();
        node3.setSourceFileForTesting("");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean18 = node17.isThis();
        node14.addChildToBack(node17);
        boolean boolean20 = node17.isNot();
        int int21 = node17.getLineno();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean28 = node27.isThis();
        node24.addChildToBack(node27);
        boolean boolean30 = node27.isNot();
        int int31 = node27.getLineno();
        com.google.javascript.rhino.Node node32 = node17.srcref(node27);
        int int33 = node17.getCharno();
        com.google.javascript.rhino.Node node34 = node3.copyInformationFrom(node17);
        boolean boolean35 = node3.isTrue();
        boolean boolean36 = node3.isCase();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(52, node3);
        java.lang.String str38 = node37.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = jSDocInfo39.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility42 = jSDocInfo39.getVisibility();
        boolean boolean43 = jSDocInfo39.shouldPreserveTry();
        java.lang.String str44 = jSDocInfo39.getReturnDescription();
        boolean boolean45 = jSDocInfo39.isNoCompile();
        node37.setJSDocInfo(jSDocInfo39);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean53 = node52.isThis();
        node49.addChildToBack(node52);
        boolean boolean55 = node49.isDebugger();
        boolean boolean56 = node49.isVoid();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean60 = node59.isTypeOf();
        com.google.javascript.rhino.Node node61 = node49.srcrefTree(node59);
        com.google.javascript.rhino.Node node62 = node49.getLastSibling();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean69 = node68.isThis();
        node65.addChildToBack(node68);
        boolean boolean71 = node65.isDebugger();
        com.google.javascript.rhino.Node node72 = node65.getFirstChild();
        boolean boolean73 = node49.hasChild(node72);
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        boolean boolean76 = node37.isEquivalentTo(node72);
        boolean boolean77 = node37.isAssignAdd();
        boolean boolean78 = node37.isScript();
        boolean boolean79 = node37.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "INSTANCEOF" + "'", str38, "INSTANCEOF");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jSTypeExpression41);
        org.junit.Assert.assertNull(visibility42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.markText("Unknown class name", 1, 35, (int) (short) 0, 45);
        boolean boolean15 = jSDocInfoBuilder1.recordDeprecationReason("None");
        boolean boolean16 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        java.lang.String str6 = jSDocInfo0.getOriginalCommentString();
        jSDocInfo0.setLicense("java.io.IOException: OR []");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression5);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThisType(jSTypeExpression7);
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordInterface();
        boolean boolean14 = jSDocInfoBuilder11.recordDescription("hi!");
        boolean boolean15 = jSDocInfoBuilder11.recordHiddenness();
        boolean boolean16 = jSDocInfoBuilder11.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder11.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.addAuthor("");
        boolean boolean22 = jSDocInfoBuilder19.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = null;
        boolean boolean24 = jSDocInfoBuilder19.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder19.markAnnotation("", (int) (byte) 0, (int) (short) 0);
        boolean boolean30 = jSDocInfoBuilder19.recordDeprecationReason("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        boolean boolean33 = jSDocInfoBuilder32.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean38 = jSDocInfoBuilder35.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder35.recordThrowType(jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder35.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordInterface();
        boolean boolean46 = jSDocInfoBuilder43.recordDescription("hi!");
        boolean boolean47 = jSDocInfoBuilder43.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = null;
        boolean boolean49 = jSDocInfoBuilder43.recordThrowType(jSTypeExpression48);
        boolean boolean50 = jSDocInfoBuilder43.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder43.recordOverride();
        boolean boolean52 = jSDocInfoBuilder43.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder54.recordEnumParameterType(jSTypeExpression60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean65 = jSDocInfoBuilder63.addAuthor("");
        boolean boolean66 = jSDocInfoBuilder63.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean71 = jSDocInfoBuilder68.recordDescription("hi!");
        boolean boolean72 = jSDocInfoBuilder68.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = null;
        boolean boolean74 = jSDocInfoBuilder68.recordThrowType(jSTypeExpression73);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList75 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder11, jSDocInfoBuilder19, jSDocInfoBuilder32, jSDocInfoBuilder35, jSDocInfoBuilder43, jSDocInfoBuilder54, jSDocInfoBuilder63, jSDocInfoBuilder68);
        boolean boolean77 = jSDocInfoBuilder43.addReference("Not declared as a type name");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile79 = null;
        jSDocInfoBuilder43.markName("OR hi! [source_file: ]\n    OR hi!\n", staticSourceFile79, (int) (short) 100, 8);
        boolean boolean84 = jSDocInfoBuilder43.addAuthor("function (this:me, {446694905}): me");
        boolean boolean86 = jSDocInfoBuilder43.recordFileOverview("{2007238598}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordOverride();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        boolean boolean5 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean12 = node11.isThis();
        node8.addChildToBack(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node8.siblings();
        node8.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        boolean boolean21 = node19.isDelProp();
        boolean boolean22 = node19.hasChildren();
        boolean boolean23 = node19.isOr();
        java.lang.String str24 = node8.checkTreeEquals(node19);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        boolean boolean34 = node28.isDebugger();
        boolean boolean35 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(51, node28, (int) (short) 10, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable39 = node38.getAncestors();
        com.google.javascript.rhino.Node node40 = node19.copyInformationFrom(node38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = new com.google.javascript.rhino.JSTypeExpression(node38, "OR hi! [source_file: ]\n    OR hi!\n");
        com.google.javascript.rhino.Node node43 = jSTypeExpression42.getRoot();
        jSDocInfoBuilder1.markTypeNode(node43, (int) (short) 0, 40, (int) (short) 0, 0, true);
        boolean boolean50 = node43.isAssign();
        node43.setCharno(100);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean56 = node55.isTypeOf();
        node55.setLineno(51);
        boolean boolean59 = node55.isLabelName();
        int int60 = node43.getIndexOfChild(node55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n" + "'", str24, "Node tree inequality:\nTree1:\nOR hi! [empty_block: 1]\n    OR hi!\n\n\nTree2:\nOR hi!\n\n\nSubtree1: OR hi! [empty_block: 1]\n    OR hi!\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.lang.Object[] objArray17 = nodeIterableList14.toArray();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream18 = nodeIterableList14.stream();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList19 = nodeIterableList14.reverse();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean23 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordIdGenerator();
        boolean boolean25 = nodeIterableList19.contains((java.lang.Object) boolean24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        jSTypeRegistry28.clearNamedTypes();
        boolean boolean30 = nodeIterableList19.contains((java.lang.Object) jSTypeRegistry28);
        jSTypeRegistry28.clearTemplateTypeNames();
        jSTypeRegistry28.setLastGeneration(false);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        boolean boolean36 = jSTypeRegistry28.declareType("java.io.IOException: OR hi!\n    OR hi!\n", jSType35);
        boolean boolean38 = jSTypeRegistry28.isForwardDeclaredType("OR hi! [var_args_name: 1]\n");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList39 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray40 = nodeIterableList39.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList41 = nodeIterableList39.reverse();
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream42 = nodeIterableList39.stream();
        java.lang.String[] strArray44 = new java.lang.String[] { "OR hi!\n" };
        java.lang.String[] strArray45 = nodeIterableList39.toArray(strArray44);
        java.util.Spliterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableSpliterator46 = nodeIterableList39.spliterator();
        boolean boolean47 = nodeIterableList39.isEmpty();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.ObjectType objectType52 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType53 = jSTypeRegistry49.createObjectType(objectType52);
        boolean boolean54 = objectType53.isNominalConstructor();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode57 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry56.setResolveMode(resolveMode57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        boolean boolean61 = jSTypeRegistry56.canPropertyBeDefined(jSType59, "Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = objectType67.toObjectType();
        boolean boolean69 = objectType68.matchesInt32Context();
        boolean boolean70 = objectType68.isStringValueType();
        boolean boolean71 = objectType68.canBeCalled();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode74 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry73.setResolveMode(resolveMode74);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry73.createObjectType(objectType76);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair78 = new com.google.javascript.rhino.jstype.JSType.TypePair((com.google.javascript.rhino.jstype.JSType) objectType68, (com.google.javascript.rhino.jstype.JSType) objectType77);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry56.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType68);
        com.google.javascript.rhino.jstype.FunctionType functionType80 = jSType79.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType.TypePair typePair81 = objectType53.getTypesUnderInequality(jSType79);
        boolean boolean82 = objectType53.isNumberObjectType();
        com.google.javascript.rhino.jstype.JSType jSType83 = objectType53.getTypeOfThis();
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray84 = new com.google.javascript.rhino.jstype.ObjectType[] { objectType53 };
        com.google.javascript.rhino.jstype.ObjectType[] objectTypeArray85 = nodeIterableList39.toArray(objectTypeArray84);
        com.google.javascript.rhino.Node node86 = jSTypeRegistry28.createParameters((com.google.javascript.rhino.jstype.JSType[]) objectTypeArray85);
        boolean boolean88 = jSTypeRegistry28.hasNamespace("");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(nodeIterableStream18);
        org.junit.Assert.assertNotNull(nodeIterableList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterableList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList41);
        org.junit.Assert.assertNotNull(nodeIterableStream42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(nodeIterableSpliterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode57 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode57.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + resolveMode74 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode74.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(functionType80);
        org.junit.Assert.assertNotNull(typePair81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertNotNull(objectTypeArray84);
        org.junit.Assert.assertNotNull(objectTypeArray85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition16 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition17 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList18 = com.google.common.collect.ImmutableList.of(namePosition17);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList20 = com.google.common.collect.ImmutableList.of(namePosition19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition23 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList26 = com.google.common.collect.ImmutableList.of(namePosition25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList28 = com.google.common.collect.ImmutableList.of(namePosition14, namePosition15, namePosition16, namePosition17, namePosition19, namePosition21, namePosition22, namePosition23, namePosition24, namePosition25, namePosition27);
        int int29 = namePosition17.getEndLine();
        int int30 = namePosition17.getStartLine();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        boolean boolean39 = node36.isNot();
        int int40 = node36.getLineno();
        boolean boolean41 = node36.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node36.setJSType(jSType42);
        namePosition17.setItem(node36);
        com.google.javascript.rhino.Node node45 = namePosition17.getItem();
        boolean boolean46 = node45.isGetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node45, "{516175632}");
        boolean boolean49 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namePositionList18);
        org.junit.Assert.assertNotNull(namePositionList20);
        org.junit.Assert.assertNotNull(namePositionList26);
        org.junit.Assert.assertNotNull(namePositionList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("OR hi!\n    OR hi!\n");
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("{2076672844}");
        boolean boolean11 = jSDocInfoBuilder1.recordDescription("{1545449200}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression9);
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("Not declared as a constructor");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.addAuthor("");
        boolean boolean18 = jSDocInfoBuilder15.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = null;
        boolean boolean20 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression19);
        boolean boolean21 = jSDocInfoBuilder15.recordNoSideEffects();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean26 = jSDocInfoBuilder23.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = null;
        boolean boolean28 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression27);
        boolean boolean29 = jSDocInfoBuilder23.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder23.markName("", staticSourceFile31, 29, 50);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean41 = node40.isThis();
        node37.addChildToBack(node40);
        boolean boolean43 = node37.isDebugger();
        boolean boolean44 = node37.isSyntheticBlock();
        boolean boolean45 = node37.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node37, "Unknown class name");
        boolean boolean49 = jSDocInfoBuilder23.recordThrowDescription(jSTypeExpression47, "?");
        boolean boolean50 = jSDocInfoBuilder15.recordExtendedInterface(jSTypeExpression47);
        boolean boolean51 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression47);
        boolean boolean52 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.recordInterface();
        boolean boolean57 = jSDocInfoBuilder54.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder54.recordTypedef(jSTypeExpression58);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((-1.0d), 41, 52);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = new com.google.javascript.rhino.JSTypeExpression(node63, "");
        boolean boolean66 = jSTypeExpression65.isVarArgs();
        boolean boolean67 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression65);
        boolean boolean68 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression65);
        boolean boolean71 = jSDocInfoBuilder1.recordParameterDescription("{1729404217}", "TYPEOF hi!");
        boolean boolean72 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isImplicitCast();
        boolean boolean2 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getBaseType();
        jSDocInfo0.addSuppression("OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.isImplicitCast();
        boolean boolean8 = jSDocInfo6.isNoShadow();
        boolean boolean9 = jSDocInfo6.hasBaseType();
        java.lang.String str10 = jSDocInfo6.getMeaning();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean17 = node16.isThis();
        node13.addChildToBack(node16);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node13.siblings();
        node13.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node22 = node13.getLastChild();
        boolean boolean23 = node13.isCall();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean30 = node29.isThis();
        node26.addChildToBack(node29);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable32 = node26.siblings();
        node26.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node35 = node26.getLastChild();
        boolean boolean36 = node26.isCall();
        com.google.javascript.rhino.Node node37 = node13.copyInformationFrom(node26);
        boolean boolean38 = node13.isGetterDef();
        boolean boolean39 = node13.isNew();
        jSDocInfo6.setAssociatedNode(node13);
        jSDocInfo0.setAssociatedNode(node13);
        int int42 = node13.getChildCount();
        boolean boolean43 = node13.isBreak();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray9 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray10 = nodeIterableList0.toArray(typePositionArray9);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList11 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray12 = nodeIterableList11.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList13 = nodeIterableList11.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray20 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition14, typePosition15, typePosition16, typePosition17, typePosition18, typePosition19 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray21 = nodeIterableList11.toArray(typePositionArray20);
        boolean boolean22 = nodeIterableList0.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList11);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream23 = nodeIterableList0.stream();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(51, "OR hi! [directives: []]\n");
        java.lang.String str27 = node26.getString();
        int int28 = nodeIterableList0.indexOf((java.lang.Object) node26);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor29 = nodeIterableList0.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor30 = nodeIterableList0.listIterator();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean37 = node36.isThis();
        node33.addChildToBack(node36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordInterface();
        boolean boolean49 = jSDocInfoBuilder46.recordDescription("hi!");
        boolean boolean50 = jSDocInfoBuilder46.recordHiddenness();
        boolean boolean51 = strSet42.remove((java.lang.Object) jSDocInfoBuilder46);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder46.recordTypedef(jSTypeExpression52);
        boolean boolean54 = jSDocInfoBuilder46.recordConstancy();
        boolean boolean55 = nodeIterableList0.equals((java.lang.Object) boolean54);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream56 = nodeIterableList0.parallelStream();
        java.util.stream.Stream[] streamArray58 = new java.util.stream.Stream[1];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray59 = (java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray58;
        nodeIterableStreamArray59[0] = nodeIterableStream56;
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList62 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray63 = nodeIterableList62.toArray();
        boolean boolean64 = nodeIterableList62.isEmpty();
        boolean boolean65 = nodeIterableList62.isEmpty();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor66 = nodeIterableList62.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordInterface();
        boolean boolean70 = jSDocInfoBuilder68.recordPreserveTry();
        boolean boolean71 = nodeIterableList62.equals((java.lang.Object) boolean70);
        java.util.stream.Stream[] streamArray73 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray74 = (java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray73;
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[] nodeIterableStreamArray75 = nodeIterableList62.toArray((java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]) streamArray73);
        com.google.common.collect.ImmutableList<java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>>[]> iterableStreamArrayList76 = com.google.common.collect.ImmutableList.of(nodeIterableStreamArray59, nodeIterableStreamArray75);
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(typePositionArray9);
        org.junit.Assert.assertNotNull(typePositionArray10);
        org.junit.Assert.assertNotNull(nodeIterableList11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList13);
        org.junit.Assert.assertNotNull(typePositionArray20);
        org.junit.Assert.assertNotNull(typePositionArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR hi! [directives: []]\n" + "'", str27, "OR hi! [directives: []]\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(nodeIterableItor29);
        org.junit.Assert.assertNotNull(nodeIterableItor30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeIterableStream56);
        org.junit.Assert.assertNotNull(streamArray58);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray59);
        org.junit.Assert.assertNotNull(nodeIterableList62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(streamArray73);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray74);
        org.junit.Assert.assertNotNull(nodeIterableStreamArray75);
        org.junit.Assert.assertNotNull(iterableStreamArrayList76);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean4 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = null;
        boolean boolean6 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression5);
        jSDocInfoBuilder1.markAnnotation("java.io.IOException", (int) (short) 100, 54);
        boolean boolean12 = jSDocInfoBuilder1.hasParameter("InputId: {556367677}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordInterface();
        boolean boolean17 = jSDocInfoBuilder14.recordDescription("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder14.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = null;
        boolean boolean21 = jSDocInfoBuilder14.recordThisType(jSTypeExpression20);
        boolean boolean22 = jSDocInfoBuilder14.isPopulated();
        boolean boolean23 = jSDocInfoBuilder14.recordNoAlias();
        boolean boolean26 = jSDocInfoBuilder14.recordParameterDescription("hi!", "JSDocInfo");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder14.markName("", staticSourceFile28, 0, (int) (byte) 1);
        boolean boolean32 = jSDocInfoBuilder14.recordNoAlias();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean39 = node38.isThis();
        node35.addChildToBack(node38);
        boolean boolean41 = node35.isDebugger();
        boolean boolean42 = node35.isSyntheticBlock();
        boolean boolean43 = node35.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node35, "Unknown class name");
        boolean boolean46 = jSDocInfoBuilder14.recordEnumParameterType(jSTypeExpression45);
        boolean boolean47 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression45);
        boolean boolean48 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean49 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean50 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node2.siblings();
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet11);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList14 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray15 = nodeIterableList14.toArray();
        boolean boolean16 = strSet11.removeAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList14);
        java.util.HashSet[] hashSetArray18 = new java.util.HashSet[1];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray19 = (java.util.HashSet<java.lang.String>[]) hashSetArray18;
        strSetArray19[0] = strSet11;
        com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList22 = com.google.common.collect.ImmutableList.copyOf(strSetArray19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean29 = node28.isThis();
        node25.addChildToBack(node28);
        boolean boolean31 = node25.isDebugger();
        boolean boolean32 = node25.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean34 = jSDocInfo33.isExterns();
        boolean boolean35 = jSDocInfo33.hasReturnType();
        boolean boolean36 = jSDocInfo33.isOverride();
        jSDocInfo33.setLicense("hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean45 = node44.isThis();
        node41.addChildToBack(node44);
        boolean boolean47 = node44.isNot();
        int int48 = node44.getLineno();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean55 = node54.isThis();
        node51.addChildToBack(node54);
        boolean boolean57 = node54.isNot();
        int int58 = node54.getLineno();
        com.google.javascript.rhino.Node node59 = node44.srcref(node54);
        boolean boolean60 = node59.isDelProp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean67 = node66.isThis();
        node63.addChildToBack(node66);
        node66.removeProp(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        node66.setStaticSourceFile(staticSourceFile71);
        com.google.common.collect.ImmutableList<java.lang.Object> objList73 = com.google.common.collect.ImmutableList.of((java.lang.Object) strSetArray19, (java.lang.Object) node25, (java.lang.Object) "hi!", (java.lang.Object) boolean60, (java.lang.Object) node66);
        boolean boolean74 = node66.isInstanceOf();
        boolean boolean75 = node66.isFalse();
        boolean boolean76 = node66.isString();
        boolean boolean77 = node66.isReturn();
        node66.setType(43);
        boolean boolean80 = node66.isFunction();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(nodeIterableList14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hashSetArray18);
        org.junit.Assert.assertNotNull(strSetArray19);
        org.junit.Assert.assertNotNull(strSetList22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode2 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry1.setResolveMode(resolveMode2);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        boolean boolean6 = jSTypeRegistry1.canPropertyBeDefined(jSType4, "Unknown class name");
        jSTypeRegistry1.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry1.getTypesWithProperty("hi!");
        jSTypeRegistry1.resetForTypeCheck();
        jSTypeRegistry1.forwardDeclareType("OR hi!");
        boolean boolean15 = jSTypeRegistry1.isForwardDeclaredType("STRING INSTANCEOF 50");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode18 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry17.setResolveMode(resolveMode18);
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        boolean boolean22 = jSTypeRegistry17.canPropertyBeDefined(jSType20, "Unknown class name");
        jSTypeRegistry17.identifyNonNullableName("Unknown class name");
        jSTypeRegistry17.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode28 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry27.setResolveMode(resolveMode28);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry27.createObjectType(objectType30);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = objectType31.toObjectType();
        boolean boolean33 = objectType32.isEmptyType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope34 = objectType32.getParentScope();
        boolean boolean36 = jSTypeRegistry17.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) objectType32, "INSTANCEOF");
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode40 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry39.setResolveMode(resolveMode40);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        boolean boolean44 = jSTypeRegistry39.canPropertyBeDefined(jSType42, "Unknown class name");
        jSTypeRegistry39.forwardDeclareType("hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry39.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        jSTypeRegistry50.clearNamedTypes();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode54 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry53.setResolveMode(resolveMode54);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry53.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.ObjectType objectType58 = objectType57.toObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot60 = objectType57.getSlot("OR hi! [directives: []]\n");
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode64 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry63.setResolveMode(resolveMode64);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry63.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType68 = objectType67.toMaybeEnumElementType();
        boolean boolean69 = jSTypeRegistry39.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType) objectType57, objectType67);
        com.google.javascript.rhino.jstype.JSType jSType71 = objectType57.getRestrictedTypeGivenToBooleanOutcome(true);
        jSTypeRegistry17.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean74 = jSDocInfo73.isExterns();
        int int75 = jSDocInfo73.getParameterCount();
        boolean boolean76 = jSDocInfo73.isIdGenerator();
        boolean boolean77 = jSDocInfo73.isInterface();
        boolean boolean78 = jSDocInfo73.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = jSDocInfo73.getVisibility();
        boolean boolean80 = jSDocInfo73.isNoTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = jSDocInfo73.getTemplateTypeNames();
        jSTypeRegistry17.setTemplateTypeNames((java.util.List<java.lang.String>) strList81);
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList81);
        org.junit.Assert.assertTrue("'" + resolveMode2 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode2.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + resolveMode18 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode18.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + resolveMode28 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode28.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + resolveMode40 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode40.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertTrue("'" + resolveMode54 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode54.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNull(jSTypeStaticSlot60);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertTrue("'" + resolveMode64 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode64.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNull(enumElementType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(visibility79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean4 = jSDocInfoBuilder1.recordDescription("hi!");
        boolean boolean5 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = null;
        boolean boolean7 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression6);
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean9 = jSDocInfoBuilder1.recordOverride();
        boolean boolean10 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean14 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean15 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean16 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean17 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean19 = jSDocInfoBuilder1.addAuthor("{1197029056}");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordInterface();
        boolean boolean24 = jSDocInfoBuilder21.recordDescription("hi!");
        boolean boolean25 = jSDocInfoBuilder21.recordHiddenness();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder21.recordThrowType(jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder21.recordConstancy();
        boolean boolean29 = jSDocInfoBuilder21.recordOverride();
        boolean boolean30 = jSDocInfoBuilder21.recordNoTypeCheck();
        boolean boolean31 = jSDocInfoBuilder21.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.addAuthor("");
        boolean boolean36 = jSDocInfoBuilder33.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression37);
        boolean boolean39 = jSDocInfoBuilder33.recordNoAlias();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder33.markName("", staticSourceFile41, 29, 50);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean51 = node50.isThis();
        node47.addChildToBack(node50);
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isSyntheticBlock();
        boolean boolean55 = node47.isTypeOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node47, "Unknown class name");
        boolean boolean59 = jSDocInfoBuilder33.recordThrowDescription(jSTypeExpression57, "?");
        com.google.javascript.rhino.Node node60 = jSTypeExpression57.getRoot();
        boolean boolean61 = jSDocInfoBuilder21.recordEnumParameterType(jSTypeExpression57);
        boolean boolean62 = jSTypeExpression57.isVarArgs();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder64.addAuthor("");
        boolean boolean67 = jSDocInfoBuilder64.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = null;
        boolean boolean69 = jSDocInfoBuilder64.recordThrowType(jSTypeExpression68);
        jSDocInfoBuilder64.markText("hi!", 30, 100, 1, 30);
        jSDocInfoBuilder64.recordOriginalCommentString("{441018204}");
        boolean boolean78 = jSDocInfoBuilder64.recordIdGenerator();
        boolean boolean79 = jSTypeExpression57.equals((java.lang.Object) jSDocInfoBuilder64);
        boolean boolean80 = jSTypeExpression57.isOptionalArg();
        boolean boolean82 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression57, "{1615692914}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getReturnType();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("STRING INSTANCEOF 50");
        java.lang.String str9 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExterns();
        boolean boolean2 = jSDocInfo0.hasReturnType();
        boolean boolean3 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        jSDocInfo0.addSuppression("{1480997056}");
        java.lang.String str11 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(nodeCollection12);
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        boolean boolean10 = node5.isAdd();
        com.google.javascript.rhino.Node node11 = node5.cloneTree();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean19 = node18.isThis();
        node15.addChildToBack(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node15.siblings();
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet24);
        int int27 = strSet24.size();
        strSet24.clear();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.hasFileOverview();
        boolean boolean32 = jSDocInfo30.hasModifies();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getModifies();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = com.google.common.collect.ImmutableList.of();
        boolean boolean35 = strSet33.retainAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor36 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor37 = nodeIterableList34.iterator();
        java.lang.Object[] objArray38 = nodeIterableList34.toArray();
        boolean boolean39 = strSet24.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList34);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor40 = nodeIterableList34.iterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor41 = nodeIterableList34.iterator();
        boolean boolean42 = nodeIterableList34.isEmpty();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean47 = node46.isNE();
        boolean boolean48 = node46.isInstanceOf();
        boolean boolean49 = node46.isThrow();
        node46.setCharno(54);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node46.getAncestors();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<com.google.javascript.rhino.Node>) ancestorIterable52);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor54 = nodeIterableList53.listIterator();
        boolean boolean55 = nodeIterableItor54.hasPrevious();
        boolean boolean56 = nodeIterableItor54.hasPrevious();
        boolean boolean57 = nodeIterableItor54.hasPrevious();
        boolean boolean58 = nodeIterableItor54.hasPrevious();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = nodeIterableItor54.next();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterableList34.add(4098, nodeIterable59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterableItor36);
        org.junit.Assert.assertNotNull(nodeIterableItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(nodeIterableItor40);
        org.junit.Assert.assertNotNull(nodeIterableItor41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(ancestorIterable52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(nodeIterableItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable59);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        boolean boolean2 = jSTypeRegistry1.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry1.getTypesWithProperty("");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode7 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry6.setResolveMode(resolveMode7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        boolean boolean11 = jSTypeRegistry6.canPropertyBeDefined(jSType9, "Unknown class name");
        jSTypeRegistry6.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode16 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry15.setResolveMode(resolveMode16);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry15.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry6.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType19, "");
        com.google.javascript.rhino.jstype.UnionType unionType22 = objectType19.toMaybeUnionType();
        boolean boolean23 = objectType19.matchesObjectContext();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode27 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry26.setResolveMode(resolveMode27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        boolean boolean31 = jSTypeRegistry26.canPropertyBeDefined(jSType29, "Unknown class name");
        jSTypeRegistry26.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry35.setResolveMode(resolveMode36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        boolean boolean40 = jSTypeRegistry35.canPropertyBeDefined(jSType38, "Unknown class name");
        jSTypeRegistry35.identifyNonNullableName("Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable44 = jSTypeRegistry35.getTypesWithProperty("hi!");
        jSTypeRegistry35.resetForTypeCheck();
        jSTypeRegistry35.forwardDeclareType("OR hi!");
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode50 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry49.setResolveMode(resolveMode50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        boolean boolean54 = jSTypeRegistry49.canPropertyBeDefined(jSType52, "Unknown class name");
        jSTypeRegistry49.identifyNonNullableName("Unknown class name");
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode59 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry58.setResolveMode(resolveMode59);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry58.createObjectType(objectType61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = objectType62.toObjectType();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] { objectType62 };
        com.google.javascript.rhino.Node node65 = jSTypeRegistry49.createParametersWithVarArgs(jSTypeArray64);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry35.createUnionType(jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry26.createOptionalParameters(jSTypeArray64);
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry1.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType19, false, jSTypeArray64);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.recordInterface();
        boolean boolean72 = jSDocInfoBuilder70.isInterfaceRecorded();
        boolean boolean73 = jSDocInfoBuilder70.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility74 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean75 = jSDocInfoBuilder70.recordVisibility(visibility74);
        boolean boolean76 = jSDocInfoBuilder70.recordExpose();
        boolean boolean78 = jSDocInfoBuilder70.recordBlockDescription("Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo79.getType();
        boolean boolean82 = jSDocInfo79.isImplicitCast();
        boolean boolean83 = jSDocInfo79.isOverride();
        boolean boolean84 = jSDocInfo79.isNoSideEffects();
        boolean boolean86 = jSDocInfo79.hasParameterType("OR hi!\n    OR hi!\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList87 = jSDocInfo79.getTemplateTypeNames();
        boolean boolean88 = jSDocInfoBuilder70.recordTemplateTypeNames((java.util.List<java.lang.String>) strList87);
        jSTypeRegistry1.setTemplateTypeNames((java.util.List<java.lang.String>) strList87);
        jSTypeRegistry1.incrementGeneration();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + resolveMode7 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode7.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + resolveMode16 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode16.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNull(unionType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + resolveMode27 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode27.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable44);
        org.junit.Assert.assertTrue("'" + resolveMode50 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode50.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + resolveMode59 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode59.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + visibility74 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility74.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        boolean boolean2 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("OR hi! [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean15 = node14.isThis();
        node11.addChildToBack(node14);
        boolean boolean17 = node11.isDebugger();
        boolean boolean18 = node11.isAssign();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51, node11, (int) (short) 10, 0);
        node21.setSourceEncodedPosition((int) ' ');
        int int24 = node21.getType();
        jSDocInfo0.setAssociatedNode(node21);
        boolean boolean26 = jSDocInfo0.isNoShadow();
        jSDocInfo0.setLicense("{1649831947}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean6 = node5.isThis();
        node2.addChildToBack(node5);
        boolean boolean8 = node5.isNot();
        int int9 = node5.getLineno();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        boolean boolean18 = node15.isNot();
        int int19 = node15.getLineno();
        com.google.javascript.rhino.Node node20 = node5.srcref(node15);
        boolean boolean21 = node20.isDelProp();
        com.google.javascript.rhino.Node node22 = node20.getLastSibling();
        boolean boolean23 = node22.isFunction();
        java.lang.Object obj25 = node22.getProp((int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo26.getType();
        boolean boolean29 = jSDocInfo26.isImplicitCast();
        boolean boolean30 = jSDocInfo26.isOverride();
        boolean boolean31 = jSDocInfo26.isNoSideEffects();
        node22.setJSDocInfo(jSDocInfo26);
        boolean boolean33 = node22.isDo();
        boolean boolean34 = node22.isTry();
        java.lang.Class<?> wildcardClass35 = node22.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setLicense("Not declared as a type name");
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordExterns();
        boolean boolean6 = jSDocInfoBuilder1.recordLends("OR hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordMeaning("{376655723}");
        boolean boolean10 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nDELPROP INSTANCEOF 10\n\n\nTree2:\nOR hi!\n\n\nSubtree1: DELPROP INSTANCEOF 10\n\n\nSubtree2: OR hi!\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        boolean boolean4 = jSDocInfo0.isExport();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.hasParameter("Unknown class name");
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        boolean boolean12 = jSDocInfo0.isConstant();
        java.lang.String str13 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordInterface();
        boolean boolean3 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean10 = node9.isThis();
        node6.addChildToBack(node9);
        boolean boolean12 = node6.isDec();
        boolean boolean13 = node6.isBlock();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean20 = node19.isThis();
        node16.addChildToBack(node19);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node16.siblings();
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet25);
        int int28 = strSet25.size();
        strSet25.clear();
        node6.setDirectives((java.util.Set<java.lang.String>) strSet25);
        boolean boolean31 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet25);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList32 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray33 = nodeIterableList32.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList34 = nodeIterableList32.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList54 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray55 = nodeIterableList54.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList56 = nodeIterableList54.reverse();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean64 = node63.isThis();
        node60.addChildToBack(node63);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList56, 52, node63 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList70 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray71 = nodeIterableList70.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = nodeIterableList70.reverse();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean80 = node79.isThis();
        node76.addChildToBack(node79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList72, 52, node79 };
        java.lang.Object[][] objArray83 = new java.lang.Object[][] { objArray50, objArray66, objArray82 };
        java.lang.Object[][] objArray84 = nodeIterableList34.toArray(objArray83);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList85 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray86 = nodeIterableList85.toArray();
        int int88 = nodeIterableList85.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray89 = nodeIterableList85.toArray();
        boolean boolean90 = nodeIterableList34.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList85);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream91 = nodeIterableList85.parallelStream();
        boolean boolean92 = nodeIterableList85.isEmpty();
        boolean boolean93 = strSet25.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList85);
        java.util.Iterator<java.lang.String> strItor94 = strSet25.iterator();
        boolean boolean96 = strSet25.add("{(function ({1656881069}): {1533878881},{754359223},{838896643})}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(nodeIterableList32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList34);
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(nodeIterableList85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strItor94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList0 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray1 = nodeIterableList0.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList2 = nodeIterableList0.reverse();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList6 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray7 = nodeIterableList6.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList8 = nodeIterableList6.reverse();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean16 = node15.isThis();
        node12.addChildToBack(node15);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList8, 52, node15 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList22 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray23 = nodeIterableList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList24 = nodeIterableList22.reverse();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean32 = node31.isThis();
        node28.addChildToBack(node31);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList24, 52, node31 };
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList38 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray39 = nodeIterableList38.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList40 = nodeIterableList38.reverse();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString((int) (short) 100, "hi!");
        boolean boolean48 = node47.isThis();
        node44.addChildToBack(node47);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 45, (short) -1, (short) -1, nodeIterableList40, 52, node47 };
        java.lang.Object[][] objArray51 = new java.lang.Object[][] { objArray18, objArray34, objArray50 };
        java.lang.Object[][] objArray52 = nodeIterableList2.toArray(objArray51);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList53 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray54 = nodeIterableList53.toArray();
        int int56 = nodeIterableList53.lastIndexOf((java.lang.Object) (short) 0);
        java.lang.Object[] objArray57 = nodeIterableList53.toArray();
        boolean boolean58 = nodeIterableList2.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList53);
        java.util.stream.Stream<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableStream59 = nodeIterableList53.parallelStream();
        java.lang.Object[] objArray60 = nodeIterableList53.toArray();
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor61 = nodeIterableList53.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean63 = jSDocInfo62.isExterns();
        int int64 = jSDocInfo62.getParameterCount();
        jSDocInfo62.setLicense("None");
        boolean boolean67 = jSDocInfo62.hasFileOverview();
        boolean boolean68 = jSDocInfo62.isExport();
        java.lang.String str69 = jSDocInfo62.getDeprecationReason();
        boolean boolean70 = nodeIterableList53.equals((java.lang.Object) jSDocInfo62);
        java.lang.Object[] objArray71 = nodeIterableList53.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList72 = com.google.common.collect.ImmutableList.of();
        java.lang.Object[] objArray73 = nodeIterableList72.toArray();
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableList74 = nodeIterableList72.reverse();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition80 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray81 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] { typePosition75, typePosition76, typePosition77, typePosition78, typePosition79, typePosition80 };
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray82 = nodeIterableList72.toArray(typePositionArray81);
        java.util.Iterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor83 = nodeIterableList72.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.Iterable<com.google.javascript.rhino.Node>> nodeIterableItor84 = nodeIterableList72.listIterator();
        java.lang.Object[] objArray85 = nodeIterableList72.toArray();
        boolean boolean86 = nodeIterableList53.containsAll((java.util.Collection<java.lang.Iterable<com.google.javascript.rhino.Node>>) nodeIterableList72);
        int int87 = nodeIterableList53.size();
        org.junit.Assert.assertNotNull(nodeIterableList0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList2);
        org.junit.Assert.assertNotNull(nodeIterableList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(nodeIterableList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[45, -1, -1, [], 52, OR hi!]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(nodeIterableList53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(nodeIterableStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(nodeIterableItor61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(nodeIterableList74);
        org.junit.Assert.assertNotNull(typePositionArray81);
        org.junit.Assert.assertNotNull(typePositionArray82);
        org.junit.Assert.assertNotNull(nodeIterableItor83);
        org.junit.Assert.assertNotNull(nodeIterableItor84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }
}


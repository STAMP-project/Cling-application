import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest35 {

    public static boolean debug = false;

    @Test
    public void test17501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17501");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) 10, locale4);
        long long8 = dateTimeZone2.convertLocalToUTC((long) (byte) 0, false);
        boolean boolean9 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str12 = dateTimeZone11.getID();
        long long15 = dateTimeZone11.adjustOffset(187200001L, false);
        long long19 = dateTimeZone11.convertLocalToUTC(600000L, false, 35L);
        boolean boolean20 = dateTimeZone2.equals((java.lang.Object) dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone21.convertUTCToLocal((long) (byte) 0);
        java.lang.String str24 = dateTimeZone21.toString();
        long long26 = dateTimeZone21.convertUTCToLocal(0L);
        int int28 = dateTimeZone21.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        long long32 = dateTimeZone21.getMillisKeepLocal(dateTimeZone29, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forID("UTC");
        int int36 = dateTimeZone34.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone34.getShortName((long) (byte) 0, locale38);
        int int41 = dateTimeZone34.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone45.getName((long) ' ', locale47);
        boolean boolean49 = dateTimeZone43.equals((java.lang.Object) dateTimeZone45);
        boolean boolean50 = dateTimeZone34.equals((java.lang.Object) dateTimeZone45);
        boolean boolean51 = dateTimeZone34.isFixed();
        long long53 = dateTimeZone29.getMillisKeepLocal(dateTimeZone34, 3600052L);
        long long56 = dateTimeZone34.convertLocalToUTC(115200052L, false);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone34.getShortName((-118799903L), locale58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone60.isLocalDateTimeGap(localDateTime62);
        long long66 = dateTimeZone60.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant67 = null;
        int int68 = dateTimeZone60.getOffset(readableInstant67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        boolean boolean70 = dateTimeZone69.isFixed();
        int int72 = dateTimeZone69.getStandardOffset(0L);
        java.lang.String str74 = dateTimeZone69.getNameKey(1L);
        java.lang.String str76 = dateTimeZone69.getShortName((long) 100);
        boolean boolean77 = dateTimeZone60.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        long long80 = dateTimeZone78.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        boolean boolean82 = dateTimeZone60.equals((java.lang.Object) dateTimeZone78);
        long long85 = dateTimeZone78.convertLocalToUTC((long) '4', false);
        long long87 = dateTimeZone78.convertUTCToLocal((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime88 = null;
        boolean boolean89 = dateTimeZone78.isLocalDateTimeGap(localDateTime88);
        long long91 = dateTimeZone34.getMillisKeepLocal(dateTimeZone78, (-115200000L));
        long long93 = dateTimeZone2.getMillisKeepLocal(dateTimeZone34, (-604799899L));
        java.util.TimeZone timeZone94 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone95 = org.joda.time.DateTimeZone.forTimeZone(timeZone94);
        org.joda.time.DateTimeZone dateTimeZone96 = org.joda.time.DateTimeZone.forTimeZone(timeZone94);
        org.joda.time.DateTimeZone dateTimeZone97 = org.joda.time.DateTimeZone.forTimeZone(timeZone94);
        org.joda.time.LocalDateTime localDateTime98 = null;
        boolean boolean99 = dateTimeZone97.isLocalDateTimeGap(localDateTime98);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:32" + "'", str5, "+35:32");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-127920000L) + "'", long8 == (-127920000L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 187200001L + "'", long15 == 187200001L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 600000L + "'", long19 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3600000L) + "'", long23 == (-3600000L));
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3600000L) + "'", long26 == (-3600000L));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3600000) + "'", int28 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599990L) + "'", long32 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3600052L + "'", long53 == 3600052L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 115200052L + "'", long56 == 115200052L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeZone78);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-3600000L) + "'", long80 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 3600052L + "'", long85 == 3600052L);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-3599990L) + "'", long87 == (-3599990L));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-111600000L) + "'", long91 == (-111600000L));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-476879899L) + "'", long93 == (-476879899L));
        org.junit.Assert.assertNotNull(timeZone94);
        org.junit.Assert.assertEquals(timeZone94.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(dateTimeZone97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test17502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17502");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(126060000);
        java.lang.String str3 = dateTimeZone1.getShortName(5520000L);
        java.lang.String str4 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+35:01" + "'", str3, "+35:01");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:01" + "'", str4, "+35:01");
    }

    @Test
    public void test17503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17503");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        long long6 = dateTimeZone4.nextTransition((long) 10);
        java.lang.String str7 = dateTimeZone4.toString();
        int int9 = dateTimeZone4.getStandardOffset(115200001L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone4.getName(120720000L, locale11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
    }

    @Test
    public void test17504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17504");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str21 = dateTimeZone19.getName(10L);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        boolean boolean23 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        long long26 = dateTimeZone19.convertLocalToUTC((-3599848L), true);
        boolean boolean28 = dateTimeZone19.isStandardOffset(698460010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 152L + "'", long26 == 152L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17505");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName((long) (byte) 0, locale5);
        java.lang.String str8 = dateTimeZone0.getNameKey(115200001L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        long long12 = dateTimeZone0.nextTransition((-2100000L));
        long long14 = dateTimeZone0.convertUTCToLocal(116760000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3600000L) + "'", long2 == (-3600000L));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2100000L) + "'", long12 == (-2100000L));
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 113160000L + "'", long14 == 113160000L);
    }

    @Test
    public void test17506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17506");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long11 = dateTimeZone3.convertLocalToUTC((-115200000L), false, 5700000L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        java.lang.String str20 = dateTimeZone12.getName((-1L));
        long long23 = dateTimeZone12.convertLocalToUTC(129660000L, true);
        long long25 = dateTimeZone12.previousTransition((long) 349200000);
        boolean boolean27 = dateTimeZone12.isStandardOffset((-115199965L));
        long long29 = dateTimeZone3.getMillisKeepLocal(dateTimeZone12, 127920000L);
        boolean boolean30 = dateTimeZone12.isFixed();
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone12.getName((-356399900L), locale32);
        java.lang.String str34 = dateTimeZone12.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-111600000L) + "'", long11 == (-111600000L));
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 129660000L + "'", long23 == 129660000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 349200000L + "'", long25 == 349200000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 124320000L + "'", long29 == 124320000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
    }

    @Test
    public void test17507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(52L, locale4);
        boolean boolean7 = dateTimeZone2.isStandardOffset(0L);
        boolean boolean9 = dateTimeZone2.isStandardOffset((-277199999L));
        long long12 = dateTimeZone2.convertLocalToUTC(294720000L, true);
        long long16 = dateTimeZone2.convertLocalToUTC((-10799990L), false, (-709259966L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 294720000L + "'", long12 == 294720000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-10799990L) + "'", long16 == (-10799990L));
    }

    @Test
    public void test17508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17508");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        long long11 = dateTimeZone0.convertLocalToUTC(115200000L, true, 1L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone0.getOffset(readableInstant12);
        int int15 = dateTimeZone0.getOffset((-475199965L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        long long20 = dateTimeZone17.previousTransition((-3600001L));
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        long long23 = dateTimeZone17.nextTransition(115200001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        boolean boolean25 = dateTimeZone0.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone0.getOffset(readableInstant26);
        int int29 = dateTimeZone0.getOffset(133200000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600001L) + "'", long20 == (-3600001L));
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200001L + "'", long23 == 115200001L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17509");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3600000L) + "'", long2 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3600000L) + "'", long5 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test17510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17510");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:10");
        int int3 = dateTimeZone1.getOffset(126060032L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        long long18 = dateTimeZone4.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long21 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone4.getName(0L, locale23);
        int int26 = dateTimeZone4.getStandardOffset((long) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone4.getOffset(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName((-1L), locale34);
        java.lang.String str36 = dateTimeZone29.getID();
        long long40 = dateTimeZone29.convertLocalToUTC(115200000L, true, 1L);
        long long42 = dateTimeZone4.getMillisKeepLocal(dateTimeZone29, 0L);
        java.util.TimeZone timeZone43 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        boolean boolean45 = dateTimeZone1.equals((java.lang.Object) dateTimeZone44);
        long long47 = dateTimeZone1.previousTransition(232080000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 600000 + "'", int3 == 600000);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 232080000L + "'", long47 == 232080000L);
    }

    @Test
    public void test17511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17511");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) 'a', true, (long) (byte) -1);
        boolean boolean18 = dateTimeZone0.equals((java.lang.Object) (-3599990L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName(0L, locale24);
        java.lang.String str26 = dateTimeZone19.getID();
        java.lang.String str28 = dateTimeZone19.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str32 = dateTimeZone30.getShortName((long) 'a');
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone30.getShortName((long) (short) -1, locale34);
        int int37 = dateTimeZone30.getOffset((long) 115200000);
        int int39 = dateTimeZone30.getStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone30.getID();
        long long42 = dateTimeZone19.getMillisKeepLocal(dateTimeZone30, (long) 0);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 115199999L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        boolean boolean47 = dateTimeZone45.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone48 = dateTimeZone45.toTimeZone();
        boolean boolean50 = dateTimeZone45.isStandardOffset(100L);
        java.lang.String str51 = dateTimeZone45.getID();
        boolean boolean53 = dateTimeZone45.equals((java.lang.Object) 1);
        int int55 = dateTimeZone45.getOffsetFromLocal(115200052L);
        java.util.TimeZone timeZone56 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getStandardOffset((-1680000L));
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone57.isLocalDateTimeGap(localDateTime60);
        boolean boolean62 = dateTimeZone0.equals((java.lang.Object) boolean61);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+32:00" + "'", str32, "+32:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+32:00" + "'", str35, "+32:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 115200000 + "'", int37 == 115200000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 115200000 + "'", int39 == 115200000);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+32:00" + "'", str40, "+32:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-115200000L) + "'", long42 == (-115200000L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17512");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (short) 10);
        boolean boolean7 = dateTimeZone2.isFixed();
        boolean boolean9 = dateTimeZone2.isStandardOffset(115200035L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str12 = dateTimeZone2.getShortName((-366180000L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 126060000 + "'", int4 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:01" + "'", str12, "+35:01");
    }

    @Test
    public void test17513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17513");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long12 = dateTimeZone0.previousTransition(0L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 0, true, 0L);
        int int18 = dateTimeZone0.getStandardOffset((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone0.getOffset(readableInstant19);
        boolean boolean21 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17514");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str11 = dateTimeZone9.getShortName(349200010L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone9.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone14 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long18 = dateTimeZone16.previousTransition((long) '4');
        java.lang.String str20 = dateTimeZone16.getShortName(1920000L);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        long long23 = dateTimeZone16.previousTransition((-361680000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-361680000L) + "'", long23 == (-361680000L));
    }

    @Test
    public void test17515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17515");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 'a');
        java.lang.String str4 = dateTimeZone1.toString();
        java.lang.String str6 = dateTimeZone1.getName((-360060010L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
    }

    @Test
    public void test17516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17516");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.previousTransition((long) (short) 10);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(360000032L, locale5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        long long12 = dateTimeZone8.adjustOffset(0L, true);
        boolean boolean13 = dateTimeZone8.isFixed();
        long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (-115200000L));
        java.lang.String str16 = dateTimeZone1.toString();
        long long18 = dateTimeZone1.previousTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forID("-01:52");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str23 = dateTimeZone22.getID();
        java.lang.String str25 = dateTimeZone22.getShortName((long) (short) 10);
        java.lang.String str27 = dateTimeZone22.getName(97L);
        long long29 = dateTimeZone20.getMillisKeepLocal(dateTimeZone22, 115200000L);
        int int31 = dateTimeZone20.getOffsetFromLocal((-11L));
        boolean boolean32 = dateTimeZone1.equals((java.lang.Object) (-11L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+01:00" + "'", str6, "+01:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-111600010L) + "'", long15 == (-111600010L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+01:00" + "'", str16, "+01:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 108480000L + "'", long29 == 108480000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-6720000) + "'", int31 == (-6720000));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17517");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((-118799900L));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.lang.String str13 = dateTimeZone8.getNameKey(1L);
        java.lang.String str15 = dateTimeZone8.getShortName((long) 100);
        long long17 = dateTimeZone8.convertUTCToLocal(9L);
        boolean boolean18 = dateTimeZone1.equals((java.lang.Object) long17);
        long long20 = dateTimeZone1.convertUTCToLocal(8099990L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 9L + "'", long17 == 9L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 123299990L + "'", long20 == 123299990L);
    }

    @Test
    public void test17518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17518");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        long long9 = dateTimeZone1.previousTransition((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        long long13 = dateTimeZone1.nextTransition((-178080000L));
        java.lang.String str14 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-178080000L) + "'", long13 == (-178080000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
    }

    @Test
    public void test17519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17519");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.lang.String str13 = dateTimeZone8.getShortName((long) (byte) 100);
        java.lang.String str15 = dateTimeZone8.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone8.getOffset(readableInstant16);
        boolean boolean19 = dateTimeZone8.isStandardOffset((long) (short) 1);
        long long23 = dateTimeZone8.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean25 = dateTimeZone8.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forID("UTC");
        long long29 = dateTimeZone8.getMillisKeepLocal(dateTimeZone27, 10L);
        java.lang.String str31 = dateTimeZone8.getNameKey((long) 600000);
        boolean boolean32 = dateTimeZone8.isFixed();
        long long34 = dateTimeZone8.convertUTCToLocal((long) (short) 100);
        java.lang.String str36 = dateTimeZone8.getShortName(359999989L);
        int int38 = dateTimeZone8.getOffsetFromLocal((-190800010L));
        boolean boolean39 = dateTimeZone7.equals((java.lang.Object) (-190800010L));
        int int41 = dateTimeZone7.getStandardOffset(223680000L);
        long long44 = dateTimeZone7.adjustOffset(0L, false);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone7.getShortName(10800100L, locale46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200000L + "'", long23 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
    }

    @Test
    public void test17520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17520");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone0.getNameKey(52L);
        int int23 = dateTimeZone0.getOffsetFromLocal(360000000L);
        int int25 = dateTimeZone0.getOffset(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone27 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        java.lang.String str29 = dateTimeZone28.toString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone28.getShortName(244860010L, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
    }

    @Test
    public void test17521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17521");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.lang.String str20 = dateTimeZone4.getName((long) (short) -1);
        java.lang.String str22 = dateTimeZone4.getShortName((-299399900L));
        long long24 = dateTimeZone4.nextTransition((-169200000L));
        long long26 = dateTimeZone4.previousTransition(11699990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-169200000L) + "'", long24 == (-169200000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 11699990L + "'", long26 == 11699990L);
    }

    @Test
    public void test17522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17522");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 10);
        int int13 = dateTimeZone6.getOffset((long) (short) 1);
        int int15 = dateTimeZone6.getStandardOffset((long) 100);
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) 97);
        int int19 = dateTimeZone6.getOffsetFromLocal(241200000L);
        java.lang.String str21 = dateTimeZone6.getName(475199997L);
        java.lang.Object obj22 = null;
        boolean boolean23 = dateTimeZone6.equals(obj22);
        java.lang.String str25 = dateTimeZone6.getShortName((-1859900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test17523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        int int10 = dateTimeZone4.getOffsetFromLocal((-115200000L));
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone4.getStandardOffset(349800001L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone4.getName((-391860000L), locale16);
        long long20 = dateTimeZone4.adjustOffset(350400000L, true);
        java.lang.String str21 = dateTimeZone4.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 350400000L + "'", long20 == 350400000L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test17524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17524");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (short) -1, locale5);
        int int8 = dateTimeZone1.getOffset((long) 115200000);
        int int10 = dateTimeZone1.getStandardOffset((long) (short) 10);
        int int12 = dateTimeZone1.getStandardOffset((-1L));
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone1.getName((long) 187200000, locale14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone1.getOffset(readableInstant16);
        java.lang.String str18 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str22 = dateTimeZone20.getShortName((long) 'a');
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone20.getShortName((long) (short) -1, locale24);
        int int27 = dateTimeZone20.getOffset((long) 115200000);
        int int29 = dateTimeZone20.getStandardOffset((long) (short) 10);
        int int31 = dateTimeZone20.getStandardOffset((-1L));
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone20.getName((long) 187200000, locale33);
        java.lang.String str35 = dateTimeZone20.getID();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone20.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone20.getStandardOffset(367200000L);
        int int41 = dateTimeZone20.getOffset((-111539990L));
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone20.getShortName((-148199900L), locale43);
        boolean boolean45 = dateTimeZone1.equals((java.lang.Object) (-148199900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 115200000 + "'", int8 == 115200000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 115200000 + "'", int10 == 115200000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+32:00" + "'", str15, "+32:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 115200000 + "'", int17 == 115200000);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+32:00" + "'", str18, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+32:00" + "'", str22, "+32:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+32:00" + "'", str25, "+32:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 115200000 + "'", int27 == 115200000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 115200000 + "'", int29 == 115200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 115200000 + "'", int31 == 115200000);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+32:00" + "'", str34, "+32:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+32:00" + "'", str35, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 115200000 + "'", int39 == 115200000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 115200000 + "'", int41 == 115200000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+32:00" + "'", str44, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test17525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3600000);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean4 = dateTimeZone3.isFixed();
        java.lang.String str5 = dateTimeZone3.getID();
        long long7 = dateTimeZone3.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.lang.String str13 = dateTimeZone8.getShortName((long) (byte) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone8.getName((long) 115200000, locale15);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (-118799903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        boolean boolean20 = dateTimeZone8.isFixed();
        int int22 = dateTimeZone8.getOffset((-187799900L));
        boolean boolean23 = dateTimeZone1.equals((java.lang.Object) int22);
        int int25 = dateTimeZone1.getOffsetFromLocal((-13919948L));
        int int27 = dateTimeZone1.getOffset(3120000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+32:00" + "'", str5, "+32:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599903L) + "'", long18 == (-3599903L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3600000 + "'", int25 == 3600000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3600000 + "'", int27 == 3600000);
    }

    @Test
    public void test17526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17526");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 10L);
        java.lang.String str23 = dateTimeZone0.getNameKey((long) 600000);
        boolean boolean24 = dateTimeZone0.isFixed();
        long long26 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        boolean boolean27 = dateTimeZone0.isFixed();
        int int29 = dateTimeZone0.getOffset((-360000000L));
        long long32 = dateTimeZone0.adjustOffset(119400000L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.Class<?> wildcardClass34 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 119400000L + "'", long32 == 119400000L);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test17527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17527");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        int int6 = dateTimeZone0.getStandardOffset((-7200000L));
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(360000097L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str15 = dateTimeZone13.getShortName((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone16.getOffset(readableInstant17);
        int int20 = dateTimeZone16.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone21.getShortName((-1L), locale26);
        int int29 = dateTimeZone21.getOffsetFromLocal(0L);
        long long31 = dateTimeZone16.getMillisKeepLocal(dateTimeZone21, (long) 115200000);
        long long33 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        long long36 = dateTimeZone34.convertUTCToLocal((long) (byte) 0);
        java.lang.String str37 = dateTimeZone34.toString();
        long long39 = dateTimeZone34.convertUTCToLocal(0L);
        int int41 = dateTimeZone34.getOffset((long) (short) 100);
        long long43 = dateTimeZone13.getMillisKeepLocal(dateTimeZone34, (-111600001L));
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone34, (-4200011L));
        java.lang.String str47 = dateTimeZone0.getShortName(25L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+32:00" + "'", str15, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 115200000L + "'", long31 == 115200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200001L + "'", long33 == 115200001L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3599999L + "'", long43 == 3599999L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-4200011L) + "'", long45 == (-4200011L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
    }

    @Test
    public void test17528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17528");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone21.getShortName((-1L), locale26);
        int int29 = dateTimeZone21.getOffsetFromLocal(0L);
        long long31 = dateTimeZone21.convertUTCToLocal((long) 0);
        long long33 = dateTimeZone21.previousTransition(0L);
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 3600001L);
        java.util.TimeZone timeZone36 = dateTimeZone21.toTimeZone();
        java.util.TimeZone timeZone37 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone38.equals((java.lang.Object) 100);
        int int42 = dateTimeZone38.getStandardOffset((long) ' ');
        java.lang.String str43 = dateTimeZone38.getID();
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        boolean boolean46 = dateTimeZone21.equals((java.lang.Object) dateTimeZone38);
        long long48 = dateTimeZone38.nextTransition(478800097L);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone38.getName(197L, locale50);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3600001L + "'", long35 == 3600001L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 478800097L + "'", long48 == 478800097L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
    }

    @Test
    public void test17529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17529");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long15 = dateTimeZone0.convertLocalToUTC(187200000L, true, 126060000L);
        java.lang.Object obj16 = null;
        boolean boolean17 = dateTimeZone0.equals(obj16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        java.lang.String str25 = dateTimeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        int int34 = dateTimeZone26.getOffsetFromLocal(0L);
        java.lang.String str36 = dateTimeZone26.getShortName(0L);
        java.lang.String str38 = dateTimeZone26.getShortName(1L);
        long long40 = dateTimeZone18.getMillisKeepLocal(dateTimeZone26, (long) ' ');
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone18.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, 5700000L);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        boolean boolean47 = dateTimeZone46.isFixed();
        int int49 = dateTimeZone46.getStandardOffset(0L);
        java.lang.String str51 = dateTimeZone46.getNameKey(1L);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone46.getShortName((long) (short) -1, locale53);
        java.util.TimeZone timeZone55 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long59 = dateTimeZone18.getMillisKeepLocal(dateTimeZone57, 223380100L);
        int int61 = dateTimeZone57.getOffsetFromLocal((-1083599900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 187200000L + "'", long15 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5700000L + "'", long45 == 5700000L);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 223380100L + "'", long59 == 223380100L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test17530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17530");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 'a');
        java.lang.String str11 = dateTimeZone1.getName(5700000L);
        int int13 = dateTimeZone1.getStandardOffset((long) 39120000);
        int int15 = dateTimeZone1.getOffsetFromLocal(477720000L);
        java.util.TimeZone timeZone16 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:00");
    }

    @Test
    public void test17531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17531");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 126060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126060000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17532");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(37920000, 361920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 361920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17533");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long6 = dateTimeZone2.convertLocalToUTC((-723599899L), true, (-223620001L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-727199899L) + "'", long6 == (-727199899L));
    }

    @Test
    public void test17534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17534");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone1.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone14.isLocalDateTimeGap(localDateTime16);
        java.lang.String str19 = dateTimeZone14.getShortName((long) (short) 10);
        int int21 = dateTimeZone14.getOffset((long) (short) 1);
        int int23 = dateTimeZone14.getStandardOffset((long) 100);
        long long25 = dateTimeZone8.getMillisKeepLocal(dateTimeZone14, (long) 97);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.lang.String str31 = dateTimeZone26.getShortName((long) (byte) 100);
        java.lang.String str33 = dateTimeZone26.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone26.getOffset(readableInstant34);
        long long37 = dateTimeZone8.getMillisKeepLocal(dateTimeZone26, (long) 97);
        long long41 = dateTimeZone26.convertLocalToUTC(360000000L, true, 356400000L);
        java.util.TimeZone timeZone42 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone43.getName((-349199998L), locale46);
        long long49 = dateTimeZone1.getMillisKeepLocal(dateTimeZone43, (-1083599793L));
        java.lang.Class<?> wildcardClass50 = dateTimeZone43.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 97L + "'", long25 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 360000000L + "'", long41 == 360000000L);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1083599793L) + "'", long49 == (-1083599793L));
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test17535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17535");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int12 = dateTimeZone10.getOffsetFromLocal(212460010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115200000 + "'", int7 == 115200000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17536");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getShortName(32L);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) 115200000);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        int int22 = dateTimeZone12.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone12.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.util.TimeZone timeZone26 = dateTimeZone12.toTimeZone();
        long long28 = dateTimeZone12.convertUTCToLocal((-243120001L));
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone12.getOffset(readableInstant29);
        java.lang.String str32 = dateTimeZone12.getName(302400000L);
        boolean boolean33 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone12.getName(352799932L, locale35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-243120001L) + "'", long28 == (-243120001L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test17537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        java.lang.String str5 = dateTimeZone1.getName((-115199948L));
        int int7 = dateTimeZone1.getOffsetFromLocal((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        long long12 = dateTimeZone1.convertLocalToUTC(118800000L, false);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        boolean boolean18 = dateTimeZone13.isStandardOffset(100L);
        java.lang.String str19 = dateTimeZone13.getID();
        java.lang.String str21 = dateTimeZone13.getShortName(1L);
        java.lang.String str23 = dateTimeZone13.getNameKey((long) (short) 100);
        java.lang.String str25 = dateTimeZone13.getName((-187799900L));
        boolean boolean26 = dateTimeZone13.isFixed();
        long long28 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (long) '#');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+32:00" + "'", str5, "+32:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115200000 + "'", int7 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3600000L + "'", long12 == 3600000L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200035L + "'", long28 == 115200035L);
    }

    @Test
    public void test17538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17538");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        java.lang.String str20 = dateTimeZone1.getShortName(100L);
        java.lang.String str22 = dateTimeZone1.getNameKey((long) (short) -1);
        long long25 = dateTimeZone1.convertLocalToUTC((long) 100, false);
        java.lang.String str27 = dateTimeZone1.getName((-65L));
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone1.getOffset(readableInstant28);
        boolean boolean31 = dateTimeZone1.isStandardOffset((long) 600000);
        java.lang.String str33 = dateTimeZone1.getName((-243960000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-359999900L) + "'", long25 == (-359999900L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:00" + "'", str27, "+100:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 360000000 + "'", int29 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:00" + "'", str33, "+100:00");
    }

    @Test
    public void test17539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17539");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str31 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone32.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getNameKey((long) (short) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone41.isFixed();
        int int44 = dateTimeZone41.getStandardOffset(0L);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone41.getShortName((-1L), locale46);
        java.lang.String str49 = dateTimeZone41.getShortName(1L);
        long long51 = dateTimeZone36.getMillisKeepLocal(dateTimeZone41, (long) (-1));
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone36.getName(0L, locale53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone55.getOffset(readableInstant56);
        int int59 = dateTimeZone55.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        boolean boolean61 = dateTimeZone60.isFixed();
        int int63 = dateTimeZone60.getStandardOffset(0L);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone60.getShortName((-1L), locale65);
        int int68 = dateTimeZone60.getOffsetFromLocal(0L);
        long long70 = dateTimeZone55.getMillisKeepLocal(dateTimeZone60, (long) 115200000);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone55.getShortName((long) (short) 0, locale72);
        long long75 = dateTimeZone36.getMillisKeepLocal(dateTimeZone55, (long) ' ');
        long long77 = dateTimeZone0.getMillisKeepLocal(dateTimeZone55, 9L);
        long long81 = dateTimeZone55.convertLocalToUTC((-359999990L), true, (-306000000L));
        int int83 = dateTimeZone55.getOffsetFromLocal((-125999968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 115200000L + "'", long70 == 115200000L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 32L + "'", long75 == 32L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 9L + "'", long77 == 9L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-359999990L) + "'", long81 == (-359999990L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test17540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long9 = dateTimeZone5.nextTransition(115200000L);
        long long11 = dateTimeZone5.convertUTCToLocal((long) 'a');
        boolean boolean13 = dateTimeZone5.isStandardOffset((-1L));
        java.util.TimeZone timeZone14 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int19 = dateTimeZone17.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        long long22 = dateTimeZone17.convertUTCToLocal((long) (short) 100);
        long long24 = dateTimeZone17.nextTransition((-187799900L));
        int int26 = dateTimeZone17.getOffset((-3600000L));
        boolean boolean27 = dateTimeZone15.equals((java.lang.Object) dateTimeZone17);
        java.lang.String str29 = dateTimeZone17.getShortName(478800100L);
        long long31 = dateTimeZone17.nextTransition((-1083599803L));
        long long33 = dateTimeZone17.previousTransition(367319900L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115200000L + "'", long9 == 115200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 115200000 + "'", int19 == 115200000);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 115200100L + "'", long22 == 115200100L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-187799900L) + "'", long24 == (-187799900L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 115200000 + "'", int26 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1083599803L) + "'", long31 == (-1083599803L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 367319900L + "'", long33 == 367319900L);
    }

    @Test
    public void test17541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17541");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-3660000), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17542");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long6 = dateTimeZone1.convertUTCToLocal((long) (short) 100);
        long long8 = dateTimeZone1.nextTransition((-187799900L));
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName((-359400000L), locale10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName(367200000L, locale13);
        java.lang.String str16 = dateTimeZone1.getShortName((-162000000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 115200100L + "'", long6 == 115200100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-187799900L) + "'", long8 == (-187799900L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+32:00" + "'", str11, "+32:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+32:00" + "'", str14, "+32:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:00" + "'", str16, "+32:00");
    }

    @Test
    public void test17543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17543");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getShortName((long) (byte) 100);
        java.lang.String str12 = dateTimeZone5.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone5.getOffset(readableInstant13);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) (short) 1);
        long long20 = dateTimeZone5.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int22 = dateTimeZone5.getOffsetFromLocal((long) (short) 0);
        java.lang.String str24 = dateTimeZone5.getNameKey((long) ' ');
        java.lang.String str25 = dateTimeZone5.toString();
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, 97L);
        long long29 = dateTimeZone0.nextTransition(233999999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 233999999L + "'", long29 == 233999999L);
    }

    @Test
    public void test17544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17544");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone3.getShortName((long) (byte) 10, locale27);
        long long31 = dateTimeZone3.adjustOffset(0L, true);
        boolean boolean32 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        int int36 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName((-1L), locale38);
        int int41 = dateTimeZone33.getOffsetFromLocal(0L);
        int int43 = dateTimeZone33.getStandardOffset((long) (byte) 10);
        java.lang.String str45 = dateTimeZone33.getName((long) (byte) 10);
        int int47 = dateTimeZone33.getStandardOffset((-1L));
        int int49 = dateTimeZone33.getOffsetFromLocal((long) 10);
        int int51 = dateTimeZone33.getStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean54 = dateTimeZone52.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.lang.String str58 = dateTimeZone56.getNameKey((long) (short) 10);
        boolean boolean59 = dateTimeZone56.isFixed();
        long long63 = dateTimeZone56.convertLocalToUTC((long) (short) 0, true, 115199999L);
        long long65 = dateTimeZone33.getMillisKeepLocal(dateTimeZone56, 90L);
        boolean boolean67 = dateTimeZone56.isStandardOffset((-10320000L));
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone56.isLocalDateTimeGap(localDateTime68);
        boolean boolean70 = dateTimeZone3.equals((java.lang.Object) dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 90L + "'", long65 == 90L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test17545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17545");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(52L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        int int20 = dateTimeZone10.getStandardOffset((long) (byte) 10);
        java.lang.String str22 = dateTimeZone10.getName((long) (byte) 10);
        long long24 = dateTimeZone10.previousTransition(52L);
        long long26 = dateTimeZone9.getMillisKeepLocal(dateTimeZone10, (long) 'a');
        long long29 = dateTimeZone10.adjustOffset((long) (byte) 0, false);
        long long32 = dateTimeZone10.adjustOffset(349200010L, false);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long) 10);
        long long36 = dateTimeZone10.nextTransition(123900152L);
        long long38 = dateTimeZone10.nextTransition(475199991L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone39.getOffset(readableInstant40);
        int int43 = dateTimeZone39.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        boolean boolean45 = dateTimeZone44.isFixed();
        int int47 = dateTimeZone44.getStandardOffset(0L);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone44.getShortName((-1L), locale49);
        int int52 = dateTimeZone44.getOffsetFromLocal(0L);
        long long54 = dateTimeZone39.getMillisKeepLocal(dateTimeZone44, (long) 115200000);
        int int56 = dateTimeZone44.getOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str60 = dateTimeZone58.getName(10L);
        java.util.TimeZone timeZone61 = dateTimeZone58.toTimeZone();
        boolean boolean62 = dateTimeZone44.equals((java.lang.Object) dateTimeZone58);
        int int64 = dateTimeZone44.getOffsetFromLocal(0L);
        long long66 = dateTimeZone44.convertUTCToLocal(10799999L);
        java.lang.String str67 = dateTimeZone44.getID();
        java.util.TimeZone timeZone68 = dateTimeZone44.toTimeZone();
        java.lang.String str70 = dateTimeZone44.getName((-293280000L));
        boolean boolean71 = dateTimeZone10.equals((java.lang.Object) str70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000097L + "'", long26 == 360000097L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 349200010L + "'", long32 == 349200010L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 115200010L + "'", long34 == 115200010L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 123900152L + "'", long36 == 123900152L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 475199991L + "'", long38 == 475199991L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 115200000L + "'", long54 == 115200000L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-01:00" + "'", str60, "-01:00");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10799999L + "'", long66 == 10799999L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test17546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(0L, locale19);
        int int22 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone0.previousTransition(360060000L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone25.getShortName((-1L), locale30);
        int int33 = dateTimeZone25.getOffsetFromLocal(0L);
        java.lang.String str35 = dateTimeZone25.getShortName(0L);
        long long39 = dateTimeZone25.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long42 = dateTimeZone25.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone25.getID();
        java.lang.String str44 = dateTimeZone25.toString();
        long long47 = dateTimeZone25.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone48 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long56 = dateTimeZone52.convertLocalToUTC((long) 1, false, (-359999900L));
        boolean boolean57 = dateTimeZone0.equals((java.lang.Object) dateTimeZone52);
        long long61 = dateTimeZone52.convertLocalToUTC((-1919948L), true, 75600000L);
        int int63 = dateTimeZone52.getStandardOffset(108000097L);
        boolean boolean64 = dateTimeZone52.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 360060000L + "'", long24 == 360060000L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1919948L) + "'", long61 == (-1919948L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test17547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17547");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName((-115200000L), locale8);
        int int11 = dateTimeZone1.getOffset(115200097L);
        int int13 = dateTimeZone1.getOffsetFromLocal(3599999L);
        long long17 = dateTimeZone1.convertLocalToUTC(32L, false, (-187859900L));
        boolean boolean19 = dateTimeZone1.isStandardOffset(0L);
        boolean boolean20 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test17548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17548");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 10);
        int int4 = dateTimeZone2.getOffsetFromLocal(118800001L);
        java.lang.String str6 = dateTimeZone2.getShortName(360000097L);
        boolean boolean7 = dateTimeZone2.isFixed();
        int int9 = dateTimeZone2.getOffsetFromLocal((long) 600000);
        boolean boolean11 = dateTimeZone2.isStandardOffset(464399991L);
        java.util.TimeZone timeZone12 = dateTimeZone2.toTimeZone();
        int int14 = dateTimeZone2.getStandardOffset((-1680000L));
        boolean boolean16 = dateTimeZone2.isStandardOffset(118800000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 600000 + "'", int4 == 600000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:10" + "'", str6, "+00:10");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 600000 + "'", int9 == 600000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 600000 + "'", int14 == 600000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17549");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone0.getOffsetFromLocal((long) 115200000);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        java.lang.String str16 = dateTimeZone0.toString();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName((long) 3600000, locale18);
        long long22 = dateTimeZone0.convertLocalToUTC((-359400000L), false);
        java.lang.String str24 = dateTimeZone0.getShortName(592320001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-359400000L) + "'", long22 == (-359400000L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test17550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17550");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long26 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone32.getOffset(readableInstant33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test17551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17551");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        long long20 = dateTimeZone0.adjustOffset(127499999L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str23 = dateTimeZone0.getShortName(228480052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 127499999L + "'", long20 == 127499999L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test17552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17552");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(356460000L, locale8);
        long long13 = dateTimeZone0.convertLocalToUTC((-1443599900L), false, (-115199968L));
        long long15 = dateTimeZone0.previousTransition(0L);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1443599900L) + "'", long13 == (-1443599900L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test17553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17553");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long21 = dateTimeZone18.adjustOffset((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone18.getName((long) 0);
        java.lang.String str25 = dateTimeZone18.getShortName(9L);
        long long27 = dateTimeZone6.getMillisKeepLocal(dateTimeZone18, 0L);
        boolean boolean29 = dateTimeZone18.isStandardOffset(367200000L);
        long long31 = dateTimeZone18.nextTransition((-188880000L));
        java.util.TimeZone timeZone32 = dateTimeZone18.toTimeZone();
        java.lang.String str33 = dateTimeZone18.getID();
        long long35 = dateTimeZone18.convertUTCToLocal(108000097L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 1);
        int int40 = dateTimeZone38.getStandardOffset(363600052L);
        java.lang.String str41 = dateTimeZone38.toString();
        int int43 = dateTimeZone38.getStandardOffset(151800002L);
        boolean boolean44 = dateTimeZone18.equals((java.lang.Object) 151800002L);
        long long47 = dateTimeZone18.convertLocalToUTC((-115799903L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-188880000L) + "'", long31 == (-188880000L));
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 108000097L + "'", long35 == 108000097L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 115260000 + "'", int40 == 115260000);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+32:01" + "'", str41, "+32:01");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 115260000 + "'", int43 == 115260000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-115799903L) + "'", long47 == (-115799903L));
    }

    @Test
    public void test17554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17554");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertUTCToLocal(464400001L);
        long long9 = dateTimeZone1.convertUTCToLocal(115199999L);
        int int11 = dateTimeZone1.getStandardOffset((-59965L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName((-48720001L), locale13);
        java.lang.String str15 = dateTimeZone1.getID();
        boolean boolean17 = dateTimeZone1.isStandardOffset(41579999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 464400001L + "'", long7 == 464400001L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115199999L + "'", long9 == 115199999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test17555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17555");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition((long) 115200000);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) 'a');
        boolean boolean9 = dateTimeZone0.isFixed();
        long long11 = dateTimeZone0.previousTransition((long) (byte) 100);
        java.lang.String str12 = dateTimeZone0.toString();
        long long14 = dateTimeZone0.previousTransition((-234060001L));
        int int16 = dateTimeZone0.getStandardOffset((-1083599793L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 115200000L + "'", long4 == 115200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-234060001L) + "'", long14 == (-234060001L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test17556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17556");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone2.equals(obj10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str14 = dateTimeZone2.getNameKey((-8760000L));
        java.util.TimeZone timeZone15 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test17557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17557");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone6 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str9 = dateTimeZone7.getNameKey((long) (short) 10);
        boolean boolean10 = dateTimeZone7.isFixed();
        boolean boolean12 = dateTimeZone7.isStandardOffset(115200100L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone7.getOffset(readableInstant13);
        java.util.TimeZone timeZone15 = dateTimeZone7.toTimeZone();
        boolean boolean16 = dateTimeZone2.equals((java.lang.Object) timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int19 = dateTimeZone17.getOffset(466320000L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone17.getName(543600010L, locale21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
    }

    @Test
    public void test17558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17558");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 115200000, false, (long) 'a');
        java.lang.String str7 = dateTimeZone1.getName(360000097L);
        int int9 = dateTimeZone1.getOffsetFromLocal((-118800000L));
        java.lang.String str11 = dateTimeZone1.getShortName(115200052L);
        int int13 = dateTimeZone1.getStandardOffset(349199999L);
        java.lang.String str14 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 115200000 + "'", int9 == 115200000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+32:00" + "'", str11, "+32:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 115200000 + "'", int13 == 115200000);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+32:00" + "'", str14, "+32:00");
    }

    @Test
    public void test17559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17559");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        int int6 = dateTimeZone2.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        int int10 = dateTimeZone7.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone7.getShortName((-1L), locale12);
        int int15 = dateTimeZone7.getOffsetFromLocal(0L);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, (long) 115200000);
        boolean boolean19 = dateTimeZone2.isStandardOffset(115200000L);
        long long22 = dateTimeZone2.convertLocalToUTC((long) 10, true);
        java.lang.String str23 = dateTimeZone2.toString();
        int int25 = dateTimeZone2.getOffset(52L);
        java.lang.String str27 = dateTimeZone2.getNameKey(0L);
        java.lang.String str29 = dateTimeZone2.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("UTC");
        int int33 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getShortName((long) (byte) 0, locale35);
        boolean boolean37 = dateTimeZone2.equals((java.lang.Object) locale35);
        long long39 = dateTimeZone2.nextTransition((long) 'a');
        long long42 = dateTimeZone2.adjustOffset((long) (short) 100, true);
        long long44 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, 359999998L);
        long long46 = dateTimeZone1.nextTransition(234000010L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone47.getShortName((long) 115200000, locale49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = dateTimeZone47.getOffset(readableInstant51);
        java.lang.String str54 = dateTimeZone47.getShortName(32L);
        boolean boolean56 = dateTimeZone47.isStandardOffset((long) 115200000);
        long long58 = dateTimeZone47.previousTransition(115200100L);
        long long60 = dateTimeZone1.getMillisKeepLocal(dateTimeZone47, (long) (short) -1);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone47.getShortName(234000010L, locale62);
        long long65 = dateTimeZone47.previousTransition(0L);
        java.lang.String str67 = dateTimeZone47.getNameKey((-359999900L));
        int int69 = dateTimeZone47.getStandardOffset((-230460001L));
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant72 = null;
        int int73 = dateTimeZone71.getOffset(readableInstant72);
        java.util.TimeZone timeZone74 = dateTimeZone71.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        long long77 = dateTimeZone75.nextTransition(100L);
        int int79 = dateTimeZone75.getOffsetFromLocal(115199999L);
        java.lang.Class<?> wildcardClass80 = dateTimeZone75.getClass();
        boolean boolean81 = dateTimeZone47.equals((java.lang.Object) dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 97L + "'", long39 == 97L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 547199998L + "'", long44 == 547199998L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 234000010L + "'", long46 == 234000010L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 115200100L + "'", long58 == 115200100L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 187199999L + "'", long60 == 187199999L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test17560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17560");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (byte) 100, locale8);
        long long12 = dateTimeZone0.convertLocalToUTC(0L, false);
        int int14 = dateTimeZone0.getOffsetFromLocal((long) (byte) -1);
        long long16 = dateTimeZone0.convertUTCToLocal(547199998L);
        long long18 = dateTimeZone0.previousTransition(32L);
        java.lang.String str19 = dateTimeZone0.toString();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getName(8640162L, locale21);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        int int25 = dateTimeZone0.getStandardOffset((-120719948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 547199998L + "'", long16 == 547199998L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17561");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long13 = dateTimeZone0.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        java.lang.String str15 = dateTimeZone0.getShortName((long) (byte) 10);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str18 = dateTimeZone17.toString();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone17.getName(118860000L, locale20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        java.lang.String str24 = dateTimeZone23.getID();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone23.getShortName(0L, locale26);
        java.lang.String str29 = dateTimeZone23.getName((-356400001L));
        boolean boolean30 = dateTimeZone23.isFixed();
        boolean boolean31 = dateTimeZone17.equals((java.lang.Object) dateTimeZone23);
        long long33 = dateTimeZone17.previousTransition((-39600001L));
        long long37 = dateTimeZone17.convertLocalToUTC(0L, false, (-187199948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-39600001L) + "'", long33 == (-39600001L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test17562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17562");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:52");
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone1.getOffset(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        java.lang.String str13 = dateTimeZone5.getShortName(1L);
        java.lang.String str14 = dateTimeZone5.getID();
        long long17 = dateTimeZone5.convertLocalToUTC(359999999L, true);
        long long21 = dateTimeZone5.convertLocalToUTC(10L, true, (long) 10);
        long long23 = dateTimeZone5.previousTransition(32L);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone5, (long) 187200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.lang.String str27 = dateTimeZone5.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:52" + "'", str2, "+10:52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39120000 + "'", int4 == 39120000);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 359999999L + "'", long17 == 359999999L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 226320000L + "'", long25 == 226320000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test17563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17563");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str21 = dateTimeZone19.getName(10L);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        boolean boolean23 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime24);
        java.util.TimeZone timeZone26 = dateTimeZone19.toTimeZone();
        long long28 = dateTimeZone19.nextTransition((-190799903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-190799903L) + "'", long28 == (-190799903L));
    }

    @Test
    public void test17564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17564");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        long long10 = dateTimeZone0.convertUTCToLocal((long) (short) 0);
        long long12 = dateTimeZone0.previousTransition((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long21 = dateTimeZone18.adjustOffset((long) 1, true);
        java.lang.String str23 = dateTimeZone18.getNameKey(151200000L);
        boolean boolean24 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        long long26 = dateTimeZone18.previousTransition(169199991L);
        long long28 = dateTimeZone18.previousTransition(464399980L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 600000L + "'", long12 == 600000L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 169199991L + "'", long26 == 169199991L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 464399980L + "'", long28 == 464399980L);
    }

    @Test
    public void test17565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17565");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.nextTransition(1L);
        long long8 = dateTimeZone0.adjustOffset((-2L), false);
        java.lang.String str10 = dateTimeZone0.getShortName((-6720000L));
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-2L) + "'", long8 == (-2L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17566");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (short) 10);
        long long9 = dateTimeZone2.adjustOffset(1860197L, false);
        java.lang.String str11 = dateTimeZone2.getNameKey(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone12.getOffset(readableInstant13);
        int int16 = dateTimeZone12.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        int int20 = dateTimeZone17.getStandardOffset(0L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone17.getShortName((-1L), locale22);
        int int25 = dateTimeZone17.getOffsetFromLocal(0L);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone17, (long) 115200000);
        boolean boolean29 = dateTimeZone12.isStandardOffset(115200000L);
        long long32 = dateTimeZone12.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone33.getOffset(readableInstant34);
        int int37 = dateTimeZone33.getStandardOffset(1L);
        long long39 = dateTimeZone12.getMillisKeepLocal(dateTimeZone33, (long) 10);
        int int41 = dateTimeZone12.getOffsetFromLocal((-115200000L));
        long long43 = dateTimeZone12.convertUTCToLocal(118799999L);
        long long46 = dateTimeZone12.adjustOffset(352320000L, true);
        long long48 = dateTimeZone2.getMillisKeepLocal(dateTimeZone12, (-112079965L));
        java.lang.Object obj49 = null;
        boolean boolean50 = dateTimeZone2.equals(obj49);
        int int52 = dateTimeZone2.getStandardOffset(132720000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 126060000 + "'", int4 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1860197L + "'", long9 == 1860197L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 118799999L + "'", long43 == 118799999L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 352320000L + "'", long46 == 352320000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 13980035L + "'", long48 == 13980035L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 126060000 + "'", int52 == 126060000);
    }

    @Test
    public void test17567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        int int7 = dateTimeZone0.getOffset((-10320000L));
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        int int10 = dateTimeZone0.getOffsetFromLocal(365700000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test17568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17568");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (short) -1, locale5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone8.getShortName((long) (short) 10);
        java.lang.String str15 = dateTimeZone8.getShortName((long) 115200000);
        int int17 = dateTimeZone8.getStandardOffset(0L);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 127499999L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone8.getOffset(readableInstant20);
        boolean boolean23 = dateTimeZone8.isStandardOffset((long) (short) 1);
        int int25 = dateTimeZone8.getStandardOffset(35L);
        long long27 = dateTimeZone8.previousTransition(35520000L);
        java.lang.String str28 = dateTimeZone8.toString();
        long long30 = dateTimeZone8.previousTransition(97680052L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 242699999L + "'", long19 == 242699999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35520000L + "'", long27 == 35520000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97680052L + "'", long30 == 97680052L);
    }

    @Test
    public void test17569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17569");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        int int3 = dateTimeZone1.getOffset((long) 115200000);
        java.lang.String str5 = dateTimeZone1.getShortName((-116699999L));
        int int7 = dateTimeZone1.getStandardOffset(115200000L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone8.getOffset(readableInstant9);
        int int12 = dateTimeZone8.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        int int16 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone13.getShortName((-1L), locale18);
        int int21 = dateTimeZone13.getOffsetFromLocal(0L);
        long long23 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, (long) 115200000);
        boolean boolean25 = dateTimeZone8.isStandardOffset(115200000L);
        long long28 = dateTimeZone8.convertLocalToUTC((long) 10, true);
        java.lang.String str29 = dateTimeZone8.toString();
        int int31 = dateTimeZone8.getOffset(52L);
        long long34 = dateTimeZone8.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        java.lang.String str40 = dateTimeZone38.getNameKey(32L);
        boolean boolean41 = dateTimeZone8.equals((java.lang.Object) 32L);
        long long43 = dateTimeZone8.convertUTCToLocal((long) (-6720000));
        java.lang.String str45 = dateTimeZone8.getNameKey((-113100000L));
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone8.getName(151200000L, locale47);
        boolean boolean49 = dateTimeZone1.equals((java.lang.Object) str48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.097" + "'", str5, "+00:00:00.097");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200000L + "'", long23 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-6720000L) + "'", long43 == (-6720000L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test17570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17570");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone1.getOffset(readableInstant11);
        long long14 = dateTimeZone1.nextTransition((-185280000L));
        java.lang.String str15 = dateTimeZone1.getID();
        int int17 = dateTimeZone1.getStandardOffset(72000010L);
        boolean boolean18 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-185280000L) + "'", long14 == (-185280000L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test17571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17571");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        long long11 = dateTimeZone0.previousTransition((-7200000L));
        long long13 = dateTimeZone0.convertUTCToLocal((-115199968L));
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        long long18 = dateTimeZone0.convertLocalToUTC((-55679968L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7200000L) + "'", long11 == (-7200000L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115199968L) + "'", long13 == (-115199968L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-55679968L) + "'", long18 == (-55679968L));
    }

    @Test
    public void test17572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17572");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        boolean boolean17 = dateTimeZone5.isFixed();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        long long27 = dateTimeZone23.nextTransition(115200000L);
        long long29 = dateTimeZone23.convertUTCToLocal((long) 'a');
        boolean boolean31 = dateTimeZone23.isStandardOffset((-1L));
        java.util.TimeZone timeZone32 = dateTimeZone23.toTimeZone();
        long long34 = dateTimeZone23.nextTransition((-115199948L));
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone23.getShortName((-351299848L), locale36);
        java.lang.String str39 = dateTimeZone23.getShortName((long) 349200000);
        long long43 = dateTimeZone23.convertLocalToUTC(125999999L, false, (-11L));
        boolean boolean44 = dateTimeZone5.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str46 = dateTimeZone23.getShortName(126060100L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone23.getOffset(readableInstant47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115200000L + "'", long2 == 115200000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-115199948L) + "'", long34 == (-115199948L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 125999999L + "'", long43 == 125999999L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test17573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17573");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        int int6 = dateTimeZone0.getOffset((long) '#');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey(190800000L);
        java.lang.String str12 = dateTimeZone8.getNameKey(359999990L);
        java.lang.String str13 = dateTimeZone8.getID();
        long long15 = dateTimeZone8.nextTransition((-70080000L));
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone8.getShortName(230340107L, locale17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-70080000L) + "'", long15 == (-70080000L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test17574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17574");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:01");
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17575");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long8 = dateTimeZone6.convertUTCToLocal(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone6.getName(0L, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        java.lang.String str19 = dateTimeZone12.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone12.getOffset(readableInstant20);
        boolean boolean23 = dateTimeZone12.isStandardOffset((long) (short) 1);
        boolean boolean24 = dateTimeZone6.equals((java.lang.Object) boolean23);
        boolean boolean26 = dateTimeZone6.isStandardOffset((long) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        int int31 = dateTimeZone27.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getShortName((-1L), locale37);
        int int40 = dateTimeZone32.getOffsetFromLocal(0L);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 115200000);
        boolean boolean44 = dateTimeZone27.isStandardOffset(115200000L);
        java.lang.String str46 = dateTimeZone27.getName(0L);
        long long49 = dateTimeZone27.adjustOffset(115199991L, true);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone27.getName(0L, locale51);
        long long56 = dateTimeZone27.convertLocalToUTC((long) 0, false, 1L);
        boolean boolean57 = dateTimeZone27.isFixed();
        boolean boolean58 = dateTimeZone6.equals((java.lang.Object) boolean57);
        long long60 = dateTimeZone6.previousTransition((-2L));
        long long63 = dateTimeZone6.convertLocalToUTC(126060000L, true);
        int int65 = dateTimeZone6.getOffsetFromLocal((-75599965L));
        int int67 = dateTimeZone6.getOffset(1800100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 115199991L + "'", long49 == 115199991L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-2L) + "'", long60 == (-2L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 126060000L + "'", long63 == 126060000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test17576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17576");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:52");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str4 = dateTimeZone3.getID();
        java.lang.String str6 = dateTimeZone3.getShortName((long) (short) 10);
        java.lang.String str8 = dateTimeZone3.getName(97L);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, 115200000L);
        int int12 = dateTimeZone1.getOffsetFromLocal((-11L));
        int int14 = dateTimeZone1.getStandardOffset(148140051L);
        long long16 = dateTimeZone1.nextTransition(221280000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 108480000L + "'", long10 == 108480000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-6720000) + "'", int12 == (-6720000));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-6720000) + "'", int14 == (-6720000));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 221280000L + "'", long16 == 221280000L);
    }

    @Test
    public void test17577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17577");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName((-10L), locale11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone13.adjustOffset((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone13.toString();
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone13.isLocalDateTimeGap(localDateTime18);
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, 356460000L);
        java.lang.String str22 = dateTimeZone0.toString();
        long long24 = dateTimeZone0.previousTransition((-125999965L));
        int int26 = dateTimeZone0.getOffsetFromLocal((long) 352320000);
        long long28 = dateTimeZone0.previousTransition((-124799903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 356460000L + "'", long21 == 356460000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-125999965L) + "'", long24 == (-125999965L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-124799903L) + "'", long28 == (-124799903L));
    }

    @Test
    public void test17578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17578");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        int int7 = dateTimeZone0.getOffset((-1L));
        java.lang.String str8 = dateTimeZone0.getID();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getShortName(3599935L, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getName((long) (byte) 0, locale17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.lang.String str21 = dateTimeZone12.getShortName((-65L));
        int int23 = dateTimeZone12.getOffsetFromLocal(79199999L);
        long long26 = dateTimeZone12.convertLocalToUTC(32L, false);
        boolean boolean28 = dateTimeZone12.isStandardOffset((-76019965L));
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 150599981L);
        int int32 = dateTimeZone12.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 150599981L + "'", long30 == 150599981L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test17579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17579");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        long long23 = dateTimeZone0.convertLocalToUTC(115200100L, false);
        long long26 = dateTimeZone0.convertLocalToUTC(302400010L, true);
        int int28 = dateTimeZone0.getOffset(297239996L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200100L + "'", long23 == 115200100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 302400010L + "'", long26 == 302400010L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17580");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getOffsetFromLocal((long) 'a');
        long long5 = dateTimeZone1.nextTransition(626399981L);
        long long9 = dateTimeZone1.convertLocalToUTC(99L, true, (-181680000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 626399981L + "'", long5 == 626399981L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 99L + "'", long9 == 99L);
    }

    @Test
    public void test17581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone0.getNameKey(115199999L);
        java.util.TimeZone timeZone22 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        long long29 = dateTimeZone23.convertLocalToUTC(115199999L, true, (-39600000L));
        long long32 = dateTimeZone23.adjustOffset(723600097L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 115199999L + "'", long29 == 115199999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 723600097L + "'", long32 == 723600097L);
    }

    @Test
    public void test17582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17582");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName(1L);
        long long15 = dateTimeZone8.convertLocalToUTC(115200097L, false);
        int int17 = dateTimeZone8.getStandardOffset((long) 360000000);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        long long27 = dateTimeZone8.getMillisKeepLocal(dateTimeZone23, (-65L));
        java.lang.String str29 = dateTimeZone8.getShortName((long) 351120000);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone8.getShortName((-360000000L), locale31);
        java.lang.String str34 = dateTimeZone8.getShortName((-460799948L));
        long long36 = dateTimeZone8.convertUTCToLocal(3599990L);
        int int38 = dateTimeZone8.getOffset(3600033L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200097L + "'", long15 == 115200097L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-65L) + "'", long27 == (-65L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3599990L + "'", long36 == 3599990L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test17583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17583");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str10 = dateTimeZone8.getNameKey((-53999989L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone8.isLocalDateTimeGap(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17584");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) 0);
        java.lang.String str12 = dateTimeZone0.getNameKey(360000097L);
        long long14 = dateTimeZone0.previousTransition(52L);
        int int16 = dateTimeZone0.getStandardOffset(115199991L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 126060000, false, (long) 349200000);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getShortName((-475199965L), locale22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone28.previousTransition((long) ' ');
        java.lang.String str31 = dateTimeZone28.getID();
        java.lang.String str32 = dateTimeZone28.getID();
        boolean boolean33 = dateTimeZone28.isFixed();
        java.lang.String str34 = dateTimeZone28.toString();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone28.getOffset(readableInstant35);
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, 952319997L);
        java.lang.String str39 = dateTimeZone28.getID();
        long long43 = dateTimeZone28.convertLocalToUTC((-547799890L), true, (-467999903L));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        boolean boolean45 = dateTimeZone44.isFixed();
        int int47 = dateTimeZone44.getStandardOffset(0L);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone44.getShortName((-1L), locale49);
        int int52 = dateTimeZone44.getOffsetFromLocal(0L);
        java.lang.String str54 = dateTimeZone44.getShortName(0L);
        long long58 = dateTimeZone44.convertLocalToUTC((long) (byte) 0, false, 0L);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone44.getShortName(0L, locale60);
        boolean boolean62 = dateTimeZone28.equals((java.lang.Object) 0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 126060000L + "'", long20 == 126060000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 952319997L + "'", long38 == 952319997L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-547799890L) + "'", long43 == (-547799890L));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17585");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        boolean boolean18 = dateTimeZone6.isFixed();
        int int20 = dateTimeZone6.getOffset((-187799900L));
        java.lang.String str21 = dateTimeZone6.getID();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) 36060000, locale26);
        boolean boolean29 = dateTimeZone24.isStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone24.isLocalDateTimeGap(localDateTime30);
        long long33 = dateTimeZone6.getMillisKeepLocal(dateTimeZone24, 235920010L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone34.getOffset(readableInstant35);
        long long38 = dateTimeZone34.nextTransition((long) 115200000);
        java.lang.String str40 = dateTimeZone34.getNameKey((long) (short) 100);
        boolean boolean42 = dateTimeZone34.isStandardOffset((long) 'a');
        long long45 = dateTimeZone34.convertLocalToUTC(0L, false);
        long long47 = dateTimeZone34.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone48.isFixed();
        int int51 = dateTimeZone48.getStandardOffset(0L);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone48.getShortName((-1L), locale53);
        int int56 = dateTimeZone48.getOffsetFromLocal(0L);
        int int58 = dateTimeZone48.getStandardOffset((long) (byte) 10);
        java.lang.String str60 = dateTimeZone48.getName((long) (byte) 10);
        java.lang.String str62 = dateTimeZone48.getName((long) '#');
        long long65 = dateTimeZone48.convertLocalToUTC((long) 10, false);
        long long69 = dateTimeZone48.convertLocalToUTC((long) (-1), true, 0L);
        org.joda.time.ReadableInstant readableInstant70 = null;
        int int71 = dateTimeZone48.getOffset(readableInstant70);
        java.lang.String str72 = dateTimeZone48.getID();
        java.util.TimeZone timeZone73 = dateTimeZone48.toTimeZone();
        long long75 = dateTimeZone34.getMillisKeepLocal(dateTimeZone48, (long) 349200000);
        java.lang.String str77 = dateTimeZone34.getName(478320000L);
        boolean boolean78 = dateTimeZone6.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale81 = null;
        java.lang.String str82 = dateTimeZone34.getShortName(356400032L, locale81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 48720010L + "'", long33 == 48720010L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 349200000L + "'", long75 == 349200000L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
    }

    @Test
    public void test17586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17586");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone8.isLocalDateTimeGap(localDateTime11);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test17587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17587");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        int int18 = dateTimeZone1.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone1.getShortName(126060100L);
        java.lang.String str21 = dateTimeZone1.getID();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone1.getName((-73680000L), locale23);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getShortName((-221700001L), locale26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+32:00" + "'", str21, "+32:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+32:00" + "'", str27, "+32:00");
    }

    @Test
    public void test17588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17588");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone4.getOffset(readableInstant5);
        int int8 = dateTimeZone4.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        int int17 = dateTimeZone9.getOffsetFromLocal(0L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) 115200000);
        boolean boolean21 = dateTimeZone4.isStandardOffset(115200000L);
        long long24 = dateTimeZone4.convertLocalToUTC((long) 10, true);
        java.lang.String str25 = dateTimeZone4.toString();
        int int27 = dateTimeZone4.getOffset(52L);
        java.lang.String str29 = dateTimeZone4.getNameKey(0L);
        java.lang.String str31 = dateTimeZone4.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forID("UTC");
        int int35 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone33.getShortName((long) (byte) 0, locale37);
        boolean boolean39 = dateTimeZone4.equals((java.lang.Object) locale37);
        long long41 = dateTimeZone4.nextTransition((long) 'a');
        long long44 = dateTimeZone4.adjustOffset((long) (short) 100, true);
        long long46 = dateTimeZone3.getMillisKeepLocal(dateTimeZone4, 359999998L);
        long long48 = dateTimeZone3.nextTransition(234000010L);
        long long50 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, 244800000L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone3.getShortName(36000000L, locale52);
        int int55 = dateTimeZone3.getStandardOffset((-187199900L));
        java.lang.Object obj56 = null;
        boolean boolean57 = dateTimeZone3.equals(obj56);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 115200000L + "'", long19 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 547199998L + "'", long46 == 547199998L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 234000010L + "'", long48 == 234000010L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 244800000L + "'", long50 == 244800000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+52:00" + "'", str53, "+52:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 187200000 + "'", int55 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test17589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17589");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        long long6 = dateTimeZone0.convertLocalToUTC(243120100L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 243120100L + "'", long6 == 243120100L);
    }

    @Test
    public void test17590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getShortName((long) (short) 0, locale40);
        long long43 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) ' ');
        java.lang.String str45 = dateTimeZone4.getNameKey(3600001L);
        boolean boolean46 = dateTimeZone4.isFixed();
        java.lang.String str48 = dateTimeZone4.getNameKey(360060000L);
        long long51 = dateTimeZone4.adjustOffset(466320000L, false);
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = dateTimeZone4.getOffset(readableInstant52);
        int int55 = dateTimeZone4.getStandardOffset((-187859900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 466320000L + "'", long51 == 466320000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test17591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17591");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        long long17 = dateTimeZone0.convertLocalToUTC((long) 10, false);
        long long21 = dateTimeZone0.convertLocalToUTC((long) (-1), true, 0L);
        java.lang.String str23 = dateTimeZone0.getNameKey(187200000L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forID("UTC");
        int int27 = dateTimeZone25.getStandardOffset(0L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 0, locale29);
        long long32 = dateTimeZone25.nextTransition((long) (byte) -1);
        long long34 = dateTimeZone25.convertUTCToLocal((long) (byte) 10);
        int int36 = dateTimeZone25.getStandardOffset(0L);
        java.util.TimeZone timeZone37 = dateTimeZone25.toTimeZone();
        boolean boolean38 = dateTimeZone0.equals((java.lang.Object) timeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        long long42 = dateTimeZone40.nextTransition((-127919990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-127919990L) + "'", long42 == (-127919990L));
    }

    @Test
    public void test17592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17592");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, (int) (short) 1);
        long long5 = dateTimeZone2.adjustOffset(590400152L, true);
        int int7 = dateTimeZone2.getOffsetFromLocal((-460800053L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 590400152L + "'", long5 == 590400152L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36060000 + "'", int7 == 36060000);
    }

    @Test
    public void test17593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName(711300000L, locale13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getName(124320000L, locale16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(44880000L, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone21.adjustOffset((long) (short) 10, true);
        java.lang.String str26 = dateTimeZone21.getNameKey((long) 126060000);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone21.getName(127499999L, locale28);
        java.lang.String str31 = dateTimeZone21.getName((-232079900L));
        boolean boolean32 = dateTimeZone0.equals((java.lang.Object) str31);
        boolean boolean33 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test17594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17594");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        long long9 = dateTimeZone0.previousTransition(3600032L);
        java.lang.String str10 = dateTimeZone0.getID();
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long14 = dateTimeZone0.convertUTCToLocal(115199998L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName((-302400000L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600032L + "'", long9 == 3600032L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 115199998L + "'", long14 == 115199998L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test17595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17595");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) '#');
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17596");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long13 = dateTimeZone0.convertUTCToLocal((-115199990L));
        int int15 = dateTimeZone0.getOffsetFromLocal(0L);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200052L);
        long long20 = dateTimeZone0.convertLocalToUTC((-105000009L), true);
        long long22 = dateTimeZone0.previousTransition((-125999968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115199990L) + "'", long13 == (-115199990L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-105000009L) + "'", long20 == (-105000009L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-125999968L) + "'", long22 == (-125999968L));
    }

    @Test
    public void test17597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17597");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str31 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone32.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getNameKey((long) (short) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone41.isFixed();
        int int44 = dateTimeZone41.getStandardOffset(0L);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone41.getShortName((-1L), locale46);
        java.lang.String str49 = dateTimeZone41.getShortName(1L);
        long long51 = dateTimeZone36.getMillisKeepLocal(dateTimeZone41, (long) (-1));
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone36.getName(0L, locale53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone55.getOffset(readableInstant56);
        int int59 = dateTimeZone55.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        boolean boolean61 = dateTimeZone60.isFixed();
        int int63 = dateTimeZone60.getStandardOffset(0L);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone60.getShortName((-1L), locale65);
        int int68 = dateTimeZone60.getOffsetFromLocal(0L);
        long long70 = dateTimeZone55.getMillisKeepLocal(dateTimeZone60, (long) 115200000);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone55.getShortName((long) (short) 0, locale72);
        long long75 = dateTimeZone36.getMillisKeepLocal(dateTimeZone55, (long) ' ');
        long long77 = dateTimeZone0.getMillisKeepLocal(dateTimeZone55, 9L);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) ' ');
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeZone80.getName(234000010L, locale82);
        long long85 = dateTimeZone80.convertUTCToLocal(349200010L);
        int int87 = dateTimeZone80.getOffset(127920010L);
        int int89 = dateTimeZone80.getStandardOffset(481920000L);
        java.lang.String str91 = dateTimeZone80.getShortName(115200000L);
        long long93 = dateTimeZone55.getMillisKeepLocal(dateTimeZone80, 52L);
        org.joda.time.LocalDateTime localDateTime94 = null;
        boolean boolean95 = dateTimeZone55.isLocalDateTimeGap(localDateTime94);
        long long98 = dateTimeZone55.adjustOffset(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 115200000L + "'", long70 == 115200000L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 32L + "'", long75 == 32L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 9L + "'", long77 == 9L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:32" + "'", str83, "+00:32");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 351120010L + "'", long85 == 351120010L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1920000 + "'", int87 == 1920000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1920000 + "'", int89 == 1920000);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:32" + "'", str91, "+00:32");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1919948L) + "'", long93 == (-1919948L));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
    }

    @Test
    public void test17598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17598");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200097L);
        java.lang.String str17 = dateTimeZone0.getNameKey((-55L));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        java.lang.String str21 = dateTimeZone18.toString();
        long long23 = dateTimeZone18.convertUTCToLocal(0L);
        int int25 = dateTimeZone18.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        long long29 = dateTimeZone18.getMillisKeepLocal(dateTimeZone26, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("UTC");
        int int33 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getShortName((long) (byte) 0, locale35);
        int int38 = dateTimeZone31.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone42.getName((long) ' ', locale44);
        boolean boolean46 = dateTimeZone40.equals((java.lang.Object) dateTimeZone42);
        boolean boolean47 = dateTimeZone31.equals((java.lang.Object) dateTimeZone42);
        boolean boolean48 = dateTimeZone31.isFixed();
        long long50 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, 3600052L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int55 = dateTimeZone53.getStandardOffset((long) (short) 10);
        boolean boolean57 = dateTimeZone53.isStandardOffset((long) (short) 10);
        java.lang.String str58 = dateTimeZone53.getID();
        boolean boolean59 = dateTimeZone31.equals((java.lang.Object) dateTimeZone53);
        java.lang.String str60 = dateTimeZone53.getID();
        long long62 = dateTimeZone0.getMillisKeepLocal(dateTimeZone53, (-223199999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-01:00" + "'", str45, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3600052L + "'", long50 == 3600052L);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 126060000 + "'", int55 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+35:01" + "'", str58, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+35:01" + "'", str60, "+35:01");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-349259999L) + "'", long62 == (-349259999L));
    }

    @Test
    public void test17599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17599");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long6 = dateTimeZone0.adjustOffset((long) (short) 0, false);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100, locale8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        int int14 = dateTimeZone10.getStandardOffset((long) ' ');
        java.lang.String str15 = dateTimeZone10.getID();
        java.util.TimeZone timeZone16 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long20 = dateTimeZone17.convertLocalToUTC(72000001L, true);
        boolean boolean21 = dateTimeZone0.equals((java.lang.Object) 72000001L);
        long long24 = dateTimeZone0.convertLocalToUTC(287940006L, true);
        java.lang.String str26 = dateTimeZone0.getName((long) (short) 100);
        long long30 = dateTimeZone0.convertLocalToUTC(87L, true, 467520000L);
        java.lang.Class<?> wildcardClass31 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 72000001L + "'", long20 == 72000001L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 287940006L + "'", long24 == 287940006L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 87L + "'", long30 == 87L);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test17600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17600");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(97, 0);
        long long6 = dateTimeZone2.convertLocalToUTC((long) (byte) 100, false, (-244799999L));
        long long8 = dateTimeZone2.previousTransition((long) (byte) 0);
        java.lang.String str10 = dateTimeZone2.getNameKey((-547799990L));
        long long14 = dateTimeZone2.convertLocalToUTC(41579999L, false, (-240660000L));
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone2.isLocalDateTimeGap(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-349199900L) + "'", long6 == (-349199900L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-307620001L) + "'", long14 == (-307620001L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 100);
        boolean boolean25 = dateTimeZone18.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long28 = dateTimeZone18.nextTransition(118800001L);
        java.util.TimeZone timeZone29 = dateTimeZone18.toTimeZone();
        java.lang.String str30 = dateTimeZone18.getID();
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone18.getOffset(readableInstant31);
        long long35 = dateTimeZone18.adjustOffset(234600000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 118800001L + "'", long28 == 118800001L);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 234600000L + "'", long35 == 234600000L);
    }

    @Test
    public void test17602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.lang.String str20 = dateTimeZone4.getShortName((long) 115200000);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone4.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone4.convertLocalToUTC((-118799913L), false);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone4.isLocalDateTimeGap(localDateTime26);
        boolean boolean29 = dateTimeZone4.isStandardOffset(432000000L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone4.getName(0L, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-118799913L) + "'", long25 == (-118799913L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
    }

    @Test
    public void test17603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17603");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        long long10 = dateTimeZone1.adjustOffset((-480899904L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-480899904L) + "'", long10 == (-480899904L));
    }

    @Test
    public void test17604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17604");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.previousTransition((long) ' ');
        java.lang.String str7 = dateTimeZone4.getID();
        java.lang.String str8 = dateTimeZone4.getID();
        long long10 = dateTimeZone4.previousTransition(115200000L);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone4.convertUTCToLocal((-306000000L));
        long long17 = dateTimeZone4.convertLocalToUTC(363600052L, true);
        int int19 = dateTimeZone4.getStandardOffset((-359999948L));
        java.lang.String str21 = dateTimeZone4.getNameKey(3599935L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-306000000L) + "'", long14 == (-306000000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 363600052L + "'", long17 == 363600052L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test17605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17605");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str32 = dateTimeZone0.getName((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int36 = dateTimeZone34.getOffset(129660000L);
        int int38 = dateTimeZone34.getOffset((-1L));
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone34, (-3599903L));
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone34.getOffset(readableInstant41);
        int int44 = dateTimeZone34.getStandardOffset((-345600001L));
        java.lang.String str46 = dateTimeZone34.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 115200000 + "'", int36 == 115200000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 115200000 + "'", int38 == 115200000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-118799903L) + "'", long40 == (-118799903L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 115200000 + "'", int42 == 115200000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 115200000 + "'", int44 == 115200000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+32:00" + "'", str46, "+32:00");
    }

    @Test
    public void test17606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17606");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(349200000, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17607");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long10 = dateTimeZone7.adjustOffset(110L, true);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int18 = dateTimeZone12.getOffset((long) 115200000);
        long long20 = dateTimeZone7.getMillisKeepLocal(dateTimeZone12, (long) (short) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = dateTimeZone12.getOffset(readableInstant21);
        java.lang.String str24 = dateTimeZone12.getName((-115199999L));
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone12.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone12.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 110L + "'", long10 == 110L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3599999L + "'", long20 == 3599999L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17608");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.previousTransition((long) (short) 10);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(360000032L, locale5);
        java.lang.String str7 = dateTimeZone1.getID();
        long long11 = dateTimeZone1.convertLocalToUTC((-4199903L), false, 119400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+01:00" + "'", str6, "+01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7799903L) + "'", long11 == (-7799903L));
    }

    @Test
    public void test17609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17609");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        long long17 = dateTimeZone0.previousTransition((long) (byte) -1);
        int int19 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName((-356400000L), locale21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName(34080032L, locale24);
        long long28 = dateTimeZone0.adjustOffset(600010L, true);
        long long32 = dateTimeZone0.convertLocalToUTC(0L, true, (-606719980L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 600010L + "'", long28 == 600010L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test17610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17610");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        int int34 = dateTimeZone26.getOffsetFromLocal(0L);
        long long36 = dateTimeZone21.getMillisKeepLocal(dateTimeZone26, (long) 115200000);
        boolean boolean38 = dateTimeZone21.isStandardOffset(115200000L);
        long long41 = dateTimeZone21.convertLocalToUTC((long) 10, true);
        long long43 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 52L);
        long long45 = dateTimeZone0.convertUTCToLocal((long) (byte) 1);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone0.getShortName(126060100L, locale47);
        boolean boolean49 = dateTimeZone0.isFixed();
        java.lang.String str51 = dateTimeZone0.getNameKey((-118800000L));
        long long53 = dateTimeZone0.nextTransition(716460000L);
        java.util.TimeZone timeZone54 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 115200000L + "'", long36 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 716460000L + "'", long53 == 716460000L);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
    }

    @Test
    public void test17611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17611");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        int int14 = dateTimeZone0.getStandardOffset((-1L));
        int int16 = dateTimeZone0.getOffsetFromLocal((long) 10);
        int int18 = dateTimeZone0.getStandardOffset(0L);
        int int20 = dateTimeZone0.getOffset((-305700003L));
        int int22 = dateTimeZone0.getOffsetFromLocal(528600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test17612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17612");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        long long10 = dateTimeZone0.convertUTCToLocal((long) (short) 0);
        long long12 = dateTimeZone0.previousTransition((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone13.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long21 = dateTimeZone18.adjustOffset((long) 1, true);
        java.lang.String str23 = dateTimeZone18.getNameKey(151200000L);
        boolean boolean24 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        int int26 = dateTimeZone0.getOffsetFromLocal((long) 36060000);
        java.lang.String str27 = dateTimeZone0.getID();
        java.lang.String str29 = dateTimeZone0.getShortName(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone0.getName(121920010L, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 600000L + "'", long12 == 600000L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
    }

    @Test
    public void test17613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17613");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone3.isLocalDateTimeGap(localDateTime5);
        long long9 = dateTimeZone3.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone3.getOffset(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getNameKey(1L);
        java.lang.String str19 = dateTimeZone12.getShortName((long) 100);
        boolean boolean20 = dateTimeZone3.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone21.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        boolean boolean25 = dateTimeZone3.equals((java.lang.Object) dateTimeZone21);
        java.lang.String str26 = dateTimeZone21.getID();
        long long28 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 0L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone21.getShortName(129660000L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.052" + "'", str2, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3600000L) + "'", long23 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3600052L + "'", long28 == 3600052L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
    }

    @Test
    public void test17614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17614");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long26 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean35 = dateTimeZone28.equals((java.lang.Object) timeZone30);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone28.getShortName((-359399803L), locale37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone40.getShortName((long) 'a', locale42);
        long long46 = dateTimeZone40.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean48 = dateTimeZone47.isFixed();
        boolean boolean49 = dateTimeZone40.equals((java.lang.Object) dateTimeZone47);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone47.getShortName(356459990L, locale51);
        boolean boolean53 = dateTimeZone28.equals((java.lang.Object) 356459990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:00" + "'", str43, "+100:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17615");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone1.convertLocalToUTC(0L, true, 100L);
        long long8 = dateTimeZone1.convertLocalToUTC((-473100032L), true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3600000L + "'", long5 == 3600000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-469500032L) + "'", long8 == (-469500032L));
    }

    @Test
    public void test17616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17616");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        java.lang.String str3 = dateTimeZone1.getNameKey((-115199948L));
        long long7 = dateTimeZone1.convertLocalToUTC(100L, true, 3600032L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        long long20 = dateTimeZone8.nextTransition((long) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone21.isLocalDateTimeGap(localDateTime23);
        long long26 = dateTimeZone21.convertUTCToLocal(0L);
        java.lang.String str27 = dateTimeZone21.toString();
        long long30 = dateTimeZone21.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone21.isLocalDateTimeGap(localDateTime31);
        long long34 = dateTimeZone8.getMillisKeepLocal(dateTimeZone21, (long) (short) 100);
        long long38 = dateTimeZone21.convertLocalToUTC(52L, true, (long) 349800000);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 387120000L);
        long long42 = dateTimeZone1.nextTransition(0L);
        java.lang.String str43 = dateTimeZone1.toString();
        long long45 = dateTimeZone1.convertUTCToLocal(136799991L);
        long long49 = dateTimeZone1.convertLocalToUTC((-61139968L), false, 349800000L);
        int int51 = dateTimeZone1.getOffset((-230399999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-115199900L) + "'", long7 == (-115199900L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 502320000L + "'", long40 == 502320000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+32:00" + "'", str43, "+32:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 251999991L + "'", long45 == 251999991L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-176339968L) + "'", long49 == (-176339968L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 115200000 + "'", int51 == 115200000);
    }

    @Test
    public void test17617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17617");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffsetFromLocal(115200000L);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone0.getName(359999999L, locale4);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        int int20 = dateTimeZone10.getStandardOffset((long) (byte) 10);
        java.lang.String str22 = dateTimeZone10.getName((long) (byte) 10);
        long long24 = dateTimeZone10.previousTransition(52L);
        long long26 = dateTimeZone9.getMillisKeepLocal(dateTimeZone10, (long) 'a');
        long long29 = dateTimeZone10.adjustOffset((long) (byte) 0, false);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        java.lang.String str35 = dateTimeZone30.getShortName((long) (short) 10);
        int int37 = dateTimeZone30.getOffset((long) (short) 1);
        int int39 = dateTimeZone30.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone30.isLocalDateTimeGap(localDateTime40);
        int int43 = dateTimeZone30.getOffsetFromLocal((long) 115200000);
        boolean boolean44 = dateTimeZone10.equals((java.lang.Object) dateTimeZone30);
        int int46 = dateTimeZone10.getOffset((-3600000L));
        boolean boolean47 = dateTimeZone7.equals((java.lang.Object) int46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = dateTimeZone7.getOffset(readableInstant49);
        long long54 = dateTimeZone7.convertLocalToUTC(150599971L, true, (-299399900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000097L + "'", long26 == 360000097L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 150599971L + "'", long54 == 150599971L);
    }

    @Test
    public void test17618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17618");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        int int27 = dateTimeZone0.getStandardOffset(97L);
        int int29 = dateTimeZone0.getOffsetFromLocal((-1L));
        int int31 = dateTimeZone0.getStandardOffset(359999999L);
        long long35 = dateTimeZone0.convertLocalToUTC((-306000000L), false, 244199991L);
        java.lang.String str37 = dateTimeZone0.getShortName((-118799913L));
        java.lang.String str38 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-306000000L) + "'", long35 == (-306000000L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test17619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        long long12 = dateTimeZone0.nextTransition((long) 115200000);
        boolean boolean14 = dateTimeZone0.isStandardOffset((long) (short) 100);
        java.lang.String str16 = dateTimeZone0.getName(460800000L);
        long long20 = dateTimeZone0.convertLocalToUTC(360000032L, false, 350879999L);
        java.lang.Class<?> wildcardClass21 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 360000032L + "'", long20 == 360000032L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test17620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17620");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str11 = dateTimeZone0.toString();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName((-232079900L), locale13);
        boolean boolean15 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        java.lang.String str24 = dateTimeZone16.getShortName(1L);
        long long26 = dateTimeZone16.nextTransition((long) 0);
        long long28 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean32 = dateTimeZone16.equals((java.lang.Object) '#');
        long long34 = dateTimeZone16.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone35 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long39 = dateTimeZone36.adjustOffset((-3600000L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        boolean boolean41 = dateTimeZone36.isFixed();
        boolean boolean42 = dateTimeZone0.equals((java.lang.Object) dateTimeZone36);
        int int44 = dateTimeZone0.getStandardOffset((-359520001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600000L) + "'", long34 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3600000L) + "'", long39 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test17621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17621");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int37 = dateTimeZone35.getStandardOffset((long) (short) 10);
        boolean boolean39 = dateTimeZone35.isStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone35.getID();
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone35);
        long long43 = dateTimeZone13.convertUTCToLocal(115199999L);
        long long45 = dateTimeZone13.nextTransition(15900090L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 126060000 + "'", int37 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+35:01" + "'", str40, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 115199999L + "'", long43 == 115199999L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 15900090L + "'", long45 == 15900090L);
    }

    @Test
    public void test17622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        int int14 = dateTimeZone0.getStandardOffset((-1L));
        boolean boolean16 = dateTimeZone0.isStandardOffset(115199999L);
        java.lang.String str17 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test17623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long25 = dateTimeZone0.convertLocalToUTC(0L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, (long) (short) 10);
        java.lang.String str33 = dateTimeZone0.getNameKey(399600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test17624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getID();
        int int18 = dateTimeZone0.getOffsetFromLocal((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName((-1L), locale24);
        java.lang.String str27 = dateTimeZone19.getShortName(1L);
        java.lang.String str29 = dateTimeZone19.getNameKey((long) (byte) -1);
        java.lang.String str31 = dateTimeZone19.getShortName((long) (byte) -1);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 350879999L);
        long long35 = dateTimeZone19.convertUTCToLocal((-366180000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 350879999L + "'", long33 == 350879999L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-366180000L) + "'", long35 == (-366180000L));
    }

    @Test
    public void test17625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getShortName(32L);
        long long9 = dateTimeZone0.convertUTCToLocal(72000001L);
        java.lang.String str10 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 72000001L + "'", long9 == 72000001L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test17626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17626");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getShortName((long) (byte) 100);
        java.lang.String str12 = dateTimeZone5.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone5.getOffset(readableInstant13);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) (short) 1);
        long long20 = dateTimeZone5.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int22 = dateTimeZone5.getOffsetFromLocal((long) (short) 0);
        java.lang.String str24 = dateTimeZone5.getNameKey((long) ' ');
        java.lang.String str25 = dateTimeZone5.toString();
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, 97L);
        int int29 = dateTimeZone5.getOffset((-360000000L));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone31.getName((long) ' ', locale33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        long long37 = dateTimeZone5.getMillisKeepLocal(dateTimeZone31, (-460799948L));
        java.lang.String str39 = dateTimeZone5.getShortName((-3599903L));
        java.lang.String str41 = dateTimeZone5.getShortName((-79200000L));
        java.lang.String str43 = dateTimeZone5.getName((-3599848L));
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long47 = dateTimeZone45.previousTransition((long) (byte) -1);
        java.lang.String str49 = dateTimeZone45.getName(0L);
        java.lang.String str50 = dateTimeZone45.toString();
        long long52 = dateTimeZone5.getMillisKeepLocal(dateTimeZone45, (-368880000L));
        int int54 = dateTimeZone45.getOffset(14999999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-457199948L) + "'", long37 == (-457199948L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-368880000L) + "'", long52 == (-368880000L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test17627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17627");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        java.lang.String str48 = dateTimeZone23.getNameKey(0L);
        java.lang.String str50 = dateTimeZone23.getName((long) 0);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (long) 0);
        java.lang.String str54 = dateTimeZone0.getName(349200010L);
        int int56 = dateTimeZone0.getOffsetFromLocal((-7260001L));
        java.lang.String str57 = dateTimeZone0.getID();
        long long59 = dateTimeZone0.nextTransition(190800000L);
        int int61 = dateTimeZone0.getStandardOffset(52L);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeZone0.getShortName(251999991L, locale63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        boolean boolean66 = dateTimeZone65.isFixed();
        int int68 = dateTimeZone65.getStandardOffset(0L);
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone65.getShortName((-1L), locale70);
        int int73 = dateTimeZone65.getOffsetFromLocal(0L);
        int int75 = dateTimeZone65.getStandardOffset((long) (byte) 10);
        java.lang.String str77 = dateTimeZone65.getName((long) (byte) 10);
        int int79 = dateTimeZone65.getStandardOffset((-1L));
        int int81 = dateTimeZone65.getOffsetFromLocal((long) 10);
        long long84 = dateTimeZone65.adjustOffset(711300000L, false);
        boolean boolean85 = dateTimeZone0.equals((java.lang.Object) dateTimeZone65);
        java.lang.String str86 = dateTimeZone0.getID();
        java.util.Locale locale88 = null;
        java.lang.String str89 = dateTimeZone0.getShortName(244800006L, locale88);
        org.joda.time.LocalDateTime localDateTime90 = null;
        boolean boolean91 = dateTimeZone0.isLocalDateTimeGap(localDateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 190800000L + "'", long59 == 190800000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 711300000L + "'", long84 == 711300000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "UTC" + "'", str86, "UTC");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00" + "'", str89, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test17628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17628");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        boolean boolean8 = dateTimeZone2.isStandardOffset((-118800000L));
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long13 = dateTimeZone11.previousTransition((-115199999L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115199999L) + "'", long13 == (-115199999L));
    }

    @Test
    public void test17629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17629");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(97, 187260000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 187260000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17630");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, (int) (short) 10);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.lang.Class<?> wildcardClass4 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+01:10");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test17631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17631");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long3 = dateTimeZone1.nextTransition(460800000L);
        int int5 = dateTimeZone1.getOffset(723600097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 460800000L + "'", long3 == 460800000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test17632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName(711300000L, locale13);
        boolean boolean15 = dateTimeZone0.isFixed();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getName((-125999967L), locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone19.getShortName((long) (short) 10);
        int int26 = dateTimeZone19.getOffset((long) (short) 1);
        long long30 = dateTimeZone19.convertLocalToUTC((long) (short) 1, true, 1L);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone19.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.lang.String str34 = dateTimeZone19.getID();
        long long36 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, (-68399900L));
        int int38 = dateTimeZone0.getOffset(79199999L);
        boolean boolean39 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-68399900L) + "'", long36 == (-68399900L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test17633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17633");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        java.lang.String str5 = dateTimeZone1.getName((long) 115200000);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName((-169199989L), locale8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:00" + "'", str5, "+100:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+100:00" + "'", str9, "+100:00");
    }

    @Test
    public void test17634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17634");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        int int3 = dateTimeZone1.getOffset((long) 115200000);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1), locale5);
        java.lang.Class<?> wildcardClass7 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.097" + "'", str6, "+00:00:00.097");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test17635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17635");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        long long7 = dateTimeZone0.adjustOffset((long) ' ', true);
        java.lang.String str8 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getID();
        long long11 = dateTimeZone0.convertUTCToLocal(349200010L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getName((-10800000L), locale13);
        java.lang.String str16 = dateTimeZone0.getName(465000001L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (short) 10);
        java.lang.String str25 = dateTimeZone21.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        java.lang.String str34 = dateTimeZone26.getShortName(1L);
        long long36 = dateTimeZone21.getMillisKeepLocal(dateTimeZone26, (long) (-1));
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone21.getName(0L, locale38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone40.getOffset(readableInstant41);
        int int44 = dateTimeZone40.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone45.isFixed();
        int int48 = dateTimeZone45.getStandardOffset(0L);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone45.getShortName((-1L), locale50);
        int int53 = dateTimeZone45.getOffsetFromLocal(0L);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) 115200000);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone40.getShortName((long) (short) 0, locale57);
        long long60 = dateTimeZone21.getMillisKeepLocal(dateTimeZone40, (long) ' ');
        java.lang.String str62 = dateTimeZone21.getNameKey(3600001L);
        java.lang.String str63 = dateTimeZone21.toString();
        java.lang.String str65 = dateTimeZone21.getName(481920000L);
        boolean boolean66 = dateTimeZone0.equals((java.lang.Object) dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone21.isLocalDateTimeGap(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 349200010L + "'", long11 == 349200010L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 115200000L + "'", long55 == 115200000L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test17636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17636");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone3.getShortName((long) (byte) 10, locale27);
        java.lang.String str30 = dateTimeZone3.getShortName(9L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone34 = dateTimeZone31.toTimeZone();
        boolean boolean35 = dateTimeZone31.isFixed();
        long long38 = dateTimeZone31.adjustOffset(3599999L, true);
        long long40 = dateTimeZone3.getMillisKeepLocal(dateTimeZone31, (-184199900L));
        long long42 = dateTimeZone3.previousTransition(547199998L);
        boolean boolean43 = dateTimeZone3.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3599999L + "'", long38 == 3599999L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-184199900L) + "'", long40 == (-184199900L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 547199998L + "'", long42 == 547199998L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test17637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17637");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2100000, (-4200000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17638");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getNameKey((-1L));
        int int11 = dateTimeZone0.getOffsetFromLocal((long) 0);
        long long13 = dateTimeZone0.convertUTCToLocal((-68399900L));
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-68399900L) + "'", long13 == (-68399900L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test17639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        long long32 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone0.isLocalDateTimeGap(localDateTime33);
        long long38 = dateTimeZone0.convertLocalToUTC(149280032L, false, (-1011599900L));
        long long42 = dateTimeZone0.convertLocalToUTC(543600010L, true, 147479990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 149280032L + "'", long38 == 149280032L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 543600010L + "'", long42 == 543600010L);
    }

    @Test
    public void test17640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17640");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        long long9 = dateTimeZone0.convertLocalToUTC(118799999L, false);
        java.lang.String str11 = dateTimeZone0.getShortName((-2L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName((-33900000L), locale13);
        long long16 = dateTimeZone0.previousTransition(107L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 118799999L + "'", long9 == 118799999L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 107L + "'", long16 == 107L);
    }

    @Test
    public void test17641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17641");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(100L, true);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long15 = dateTimeZone0.convertLocalToUTC(187200000L, true, 126060000L);
        java.lang.Object obj16 = null;
        boolean boolean17 = dateTimeZone0.equals(obj16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        java.lang.String str25 = dateTimeZone18.getID();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        int int34 = dateTimeZone26.getOffsetFromLocal(0L);
        java.lang.String str36 = dateTimeZone26.getShortName(0L);
        java.lang.String str38 = dateTimeZone26.getShortName(1L);
        long long40 = dateTimeZone18.getMillisKeepLocal(dateTimeZone26, (long) ' ');
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone18.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, 5700000L);
        long long49 = dateTimeZone0.convertLocalToUTC((-113279999L), false, 349800000L);
        long long51 = dateTimeZone0.previousTransition((-1083599900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 187200000L + "'", long15 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 5700000L + "'", long45 == 5700000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-113279999L) + "'", long49 == (-113279999L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1083599900L) + "'", long51 == (-1083599900L));
    }

    @Test
    public void test17642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17642");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName(1L);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        long long17 = dateTimeZone14.convertLocalToUTC(230400052L, false);
        long long21 = dateTimeZone14.convertLocalToUTC(41280000L, false, 243780000L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone22.getShortName((-1L), locale27);
        int int30 = dateTimeZone22.getOffsetFromLocal(0L);
        java.lang.String str32 = dateTimeZone22.getShortName(0L);
        long long36 = dateTimeZone22.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long39 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone22.getID();
        java.lang.String str41 = dateTimeZone22.toString();
        long long44 = dateTimeZone22.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone45 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone46.getShortName(151200000L, locale48);
        java.lang.String str50 = dateTimeZone46.getID();
        long long52 = dateTimeZone46.nextTransition(360060000L);
        int int54 = dateTimeZone46.getOffsetFromLocal((-71999965L));
        int int56 = dateTimeZone46.getOffset(232080000L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone57.getShortName((long) 115200000, locale59);
        boolean boolean61 = dateTimeZone57.isFixed();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeZone57.getName(52L, locale63);
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone57.getName((long) (byte) -1, locale66);
        int int69 = dateTimeZone57.getOffset((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime70 = null;
        boolean boolean71 = dateTimeZone57.isLocalDateTimeGap(localDateTime70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        int int73 = dateTimeZone57.getOffset(readableInstant72);
        boolean boolean75 = dateTimeZone57.isStandardOffset(351299990L);
        boolean boolean76 = dateTimeZone46.equals((java.lang.Object) dateTimeZone57);
        long long78 = dateTimeZone14.getMillisKeepLocal(dateTimeZone46, 350879999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 230400052L + "'", long17 == 230400052L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 41280000L + "'", long21 == 41280000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 360060000L + "'", long52 == 360060000L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 350879999L + "'", long78 == 350879999L);
    }

    @Test
    public void test17643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17643");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.convertUTCToLocal(32L);
        java.lang.String str5 = dateTimeZone1.getName((long) 349200000);
        int int7 = dateTimeZone1.getStandardOffset(152L);
        long long9 = dateTimeZone1.convertUTCToLocal((long) 126060000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        java.lang.String str12 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone1.isLocalDateTimeGap(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3600032L + "'", long3 == 3600032L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:00" + "'", str5, "+01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3600000 + "'", int7 == 3600000);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 129660000L + "'", long9 == 129660000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+01:00" + "'", str12, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17644");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int19 = dateTimeZone0.getOffsetFromLocal((long) (byte) 1);
        boolean boolean20 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        java.lang.String str24 = dateTimeZone21.getShortName((long) (byte) 100);
        java.lang.String str26 = dateTimeZone21.getShortName((long) (-1));
        java.lang.String str27 = dateTimeZone21.toString();
        long long30 = dateTimeZone21.convertLocalToUTC((-190800010L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.TimeZone timeZone32 = dateTimeZone21.toTimeZone();
        boolean boolean33 = dateTimeZone0.equals((java.lang.Object) dateTimeZone21);
        long long37 = dateTimeZone21.convertLocalToUTC((-476879899L), true, 11699990L);
        java.lang.String str38 = dateTimeZone21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-190800010L) + "'", long30 == (-190800010L));
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-476879899L) + "'", long37 == (-476879899L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test17645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17645");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(356460000L, locale3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        int int8 = dateTimeZone1.getStandardOffset((-547859900L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getName(3599999L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getName((-118799900L), locale13);
        java.lang.String str15 = dateTimeZone1.getID();
        long long17 = dateTimeZone1.nextTransition(0L);
        int int19 = dateTimeZone1.getOffsetFromLocal(8700152L);
        java.lang.String str21 = dateTimeZone1.getShortName((-604799899L));
        boolean boolean22 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360000000 + "'", int8 == 360000000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:00" + "'", str15, "+100:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 360000000 + "'", int19 == 360000000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:00" + "'", str21, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test17646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17646");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        boolean boolean27 = dateTimeZone0.isStandardOffset((long) 349200000);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getStandardOffset(0L);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 72000001L);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone0.isLocalDateTimeGap(localDateTime34);
        java.lang.String str36 = dateTimeZone0.toString();
        boolean boolean38 = dateTimeZone0.isStandardOffset((-115199958L));
        boolean boolean40 = dateTimeZone0.isStandardOffset(363600000L);
        long long42 = dateTimeZone0.previousTransition(68399934L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 360000000 + "'", int31 == 360000000);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-287999999L) + "'", long33 == (-287999999L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 68399934L + "'", long42 == 68399934L);
    }

    @Test
    public void test17647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17647");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        int int7 = dateTimeZone1.getStandardOffset((long) 100);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        long long10 = dateTimeZone1.convertUTCToLocal(345600000L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.lang.String str16 = dateTimeZone11.getShortName((long) (byte) 100);
        java.lang.String str18 = dateTimeZone11.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone11.getOffset(readableInstant19);
        boolean boolean22 = dateTimeZone11.isStandardOffset((long) (short) 1);
        long long26 = dateTimeZone11.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean28 = dateTimeZone11.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forID("UTC");
        long long32 = dateTimeZone11.getMillisKeepLocal(dateTimeZone30, 10L);
        long long34 = dateTimeZone30.nextTransition((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone35.getShortName((long) 115200000, locale37);
        boolean boolean39 = dateTimeZone35.isFixed();
        int int41 = dateTimeZone35.getOffset((long) '#');
        long long43 = dateTimeZone30.getMillisKeepLocal(dateTimeZone35, 359999999L);
        long long46 = dateTimeZone30.adjustOffset(600000L, true);
        long long48 = dateTimeZone1.getMillisKeepLocal(dateTimeZone30, (long) (-3600000));
        long long50 = dateTimeZone1.previousTransition((long) 600000);
        int int52 = dateTimeZone1.getOffset((-3599990L));
        int int54 = dateTimeZone1.getStandardOffset(115200097L);
        long long56 = dateTimeZone1.previousTransition((-463799903L));
        java.lang.String str58 = dateTimeZone1.getNameKey(247799991L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115200000 + "'", int7 == 115200000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 460800000L + "'", long10 == 460800000L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115200000L + "'", long26 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 359999999L + "'", long43 == 359999999L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 600000L + "'", long46 == 600000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 111600000L + "'", long48 == 111600000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 600000L + "'", long50 == 600000L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 115200000 + "'", int52 == 115200000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 115200000 + "'", int54 == 115200000);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-463799903L) + "'", long56 == (-463799903L));
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test17648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 126060000, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(345600000L, locale14);
        java.lang.String str17 = dateTimeZone0.getNameKey(536400000L);
        long long21 = dateTimeZone0.convertLocalToUTC(115259900L, true, (-432660000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 126060000L + "'", long11 == 126060000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115259900L + "'", long21 == 115259900L);
    }

    @Test
    public void test17649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        long long17 = dateTimeZone0.previousTransition((long) (byte) -1);
        int int19 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        java.lang.String str21 = dateTimeZone0.getName(359999999L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone0.getName((long) 5700000, locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone28 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        boolean boolean31 = dateTimeZone30.isFixed();
        java.lang.String str33 = dateTimeZone30.getShortName(359999999L);
        java.lang.String str34 = dateTimeZone30.getID();
        int int36 = dateTimeZone30.getStandardOffset(3599902L);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone38, (-226800000L));
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone0.getOffset(readableInstant41);
        boolean boolean43 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-226800000L) + "'", long40 == (-226800000L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test17650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17650");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        long long12 = dateTimeZone1.nextTransition((long) 1);
        int int14 = dateTimeZone1.getOffsetFromLocal(0L);
        long long18 = dateTimeZone1.convertLocalToUTC((long) 97, true, (-115200000L));
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone1.getOffset(readableInstant19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test17651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17651");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (short) 1);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 32);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        long long10 = dateTimeZone2.convertLocalToUTC(351300000L, true, 244800097L);
        java.lang.String str11 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-8760000L) + "'", long10 == (-8760000L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:01" + "'", str11, "+100:01");
    }

    @Test
    public void test17652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17652");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        long long25 = dateTimeZone18.convertLocalToUTC((long) '4', false);
        long long28 = dateTimeZone18.adjustOffset(359999999L, true);
        boolean boolean30 = dateTimeZone18.isStandardOffset((-39600000L));
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone18.getOffset(readableInstant31);
        java.lang.String str33 = dateTimeZone18.toString();
        java.lang.String str34 = dateTimeZone18.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 359999999L + "'", long28 == 359999999L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
    }

    @Test
    public void test17653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17653");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        boolean boolean3 = dateTimeZone1.isFixed();
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str5 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
    }

    @Test
    public void test17654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17654");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) 0);
        java.lang.String str12 = dateTimeZone0.getNameKey(360000097L);
        long long14 = dateTimeZone0.previousTransition(52L);
        int int16 = dateTimeZone0.getOffsetFromLocal(3600010L);
        long long18 = dateTimeZone0.convertUTCToLocal(36600000L);
        java.lang.String str20 = dateTimeZone0.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 36600000L + "'", long18 == 36600000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test17655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17655");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone0.getOffsetFromLocal((long) 115200000);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        int int17 = dateTimeZone0.getStandardOffset(97L);
        boolean boolean18 = dateTimeZone0.isFixed();
        long long21 = dateTimeZone0.adjustOffset(475199997L, true);
        boolean boolean22 = dateTimeZone0.isFixed();
        int int24 = dateTimeZone0.getOffset((-241260002L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 475199997L + "'", long21 == 475199997L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test17656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17656");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str7 = dateTimeZone0.getName((long) 0);
        int int9 = dateTimeZone0.getOffset((long) 100);
        int int11 = dateTimeZone0.getStandardOffset((long) 1);
        long long13 = dateTimeZone0.previousTransition((long) 0);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) ' ');
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone19.getName(234000010L, locale21);
        long long24 = dateTimeZone19.convertUTCToLocal(349200010L);
        int int26 = dateTimeZone19.getOffset(127920010L);
        int int28 = dateTimeZone19.getStandardOffset(481920000L);
        boolean boolean29 = dateTimeZone0.equals((java.lang.Object) dateTimeZone19);
        int int31 = dateTimeZone19.getOffset(226320000L);
        long long34 = dateTimeZone19.adjustOffset(354720010L, true);
        java.lang.String str36 = dateTimeZone19.getName((-68399990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:32" + "'", str22, "+00:32");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 351120010L + "'", long24 == 351120010L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1920000 + "'", int26 == 1920000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1920000 + "'", int28 == 1920000);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1920000 + "'", int31 == 1920000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 354720010L + "'", long34 == 354720010L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:32" + "'", str36, "+00:32");
    }

    @Test
    public void test17657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17657");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        int int19 = dateTimeZone0.getStandardOffset(358380000L);
        int int21 = dateTimeZone0.getOffset((-118799913L));
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        int int25 = dateTimeZone0.getStandardOffset(154320052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17658");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.previousTransition(32L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        int int10 = dateTimeZone7.getStandardOffset(0L);
        java.lang.String str12 = dateTimeZone7.getShortName((long) (byte) 100);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone7.getName((long) 115200000, locale14);
        java.lang.String str17 = dateTimeZone7.getNameKey((long) 0);
        java.lang.String str19 = dateTimeZone7.getNameKey(360000097L);
        long long21 = dateTimeZone7.previousTransition(52L);
        int int23 = dateTimeZone7.getStandardOffset(115199991L);
        java.lang.String str25 = dateTimeZone7.getName(108480000L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        long long28 = dateTimeZone7.getMillisKeepLocal(dateTimeZone26, (long) 349200000);
        long long30 = dateTimeZone7.convertUTCToLocal(0L);
        boolean boolean31 = dateTimeZone4.equals((java.lang.Object) 0L);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone4.isLocalDateTimeGap(localDateTime32);
        java.lang.String str34 = dateTimeZone4.getID();
        long long37 = dateTimeZone4.convertLocalToUTC(243120097L, false);
        java.lang.String str38 = dateTimeZone4.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 349200000L + "'", long28 == 349200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 243120097L + "'", long37 == 243120097L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test17659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17659");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName((-10L), locale11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone13.adjustOffset((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone13.toString();
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone13.isLocalDateTimeGap(localDateTime18);
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, 356460000L);
        java.lang.String str22 = dateTimeZone0.toString();
        long long24 = dateTimeZone0.previousTransition((-125999965L));
        int int26 = dateTimeZone0.getOffsetFromLocal((long) 352320000);
        long long29 = dateTimeZone0.convertLocalToUTC(0L, true);
        java.lang.String str31 = dateTimeZone0.getNameKey(259259999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 356460000L + "'", long21 == 356460000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-125999965L) + "'", long24 == (-125999965L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
    }

    @Test
    public void test17660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17660");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 0);
        java.lang.String str8 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.getName(265800032L);
        int int12 = dateTimeZone1.getStandardOffset(23280000L);
        int int14 = dateTimeZone1.getStandardOffset((-581700001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test17661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17661");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        int int14 = dateTimeZone0.getOffsetFromLocal(356400000L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone0.getOffset(readableInstant15);
        long long19 = dateTimeZone0.convertLocalToUTC((-115200001L), true);
        boolean boolean21 = dateTimeZone0.isStandardOffset((-61199991L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115200001L) + "'", long19 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test17662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17662");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long8 = dateTimeZone0.convertUTCToLocal(359999999L);
        java.lang.String str9 = dateTimeZone0.toString();
        long long11 = dateTimeZone0.previousTransition(8640162L);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 359999999L + "'", long8 == 359999999L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 8640162L + "'", long11 == 8640162L);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test17663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17663");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) ' ', locale3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getNameKey(1L);
        java.lang.String str12 = dateTimeZone5.getShortName((long) 100);
        long long15 = dateTimeZone5.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long18 = dateTimeZone5.nextTransition((-115200001L));
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) (-115200001L));
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone1.getOffset(readableInstant20);
        java.lang.String str22 = dateTimeZone1.toString();
        long long24 = dateTimeZone1.nextTransition(152L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.equals((java.lang.Object) 100);
        java.lang.String str29 = dateTimeZone25.getShortName((long) 1);
        org.joda.time.tz.Provider provider30 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider30);
        org.joda.time.DateTimeZone.setProvider(provider30);
        boolean boolean33 = dateTimeZone25.equals((java.lang.Object) provider30);
        long long35 = dateTimeZone25.convertUTCToLocal(97L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str39 = dateTimeZone37.getName(10L);
        java.lang.String str40 = dateTimeZone37.toString();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone37.getName((long) '4', locale42);
        int int45 = dateTimeZone37.getOffsetFromLocal((long) 'a');
        boolean boolean46 = dateTimeZone25.equals((java.lang.Object) dateTimeZone37);
        long long48 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, 39120000L);
        boolean boolean49 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-115200001L) + "'", long18 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 152L + "'", long24 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-01:00" + "'", str39, "-01:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 39120000L + "'", long48 == 39120000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test17664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17664");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        java.lang.String str48 = dateTimeZone23.getNameKey(0L);
        java.lang.String str50 = dateTimeZone23.getName((long) 0);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long55 = dateTimeZone0.previousTransition(363120000L);
        java.lang.String str57 = dateTimeZone0.getNameKey((-255600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 363120000L + "'", long55 == 363120000L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
    }

    @Test
    public void test17665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17665");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        java.lang.String str10 = dateTimeZone1.getNameKey((long) (short) 0);
        java.lang.String str12 = dateTimeZone1.getNameKey((-12L));
        java.lang.String str13 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test17666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17666");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) (short) 1);
        long long5 = dateTimeZone2.convertLocalToUTC(359999998L, true);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 363659998L + "'", long5 == 363659998L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:01");
    }

    @Test
    public void test17667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17667");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 126060000, true);
        int int13 = dateTimeZone0.getStandardOffset((long) 349200000);
        java.lang.String str15 = dateTimeZone0.getName(360000100L);
        long long18 = dateTimeZone0.adjustOffset(42L, false);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone0.getOffset(readableInstant19);
        boolean boolean22 = dateTimeZone0.isStandardOffset(12299990L);
        long long24 = dateTimeZone0.nextTransition(658800010L);
        long long26 = dateTimeZone0.nextTransition((-185280000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 126060000L + "'", long11 == 126060000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 42L + "'", long18 == 42L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 658800010L + "'", long24 == 658800010L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-185280000L) + "'", long26 == (-185280000L));
    }

    @Test
    public void test17668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17668");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) 100);
        long long12 = dateTimeZone0.previousTransition(129660000L);
        boolean boolean14 = dateTimeZone0.isStandardOffset(359999989L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName(234000010L, locale16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone0.getOffset(readableInstant18);
        int int21 = dateTimeZone0.getStandardOffset((-715980000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 129660000L + "'", long12 == 129660000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        java.lang.String str11 = dateTimeZone0.getShortName((long) '4');
        boolean boolean13 = dateTimeZone0.isStandardOffset((-115200000L));
        long long17 = dateTimeZone0.convertLocalToUTC((long) (-6720000), false, 90L);
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        long long24 = dateTimeZone21.convertLocalToUTC((-246719999L), false);
        int int26 = dateTimeZone21.getOffset(126060032L);
        java.lang.String str27 = dateTimeZone21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-6720000L) + "'", long17 == (-6720000L));
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-246719999L) + "'", long24 == (-246719999L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test17670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17670");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long14 = dateTimeZone0.convertLocalToUTC((-115200000L), true, 359999999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.toString();
        long long19 = dateTimeZone0.convertLocalToUTC((-59965L), false);
        java.lang.String str21 = dateTimeZone0.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-59965L) + "'", long19 == (-59965L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
    }

    @Test
    public void test17671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17671");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((-306000000L));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int10 = dateTimeZone8.getStandardOffset((long) (short) 10);
        java.lang.String str12 = dateTimeZone8.getShortName(10L);
        long long16 = dateTimeZone8.convertLocalToUTC(118799999L, true, (long) (short) 0);
        long long18 = dateTimeZone8.nextTransition((-36000000L));
        java.lang.String str20 = dateTimeZone8.getNameKey((-187260001L));
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (-66480000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-309600000L) + "'", long5 == (-309600000L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 126060000 + "'", int10 == 126060000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:01" + "'", str12, "+35:01");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-7260001L) + "'", long16 == (-7260001L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36000000L) + "'", long18 == (-36000000L));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-196140000L) + "'", long22 == (-196140000L));
    }

    @Test
    public void test17672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        boolean boolean6 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.adjustOffset(32460000L, true);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        java.lang.String str12 = dateTimeZone0.getShortName((-76079990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32460000L + "'", long9 == 32460000L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
    }

    @Test
    public void test17673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17673");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        int int5 = dateTimeZone0.getOffset(359999999L);
        java.lang.String str7 = dateTimeZone0.getNameKey(0L);
        int int9 = dateTimeZone0.getOffset((-113280000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) 115200000);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone10.getShortName((long) (short) 0, locale27);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone10.isLocalDateTimeGap(localDateTime29);
        long long34 = dateTimeZone10.convertLocalToUTC(152L, true, 234000010L);
        java.lang.String str35 = dateTimeZone10.getID();
        long long38 = dateTimeZone10.convertLocalToUTC(0L, true);
        boolean boolean39 = dateTimeZone0.equals((java.lang.Object) 0L);
        java.lang.Class<?> wildcardClass40 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200000L + "'", long25 == 115200000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 152L + "'", long34 == 152L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test17674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17674");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.previousTransition((long) ' ');
        java.lang.String str7 = dateTimeZone4.getID();
        java.lang.String str8 = dateTimeZone4.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getShortName((long) (byte) 100);
        java.lang.String str16 = dateTimeZone9.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone9.getOffset(readableInstant17);
        long long20 = dateTimeZone9.previousTransition((long) 115200000);
        long long22 = dateTimeZone9.nextTransition(360000097L);
        long long25 = dateTimeZone9.adjustOffset((long) 0, true);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone9.getName(0L, locale27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone9.getOffset(readableInstant29);
        long long33 = dateTimeZone9.adjustOffset(127920010L, false);
        long long35 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, 126060032L);
        java.lang.String str37 = dateTimeZone4.getShortName((-104400001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360000097L + "'", long22 == 360000097L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 127920010L + "'", long33 == 127920010L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 126060032L + "'", long35 == 126060032L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test17675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17675");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        boolean boolean9 = dateTimeZone4.isStandardOffset(115200100L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone4.getOffset(readableInstant10);
        java.lang.Class<?> wildcardClass12 = dateTimeZone4.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test17676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17676");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.previousTransition(115200000L);
        boolean boolean11 = dateTimeZone0.isFixed();
        java.lang.String str12 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test17677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17677");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', 363120000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 363120000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17678");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        int int7 = dateTimeZone0.getOffset((-1L));
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str10 = dateTimeZone0.getName(32L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        boolean boolean13 = dateTimeZone11.isFixed();
        java.lang.String str14 = dateTimeZone11.getID();
        java.lang.String str15 = dateTimeZone11.getID();
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-115199990L));
        long long21 = dateTimeZone11.convertLocalToUTC(356399932L, true, (-2L));
        int int23 = dateTimeZone11.getOffset(265800032L);
        boolean boolean24 = dateTimeZone11.isFixed();
        boolean boolean26 = dateTimeZone11.isStandardOffset(363600052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-115199990L) + "'", long17 == (-115199990L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 356399932L + "'", long21 == 356399932L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test17679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17679");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        java.lang.String str48 = dateTimeZone23.getNameKey(0L);
        java.lang.String str50 = dateTimeZone23.getName((long) 0);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (long) 0);
        java.lang.String str54 = dateTimeZone0.getName(349200010L);
        int int56 = dateTimeZone0.getOffsetFromLocal((-7260001L));
        java.lang.String str57 = dateTimeZone0.getID();
        long long59 = dateTimeZone0.nextTransition(190800000L);
        int int61 = dateTimeZone0.getStandardOffset(52L);
        int int63 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        boolean boolean65 = dateTimeZone0.isStandardOffset(244800097L);
        long long68 = dateTimeZone0.convertLocalToUTC(0L, false);
        long long70 = dateTimeZone0.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 190800000L + "'", long59 == 190800000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test17680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17680");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        java.lang.String str27 = dateTimeZone0.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forID("UTC");
        int int31 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone29.getShortName((long) (byte) 0, locale33);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) locale33);
        long long37 = dateTimeZone0.nextTransition((long) 'a');
        boolean boolean39 = dateTimeZone0.isStandardOffset(115200097L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone0.getName((-359999899L), locale42);
        java.util.TimeZone timeZone44 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17681");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:00");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName(118800000L);
        int int8 = dateTimeZone1.getOffsetFromLocal((-709199893L));
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+01:00" + "'", str4, "+01:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+01:00" + "'", str6, "+01:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3600000 + "'", int8 == 3600000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:00" + "'", str10, "+01:00");
    }

    @Test
    public void test17682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17682");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        int int5 = dateTimeZone1.getOffsetFromLocal(0L);
        long long8 = dateTimeZone1.adjustOffset(0L, false);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        long long12 = dateTimeZone1.adjustOffset((-11L), false);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        int int16 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone13.getShortName((-1L), locale18);
        int int21 = dateTimeZone13.getOffsetFromLocal(0L);
        java.lang.String str23 = dateTimeZone13.getShortName(0L);
        java.lang.String str25 = dateTimeZone13.getShortName(359999999L);
        java.lang.String str27 = dateTimeZone13.getShortName(0L);
        java.util.TimeZone timeZone28 = dateTimeZone13.toTimeZone();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone13.getName((long) (byte) 10, locale30);
        long long33 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, 187199999L);
        java.lang.String str35 = dateTimeZone13.getNameKey((-361680000L));
        int int37 = dateTimeZone13.getOffsetFromLocal(155580100L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 115200000 + "'", int5 == 115200000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-11L) + "'", long12 == (-11L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 302399999L + "'", long33 == 302399999L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test17683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.lang.String str20 = dateTimeZone0.getNameKey(10L);
        long long24 = dateTimeZone0.convertLocalToUTC(111600000L, false, (long) '4');
        boolean boolean26 = dateTimeZone0.isStandardOffset((long) 360000000);
        int int28 = dateTimeZone0.getOffsetFromLocal(0L);
        int int30 = dateTimeZone0.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 111600000L + "'", long24 == 111600000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test17684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17684");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.previousTransition(115200000L);
        boolean boolean11 = dateTimeZone0.isFixed();
        java.lang.String str13 = dateTimeZone0.getNameKey(464399991L);
        long long17 = dateTimeZone0.convertLocalToUTC(7200052L, true, 516780000L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone0.getOffset(readableInstant18);
        long long22 = dateTimeZone0.adjustOffset(244800097L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7200052L + "'", long17 == 7200052L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 244800097L + "'", long22 == 244800097L);
    }

    @Test
    public void test17685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17685");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.lang.String str20 = dateTimeZone0.getNameKey(10L);
        long long24 = dateTimeZone0.convertLocalToUTC(111600000L, false, (long) '4');
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone0.getName(126060000L, locale26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName((-115199948L), locale29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone0.getName(230400000L, locale32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone0.getShortName(115800000L, locale35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 111600000L + "'", long24 == 111600000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test17686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17686");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        long long14 = dateTimeZone0.adjustOffset((-118799903L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long18 = dateTimeZone0.adjustOffset((-1919948L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-118799903L) + "'", long14 == (-118799903L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1919948L) + "'", long18 == (-1919948L));
    }

    @Test
    public void test17687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(359999999L);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone1.getOffset(readableInstant5);
        java.lang.String str8 = dateTimeZone1.getNameKey((-101040010L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 359999998L + "'", long3 == 359999998L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test17688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17688");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset(0L);
        long long7 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true, (long) (-1));
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        java.lang.String str10 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.lang.String str16 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone17.getOffset(readableInstant18);
        int int21 = dateTimeZone17.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone22.getShortName((-1L), locale27);
        int int30 = dateTimeZone22.getOffsetFromLocal(0L);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone22, (long) 115200000);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone17.getShortName((long) (short) 0, locale34);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone17.isLocalDateTimeGap(localDateTime36);
        long long41 = dateTimeZone17.convertLocalToUTC(152L, true, 234000010L);
        long long43 = dateTimeZone11.getMillisKeepLocal(dateTimeZone17, (long) (byte) 0);
        boolean boolean45 = dateTimeZone11.isStandardOffset(3600100L);
        boolean boolean46 = dateTimeZone1.equals((java.lang.Object) dateTimeZone11);
        boolean boolean47 = dateTimeZone1.isFixed();
        boolean boolean49 = dateTimeZone1.isStandardOffset(71999900L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115200000L + "'", long32 == 115200000L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 152L + "'", long41 == 152L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test17689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17689");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 10L);
        java.lang.String str23 = dateTimeZone0.getNameKey((long) 600000);
        boolean boolean24 = dateTimeZone0.isFixed();
        long long26 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        java.lang.String str28 = dateTimeZone0.getShortName(359999989L);
        long long32 = dateTimeZone0.convertLocalToUTC(100L, true, 475199997L);
        boolean boolean33 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test17690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17690");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 126060000, true);
        int int13 = dateTimeZone0.getStandardOffset((long) 349200000);
        java.lang.String str15 = dateTimeZone0.getName((-356400000L));
        java.lang.String str16 = dateTimeZone0.getID();
        java.lang.String str18 = dateTimeZone0.getNameKey(131520097L);
        int int20 = dateTimeZone0.getOffset((-1680000L));
        long long23 = dateTimeZone0.convertLocalToUTC(226320000L, true);
        java.lang.String str25 = dateTimeZone0.getShortName(590400097L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 126060000L + "'", long11 == 126060000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 226320000L + "'", long23 == 226320000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test17691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17691");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        boolean boolean13 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200100L);
        long long19 = dateTimeZone0.convertLocalToUTC((-3599990L), false, 0L);
        java.lang.String str20 = dateTimeZone0.getID();
        int int22 = dateTimeZone0.getOffsetFromLocal(115199991L);
        java.lang.String str24 = dateTimeZone0.getShortName((-651599900L));
        java.lang.String str26 = dateTimeZone0.getName(8640152L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test17692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17692");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        long long6 = dateTimeZone2.convertLocalToUTC(356460087L, true, 460800000L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone2.getShortName(35520000L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 228540087L + "'", long6 == 228540087L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:32" + "'", str9, "+35:32");
    }

    @Test
    public void test17693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17693");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(127920000);
        long long4 = dateTimeZone1.adjustOffset(129660000L, false);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        java.lang.String str8 = dateTimeZone1.getName(486000097L);
        java.lang.String str9 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 129660000L + "'", long4 == 129660000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:32" + "'", str8, "+35:32");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:32" + "'", str9, "+35:32");
    }

    @Test
    public void test17694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17694");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str25 = dateTimeZone0.toString();
        int int27 = dateTimeZone0.getStandardOffset((long) 1);
        long long29 = dateTimeZone0.convertUTCToLocal(1L);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone0.isLocalDateTimeGap(localDateTime30);
        int int33 = dateTimeZone0.getOffsetFromLocal((-464399900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17695");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, 1920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17696");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone1.getOffset(readableInstant9);
        boolean boolean11 = dateTimeZone1.isFixed();
        boolean boolean12 = dateTimeZone1.isFixed();
        long long14 = dateTimeZone1.nextTransition((long) (byte) 0);
        int int16 = dateTimeZone1.getOffset((-101040020L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test17697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17697");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        long long5 = dateTimeZone1.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        boolean boolean9 = dateTimeZone7.isFixed();
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 0L);
        java.lang.String str12 = dateTimeZone1.getID();
        int int14 = dateTimeZone1.getOffsetFromLocal(14999999L);
        long long16 = dateTimeZone1.nextTransition(343920010L);
        java.lang.String str18 = dateTimeZone1.getNameKey(403139996L);
        int int20 = dateTimeZone1.getStandardOffset(399479997L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+32:00" + "'", str12, "+32:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 343920010L + "'", long16 == 343920010L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 115200000 + "'", int20 == 115200000);
    }

    @Test
    public void test17698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        int int21 = dateTimeZone4.getOffsetFromLocal(115200000L);
        long long23 = dateTimeZone4.previousTransition((-352800001L));
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone4.getOffset(readableInstant24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-352800001L) + "'", long23 == (-352800001L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17699");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long5 = dateTimeZone0.nextTransition((long) (byte) 0);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((-115199948L), locale8);
        java.lang.String str11 = dateTimeZone0.getNameKey((-236160011L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test17700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17700");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) 100, false);
        java.lang.String str11 = dateTimeZone0.getName(360060000L);
        long long13 = dateTimeZone0.convertUTCToLocal(127920010L);
        java.lang.String str15 = dateTimeZone0.getShortName((-118800000L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.convertUTCToLocal((long) (byte) 0);
        int int20 = dateTimeZone16.getOffsetFromLocal((long) (-1));
        long long23 = dateTimeZone16.adjustOffset((long) ' ', true);
        java.lang.String str24 = dateTimeZone16.getID();
        java.lang.String str25 = dateTimeZone16.getID();
        boolean boolean27 = dateTimeZone16.isStandardOffset((long) 187200000);
        long long29 = dateTimeZone16.convertUTCToLocal((long) (-3600000));
        java.lang.String str30 = dateTimeZone16.toString();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone16.isLocalDateTimeGap(localDateTime31);
        long long35 = dateTimeZone16.adjustOffset(0L, false);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, 707580000L);
        java.lang.String str38 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 127920010L + "'", long13 == 127920010L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-3599990L) + "'", long29 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 707579990L + "'", long37 == 707579990L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test17701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17701");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test17702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17702");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        long long9 = dateTimeZone1.previousTransition((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        long long14 = dateTimeZone1.convertLocalToUTC(707580009L, false);
        int int16 = dateTimeZone1.getOffsetFromLocal(597660097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 711180009L + "'", long14 == 711180009L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
    }

    @Test
    public void test17703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17703");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        long long21 = dateTimeZone2.adjustOffset((long) (byte) 0, false);
        long long24 = dateTimeZone2.adjustOffset(349200010L, false);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone2.getShortName((-204719896L), locale26);
        long long30 = dateTimeZone2.adjustOffset((-12719848L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 349200010L + "'", long24 == 349200010L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-12719848L) + "'", long30 == (-12719848L));
    }

    @Test
    public void test17704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        long long14 = dateTimeZone12.convertUTCToLocal((-60001L));
        boolean boolean15 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        java.lang.Class<?> wildcardClass16 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 125999999L + "'", long14 == 125999999L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test17705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17705");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        long long11 = dateTimeZone0.convertLocalToUTC((long) (short) 1, true, 1L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        java.lang.String str24 = dateTimeZone16.getShortName(1L);
        long long26 = dateTimeZone16.nextTransition((long) 0);
        long long28 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean32 = dateTimeZone16.equals((java.lang.Object) '#');
        long long34 = dateTimeZone16.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone35 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) timeZone35);
        java.lang.String str38 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int42 = dateTimeZone40.getOffset(1L);
        long long44 = dateTimeZone40.previousTransition((long) (short) 1);
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone40, (long) 1);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone40.getShortName((-3659991L), locale48);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        long long53 = dateTimeZone40.adjustOffset((-101400009L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600000L) + "'", long34 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 115200000 + "'", int42 == 115200000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-115199999L) + "'", long46 == (-115199999L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+32:00" + "'", str49, "+32:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-101400009L) + "'", long53 == (-101400009L));
    }

    @Test
    public void test17706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17706");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        boolean boolean16 = dateTimeZone8.equals((java.lang.Object) 360000032L);
        int int18 = dateTimeZone8.getOffsetFromLocal((-244799989L));
        long long22 = dateTimeZone8.convertLocalToUTC(129660000L, false, 702120000L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone8.getOffset(readableInstant23);
        java.util.TimeZone timeZone25 = dateTimeZone8.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 129660000L + "'", long22 == 129660000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17707");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) 10, locale4);
        long long8 = dateTimeZone2.convertLocalToUTC((long) (byte) 0, false);
        long long11 = dateTimeZone2.adjustOffset((-232500001L), false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(360000097L);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone14.isLocalDateTimeGap(localDateTime17);
        long long21 = dateTimeZone14.adjustOffset(0L, false);
        java.lang.String str22 = dateTimeZone14.toString();
        long long24 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 36000000L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int28 = dateTimeZone26.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone26.isLocalDateTimeGap(localDateTime29);
        int int32 = dateTimeZone26.getStandardOffset((long) 100);
        long long34 = dateTimeZone14.getMillisKeepLocal(dateTimeZone26, 838800097L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone26.getOffset(readableInstant35);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:32" + "'", str5, "+35:32");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-127920000L) + "'", long8 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-232500001L) + "'", long11 == (-232500001L));
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 163920000L + "'", long24 == 163920000L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 115200000 + "'", int28 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 115200000 + "'", int32 == 115200000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 723600097L + "'", long34 == 723600097L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 115200000 + "'", int36 == 115200000);
    }

    @Test
    public void test17708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17708");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        int int12 = dateTimeZone0.getOffsetFromLocal(349800000L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getShortName(236100001L, locale14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
    }

    @Test
    public void test17709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17709");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.lang.String str17 = dateTimeZone0.getNameKey(118800001L);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getName((-178080000L), locale21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 100);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone25.getName((long) 115200000, locale32);
        java.lang.String str35 = dateTimeZone25.getNameKey((long) 0);
        long long37 = dateTimeZone25.previousTransition((long) (short) 10);
        long long39 = dateTimeZone25.convertUTCToLocal(356460000L);
        long long41 = dateTimeZone25.convertUTCToLocal((-178080000L));
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone25.getOffset(readableInstant42);
        long long45 = dateTimeZone25.previousTransition(464399980L);
        java.util.TimeZone timeZone46 = dateTimeZone25.toTimeZone();
        boolean boolean48 = dateTimeZone25.isStandardOffset(475199996L);
        long long50 = dateTimeZone0.getMillisKeepLocal(dateTimeZone25, (-61200001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 356460000L + "'", long39 == 356460000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-178080000L) + "'", long41 == (-178080000L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 464399980L + "'", long45 == 464399980L);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-61200001L) + "'", long50 == (-61200001L));
    }

    @Test
    public void test17710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17710");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long28 = dateTimeZone5.convertLocalToUTC(1L, false, (-306000000L));
        boolean boolean29 = dateTimeZone5.isFixed();
        long long32 = dateTimeZone5.convertLocalToUTC(478320000L, true);
        java.lang.String str33 = dateTimeZone5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 478320000L + "'", long32 == 478320000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test17711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17711");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 1920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17712");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17713");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long14 = dateTimeZone0.convertLocalToUTC(359999991L, true, 90L);
        java.lang.String str15 = dateTimeZone0.getID();
        java.lang.String str17 = dateTimeZone0.getNameKey((-115199991L));
        java.lang.String str19 = dateTimeZone0.getShortName(113039989L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 359999991L + "'", long14 == 359999991L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test17714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getNameKey(1L);
        int int19 = dateTimeZone12.getOffset((-1L));
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 110L);
        boolean boolean22 = dateTimeZone12.isFixed();
        int int24 = dateTimeZone12.getOffsetFromLocal(187200000L);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone12.isLocalDateTimeGap(localDateTime25);
        java.lang.String str28 = dateTimeZone12.getName(111660090L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 110L + "'", long21 == 110L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test17715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17715");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(360600000, (-3600000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -3600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17716");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long5 = dateTimeZone2.adjustOffset(32L, true);
        long long7 = dateTimeZone2.convertUTCToLocal(115200001L);
        java.lang.String str9 = dateTimeZone2.getNameKey(356460000L);
        java.lang.String str11 = dateTimeZone2.getNameKey(359999989L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        long long16 = dateTimeZone2.convertLocalToUTC(349199999L, true);
        java.lang.String str17 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 464400001L + "'", long7 == 464400001L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
    }

    @Test
    public void test17717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17717");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str7 = dateTimeZone0.getName(52L);
        long long9 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str11 = dateTimeZone0.getName(115199999L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone12.getOffset(readableInstant13);
        int int16 = dateTimeZone12.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        int int20 = dateTimeZone17.getStandardOffset(0L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone17.getShortName((-1L), locale22);
        int int25 = dateTimeZone17.getOffsetFromLocal(0L);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone17, (long) 115200000);
        int int29 = dateTimeZone17.getOffset((long) '4');
        int int31 = dateTimeZone17.getOffsetFromLocal(100L);
        long long33 = dateTimeZone17.previousTransition(1L);
        java.lang.String str35 = dateTimeZone17.getShortName(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone36.isLocalDateTimeGap(localDateTime38);
        long long41 = dateTimeZone36.convertUTCToLocal(0L);
        long long43 = dateTimeZone17.getMillisKeepLocal(dateTimeZone36, 118800001L);
        long long46 = dateTimeZone17.convertLocalToUTC((-299399900L), true);
        int int48 = dateTimeZone17.getOffsetFromLocal((long) ' ');
        long long50 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, (-122400000L));
        long long52 = dateTimeZone17.nextTransition((-464399999L));
        int int54 = dateTimeZone17.getOffset((-79200000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 118800001L + "'", long43 == 118800001L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-299399900L) + "'", long46 == (-299399900L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-122400000L) + "'", long50 == (-122400000L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-464399999L) + "'", long52 == (-464399999L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test17718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17718");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-3600000), 600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17719");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getShortName((long) (short) 0, locale40);
        long long43 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) ' ');
        java.util.TimeZone timeZone44 = dateTimeZone23.toTimeZone();
        int int46 = dateTimeZone23.getOffsetFromLocal((-65L));
        java.lang.String str48 = dateTimeZone23.getShortName((-39600000L));
        long long52 = dateTimeZone23.convertLocalToUTC(7200022L, true, (-3659965L));
        java.lang.String str54 = dateTimeZone23.getShortName(230400052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 7200022L + "'", long52 == 7200022L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
    }

    @Test
    public void test17720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        int int12 = dateTimeZone1.getStandardOffset(0L);
        java.util.TimeZone timeZone13 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        java.lang.String str23 = dateTimeZone15.getShortName(1L);
        int int25 = dateTimeZone15.getStandardOffset((long) (byte) 0);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone15.getShortName((long) (short) 10, locale27);
        boolean boolean29 = dateTimeZone15.isFixed();
        long long31 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 486000000L);
        boolean boolean33 = dateTimeZone15.isStandardOffset(536400010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 486000000L + "'", long31 == 486000000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test17721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17721");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        long long24 = dateTimeZone20.convertLocalToUTC(115200001L, true);
        boolean boolean26 = dateTimeZone20.isStandardOffset(115200010L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone20.getShortName(118800001L, locale28);
        long long32 = dateTimeZone20.convertLocalToUTC((-65L), true);
        long long34 = dateTimeZone20.convertUTCToLocal((-115200000L));
        int int36 = dateTimeZone20.getStandardOffset((-475199965L));
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone20.getShortName((-345599980L), locale38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200001L + "'", long24 == 115200001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-65L) + "'", long32 == (-65L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-115200000L) + "'", long34 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
    }

    @Test
    public void test17722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17722");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str7 = dateTimeZone4.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str10 = dateTimeZone4.getShortName(122399999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
    }

    @Test
    public void test17723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17723");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (short) -1, locale5);
        int int8 = dateTimeZone1.getOffset((long) 115200000);
        int int10 = dateTimeZone1.getStandardOffset((long) (short) 10);
        java.lang.String str11 = dateTimeZone1.getID();
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.lang.String str17 = dateTimeZone15.getNameKey(0L);
        java.lang.String str19 = dateTimeZone15.getShortName(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone15.getShortName((long) 5700000, locale21);
        long long24 = dateTimeZone15.nextTransition(547200000L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone26.getShortName(115199991L, locale28);
        java.lang.String str30 = dateTimeZone26.getID();
        long long33 = dateTimeZone26.convertLocalToUTC((-360000000L), false);
        java.util.TimeZone timeZone34 = dateTimeZone26.toTimeZone();
        boolean boolean35 = dateTimeZone15.equals((java.lang.Object) dateTimeZone26);
        int int37 = dateTimeZone15.getOffsetFromLocal((-36060058L));
        long long39 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 115200000 + "'", int8 == 115200000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 115200000 + "'", int10 == 115200000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+32:00" + "'", str11, "+32:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+01:00" + "'", str19, "+01:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+01:00" + "'", str22, "+01:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 547200000L + "'", long24 == 547200000L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360000000L) + "'", long33 == (-360000000L));
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3600000 + "'", int37 == 3600000);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 111600000L + "'", long39 == 111600000L);
    }

    @Test
    public void test17724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17724");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        java.lang.String str13 = dateTimeZone4.toString();
        int int15 = dateTimeZone4.getStandardOffset((-3600010L));
        long long17 = dateTimeZone4.convertUTCToLocal((long) (short) 1);
        long long20 = dateTimeZone4.adjustOffset((-359999990L), false);
        java.util.TimeZone timeZone21 = dateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-359999990L) + "'", long20 == (-359999990L));
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17725");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.lang.String str13 = dateTimeZone6.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone6.getOffset(readableInstant14);
        boolean boolean17 = dateTimeZone6.isStandardOffset((long) (short) 1);
        long long21 = dateTimeZone6.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int23 = dateTimeZone6.getOffsetFromLocal((long) (short) 0);
        java.lang.String str25 = dateTimeZone6.getNameKey((long) ' ');
        java.lang.String str26 = dateTimeZone6.toString();
        long long28 = dateTimeZone6.nextTransition(100L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone6.getName((long) (short) -1, locale30);
        java.lang.String str32 = dateTimeZone6.getID();
        java.lang.String str34 = dateTimeZone6.getName((-356400000L));
        boolean boolean35 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        int int37 = dateTimeZone1.getStandardOffset((-56100001L));
        int int39 = dateTimeZone1.getStandardOffset(1860197L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone1.getOffset(readableInstant40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200000L + "'", long21 == 115200000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 360000000 + "'", int37 == 360000000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 360000000 + "'", int39 == 360000000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 360000000 + "'", int41 == 360000000);
    }

    @Test
    public void test17726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17726");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(363120000, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (-1), locale8);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str12 = dateTimeZone0.getNameKey((long) 115200000);
        int int14 = dateTimeZone0.getOffset((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        long long20 = dateTimeZone17.previousTransition((-3600001L));
        java.util.TimeZone timeZone21 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        long long25 = dateTimeZone23.convertUTCToLocal((-7260001L));
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone27.isFixed();
        boolean boolean29 = dateTimeZone27.isFixed();
        long long33 = dateTimeZone27.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.TimeZone timeZone34 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str38 = dateTimeZone36.getShortName(349200010L);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone36.isLocalDateTimeGap(localDateTime39);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone42.getOffset(readableInstant43);
        long long48 = dateTimeZone42.convertLocalToUTC((long) (short) 1, false, 115200000L);
        long long50 = dateTimeZone23.getMillisKeepLocal(dateTimeZone42, 3659998L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600001L) + "'", long20 == (-3600001L));
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-10860001L) + "'", long25 == (-10860001L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 59998L + "'", long50 == 59998L);
    }

    @Test
    public void test17728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17728");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long12 = dateTimeZone0.previousTransition(0L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 0, true, 0L);
        int int18 = dateTimeZone0.getStandardOffset((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone0.getOffset(readableInstant19);
        long long22 = dateTimeZone0.convertUTCToLocal((-232079900L));
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        long long26 = dateTimeZone0.nextTransition((-75599965L));
        java.lang.String str28 = dateTimeZone0.getShortName((-324600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-232079900L) + "'", long22 == (-232079900L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-75599965L) + "'", long26 == (-75599965L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test17729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17729");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long19 = dateTimeZone0.nextTransition(10L);
        long long22 = dateTimeZone0.adjustOffset(600000L, true);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getShortName(3660000L, locale24);
        long long29 = dateTimeZone0.convertLocalToUTC((-115199923L), true, 115199999L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone0.getOffset(readableInstant30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 600000L + "'", long22 == 600000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-115199923L) + "'", long29 == (-115199923L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test17730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17730");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getID();
        int int18 = dateTimeZone0.getOffsetFromLocal((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName((-1L), locale24);
        java.lang.String str27 = dateTimeZone19.getShortName(1L);
        java.lang.String str29 = dateTimeZone19.getNameKey((long) (byte) -1);
        java.lang.String str31 = dateTimeZone19.getShortName((long) (byte) -1);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 350879999L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        long long40 = dateTimeZone34.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone34.getOffset(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone43.isFixed();
        int int46 = dateTimeZone43.getStandardOffset(0L);
        java.lang.String str48 = dateTimeZone43.getNameKey(1L);
        java.lang.String str50 = dateTimeZone43.getShortName((long) 100);
        boolean boolean51 = dateTimeZone34.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long54 = dateTimeZone52.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        boolean boolean56 = dateTimeZone34.equals((java.lang.Object) dateTimeZone52);
        java.lang.Class<?> wildcardClass57 = dateTimeZone34.getClass();
        boolean boolean58 = dateTimeZone19.equals((java.lang.Object) wildcardClass57);
        java.lang.String str60 = dateTimeZone19.getNameKey((-366780000L));
        long long62 = dateTimeZone19.previousTransition(3659998L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 350879999L + "'", long33 == 350879999L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3659998L + "'", long62 == 3659998L);
    }

    @Test
    public void test17731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        boolean boolean3 = dateTimeZone1.isStandardOffset(0L);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.lang.String str6 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.032" + "'", str6, "+00:00:00.032");
    }

    @Test
    public void test17732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17732");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        long long26 = dateTimeZone5.convertLocalToUTC(360000000L, false);
        long long28 = dateTimeZone5.previousTransition((-360000000L));
        java.lang.String str30 = dateTimeZone5.getName(1L);
        long long34 = dateTimeZone5.convertLocalToUTC((-349200003L), true, (long) 0);
        java.lang.String str36 = dateTimeZone5.getShortName(129600011L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000000L + "'", long26 == 360000000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360000000L) + "'", long28 == (-360000000L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-349200003L) + "'", long34 == (-349200003L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test17733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17733");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        int int6 = dateTimeZone2.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        int int10 = dateTimeZone7.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone7.getShortName((-1L), locale12);
        int int15 = dateTimeZone7.getOffsetFromLocal(0L);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, (long) 115200000);
        int int19 = dateTimeZone7.getOffset((long) '4');
        int int21 = dateTimeZone7.getOffsetFromLocal(100L);
        long long23 = dateTimeZone7.previousTransition(1L);
        java.lang.String str25 = dateTimeZone7.getShortName(0L);
        java.util.TimeZone timeZone26 = dateTimeZone7.toTimeZone();
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone7.getShortName((long) 3600000, locale28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone7.getOffset(readableInstant30);
        long long33 = dateTimeZone7.previousTransition(127920097L);
        int int35 = dateTimeZone7.getOffset(360000097L);
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) 360000097L);
        int int38 = dateTimeZone0.getStandardOffset(581340010L);
        boolean boolean39 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 127920097L + "'", long33 == 127920097L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test17734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17734");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean9 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        int int22 = dateTimeZone12.getStandardOffset((long) (byte) 10);
        java.lang.String str24 = dateTimeZone12.getName((long) (byte) 10);
        long long26 = dateTimeZone12.previousTransition(52L);
        long long28 = dateTimeZone11.getMillisKeepLocal(dateTimeZone12, (long) 'a');
        long long31 = dateTimeZone12.adjustOffset((long) (byte) 0, false);
        long long33 = dateTimeZone12.nextTransition((long) (short) 10);
        long long35 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-244799999L));
        long long37 = dateTimeZone1.previousTransition(391800032L);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone1.isLocalDateTimeGap(localDateTime38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 360000097L + "'", long28 == 360000097L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-244799989L) + "'", long35 == (-244799989L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 391800032L + "'", long37 == 391800032L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test17735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17735");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str7 = dateTimeZone0.getName(52L);
        long long9 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long14 = dateTimeZone0.convertLocalToUTC(360060000L, false, (-3599903L));
        long long18 = dateTimeZone0.convertLocalToUTC((-190800010L), false, (-60001L));
        long long21 = dateTimeZone0.adjustOffset(347279999L, false);
        java.util.TimeZone timeZone22 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 360060000L + "'", long14 == 360060000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-190800010L) + "'", long18 == (-190800010L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 347279999L + "'", long21 == 347279999L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17736");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        java.lang.String str19 = dateTimeZone0.getName(0L);
        int int21 = dateTimeZone0.getOffsetFromLocal(248460097L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17737");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.lang.String str20 = dateTimeZone4.getShortName((long) 115200000);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone4.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone4.convertLocalToUTC((-118799913L), false);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int29 = dateTimeZone27.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone27.isLocalDateTimeGap(localDateTime30);
        long long33 = dateTimeZone27.previousTransition(115200000L);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone27.getOffset(readableInstant34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        long long38 = dateTimeZone4.getMillisKeepLocal(dateTimeZone27, 360000097L);
        long long41 = dateTimeZone27.convertLocalToUTC((-61199991L), false);
        java.lang.String str43 = dateTimeZone27.getName((-3660088L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-118799913L) + "'", long25 == (-118799913L));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 115200000 + "'", int29 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 115200000 + "'", int35 == 115200000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 244800097L + "'", long38 == 244800097L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-176399991L) + "'", long41 == (-176399991L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+32:00" + "'", str43, "+32:00");
    }

    @Test
    public void test17738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17738");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone0.getName((-60011L), locale25);
        int int28 = dateTimeZone0.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        int int9 = dateTimeZone0.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str10 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17740");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        boolean boolean18 = dateTimeZone0.isFixed();
        long long20 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str21 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone0.getOffset(readableInstant22);
        long long26 = dateTimeZone0.adjustOffset(326519990L, true);
        long long29 = dateTimeZone0.adjustOffset((-360059965L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 326519990L + "'", long26 == 326519990L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-360059965L) + "'", long29 == (-360059965L));
    }

    @Test
    public void test17741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str21 = dateTimeZone19.getName(10L);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        boolean boolean23 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        int int25 = dateTimeZone19.getOffset(100L);
        int int27 = dateTimeZone19.getOffsetFromLocal(32L);
        int int29 = dateTimeZone19.getStandardOffset(712320000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3600000) + "'", int27 == (-3600000));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
    }

    @Test
    public void test17742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17742");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str8 = dateTimeZone6.getNameKey((long) (short) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getShortName((-1L), locale16);
        java.lang.String str19 = dateTimeZone11.getShortName(1L);
        long long21 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (long) (-1));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone6.getName(0L, locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        int int29 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (long) 115200000);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone25.getShortName((long) (short) 0, locale42);
        long long45 = dateTimeZone6.getMillisKeepLocal(dateTimeZone25, (long) ' ');
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, (long) 115200000);
        boolean boolean48 = dateTimeZone25.isFixed();
        long long52 = dateTimeZone25.convertLocalToUTC(72000001L, true, (-115199965L));
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone25.isLocalDateTimeGap(localDateTime53);
        java.lang.String str56 = dateTimeZone25.getShortName((-233999913L));
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone25.getShortName(232079990L, locale58);
        java.lang.String str60 = dateTimeZone25.toString();
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone25.isLocalDateTimeGap(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 151200000L + "'", long47 == 151200000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 72000001L + "'", long52 == 72000001L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17743");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long10 = dateTimeZone8.convertUTCToLocal(111600000L);
        long long12 = dateTimeZone8.previousTransition(711300000L);
        int int14 = dateTimeZone8.getStandardOffset((-709199990L));
        java.util.TimeZone timeZone15 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 111600000L + "'", long10 == 111600000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 711300000L + "'", long12 == 711300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test17744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17744");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName(360000097L, locale13);
        java.lang.String str16 = dateTimeZone0.getShortName((-7200000L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone0.getOffset(readableInstant17);
        java.lang.String str19 = dateTimeZone0.getID();
        int int21 = dateTimeZone0.getStandardOffset(360000052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((-115199948L), locale7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        int int17 = dateTimeZone9.getOffsetFromLocal(0L);
        java.lang.String str19 = dateTimeZone9.getShortName(0L);
        java.lang.String str21 = dateTimeZone9.getShortName(1L);
        long long24 = dateTimeZone9.convertLocalToUTC((long) 0, true);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getShortName((long) 115200000, locale27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone25.getOffset(readableInstant29);
        java.lang.String str32 = dateTimeZone25.getShortName(32L);
        long long34 = dateTimeZone9.getMillisKeepLocal(dateTimeZone25, (-1L));
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone25.getOffset(readableInstant35);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        boolean boolean39 = dateTimeZone25.isStandardOffset((-974579900L));
        long long42 = dateTimeZone25.adjustOffset(125999999L, false);
        java.lang.String str43 = dateTimeZone25.getID();
        java.lang.String str45 = dateTimeZone25.getName((-306000000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 125999999L + "'", long42 == 125999999L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
    }

    @Test
    public void test17746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17746");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str25 = dateTimeZone3.toString();
        java.lang.String str26 = dateTimeZone3.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.TimeZone timeZone28 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone30.adjustOffset((long) (short) 10, true);
        java.lang.String str35 = dateTimeZone30.getName((long) 0);
        java.lang.String str37 = dateTimeZone30.getShortName(9L);
        long long41 = dateTimeZone30.convertLocalToUTC(356400000L, false, 129660000L);
        long long43 = dateTimeZone30.previousTransition((-183599968L));
        boolean boolean45 = dateTimeZone30.isStandardOffset((-232079900L));
        long long48 = dateTimeZone30.convertLocalToUTC((-79200000L), true);
        boolean boolean49 = dateTimeZone29.equals((java.lang.Object) true);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone29.isLocalDateTimeGap(localDateTime50);
        boolean boolean52 = dateTimeZone29.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 356400000L + "'", long41 == 356400000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-183599968L) + "'", long43 == (-183599968L));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-79200000L) + "'", long48 == (-79200000L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test17747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17747");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:01");
        long long3 = dateTimeZone1.previousTransition((long) (short) 100);
        java.lang.String str5 = dateTimeZone1.getShortName((-511800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:01" + "'", str5, "+00:01");
    }

    @Test
    public void test17748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17748");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName(52L, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(475200100L, locale9);
        int int12 = dateTimeZone0.getOffset(14460000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17749");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getStandardOffset((long) 600000);
        int int6 = dateTimeZone1.getOffset(118800032L);
        int int8 = dateTimeZone1.getOffsetFromLocal(360000000L);
        java.lang.String str10 = dateTimeZone1.getName((long) 39120000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int13 = dateTimeZone1.getStandardOffset((-232500001L));
        java.lang.String str15 = dateTimeZone1.getShortName((-112080000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-00:00:00.001" + "'", str2, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-00:00:00.001" + "'", str10, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-00:00:00.001" + "'", str15, "-00:00:00.001");
    }

    @Test
    public void test17750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17750");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        int int14 = dateTimeZone0.getStandardOffset((-1L));
        int int16 = dateTimeZone0.getOffsetFromLocal((long) 10);
        int int18 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (short) 10);
        boolean boolean26 = dateTimeZone23.isFixed();
        long long30 = dateTimeZone23.convertLocalToUTC((long) (short) 0, true, 115199999L);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, 90L);
        java.lang.String str33 = dateTimeZone23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 90L + "'", long32 == 90L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test17751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17751");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        java.lang.String str11 = dateTimeZone0.getShortName((long) '4');
        boolean boolean13 = dateTimeZone0.isStandardOffset((-115200000L));
        long long17 = dateTimeZone0.convertLocalToUTC((long) (-6720000), false, 90L);
        boolean boolean19 = dateTimeZone0.isStandardOffset(1920000L);
        java.util.TimeZone timeZone20 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forID("UTC");
        int int24 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone22.getShortName((long) (byte) 0, locale26);
        int int29 = dateTimeZone22.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone33.getName((long) ' ', locale35);
        boolean boolean37 = dateTimeZone31.equals((java.lang.Object) dateTimeZone33);
        boolean boolean38 = dateTimeZone22.equals((java.lang.Object) dateTimeZone33);
        boolean boolean39 = dateTimeZone22.isFixed();
        java.lang.String str41 = dateTimeZone22.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone22.isLocalDateTimeGap(localDateTime42);
        java.lang.String str45 = dateTimeZone22.getNameKey((-115199990L));
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone22.getName(3600010L, locale47);
        boolean boolean50 = dateTimeZone22.isStandardOffset((long) (short) -1);
        int int52 = dateTimeZone22.getOffset(244800000L);
        long long55 = dateTimeZone22.convertLocalToUTC(127499999L, false);
        long long57 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (-5520000L));
        boolean boolean58 = dateTimeZone22.isFixed();
        boolean boolean59 = dateTimeZone22.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-6720000L) + "'", long17 == (-6720000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 127499999L + "'", long55 == 127499999L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-5520000L) + "'", long57 == (-5520000L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test17752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        int int21 = dateTimeZone0.getOffsetFromLocal((long) '4');
        java.lang.String str23 = dateTimeZone0.getNameKey((-59965L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone24.isFixed();
        int int27 = dateTimeZone24.getStandardOffset(0L);
        java.lang.String str29 = dateTimeZone24.getShortName((long) (byte) 100);
        int int31 = dateTimeZone24.getStandardOffset(600000L);
        boolean boolean33 = dateTimeZone24.isStandardOffset((-473100032L));
        boolean boolean34 = dateTimeZone0.equals((java.lang.Object) boolean33);
        boolean boolean36 = dateTimeZone0.isStandardOffset((-511800000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test17753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        int int9 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long13 = dateTimeZone0.convertLocalToUTC((-115200000L), false);
        java.lang.String str14 = dateTimeZone0.getID();
        long long17 = dateTimeZone0.convertLocalToUTC((-464399948L), true);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((-36479990L), locale19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115200000L) + "'", long13 == (-115200000L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-464399948L) + "'", long17 == (-464399948L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test17754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17754");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.convertLocalToUTC(0L, true);
        boolean boolean24 = dateTimeZone0.isFixed();
        boolean boolean25 = dateTimeZone0.isFixed();
        java.lang.String str26 = dateTimeZone0.toString();
        java.lang.String str28 = dateTimeZone0.getNameKey(97L);
        long long32 = dateTimeZone0.convertLocalToUTC(187200001L, true, (-7200000L));
        long long36 = dateTimeZone0.convertLocalToUTC((-366600000L), true, (-323340000L));
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone0.getShortName(118860000L, locale38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 187200001L + "'", long32 == 187200001L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-366600000L) + "'", long36 == (-366600000L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
    }

    @Test
    public void test17755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17755");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        int int3 = dateTimeZone1.getOffsetFromLocal((-10L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
    }

    @Test
    public void test17756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17756");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        boolean boolean13 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200100L);
        long long19 = dateTimeZone0.convertLocalToUTC((-3599990L), false, 0L);
        java.lang.String str20 = dateTimeZone0.getID();
        int int22 = dateTimeZone0.getOffsetFromLocal(115199991L);
        java.lang.String str24 = dateTimeZone0.getShortName((-651599900L));
        java.lang.Class<?> wildcardClass25 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test17757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17757");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str12 = dateTimeZone10.getName(359999999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getName((-359399803L), locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getNameKey((long) (short) 10);
        java.lang.String str24 = dateTimeZone21.getID();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        boolean boolean27 = dateTimeZone10.equals((java.lang.Object) dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test17758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17758");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        long long5 = dateTimeZone1.previousTransition((long) (short) 1);
        boolean boolean6 = dateTimeZone1.isFixed();
        java.lang.String str7 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        java.lang.String str10 = dateTimeZone1.toString();
        java.lang.String str12 = dateTimeZone1.getNameKey((-198600000L));
        java.lang.String str14 = dateTimeZone1.getShortName((-3660000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+32:00" + "'", str14, "+32:00");
    }

    @Test
    public void test17759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17759");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        java.lang.String str27 = dateTimeZone0.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forID("UTC");
        int int31 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone29.getShortName((long) (byte) 0, locale33);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) locale33);
        java.lang.String str37 = dateTimeZone0.getName(126060000L);
        int int39 = dateTimeZone0.getOffsetFromLocal((-59965L));
        long long43 = dateTimeZone0.convertLocalToUTC(716460000L, false, (-3000100L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 716460000L + "'", long43 == 716460000L);
    }

    @Test
    public void test17760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17760");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        long long14 = dateTimeZone0.convertLocalToUTC(97L, true);
        long long17 = dateTimeZone0.adjustOffset((-360000001L), true);
        java.lang.String str18 = dateTimeZone0.toString();
        int int20 = dateTimeZone0.getOffset(127499999L);
        java.lang.String str22 = dateTimeZone0.getName(360000032L);
        java.lang.String str23 = dateTimeZone0.getID();
        int int25 = dateTimeZone0.getOffsetFromLocal(190799999L);
        int int27 = dateTimeZone0.getOffset((-176399991L));
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone0.getOffset(readableInstant28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360000001L) + "'", long17 == (-360000001L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone9.nextTransition(151200000L);
        long long16 = dateTimeZone9.convertLocalToUTC(187200001L, true);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.lang.String str21 = dateTimeZone9.getShortName((long) (byte) 100);
        long long23 = dateTimeZone9.nextTransition(9L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone9.getName((-60001L), locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        long long29 = dateTimeZone9.getMillisKeepLocal(dateTimeZone27, (-113279999L));
        boolean boolean31 = dateTimeZone9.isStandardOffset((-73440000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 151200000L + "'", long13 == 151200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187199991L + "'", long16 == 187199991L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999991L + "'", long18 == 359999991L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-113279999L) + "'", long29 == (-113279999L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test17762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17762");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getShortName((long) 10);
        int int7 = dateTimeZone3.getOffsetFromLocal(89399999L);
        java.lang.String str9 = dateTimeZone3.getShortName((long) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test17763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17763");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str16 = dateTimeZone0.getID();
        long long18 = dateTimeZone0.nextTransition((-7260001L));
        java.lang.String str20 = dateTimeZone0.getName((long) 127920000);
        boolean boolean21 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        int int31 = dateTimeZone27.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getShortName((-1L), locale37);
        int int40 = dateTimeZone32.getOffsetFromLocal(0L);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 115200000);
        java.lang.String str44 = dateTimeZone27.getShortName((long) '4');
        boolean boolean45 = dateTimeZone26.equals((java.lang.Object) dateTimeZone27);
        boolean boolean46 = dateTimeZone0.equals((java.lang.Object) boolean45);
        java.lang.String str48 = dateTimeZone0.getName(363120010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-7260001L) + "'", long18 == (-7260001L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
    }

    @Test
    public void test17764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17764");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        int int3 = dateTimeZone1.getOffset(118800001L);
        java.lang.String str5 = dateTimeZone1.getName((-127920000L));
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName(187199991L, locale7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 187200000 + "'", int3 == 187200000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+52:00" + "'", str5, "+52:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+52:00" + "'", str8, "+52:00");
    }

    @Test
    public void test17765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getNameKey((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        java.lang.String str18 = dateTimeZone10.getName((-1L));
        long long21 = dateTimeZone10.convertLocalToUTC(129660000L, true);
        long long23 = dateTimeZone10.previousTransition((long) 349200000);
        boolean boolean25 = dateTimeZone10.isStandardOffset((-115199965L));
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone10, 108000097L);
        java.lang.String str29 = dateTimeZone10.getShortName((-467999903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 129660000L + "'", long21 == 129660000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 349200000L + "'", long23 == 349200000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 108000097L + "'", long27 == 108000097L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test17766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17766");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(39120000, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17767");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        int int15 = dateTimeZone0.getOffset(3599999L);
        int int17 = dateTimeZone0.getStandardOffset(3600000L);
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        long long21 = dateTimeZone0.convertLocalToUTC((-151200000L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-151200000L) + "'", long21 == (-151200000L));
    }

    @Test
    public void test17768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17768");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int37 = dateTimeZone35.getStandardOffset((long) (short) 10);
        boolean boolean39 = dateTimeZone35.isStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone35.getID();
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone35);
        java.lang.String str42 = dateTimeZone35.getID();
        long long45 = dateTimeZone35.convertLocalToUTC(481920000L, true);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone35.getName((long) 349200000, locale47);
        java.lang.Class<?> wildcardClass49 = dateTimeZone35.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 187200000L + "'", long2 == 187200000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200000L + "'", long5 == 187200000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 187200000 + "'", int7 == 187200000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 187200010L + "'", long11 == 187200010L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 126060000 + "'", int37 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+35:01" + "'", str40, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+35:01" + "'", str42, "+35:01");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 355860000L + "'", long45 == 355860000L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+35:01" + "'", str48, "+35:01");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test17769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17769");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        long long9 = dateTimeZone1.convertUTCToLocal((-1L));
        long long13 = dateTimeZone1.convertLocalToUTC(0L, false, (long) (-3600000));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long17 = dateTimeZone1.previousTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 359999999L + "'", long9 == 359999999L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360000000L) + "'", long13 == (-360000000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test17770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17770");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        int int5 = dateTimeZone1.getOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone6.getShortName((-1L), locale11);
        java.lang.String str14 = dateTimeZone6.getName((-1L));
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) (-1L));
        long long19 = dateTimeZone1.convertLocalToUTC(349200010L, false, (long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str24 = dateTimeZone22.getShortName(100L);
        java.lang.String str26 = dateTimeZone22.getShortName((long) (byte) -1);
        long long29 = dateTimeZone22.convertLocalToUTC(349200010L, true);
        boolean boolean30 = dateTimeZone1.equals((java.lang.Object) dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getStandardOffset(0L);
        java.lang.String str36 = dateTimeZone31.getNameKey(1L);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        long long40 = dateTimeZone31.adjustOffset((long) 100, false);
        java.lang.String str42 = dateTimeZone31.getName(360060000L);
        long long44 = dateTimeZone31.convertUTCToLocal(127920010L);
        java.lang.String str46 = dateTimeZone31.getShortName((-118800000L));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long49 = dateTimeZone47.convertUTCToLocal((long) (byte) 0);
        int int51 = dateTimeZone47.getOffsetFromLocal((long) (-1));
        long long54 = dateTimeZone47.adjustOffset((long) ' ', true);
        java.lang.String str55 = dateTimeZone47.getID();
        java.lang.String str56 = dateTimeZone47.getID();
        boolean boolean58 = dateTimeZone47.isStandardOffset((long) 187200000);
        long long60 = dateTimeZone47.convertUTCToLocal((long) (-3600000));
        java.lang.String str61 = dateTimeZone47.toString();
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone47.isLocalDateTimeGap(localDateTime62);
        long long66 = dateTimeZone47.adjustOffset(0L, false);
        long long68 = dateTimeZone31.getMillisKeepLocal(dateTimeZone47, 707580000L);
        boolean boolean69 = dateTimeZone22.equals((java.lang.Object) 707580000L);
        long long72 = dateTimeZone22.adjustOffset((-4200011L), true);
        boolean boolean73 = dateTimeZone22.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 115200000 + "'", int5 == 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 234000010L + "'", long19 == 234000010L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+35:32" + "'", str24, "+35:32");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+35:32" + "'", str26, "+35:32");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 221280010L + "'", long29 == 221280010L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 127920010L + "'", long44 == 127920010L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 360000000L + "'", long49 == 360000000L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 360000000 + "'", int51 == 360000000);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32L + "'", long54 == 32L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+100:00" + "'", str55, "+100:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+100:00" + "'", str56, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 356400000L + "'", long60 == 356400000L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+100:00" + "'", str61, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 347580000L + "'", long68 == 347580000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-4200011L) + "'", long72 == (-4200011L));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test17771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17771");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition((long) 115200000);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) 'a');
        boolean boolean9 = dateTimeZone0.isFixed();
        long long11 = dateTimeZone0.previousTransition((long) (byte) 100);
        java.lang.String str12 = dateTimeZone0.toString();
        long long14 = dateTimeZone0.previousTransition((-234060001L));
        java.lang.String str15 = dateTimeZone0.getID();
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(0L, locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 115200000L + "'", long4 == 115200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-234060001L) + "'", long14 == (-234060001L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test17772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17772");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getShortName(32L);
        long long9 = dateTimeZone0.convertUTCToLocal(72000001L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getName((long) ' ', locale31);
        boolean boolean33 = dateTimeZone27.equals((java.lang.Object) dateTimeZone29);
        boolean boolean34 = dateTimeZone10.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone10.getOffset(readableInstant35);
        java.lang.String str38 = dateTimeZone10.getShortName(359999999L);
        boolean boolean39 = dateTimeZone10.isFixed();
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) dateTimeZone10);
        boolean boolean41 = dateTimeZone0.isFixed();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone0.getShortName(586320001L, locale43);
        java.lang.String str46 = dateTimeZone0.getShortName((-14399948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 72000001L + "'", long9 == 72000001L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200000L + "'", long25 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-01:00" + "'", str32, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
    }

    @Test
    public void test17773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17773");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 100);
        java.lang.String str32 = dateTimeZone25.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone25.getOffset(readableInstant33);
        boolean boolean36 = dateTimeZone25.isStandardOffset((long) (short) 1);
        long long40 = dateTimeZone25.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int42 = dateTimeZone25.getOffsetFromLocal((long) (short) 0);
        int int44 = dateTimeZone25.getOffsetFromLocal((long) (byte) 1);
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone25, (long) (-3600000));
        long long48 = dateTimeZone0.nextTransition((-187799900L));
        long long50 = dateTimeZone0.convertUTCToLocal(363600052L);
        java.lang.String str51 = dateTimeZone0.toString();
        int int53 = dateTimeZone0.getOffset((-356400065L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-3600000L) + "'", long46 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-187799900L) + "'", long48 == (-187799900L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 363600052L + "'", long50 == 363600052L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test17774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17774");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (byte) 100, locale8);
        long long12 = dateTimeZone0.convertLocalToUTC(0L, false);
        int int14 = dateTimeZone0.getOffsetFromLocal((long) (byte) -1);
        long long16 = dateTimeZone0.convertUTCToLocal(547199998L);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone0.isLocalDateTimeGap(localDateTime17);
        java.lang.String str20 = dateTimeZone0.getShortName(349199999L);
        int int22 = dateTimeZone0.getOffset((-101400009L));
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 547199998L + "'", long16 == 547199998L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test17775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        long long6 = dateTimeZone0.convertUTCToLocal((long) 'a');
        int int8 = dateTimeZone0.getStandardOffset((long) (-6720000));
        java.lang.String str10 = dateTimeZone0.getShortName(187200001L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        java.lang.String str18 = dateTimeZone13.getShortName((long) (short) 10);
        int int20 = dateTimeZone13.getOffset((long) (short) 1);
        long long22 = dateTimeZone13.nextTransition((long) (-1));
        java.lang.String str24 = dateTimeZone13.getNameKey((long) '4');
        boolean boolean25 = dateTimeZone13.isFixed();
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, 3600052L);
        int int29 = dateTimeZone13.getStandardOffset(700200000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 97L + "'", long6 == 97L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3600052L + "'", long27 == 3600052L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17776");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone0.equals(obj3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getNameKey(1L);
        int int12 = dateTimeZone5.getOffset((-1L));
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (-115199990L));
        boolean boolean16 = dateTimeZone5.isStandardOffset((-115199990L));
        long long18 = dateTimeZone5.convertUTCToLocal(1L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.lang.String str24 = dateTimeZone19.getShortName((long) (byte) 100);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone19.getName((long) 115200000, locale26);
        java.lang.String str29 = dateTimeZone19.getShortName((long) 100);
        long long31 = dateTimeZone19.previousTransition(129660000L);
        java.lang.String str32 = dateTimeZone19.getID();
        int int34 = dateTimeZone19.getOffset(187199999L);
        boolean boolean35 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        int int37 = dateTimeZone19.getOffsetFromLocal((-113100000L));
        long long39 = dateTimeZone19.previousTransition(122460100L);
        java.lang.String str41 = dateTimeZone19.getNameKey((-232500001L));
        java.lang.String str42 = dateTimeZone19.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 360000000L + "'", long2 == 360000000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 244800010L + "'", long14 == 244800010L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 129660000L + "'", long31 == 129660000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 122460100L + "'", long39 == 122460100L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
    }

    @Test
    public void test17777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) '4');
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.lang.String str12 = dateTimeZone1.getName(108480000L);
        long long16 = dateTimeZone1.convertLocalToUTC(187260000L, true, (-244800001L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        java.lang.String str22 = dateTimeZone17.getShortName((long) (short) 10);
        int int24 = dateTimeZone17.getOffset((long) (short) 1);
        int int26 = dateTimeZone17.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone17.isLocalDateTimeGap(localDateTime27);
        long long30 = dateTimeZone17.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone17.getOffset(readableInstant31);
        long long34 = dateTimeZone17.convertUTCToLocal((long) 36000000);
        long long36 = dateTimeZone17.nextTransition((-118799903L));
        int int38 = dateTimeZone17.getStandardOffset(219600032L);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone17, (-53999999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187259900L + "'", long16 == 187259900L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 36000000L + "'", long34 == 36000000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-118799903L) + "'", long36 == (-118799903L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-53999899L) + "'", long40 == (-53999899L));
    }

    @Test
    public void test17778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17778");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        java.lang.String str12 = dateTimeZone1.getName((long) (short) -1);
        long long15 = dateTimeZone1.adjustOffset(0L, true);
        int int17 = dateTimeZone1.getOffset((long) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17779");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        boolean boolean9 = dateTimeZone1.isStandardOffset(0L);
        int int11 = dateTimeZone1.getOffset(115199999L);
        java.lang.String str13 = dateTimeZone1.getShortName(223680000L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone1.getOffset(readableInstant14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
    }

    @Test
    public void test17780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17780");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        java.lang.String str12 = dateTimeZone1.getName((long) (short) -1);
        long long14 = dateTimeZone1.previousTransition((-115199900L));
        long long16 = dateTimeZone1.nextTransition(110L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        java.lang.String str22 = dateTimeZone17.getShortName((long) (short) 10);
        int int24 = dateTimeZone17.getOffset((long) (short) 1);
        long long28 = dateTimeZone17.convertLocalToUTC((long) (short) 1, true, 1L);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone17.isLocalDateTimeGap(localDateTime29);
        long long32 = dateTimeZone17.previousTransition(0L);
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) 0L);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone1.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        int int39 = dateTimeZone36.getStandardOffset(0L);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone36.getShortName((-1L), locale41);
        int int44 = dateTimeZone36.getOffsetFromLocal(0L);
        int int46 = dateTimeZone36.getStandardOffset((long) (byte) 10);
        java.lang.String str48 = dateTimeZone36.getName((long) (byte) 10);
        java.lang.String str50 = dateTimeZone36.getName((long) '#');
        long long53 = dateTimeZone36.convertLocalToUTC((long) 10, false);
        long long57 = dateTimeZone36.convertLocalToUTC((long) (-1), true, 0L);
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = dateTimeZone36.getOffset(readableInstant58);
        java.lang.String str60 = dateTimeZone36.getID();
        java.util.TimeZone timeZone61 = dateTimeZone36.toTimeZone();
        java.lang.String str63 = dateTimeZone36.getNameKey(244199991L);
        boolean boolean64 = dateTimeZone1.equals((java.lang.Object) str63);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199900L) + "'", long14 == (-115199900L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test17781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17781");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset(110L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long7 = dateTimeZone1.convertLocalToUTC(367320000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 360000000 + "'", int3 == 360000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7320000L + "'", long7 == 7320000L);
    }

    @Test
    public void test17782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17782");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int37 = dateTimeZone35.getStandardOffset((long) (short) 10);
        boolean boolean39 = dateTimeZone35.isStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone35.getID();
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone35);
        java.lang.String str42 = dateTimeZone35.getID();
        int int44 = dateTimeZone35.getOffset(0L);
        long long46 = dateTimeZone35.nextTransition((-236160001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 360000000L + "'", long2 == 360000000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:00" + "'", str3, "+100:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 360000000L + "'", long5 == 360000000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 360000000 + "'", int7 == 360000000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 360000010L + "'", long11 == 360000010L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 126060000 + "'", int37 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+35:01" + "'", str40, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+35:01" + "'", str42, "+35:01");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 126060000 + "'", int44 == 126060000);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-236160001L) + "'", long46 == (-236160001L));
    }

    @Test
    public void test17783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17783");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, (int) '#');
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test17784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17784");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (-4200000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17785");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.lang.String str20 = dateTimeZone4.getShortName((long) 115200000);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone4.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone4.convertLocalToUTC((-118799913L), false);
        long long29 = dateTimeZone4.convertLocalToUTC((-115199948L), false, (long) (short) 100);
        int int31 = dateTimeZone4.getOffsetFromLocal((-115200000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.util.TimeZone timeZone33 = dateTimeZone4.toTimeZone();
        java.lang.String str35 = dateTimeZone4.getShortName(115199999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 360000000L + "'", long2 == 360000000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:00" + "'", str3, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999999L + "'", long18 == 359999999L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-118799913L) + "'", long25 == (-118799913L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-115199948L) + "'", long29 == (-115199948L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test17786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17786");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(187200000, 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 360000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17787");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        java.lang.String str24 = dateTimeZone0.getNameKey((long) 126060000);
        java.lang.String str26 = dateTimeZone0.getShortName((-118800000L));
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone0.getName(187200001L, locale28);
        long long32 = dateTimeZone0.adjustOffset((-460800001L), true);
        java.lang.String str33 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-460800001L) + "'", long32 == (-460800001L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test17788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17788");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        long long8 = dateTimeZone1.convertUTCToLocal((-719999900L));
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getShortName(235920000L, locale10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getName((-115199990L), locale13);
        java.lang.String str16 = dateTimeZone1.getNameKey(7199999L);
        int int18 = dateTimeZone1.getStandardOffset((-541680010L));
        int int20 = dateTimeZone1.getOffsetFromLocal((-710520000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-719999900L) + "'", long8 == (-719999900L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test17789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17789");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int15 = dateTimeZone0.getOffsetFromLocal((long) 4200000);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.lang.String str21 = dateTimeZone16.getShortName((long) (byte) 100);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone16.getName((long) 115200000, locale23);
        java.lang.String str26 = dateTimeZone16.getNameKey((long) 0);
        java.lang.String str28 = dateTimeZone16.getNameKey(360000097L);
        long long30 = dateTimeZone16.previousTransition(52L);
        int int32 = dateTimeZone16.getStandardOffset(115199991L);
        java.lang.String str34 = dateTimeZone16.getName(108480000L);
        int int36 = dateTimeZone16.getOffset((long) 600000);
        java.lang.String str38 = dateTimeZone16.getShortName(115200052L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        boolean boolean41 = dateTimeZone39.isFixed();
        long long45 = dateTimeZone39.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.TimeZone timeZone46 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str50 = dateTimeZone48.getShortName(349200010L);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone48.isLocalDateTimeGap(localDateTime51);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        boolean boolean56 = dateTimeZone16.equals((java.lang.Object) timeZone53);
        boolean boolean57 = dateTimeZone0.equals((java.lang.Object) dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test17790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17790");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) 0);
        java.lang.String str12 = dateTimeZone0.getNameKey(360000097L);
        long long14 = dateTimeZone0.previousTransition(52L);
        int int16 = dateTimeZone0.getOffsetFromLocal(3600010L);
        long long19 = dateTimeZone0.convertLocalToUTC((-547799990L), true);
        long long21 = dateTimeZone0.convertUTCToLocal((-3599967L));
        java.lang.String str23 = dateTimeZone0.getShortName((long) 187200000);
        long long25 = dateTimeZone0.previousTransition((-236160001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-547799990L) + "'", long19 == (-547799990L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599967L) + "'", long21 == (-3599967L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-236160001L) + "'", long25 == (-236160001L));
    }

    @Test
    public void test17791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17791");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone2.equals(obj10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone2.getShortName(126060100L, locale13);
        long long16 = dateTimeZone2.convertUTCToLocal(244799999L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 431999999L + "'", long16 == 431999999L);
    }

    @Test
    public void test17792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        boolean boolean5 = dateTimeZone0.isFixed();
        java.lang.String str6 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        int int12 = dateTimeZone0.getOffsetFromLocal((-39600000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getName((long) ' ', locale16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int20 = dateTimeZone14.getOffset((long) 115200000);
        long long22 = dateTimeZone14.nextTransition((long) (-3600000));
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 187199999L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone14.getName(350700000L, locale26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3600000L) + "'", long22 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 190799999L + "'", long24 == 190799999L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
    }

    @Test
    public void test17793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17793");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str23 = dateTimeZone10.getShortName((-417599900L));
        int int25 = dateTimeZone10.getStandardOffset(3599902L);
        java.lang.String str27 = dateTimeZone10.getNameKey(39120000L);
        boolean boolean28 = dateTimeZone10.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17794");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        long long21 = dateTimeZone0.convertUTCToLocal(359999998L);
        java.lang.String str23 = dateTimeZone0.getNameKey((-237720000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 359999998L + "'", long21 == 359999998L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test17795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17795");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone0.getOffsetFromLocal((long) 115200000);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        long long17 = dateTimeZone0.previousTransition(0L);
        int int19 = dateTimeZone0.getStandardOffset(1L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName(707580010L, locale21);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.toString();
        long long27 = dateTimeZone24.convertUTCToLocal((-475139848L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-475139848L) + "'", long27 == (-475139848L));
    }

    @Test
    public void test17796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        long long11 = dateTimeZone0.previousTransition((-7260001L));
        boolean boolean13 = dateTimeZone0.equals((java.lang.Object) 360000032L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        int int16 = dateTimeZone0.getOffsetFromLocal(126000000L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int20 = dateTimeZone18.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getName(3600000L, locale23);
        boolean boolean26 = dateTimeZone18.isStandardOffset(356460000L);
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, 637199981L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone30.isLocalDateTimeGap(localDateTime31);
        java.lang.String str33 = dateTimeZone30.toString();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone30.getOffset(readableInstant34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone30.getName(241200000L, locale37);
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 399600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7260001L) + "'", long11 == (-7260001L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 115200000 + "'", int20 == 115200000);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 521999981L + "'", long28 == 521999981L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 399600000L + "'", long40 == 399600000L);
    }

    @Test
    public void test17797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17797");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        int int6 = dateTimeZone2.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        int int10 = dateTimeZone7.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone7.getShortName((-1L), locale12);
        int int15 = dateTimeZone7.getOffsetFromLocal(0L);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, (long) 115200000);
        boolean boolean19 = dateTimeZone2.isStandardOffset(115200000L);
        long long22 = dateTimeZone2.convertLocalToUTC((long) 10, true);
        java.lang.String str23 = dateTimeZone2.toString();
        int int25 = dateTimeZone2.getOffset(52L);
        java.lang.String str27 = dateTimeZone2.getNameKey(0L);
        java.lang.String str29 = dateTimeZone2.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forID("UTC");
        int int33 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone31.getShortName((long) (byte) 0, locale35);
        boolean boolean37 = dateTimeZone2.equals((java.lang.Object) locale35);
        long long39 = dateTimeZone2.nextTransition((long) 'a');
        long long42 = dateTimeZone2.adjustOffset((long) (short) 100, true);
        long long44 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, 359999998L);
        long long46 = dateTimeZone1.nextTransition(234000010L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone1.getOffset(readableInstant47);
        long long51 = dateTimeZone1.adjustOffset(475199996L, true);
        java.util.TimeZone timeZone52 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 97L + "'", long39 == 97L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 547199998L + "'", long44 == 547199998L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 234000010L + "'", long46 == 234000010L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 187200000 + "'", int48 == 187200000);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 475199996L + "'", long51 == 475199996L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17798");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((-183599968L), locale6);
        java.lang.String str9 = dateTimeZone0.getName((-547859900L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.lang.String str15 = dateTimeZone10.getNameKey(1L);
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) "+97:00");
        long long20 = dateTimeZone10.adjustOffset((long) 3600000, true);
        int int22 = dateTimeZone10.getOffset((-243120001L));
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) int22);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        java.lang.String str26 = dateTimeZone0.getShortName(39660000L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone0.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3600000L + "'", long20 == 3600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17799");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str25 = dateTimeZone3.getID();
        java.lang.String str27 = dateTimeZone3.getShortName(115200010L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        boolean boolean33 = dateTimeZone28.isStandardOffset(100L);
        java.lang.String str34 = dateTimeZone28.getID();
        boolean boolean36 = dateTimeZone28.equals((java.lang.Object) 1);
        boolean boolean37 = dateTimeZone28.isFixed();
        org.joda.time.tz.Provider provider38 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider38);
        boolean boolean40 = dateTimeZone28.equals((java.lang.Object) provider38);
        int int42 = dateTimeZone28.getStandardOffset((-306000000L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone43.isFixed();
        int int46 = dateTimeZone43.getStandardOffset(0L);
        java.lang.String str48 = dateTimeZone43.getShortName((long) (byte) 100);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone43.getName((long) 115200000, locale50);
        java.lang.String str53 = dateTimeZone43.getNameKey((long) 0);
        java.lang.String str55 = dateTimeZone43.getNameKey(360000097L);
        long long58 = dateTimeZone43.adjustOffset((long) (short) 1, true);
        boolean boolean59 = dateTimeZone28.equals((java.lang.Object) dateTimeZone43);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone28.getShortName(0L, locale61);
        boolean boolean63 = dateTimeZone3.equals((java.lang.Object) str62);
        java.lang.String str64 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
    }

    @Test
    public void test17800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17800");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long4 = dateTimeZone1.nextTransition(359999998L);
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 359999998L + "'", long4 == 359999998L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test17801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17801");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) '#');
        long long5 = dateTimeZone2.convertLocalToUTC(118799999L, false);
        boolean boolean7 = dateTimeZone2.isStandardOffset(115200097L);
        java.lang.String str8 = dateTimeZone2.getID();
        java.lang.String str10 = dateTimeZone2.getNameKey((-5520000L));
        java.lang.String str12 = dateTimeZone2.getName(235920000L);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone2.isLocalDateTimeGap(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-232500001L) + "'", long5 == (-232500001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+97:35" + "'", str8, "+97:35");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+97:35" + "'", str12, "+97:35");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17802");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        boolean boolean5 = dateTimeZone1.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        int int9 = dateTimeZone1.getOffsetFromLocal(152L);
        java.lang.String str10 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertUTCToLocal((long) 360060000);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        boolean boolean16 = dateTimeZone1.isStandardOffset((-651599890L));
        boolean boolean17 = dateTimeZone1.isFixed();
        long long19 = dateTimeZone1.nextTransition(707580000L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone21.getShortName(115199991L, locale23);
        java.lang.String str25 = dateTimeZone21.getID();
        long long28 = dateTimeZone21.convertLocalToUTC((-360000000L), false);
        java.util.TimeZone timeZone29 = dateTimeZone21.toTimeZone();
        int int31 = dateTimeZone21.getOffsetFromLocal(239520110L);
        long long33 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 244799991L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 115200000 + "'", int9 == 115200000);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 475260000L + "'", long12 == 475260000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 707580000L + "'", long19 == 707580000L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360000000L) + "'", long28 == (-360000000L));
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 359999991L + "'", long33 == 359999991L);
    }

    @Test
    public void test17803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17803");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long28 = dateTimeZone5.convertLocalToUTC(1L, false, (-306000000L));
        java.lang.String str29 = dateTimeZone5.getID();
        java.lang.String str30 = dateTimeZone5.getID();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str33 = dateTimeZone32.getID();
        java.lang.String str35 = dateTimeZone32.getShortName((long) (short) 10);
        long long37 = dateTimeZone32.nextTransition((long) 0);
        boolean boolean39 = dateTimeZone32.isStandardOffset((long) (short) 1);
        java.lang.String str40 = dateTimeZone32.getID();
        boolean boolean41 = dateTimeZone5.equals((java.lang.Object) dateTimeZone32);
        long long44 = dateTimeZone32.convertLocalToUTC(3600010L, false);
        java.lang.String str46 = dateTimeZone32.getName(287939996L);
        java.lang.String str47 = dateTimeZone32.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600010L + "'", long44 == 3600010L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
    }

    @Test
    public void test17804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17804");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName(10L, locale5);
        long long10 = dateTimeZone0.convertLocalToUTC(0L, true, (-39600000L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        long long17 = dateTimeZone11.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone11.getOffset(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.lang.String str25 = dateTimeZone20.getNameKey(1L);
        java.lang.String str27 = dateTimeZone20.getShortName((long) 100);
        boolean boolean28 = dateTimeZone11.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        long long31 = dateTimeZone29.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        boolean boolean33 = dateTimeZone11.equals((java.lang.Object) dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone11.getOffset(readableInstant34);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-36059958L));
        java.lang.String str39 = dateTimeZone11.getNameKey((-355860000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-36059958L) + "'", long37 == (-36059958L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
    }

    @Test
    public void test17805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17805");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getID();
        int int18 = dateTimeZone0.getOffsetFromLocal((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName((-1L), locale24);
        java.lang.String str27 = dateTimeZone19.getShortName(1L);
        java.lang.String str29 = dateTimeZone19.getNameKey((long) (byte) -1);
        java.lang.String str31 = dateTimeZone19.getShortName((long) (byte) -1);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 350879999L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone34.isLocalDateTimeGap(localDateTime36);
        long long40 = dateTimeZone34.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone34.getOffset(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone43.isFixed();
        int int46 = dateTimeZone43.getStandardOffset(0L);
        java.lang.String str48 = dateTimeZone43.getNameKey(1L);
        java.lang.String str50 = dateTimeZone43.getShortName((long) 100);
        boolean boolean51 = dateTimeZone34.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long54 = dateTimeZone52.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        boolean boolean56 = dateTimeZone34.equals((java.lang.Object) dateTimeZone52);
        java.lang.Class<?> wildcardClass57 = dateTimeZone34.getClass();
        boolean boolean58 = dateTimeZone19.equals((java.lang.Object) wildcardClass57);
        boolean boolean59 = dateTimeZone19.isFixed();
        int int61 = dateTimeZone19.getStandardOffset(0L);
        java.lang.String str63 = dateTimeZone19.getNameKey(109500096L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 350879999L + "'", long33 == 350879999L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
    }

    @Test
    public void test17806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17806");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) 0);
        java.lang.String str12 = dateTimeZone0.getNameKey(360000097L);
        long long14 = dateTimeZone0.previousTransition(52L);
        int int16 = dateTimeZone0.getStandardOffset(115199991L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        boolean boolean22 = dateTimeZone17.isStandardOffset(100L);
        java.lang.String str24 = dateTimeZone17.getName((long) (byte) 100);
        java.util.TimeZone timeZone25 = dateTimeZone17.toTimeZone();
        java.lang.String str26 = dateTimeZone17.getID();
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone17.getOffset(readableInstant27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int31 = dateTimeZone17.getOffset(118800000L);
        boolean boolean32 = dateTimeZone0.equals((java.lang.Object) dateTimeZone17);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone17.getName((-724199910L), locale34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone17.getOffset(readableInstant36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test17807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17807");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        boolean boolean3 = dateTimeZone1.isStandardOffset(0L);
        long long6 = dateTimeZone1.convertLocalToUTC((-244799989L), true);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        long long16 = dateTimeZone12.nextTransition(115200000L);
        long long18 = dateTimeZone12.convertUTCToLocal((long) 'a');
        boolean boolean20 = dateTimeZone12.isStandardOffset((-1L));
        java.util.TimeZone timeZone21 = dateTimeZone12.toTimeZone();
        long long23 = dateTimeZone12.nextTransition((-115199948L));
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone12.getShortName((-351299848L), locale25);
        java.lang.String str28 = dateTimeZone12.getShortName((long) 349200000);
        long long32 = dateTimeZone12.convertLocalToUTC(125999999L, false, (-11L));
        int int34 = dateTimeZone12.getStandardOffset(600000L);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone12.isLocalDateTimeGap(localDateTime35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(97);
        long long40 = dateTimeZone12.getMillisKeepLocal(dateTimeZone38, 72000001L);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone38, 187199999L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone43.isFixed();
        int int46 = dateTimeZone43.getStandardOffset(0L);
        java.lang.String str48 = dateTimeZone43.getShortName((long) (byte) 100);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone43.getName((long) 115200000, locale50);
        java.lang.String str53 = dateTimeZone43.getNameKey((long) 0);
        java.lang.String str55 = dateTimeZone43.getNameKey(360000097L);
        long long57 = dateTimeZone43.previousTransition(52L);
        long long59 = dateTimeZone1.getMillisKeepLocal(dateTimeZone43, (-10800000L));
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone1.getName(5699999L, locale61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-244800021L) + "'", long6 == (-244800021L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 115200000L + "'", long16 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115199948L) + "'", long23 == (-115199948L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 125999999L + "'", long32 == 125999999L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 71999904L + "'", long40 == 71999904L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 187199934L + "'", long42 == 187199934L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 52L + "'", long57 == 52L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-10799968L) + "'", long59 == (-10799968L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.032" + "'", str62, "+00:00:00.032");
    }

    @Test
    public void test17808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (-1), locale8);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str12 = dateTimeZone0.getNameKey((long) 115200000);
        java.lang.String str13 = dateTimeZone0.toString();
        java.lang.String str14 = dateTimeZone0.getID();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName(47400010L, locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test17809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17809");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        java.lang.String str17 = dateTimeZone0.getShortName((-360000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str20 = dateTimeZone0.getNameKey(108480000L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getShortName((-600000L), locale22);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17810");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(356460000L, locale3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone7.getOffset(readableInstant8);
        int int11 = dateTimeZone7.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        long long22 = dateTimeZone7.getMillisKeepLocal(dateTimeZone12, (long) 115200000);
        long long24 = dateTimeZone7.previousTransition((long) (byte) -1);
        long long27 = dateTimeZone7.convertLocalToUTC((long) (short) -1, false);
        long long30 = dateTimeZone7.adjustOffset(10L, true);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone7.getShortName(362159990L, locale32);
        long long35 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone7.getShortName((-511259958L), locale37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 115200000L + "'", long22 == 115200000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 360000000L + "'", long35 == 360000000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
    }

    @Test
    public void test17811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17811");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        long long25 = dateTimeZone18.convertLocalToUTC((long) '4', false);
        long long28 = dateTimeZone18.adjustOffset(359999999L, true);
        long long32 = dateTimeZone18.convertLocalToUTC((-359999900L), true, (-111600001L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        long long35 = dateTimeZone18.getMillisKeepLocal(dateTimeZone33, (-360059965L));
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone18.getShortName((-324480001L), locale37);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone18.getName(207300000L, locale40);
        java.lang.String str42 = dateTimeZone18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 359999999L + "'", long28 == 359999999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-359999900L) + "'", long32 == (-359999900L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360059965L) + "'", long35 == (-360059965L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
    }

    @Test
    public void test17812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17812");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        int int5 = dateTimeZone0.getOffset(359999999L);
        int int7 = dateTimeZone0.getStandardOffset(363600000L);
        java.lang.String str9 = dateTimeZone0.getName((-10L));
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName(362159990L, locale11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(0L, locale14);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test17813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17813");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean8 = dateTimeZone0.isFixed();
        java.lang.String str10 = dateTimeZone0.getShortName((-32399990L));
        java.lang.Class<?> wildcardClass11 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test17814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17814");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        int int14 = dateTimeZone0.getStandardOffset((-1L));
        int int16 = dateTimeZone0.getOffsetFromLocal((long) 10);
        long long18 = dateTimeZone0.previousTransition((long) (short) -1);
        long long20 = dateTimeZone0.previousTransition((-60001L));
        java.lang.String str21 = dateTimeZone0.getID();
        int int23 = dateTimeZone0.getOffset(369840000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60001L) + "'", long20 == (-60001L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test17815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone21.getName((long) (-1), locale29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone32, (-11L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        long long38 = dateTimeZone21.adjustOffset(481920000L, false);
        int int40 = dateTimeZone21.getStandardOffset((-363599948L));
        java.lang.String str42 = dateTimeZone21.getShortName(19499990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-12L) + "'", long34 == (-12L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 481920000L + "'", long38 == 481920000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test17816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17816");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(361920000, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17817");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        boolean boolean16 = dateTimeZone0.isFixed();
        java.lang.String str17 = dateTimeZone0.toString();
        java.lang.String str18 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test17818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17818");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        long long12 = dateTimeZone0.adjustOffset(573600000L, true);
        java.lang.String str14 = dateTimeZone0.getName((-22L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 573600000L + "'", long12 == 573600000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
    }

    @Test
    public void test17819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17819");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 38100000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 38100000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17820");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        long long34 = dateTimeZone8.previousTransition((long) (byte) 0);
        long long36 = dateTimeZone8.convertUTCToLocal(187199999L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone8.getName(44880000L, locale38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone8.getOffset(readableInstant40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 187199999L + "'", long36 == 187199999L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test17821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17821");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.lang.String str13 = dateTimeZone0.getName((long) 10);
        int int15 = dateTimeZone0.getOffset(3600032L);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        java.lang.String str18 = dateTimeZone0.getNameKey((-68400000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test17822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17822");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) ' ', locale3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffset((long) 115200000);
        java.lang.String str9 = dateTimeZone1.getShortName(111600000L);
        boolean boolean11 = dateTimeZone1.equals((java.lang.Object) (-118799900L));
        long long13 = dateTimeZone1.previousTransition(3600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3600000L + "'", long13 == 3600000L);
    }

    @Test
    public void test17823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17823");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 127920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 127920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        boolean boolean18 = dateTimeZone1.isFixed();
        java.lang.String str20 = dateTimeZone1.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone1.getNameKey((-115199990L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long27 = dateTimeZone1.convertUTCToLocal((-460799948L));
        java.lang.String str29 = dateTimeZone1.getShortName(352799932L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-460799948L) + "'", long27 == (-460799948L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test17825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17825");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        long long21 = dateTimeZone4.convertLocalToUTC((-392399990L), true);
        long long23 = dateTimeZone4.nextTransition((-115200002L));
        int int25 = dateTimeZone4.getOffset(115199934L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-392399990L) + "'", long21 == (-392399990L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115200002L) + "'", long23 == (-115200002L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17826");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str13 = dateTimeZone0.getName((long) 349200000);
        long long16 = dateTimeZone0.convertLocalToUTC(116760000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 116760000L + "'", long16 == 116760000L);
    }

    @Test
    public void test17827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17827");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.previousTransition((long) 115200000);
        long long13 = dateTimeZone0.nextTransition(360000097L);
        long long16 = dateTimeZone0.adjustOffset((long) 0, true);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(0L, locale18);
        java.util.TimeZone timeZone20 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getShortName((long) 115200000, locale27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone25.getOffset(readableInstant29);
        int int32 = dateTimeZone25.getOffsetFromLocal((long) 10);
        long long36 = dateTimeZone25.convertLocalToUTC((-97L), true, (long) 52);
        boolean boolean37 = dateTimeZone23.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 360000097L + "'", long13 == 360000097L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-97L) + "'", long36 == (-97L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17828");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str22 = dateTimeZone10.getID();
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone10.isLocalDateTimeGap(localDateTime23);
        java.lang.String str25 = dateTimeZone10.toString();
        long long27 = dateTimeZone10.previousTransition((-464399948L));
        java.lang.String str28 = dateTimeZone10.getID();
        java.util.TimeZone timeZone29 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-464399948L) + "'", long27 == (-464399948L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test17829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17829");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38100000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17830");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:52");
        long long4 = dateTimeZone1.convertLocalToUTC((-169199989L), true);
        int int6 = dateTimeZone1.getOffset(502320000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-208319989L) + "'", long4 == (-208319989L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 39120000 + "'", int6 == 39120000);
    }

    @Test
    public void test17831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17831");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        int int9 = dateTimeZone1.getStandardOffset((long) (byte) -1);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getName(97L, locale11);
        java.util.TimeZone timeZone13 = dateTimeZone1.toTimeZone();
        boolean boolean14 = dateTimeZone1.isFixed();
        int int16 = dateTimeZone1.getStandardOffset((-430919900L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        int int20 = dateTimeZone17.getStandardOffset(0L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone17.getShortName((-1L), locale22);
        int int25 = dateTimeZone17.getOffsetFromLocal(0L);
        long long27 = dateTimeZone17.convertUTCToLocal((long) 0);
        long long31 = dateTimeZone17.convertLocalToUTC((-115200000L), true, 359999999L);
        int int33 = dateTimeZone17.getOffset(97L);
        boolean boolean34 = dateTimeZone1.equals((java.lang.Object) dateTimeZone17);
        long long37 = dateTimeZone1.adjustOffset(237600000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-115200000L) + "'", long31 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 237600000L + "'", long37 == 237600000L);
    }

    @Test
    public void test17832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17832");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        long long8 = dateTimeZone2.convertUTCToLocal((long) 97);
        java.lang.String str10 = dateTimeZone2.getName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 127920097L + "'", long8 == 127920097L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:32" + "'", str10, "+35:32");
    }

    @Test
    public void test17833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17833");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        long long14 = dateTimeZone8.convertLocalToUTC((-356400000L), true, 131520097L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.lang.String str16 = dateTimeZone8.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-356400000L) + "'", long14 == (-356400000L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
    }

    @Test
    public void test17834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17834");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        int int19 = dateTimeZone5.getOffsetFromLocal(100L);
        long long21 = dateTimeZone5.previousTransition(1L);
        java.lang.String str23 = dateTimeZone5.getShortName(0L);
        java.util.TimeZone timeZone24 = dateTimeZone5.toTimeZone();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone5.getShortName((long) 3600000, locale26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone5.getOffset(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone30.isLocalDateTimeGap(localDateTime32);
        long long36 = dateTimeZone30.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone30.getOffset(readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        int int42 = dateTimeZone39.getStandardOffset(0L);
        java.lang.String str44 = dateTimeZone39.getNameKey(1L);
        java.lang.String str46 = dateTimeZone39.getShortName((long) 100);
        boolean boolean47 = dateTimeZone30.equals((java.lang.Object) 100);
        boolean boolean48 = dateTimeZone30.isFixed();
        java.lang.String str50 = dateTimeZone30.getName(108480000L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        boolean boolean54 = dateTimeZone53.isFixed();
        int int56 = dateTimeZone53.getStandardOffset(0L);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone53.getShortName((-1L), locale58);
        int int61 = dateTimeZone53.getOffsetFromLocal(0L);
        int int63 = dateTimeZone53.getStandardOffset((long) (byte) 10);
        java.lang.String str65 = dateTimeZone53.getName((long) (byte) 10);
        long long67 = dateTimeZone53.previousTransition(52L);
        long long69 = dateTimeZone52.getMillisKeepLocal(dateTimeZone53, (long) 'a');
        long long71 = dateTimeZone52.previousTransition((long) '4');
        long long73 = dateTimeZone30.getMillisKeepLocal(dateTimeZone52, (-115199965L));
        boolean boolean74 = dateTimeZone5.equals((java.lang.Object) dateTimeZone30);
        long long78 = dateTimeZone30.convertLocalToUTC((-600011L), true, (-111600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 360000097L + "'", long69 == 360000097L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-475199965L) + "'", long73 == (-475199965L));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-600011L) + "'", long78 == (-600011L));
    }

    @Test
    public void test17835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long6 = dateTimeZone0.adjustOffset((long) (short) 0, false);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        long long14 = dateTimeZone11.previousTransition((-3600001L));
        boolean boolean16 = dateTimeZone11.isStandardOffset((long) 360000000);
        int int18 = dateTimeZone11.getStandardOffset((-127920000L));
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) (-127920000L));
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone0.getOffset(readableInstant20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone0.getName(838800052L, locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3600001L) + "'", long14 == (-3600001L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test17836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17836");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean15 = dateTimeZone0.isStandardOffset(115199991L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone0.getOffset(readableInstant16);
        boolean boolean19 = dateTimeZone0.isStandardOffset((-7199910L));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.lang.String str25 = dateTimeZone20.getNameKey(1L);
        java.lang.String str27 = dateTimeZone20.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone20.isLocalDateTimeGap(localDateTime28);
        long long31 = dateTimeZone20.previousTransition((long) 349200000);
        java.lang.String str33 = dateTimeZone20.getShortName((-183659994L));
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, (-371880000L));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        int int39 = dateTimeZone36.getStandardOffset(0L);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone36.getShortName((-1L), locale41);
        int int44 = dateTimeZone36.getOffsetFromLocal(0L);
        java.lang.String str46 = dateTimeZone36.getShortName(0L);
        long long50 = dateTimeZone36.convertLocalToUTC((long) (byte) 0, false, 0L);
        boolean boolean52 = dateTimeZone36.isStandardOffset(0L);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone36.getShortName((long) 97, locale54);
        long long57 = dateTimeZone36.nextTransition((long) (-3600000));
        int int59 = dateTimeZone36.getOffsetFromLocal(154320052L);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone36.getName((-3599990L), locale61);
        java.util.TimeZone timeZone63 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.String str65 = dateTimeZone64.toString();
        long long67 = dateTimeZone64.previousTransition((-349199998L));
        long long69 = dateTimeZone0.getMillisKeepLocal(dateTimeZone64, (-129660000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 349200000L + "'", long31 == 349200000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-371880000L) + "'", long35 == (-371880000L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-3600000L) + "'", long57 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-349199998L) + "'", long67 == (-349199998L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-129660000L) + "'", long69 == (-129660000L));
    }

    @Test
    public void test17837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17837");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone0.convertUTCToLocal(115199991L);
        int int9 = dateTimeZone0.getOffset((-5520000L));
        long long11 = dateTimeZone0.convertUTCToLocal((long) 352320000);
        long long13 = dateTimeZone0.nextTransition((long) 351300000);
        int int15 = dateTimeZone0.getOffset((long) 363120000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115199991L + "'", long7 == 115199991L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 352320000L + "'", long11 == 352320000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 351300000L + "'", long13 == 351300000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test17838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17838");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str11 = dateTimeZone9.getShortName(349200010L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone9.isLocalDateTimeGap(localDateTime12);
        java.lang.String str14 = dateTimeZone9.toString();
        long long17 = dateTimeZone9.adjustOffset(247799991L, true);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone18.isLocalDateTimeGap(localDateTime20);
        long long23 = dateTimeZone18.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone18.getOffset(readableInstant25);
        java.lang.String str27 = dateTimeZone18.getID();
        boolean boolean29 = dateTimeZone18.equals((java.lang.Object) 127499999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.lang.String str32 = dateTimeZone18.getNameKey(363119990L);
        java.lang.String str34 = dateTimeZone18.getShortName(0L);
        boolean boolean35 = dateTimeZone9.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone37.getShortName((long) 'a', locale39);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone37.getName((long) (short) 0, locale42);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone37.getShortName(115200001L, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone50 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        java.lang.String str53 = dateTimeZone51.getNameKey((long) (short) 10);
        java.lang.String str55 = dateTimeZone51.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        boolean boolean57 = dateTimeZone56.isFixed();
        int int59 = dateTimeZone56.getStandardOffset(0L);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone56.getShortName((-1L), locale61);
        java.lang.String str64 = dateTimeZone56.getShortName(1L);
        long long66 = dateTimeZone51.getMillisKeepLocal(dateTimeZone56, (long) (-1));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        boolean boolean69 = dateTimeZone56.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime70 = null;
        boolean boolean71 = dateTimeZone56.isLocalDateTimeGap(localDateTime70);
        int int73 = dateTimeZone56.getOffset((long) 115200000);
        java.lang.String str74 = dateTimeZone56.toString();
        int int76 = dateTimeZone56.getOffset(115199999L);
        boolean boolean77 = dateTimeZone56.isFixed();
        int int79 = dateTimeZone56.getStandardOffset(547199998L);
        long long81 = dateTimeZone37.getMillisKeepLocal(dateTimeZone56, 123900152L);
        java.lang.String str82 = dateTimeZone56.getID();
        long long84 = dateTimeZone56.convertUTCToLocal(360000100L);
        boolean boolean85 = dateTimeZone56.isFixed();
        boolean boolean86 = dateTimeZone18.equals((java.lang.Object) dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 247799991L + "'", long17 == 247799991L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:00" + "'", str40, "+100:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:00" + "'", str43, "+100:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:00" + "'", str46, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 483900152L + "'", long81 == 483900152L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "UTC" + "'", str82, "UTC");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 360000100L + "'", long84 == 360000100L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test17839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17839");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.previousTransition((long) (short) 10);
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 126060000);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long14 = dateTimeZone12.previousTransition((long) (byte) -1);
        long long17 = dateTimeZone12.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        int int20 = dateTimeZone12.getOffsetFromLocal(32L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone21.getShortName(0L, locale26);
        java.lang.String str28 = dateTimeZone21.getID();
        long long31 = dateTimeZone21.convertLocalToUTC(100L, true);
        long long34 = dateTimeZone21.convertLocalToUTC((-1L), false);
        long long36 = dateTimeZone12.getMillisKeepLocal(dateTimeZone21, 118800001L);
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 242699999L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone12.getOffset(readableInstant39);
        long long42 = dateTimeZone12.convertUTCToLocal(399120110L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 118800001L + "'", long36 == 118800001L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 242699999L + "'", long38 == 242699999L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 399120110L + "'", long42 == 399120110L);
    }

    @Test
    public void test17840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17840");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) ' ', locale3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffset((long) 115200000);
        java.lang.String str9 = dateTimeZone1.getName((long) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone10.isLocalDateTimeGap(localDateTime12);
        long long16 = dateTimeZone10.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone10.getOffset(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.lang.String str24 = dateTimeZone19.getNameKey(1L);
        java.lang.String str26 = dateTimeZone19.getShortName((long) 100);
        boolean boolean27 = dateTimeZone10.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone28.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        boolean boolean32 = dateTimeZone10.equals((java.lang.Object) dateTimeZone28);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) 100);
        long long36 = dateTimeZone1.getMillisKeepLocal(dateTimeZone28, (long) 127920000);
        long long40 = dateTimeZone1.convertLocalToUTC((-187199968L), false, (long) (byte) 10);
        java.lang.String str42 = dateTimeZone1.getName((-354300000L));
        boolean boolean44 = dateTimeZone1.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3600000L) + "'", long30 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 127920000L + "'", long36 == 127920000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-183599968L) + "'", long40 == (-183599968L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-01:00" + "'", str42, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test17841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17841");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone5.getName(0L, locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.lang.String str24 = dateTimeZone19.getNameKey(1L);
        int int26 = dateTimeZone19.getOffset((-1L));
        java.lang.String str27 = dateTimeZone19.toString();
        int int29 = dateTimeZone19.getOffset(1L);
        long long32 = dateTimeZone19.adjustOffset((long) '4', true);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone19.getShortName((long) 115200000, locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        long long38 = dateTimeZone19.getMillisKeepLocal(dateTimeZone36, 3600000L);
        long long40 = dateTimeZone19.previousTransition(707580010L);
        long long42 = dateTimeZone5.getMillisKeepLocal(dateTimeZone19, 115200000L);
        long long45 = dateTimeZone5.adjustOffset(0L, true);
        int int47 = dateTimeZone5.getStandardOffset((-70080000L));
        java.lang.String str49 = dateTimeZone5.getName(658800010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 7200000L + "'", long38 == 7200000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 707580010L + "'", long40 == 707580010L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test17842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17842");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, true);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(0L, locale14);
        long long19 = dateTimeZone0.convertLocalToUTC((-115200166L), false, (-127920001L));
        int int21 = dateTimeZone0.getOffsetFromLocal(67260100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115200166L) + "'", long19 == (-115200166L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17843");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long14 = dateTimeZone0.convertLocalToUTC((-115200000L), true, 359999999L);
        int int16 = dateTimeZone0.getOffset(97L);
        int int18 = dateTimeZone0.getOffsetFromLocal(187200000L);
        boolean boolean19 = dateTimeZone0.isFixed();
        long long22 = dateTimeZone0.adjustOffset((-5339803L), false);
        long long25 = dateTimeZone0.adjustOffset(2100000L, true);
        long long27 = dateTimeZone0.convertUTCToLocal(248400052L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getShortName(0L, locale29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-5339803L) + "'", long22 == (-5339803L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2100000L + "'", long25 == 2100000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 248400052L + "'", long27 == 248400052L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
    }

    @Test
    public void test17844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17844");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.adjustOffset((long) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        java.lang.String str26 = dateTimeZone0.getShortName((-232500001L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        boolean boolean32 = dateTimeZone27.isStandardOffset(100L);
        java.lang.String str33 = dateTimeZone27.getID();
        java.lang.String str35 = dateTimeZone27.getShortName(1L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone27.getOffset(readableInstant36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone27.isLocalDateTimeGap(localDateTime38);
        int int41 = dateTimeZone27.getOffsetFromLocal((-7200000L));
        java.lang.String str43 = dateTimeZone27.getName(35L);
        java.lang.String str44 = dateTimeZone27.getID();
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone27, 36000000L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        boolean boolean49 = dateTimeZone48.isFixed();
        long long52 = dateTimeZone48.convertLocalToUTC(187200000L, true);
        long long54 = dateTimeZone0.getMillisKeepLocal(dateTimeZone48, 39120000L);
        long long57 = dateTimeZone48.convertLocalToUTC(120480000L, false);
        int int59 = dateTimeZone48.getOffsetFromLocal((-464399998L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 36000000L + "'", long46 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 187199999L + "'", long52 == 187199999L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 39119999L + "'", long54 == 39119999L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 120479999L + "'", long57 == 120479999L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test17845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17845");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        long long19 = dateTimeZone1.nextTransition(100L);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone1.getOffset(readableInstant22);
        long long26 = dateTimeZone1.convertLocalToUTC((long) 'a', true);
        java.lang.String str28 = dateTimeZone1.getName((-3599903L));
        int int30 = dateTimeZone1.getStandardOffset((long) 36600000);
        int int32 = dateTimeZone1.getOffset(3599989L);
        java.lang.String str34 = dateTimeZone1.getName((-174299968L));
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone1.getShortName(350880000L, locale36);
        long long39 = dateTimeZone1.convertUTCToLocal(191580100L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 191580100L + "'", long39 == 191580100L);
    }

    @Test
    public void test17846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17846");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int16 = dateTimeZone0.getOffsetFromLocal((-232500001L));
        boolean boolean18 = dateTimeZone0.isStandardOffset(265800032L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone0.getOffset(readableInstant19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test17847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17847");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int9 = dateTimeZone7.getOffset(181500096L);
        java.lang.String str11 = dateTimeZone7.getName(478800000L);
        boolean boolean12 = dateTimeZone7.isFixed();
        long long14 = dateTimeZone7.convertUTCToLocal((-779279900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-779279900L) + "'", long14 == (-779279900L));
    }

    @Test
    public void test17848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17848");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone2.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone2.getNameKey(0L);
        java.lang.String str14 = dateTimeZone2.getID();
        long long16 = dateTimeZone2.previousTransition((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone2.getOffset(readableInstant17);
        int int20 = dateTimeZone2.getOffset(247920000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 187200000 + "'", int18 == 187200000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 187200000 + "'", int20 == 187200000);
    }

    @Test
    public void test17849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17849");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        java.lang.String str6 = dateTimeZone1.getName(97L);
        int int8 = dateTimeZone1.getOffset(3599936L);
        java.lang.String str9 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 0);
        boolean boolean13 = dateTimeZone12.isFixed();
        java.lang.String str15 = dateTimeZone12.getShortName(0L);
        boolean boolean16 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+97:00" + "'", str15, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17850");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.lang.String str17 = dateTimeZone0.getShortName((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (short) 10);
        boolean boolean25 = dateTimeZone22.isFixed();
        boolean boolean27 = dateTimeZone22.isStandardOffset(115200100L);
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone22.getOffset(readableInstant28);
        java.util.TimeZone timeZone30 = dateTimeZone22.toTimeZone();
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) timeZone30);
        int int33 = dateTimeZone0.getOffsetFromLocal((-2099990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17851");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        java.lang.String str16 = dateTimeZone0.getShortName((-53999899L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test17852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17852");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone4.getOffset(readableInstant5);
        int int8 = dateTimeZone4.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        int int17 = dateTimeZone9.getOffsetFromLocal(0L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) 115200000);
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) (byte) 1);
        java.lang.String str23 = dateTimeZone1.getName(90L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone25 = dateTimeZone1.toTimeZone();
        long long28 = dateTimeZone1.adjustOffset(25139999L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 115200000L + "'", long19 == 115200000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200001L + "'", long21 == 115200001L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+32:00" + "'", str23, "+32:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 25139999L + "'", long28 == 25139999L);
    }

    @Test
    public void test17853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17853");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) 1.0f);
        long long5 = dateTimeZone1.convertUTCToLocal(600000L);
        int int7 = dateTimeZone1.getOffset((-2L));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(359999999L, locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getShortName((-265500001L), locale12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 600000L + "'", long5 == 600000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test17854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17854");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.previousTransition((long) 115200000);
        long long13 = dateTimeZone0.nextTransition(360000097L);
        long long16 = dateTimeZone0.adjustOffset((long) 0, true);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(0L, locale18);
        java.lang.String str21 = dateTimeZone0.getNameKey(152L);
        long long24 = dateTimeZone0.adjustOffset((-118800000L), false);
        long long26 = dateTimeZone0.previousTransition((-80880000L));
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone0.getShortName((-235739990L), locale28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 360000097L + "'", long13 == 360000097L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-118800000L) + "'", long24 == (-118800000L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-80880000L) + "'", long26 == (-80880000L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test17855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17855");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((-3600001L));
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) 360000000);
        int int8 = dateTimeZone1.getStandardOffset((-127920000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forID("UTC");
        int int13 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getShortName((long) (byte) 0, locale15);
        long long18 = dateTimeZone11.nextTransition((long) (byte) -1);
        long long20 = dateTimeZone11.convertUTCToLocal((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone26 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long29 = dateTimeZone27.previousTransition((long) ' ');
        java.lang.String str30 = dateTimeZone27.getID();
        java.lang.String str31 = dateTimeZone27.getID();
        long long33 = dateTimeZone27.previousTransition(115200000L);
        boolean boolean34 = dateTimeZone22.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone22.getOffset(readableInstant35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        boolean boolean38 = dateTimeZone22.isFixed();
        long long40 = dateTimeZone11.getMillisKeepLocal(dateTimeZone22, (long) (-3600000));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.util.TimeZone timeZone42 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long45 = dateTimeZone1.getMillisKeepLocal(dateTimeZone43, 838800097L);
        int int47 = dateTimeZone1.getOffset(176340006L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600001L) + "'", long4 == (-3600001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3600010L) + "'", long40 == (-3600010L));
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 835200097L + "'", long45 == 835200097L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3600000) + "'", int47 == (-3600000));
    }

    @Test
    public void test17856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone0.getNameKey(52L);
        int int23 = dateTimeZone0.getOffsetFromLocal(360000000L);
        int int25 = dateTimeZone0.getOffset(0L);
        int int27 = dateTimeZone0.getOffsetFromLocal(90L);
        long long30 = dateTimeZone0.adjustOffset(228480052L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 228480052L + "'", long30 == 228480052L);
    }

    @Test
    public void test17857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17857");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long5 = dateTimeZone1.adjustOffset(0L, true);
        boolean boolean6 = dateTimeZone1.isFixed();
        int int8 = dateTimeZone1.getStandardOffset((-232079900L));
        boolean boolean9 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(100L, true);
        java.lang.String str11 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        boolean boolean14 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone15.getShortName((long) 115200000, locale17);
        boolean boolean19 = dateTimeZone15.isFixed();
        long long21 = dateTimeZone15.previousTransition((long) (short) 10);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone15.getShortName(356460000L, locale23);
        java.lang.String str25 = dateTimeZone15.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.lang.String str31 = dateTimeZone26.getShortName((long) (byte) 100);
        java.lang.String str33 = dateTimeZone26.getShortName((long) (short) 0);
        java.lang.String str35 = dateTimeZone26.getShortName(0L);
        long long37 = dateTimeZone26.nextTransition((long) (byte) -1);
        int int39 = dateTimeZone26.getOffsetFromLocal((long) (short) 1);
        java.lang.String str41 = dateTimeZone26.getShortName(35L);
        boolean boolean42 = dateTimeZone15.equals((java.lang.Object) str41);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (-3599903L));
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone15.getName((long) 126060000, locale46);
        java.util.TimeZone timeZone48 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset((-356400065L));
        long long53 = dateTimeZone49.previousTransition(401580010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599903L) + "'", long44 == (-3599903L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 401580010L + "'", long53 == 401580010L);
    }

    @Test
    public void test17859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17859");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) 100);
        long long12 = dateTimeZone0.previousTransition(129660000L);
        java.lang.String str13 = dateTimeZone0.getID();
        long long16 = dateTimeZone0.convertLocalToUTC((-356400000L), true);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone0.isLocalDateTimeGap(localDateTime17);
        long long20 = dateTimeZone0.previousTransition((-115200002L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName((-309600000L), locale22);
        boolean boolean25 = dateTimeZone0.isStandardOffset(467520000L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getShortName(115199935L, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 129660000L + "'", long12 == 129660000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-356400000L) + "'", long16 == (-356400000L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-115200002L) + "'", long20 == (-115200002L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test17860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17860");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.convertUTCToLocal(10L);
        long long15 = dateTimeZone0.convertLocalToUTC(96L, true, 115199991L);
        long long17 = dateTimeZone0.convertUTCToLocal(464399991L);
        long long19 = dateTimeZone0.previousTransition((-61199991L));
        boolean boolean20 = dateTimeZone0.isFixed();
        java.lang.String str21 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 96L + "'", long15 == 96L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 464399991L + "'", long17 == 464399991L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61199991L) + "'", long19 == (-61199991L));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test17861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17861");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str15 = dateTimeZone1.getNameKey(100L);
        java.util.TimeZone timeZone16 = dateTimeZone1.toTimeZone();
        boolean boolean17 = dateTimeZone1.isFixed();
        long long19 = dateTimeZone1.nextTransition((-486599900L));
        int int21 = dateTimeZone1.getOffset((long) 360000000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-486599900L) + "'", long19 == (-486599900L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test17862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17862");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone8.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone8.getShortName(110L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName(0L, locale20);
        java.lang.String str22 = dateTimeZone15.getID();
        java.lang.String str24 = dateTimeZone15.getNameKey((long) 115200000);
        boolean boolean25 = dateTimeZone15.isFixed();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone15.getShortName((-174299968L), locale27);
        long long30 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (-54060009L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-54060009L) + "'", long30 == (-54060009L));
    }

    @Test
    public void test17863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17863");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        boolean boolean23 = dateTimeZone0.isFixed();
        boolean boolean25 = dateTimeZone0.isStandardOffset((-118860001L));
        boolean boolean26 = dateTimeZone0.isFixed();
        java.lang.String str28 = dateTimeZone0.getName(5700035L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test17864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17864");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        java.lang.String str48 = dateTimeZone23.getNameKey(0L);
        java.lang.String str50 = dateTimeZone23.getName((long) 0);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (long) 0);
        java.lang.String str54 = dateTimeZone0.getName(349200010L);
        int int56 = dateTimeZone0.getOffsetFromLocal((-7260001L));
        long long59 = dateTimeZone0.adjustOffset(600000L, false);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone0.isLocalDateTimeGap(localDateTime60);
        java.lang.String str62 = dateTimeZone0.toString();
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone0.getName((-162059958L), locale64);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 600000L + "'", long59 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
    }

    @Test
    public void test17865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str7 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        int int11 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str13 = dateTimeZone0.getNameKey((-11L));
        int int15 = dateTimeZone0.getStandardOffset((-280799990L));
        java.lang.String str17 = dateTimeZone0.getName(169680052L);
        boolean boolean19 = dateTimeZone0.isStandardOffset((-345599980L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test17866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17866");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.convertLocalToUTC(90L, false);
        java.lang.String str7 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean12 = dateTimeZone10.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone10.getOffset(readableInstant13);
        java.lang.String str15 = dateTimeZone10.getID();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone10.getOffset(readableInstant16);
        long long21 = dateTimeZone10.convertLocalToUTC((-115199900L), true, 707580000L);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone10, (-36000001L));
        long long25 = dateTimeZone0.convertUTCToLocal((-118800000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 90L + "'", long6 == 90L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 187200000 + "'", int14 == 187200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+52:00" + "'", str15, "+52:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 187200000 + "'", int17 == 187200000);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-302399900L) + "'", long21 == (-302399900L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-223200001L) + "'", long23 == (-223200001L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-118800000L) + "'", long25 == (-118800000L));
    }

    @Test
    public void test17867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17867");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone3.isFixed();
        int int6 = dateTimeZone3.getStandardOffset(0L);
        java.lang.String str8 = dateTimeZone3.getNameKey(1L);
        int int10 = dateTimeZone3.getOffset((-1L));
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str13 = dateTimeZone3.getName(32L);
        boolean boolean14 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        java.util.TimeZone timeZone15 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone18.getOffset(readableInstant19);
        int int22 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone23.getShortName((-1L), locale28);
        int int31 = dateTimeZone23.getOffsetFromLocal(0L);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) 115200000);
        boolean boolean35 = dateTimeZone18.isStandardOffset(115200000L);
        long long38 = dateTimeZone18.convertLocalToUTC((long) 10, true);
        java.lang.String str40 = dateTimeZone18.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone41.isLocalDateTimeGap(localDateTime43);
        long long47 = dateTimeZone41.adjustOffset((long) (short) 10, false);
        boolean boolean48 = dateTimeZone18.equals((java.lang.Object) dateTimeZone41);
        java.lang.String str49 = dateTimeZone18.getID();
        int int51 = dateTimeZone18.getOffset((-115199900L));
        long long53 = dateTimeZone17.getMillisKeepLocal(dateTimeZone18, 187200091L);
        boolean boolean55 = dateTimeZone17.isStandardOffset((-118799990L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.lang.String str57 = dateTimeZone17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 187200091L + "'", long53 == 187200091L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
    }

    @Test
    public void test17868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17868");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        long long24 = dateTimeZone0.nextTransition(187200000L);
        boolean boolean25 = dateTimeZone0.isFixed();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getShortName(3600010L, locale27);
        java.lang.String str29 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 187200000L + "'", long24 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
    }

    @Test
    public void test17869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17869");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str15 = dateTimeZone1.getNameKey(100L);
        int int17 = dateTimeZone1.getOffset((long) (byte) 100);
        java.lang.String str19 = dateTimeZone1.getName(471600097L);
        boolean boolean21 = dateTimeZone1.equals((java.lang.Object) (-3599913L));
        long long24 = dateTimeZone1.convertLocalToUTC((-541680000L), false);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getShortName((-466319999L), locale26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-541680010L) + "'", long24 == (-541680010L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
    }

    @Test
    public void test17870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17870");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        long long17 = dateTimeZone5.convertUTCToLocal(100L);
        int int19 = dateTimeZone5.getStandardOffset((long) 97);
        long long22 = dateTimeZone5.adjustOffset((long) (short) 1, false);
        java.util.TimeZone timeZone23 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int26 = dateTimeZone5.getOffset(473580000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test17871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17871");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long26 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long31 = dateTimeZone29.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test17872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17872");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str9 = dateTimeZone7.getNameKey(366720000L);
        java.lang.String str10 = dateTimeZone7.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test17873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17873");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.convertLocalToUTC(187200000L, true, (long) 127920000);
        long long8 = dateTimeZone1.convertUTCToLocal((-360000000L));
        java.lang.String str10 = dateTimeZone1.getShortName((long) 349200000);
        java.lang.String str11 = dateTimeZone1.getID();
        int int13 = dateTimeZone1.getOffset(261420000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200001L + "'", long6 == 187200001L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-360000001L) + "'", long8 == (-360000001L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-00:00:00.001" + "'", str10, "-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-00:00:00.001" + "'", str11, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test17874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17874");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        boolean boolean16 = dateTimeZone0.isFixed();
        java.lang.String str17 = dateTimeZone0.getID();
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        boolean boolean19 = dateTimeZone0.isFixed();
        int int21 = dateTimeZone0.getOffsetFromLocal((-8760000L));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone0.getName(356460000L, locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test17875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) ' ');
        long long25 = dateTimeZone23.previousTransition(115200100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.TimeZone timeZone27 = dateTimeZone23.toTimeZone();
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        long long32 = dateTimeZone23.convertLocalToUTC((-3599948L), true, (-541680010L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200100L + "'", long25 == 115200100L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-354719948L) + "'", long32 == (-354719948L));
    }

    @Test
    public void test17876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17876");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone7.getName((long) 1, locale9);
        long long12 = dateTimeZone7.nextTransition(0L);
        int int14 = dateTimeZone7.getOffset((-259799900L));
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone7.getOffset(readableInstant15);
        java.lang.String str18 = dateTimeZone7.getName((-3600065L));
        long long21 = dateTimeZone7.adjustOffset(125999999L, false);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.lang.String str27 = dateTimeZone22.getNameKey(1L);
        java.lang.String str29 = dateTimeZone22.getShortName((long) 100);
        long long32 = dateTimeZone22.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long35 = dateTimeZone22.nextTransition((-115200001L));
        boolean boolean36 = dateTimeZone7.equals((java.lang.Object) (-115200001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 125999999L + "'", long21 == 125999999L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-115200001L) + "'", long35 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test17877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17877");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long5 = dateTimeZone1.adjustOffset(0L, false);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        long long12 = dateTimeZone6.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone6.getOffset(readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getNameKey(1L);
        java.lang.String str22 = dateTimeZone15.getShortName((long) 100);
        boolean boolean23 = dateTimeZone6.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        long long26 = dateTimeZone24.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        boolean boolean28 = dateTimeZone6.equals((java.lang.Object) dateTimeZone24);
        long long31 = dateTimeZone24.convertLocalToUTC((long) '4', false);
        long long33 = dateTimeZone24.convertUTCToLocal((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        long long37 = dateTimeZone24.adjustOffset(475200097L, true);
        long long40 = dateTimeZone24.adjustOffset((-5520000L), false);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone24, (-118799903L));
        long long46 = dateTimeZone24.convertLocalToUTC((-151800000L), true, 154320052L);
        java.lang.String str47 = dateTimeZone24.getID();
        java.lang.String str48 = dateTimeZone24.getID();
        long long50 = dateTimeZone24.nextTransition(460799979L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3600000L) + "'", long26 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3600052L + "'", long31 == 3600052L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 475200097L + "'", long37 == 475200097L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-5520000L) + "'", long40 == (-5520000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-118799903L) + "'", long42 == (-118799903L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-148200000L) + "'", long46 == (-148200000L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 460799979L + "'", long50 == 460799979L);
    }

    @Test
    public void test17878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17878");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        boolean boolean8 = dateTimeZone1.isFixed();
        java.lang.String str10 = dateTimeZone1.getNameKey((-360000001L));
        java.lang.String str12 = dateTimeZone1.getShortName(71999991L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 10);
        int int17 = dateTimeZone15.getOffsetFromLocal(118800001L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        java.lang.String str21 = dateTimeZone18.toString();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str25 = dateTimeZone23.getShortName((long) 'a');
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone23.getShortName((long) (short) -1, locale27);
        int int30 = dateTimeZone23.getOffset((long) 115200000);
        long long32 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) (short) 0);
        boolean boolean34 = dateTimeZone23.isStandardOffset((long) 1);
        boolean boolean35 = dateTimeZone23.isFixed();
        int int37 = dateTimeZone23.getOffset(129660000L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone23.getOffset(readableInstant38);
        boolean boolean40 = dateTimeZone15.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str41 = dateTimeZone23.getID();
        long long44 = dateTimeZone23.adjustOffset((-32399999L), false);
        java.util.TimeZone timeZone45 = dateTimeZone23.toTimeZone();
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone23, (-179999968L));
        int int49 = dateTimeZone1.getOffset(107L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 600000 + "'", int17 == 600000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+32:00" + "'", str25, "+32:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+32:00" + "'", str28, "+32:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 115200000 + "'", int30 == 115200000);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-118800000L) + "'", long32 == (-118800000L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 115200000 + "'", int37 == 115200000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 115200000 + "'", int39 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+32:00" + "'", str41, "+32:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-32399999L) + "'", long44 == (-32399999L));
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-295199968L) + "'", long47 == (-295199968L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test17879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17879");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        java.lang.String str11 = dateTimeZone0.getName((-11L));
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        int int14 = dateTimeZone0.getOffset(363600000L);
        long long16 = dateTimeZone0.nextTransition(172799991L);
        int int18 = dateTimeZone0.getOffset(0L);
        java.lang.Class<?> wildcardClass19 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 172799991L + "'", long16 == 172799991L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test17880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17880");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) ' ');
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test17881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17881");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        java.lang.String str9 = dateTimeZone0.toString();
        long long13 = dateTimeZone0.convertLocalToUTC(11699990L, false, (-169200000L));
        java.lang.String str14 = dateTimeZone0.toString();
        java.lang.String str15 = dateTimeZone0.toString();
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11699990L + "'", long13 == 11699990L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17882");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean8 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName(115200100L, locale12);
        java.lang.String str14 = dateTimeZone0.getID();
        int int16 = dateTimeZone0.getOffsetFromLocal(10199991L);
        java.lang.String str18 = dateTimeZone0.getName(952319997L);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone0.isLocalDateTimeGap(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17883");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone15.getOffset(readableInstant23);
        boolean boolean26 = dateTimeZone15.isStandardOffset((long) (short) 1);
        long long30 = dateTimeZone15.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int32 = dateTimeZone15.getOffsetFromLocal((long) (short) 0);
        java.lang.String str34 = dateTimeZone15.getNameKey((long) ' ');
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone15.getShortName((long) (byte) 100, locale36);
        long long39 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (-115200000L));
        java.util.TimeZone timeZone40 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        java.lang.String str46 = dateTimeZone42.getShortName((-127920001L));
        long long49 = dateTimeZone42.convertLocalToUTC((-363599948L), true);
        java.util.TimeZone timeZone50 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 115200000L + "'", long30 == 115200000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-115200000L) + "'", long39 == (-115200000L));
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-363599948L) + "'", long49 == (-363599948L));
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
    }

    @Test
    public void test17884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) 100);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17885");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3120000, 5520000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 5520000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17886");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        int int19 = dateTimeZone0.getOffsetFromLocal((long) (short) 10);
        long long22 = dateTimeZone0.convertLocalToUTC((-111600000L), false);
        int int24 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str25 = dateTimeZone0.getID();
        long long28 = dateTimeZone0.convertLocalToUTC((long) 187200000, false);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(97, (int) (byte) 0);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone31, 8640162L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-111600000L) + "'", long22 == (-111600000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 187200000L + "'", long28 == 187200000L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-340559838L) + "'", long33 == (-340559838L));
    }

    @Test
    public void test17887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17887");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str7 = dateTimeZone0.getName(52L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 'a', locale11);
        long long15 = dateTimeZone9.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        boolean boolean18 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getName(1L);
        long long23 = dateTimeZone16.convertLocalToUTC(115200097L, false);
        long long25 = dateTimeZone16.previousTransition((-306000000L));
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) (-306000000L));
        long long28 = dateTimeZone0.convertUTCToLocal((-244800021L));
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone0.getShortName(230400052L, locale30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone33.getShortName((long) 'a', locale35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getName((long) (short) 0, locale38);
        long long41 = dateTimeZone33.convertUTCToLocal((-1L));
        long long45 = dateTimeZone33.convertLocalToUTC(0L, false, (long) (-3600000));
        long long48 = dateTimeZone33.convertLocalToUTC(115200001L, false);
        long long51 = dateTimeZone33.adjustOffset((-3600001L), false);
        long long53 = dateTimeZone0.getMillisKeepLocal(dateTimeZone33, (-115139848L));
        java.lang.Class<?> wildcardClass54 = dateTimeZone33.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200097L + "'", long23 == 115200097L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-306000000L) + "'", long25 == (-306000000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-244800021L) + "'", long28 == (-244800021L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+100:00" + "'", str36, "+100:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:00" + "'", str39, "+100:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 359999999L + "'", long41 == 359999999L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360000000L) + "'", long45 == (-360000000L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-244799999L) + "'", long48 == (-244799999L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-3600001L) + "'", long51 == (-3600001L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-475139848L) + "'", long53 == (-475139848L));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test17888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17888");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str4 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider5);
        org.joda.time.DateTimeZone.setProvider(provider5);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) provider5);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getShortName((long) (short) 1, locale10);
        java.lang.String str12 = dateTimeZone0.getID();
        java.lang.String str14 = dateTimeZone0.getShortName(366720000L);
        boolean boolean16 = dateTimeZone0.isStandardOffset((-590399999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17889");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        long long8 = dateTimeZone0.convertLocalToUTC(1L, false);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 115200000, locale11);
        boolean boolean13 = dateTimeZone9.isFixed();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone9.getName(52L, locale15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getName((long) (byte) -1, locale18);
        int int21 = dateTimeZone9.getOffset((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone9.isLocalDateTimeGap(localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone9.getOffset(readableInstant24);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (-115199990L));
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName((-118800000L), locale29);
        long long32 = dateTimeZone0.previousTransition((-208920019L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-115199990L) + "'", long27 == (-115199990L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-208920019L) + "'", long32 == (-208920019L));
    }

    @Test
    public void test17890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17890");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(0L, locale19);
        int int22 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone0.previousTransition(360060000L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone25.getShortName((-1L), locale30);
        int int33 = dateTimeZone25.getOffsetFromLocal(0L);
        java.lang.String str35 = dateTimeZone25.getShortName(0L);
        long long39 = dateTimeZone25.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long42 = dateTimeZone25.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone25.getID();
        java.lang.String str44 = dateTimeZone25.toString();
        long long47 = dateTimeZone25.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone48 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        long long56 = dateTimeZone52.convertLocalToUTC((long) 1, false, (-359999900L));
        boolean boolean57 = dateTimeZone0.equals((java.lang.Object) dateTimeZone52);
        long long61 = dateTimeZone52.convertLocalToUTC((-1919948L), true, 75600000L);
        int int63 = dateTimeZone52.getStandardOffset(108000097L);
        java.lang.Class<?> wildcardClass64 = dateTimeZone52.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 360060000L + "'", long24 == 360060000L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1919948L) + "'", long61 == (-1919948L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test17891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17891");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.adjustOffset((long) 10, false);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        java.lang.String str26 = dateTimeZone0.getShortName((-232500001L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        boolean boolean32 = dateTimeZone27.isStandardOffset(100L);
        java.lang.String str33 = dateTimeZone27.getID();
        java.lang.String str35 = dateTimeZone27.getShortName(1L);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone27.getOffset(readableInstant36);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone27.isLocalDateTimeGap(localDateTime38);
        int int41 = dateTimeZone27.getOffsetFromLocal((-7200000L));
        java.lang.String str43 = dateTimeZone27.getName(35L);
        java.lang.String str44 = dateTimeZone27.getID();
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone27, 36000000L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        boolean boolean49 = dateTimeZone48.isFixed();
        long long52 = dateTimeZone48.convertLocalToUTC(187200000L, true);
        long long54 = dateTimeZone0.getMillisKeepLocal(dateTimeZone48, 39120000L);
        int int56 = dateTimeZone48.getOffset((-187200001L));
        java.lang.String str58 = dateTimeZone48.getShortName((-349200003L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 36000000L + "'", long46 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 187199999L + "'", long52 == 187199999L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 39119999L + "'", long54 == 39119999L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.001" + "'", str58, "+00:00:00.001");
    }

    @Test
    public void test17892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17892");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        boolean boolean13 = dateTimeZone0.isFixed();
        java.lang.String str14 = dateTimeZone0.toString();
        java.lang.String str15 = dateTimeZone0.getID();
        long long18 = dateTimeZone0.adjustOffset(5699999L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5699999L + "'", long18 == 5699999L);
    }

    @Test
    public void test17893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str16 = dateTimeZone0.getID();
        long long18 = dateTimeZone0.nextTransition((-7260001L));
        java.lang.String str20 = dateTimeZone0.getName((long) 127920000);
        boolean boolean21 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        int int31 = dateTimeZone27.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getShortName((-1L), locale37);
        int int40 = dateTimeZone32.getOffsetFromLocal(0L);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 115200000);
        java.lang.String str44 = dateTimeZone27.getShortName((long) '4');
        boolean boolean45 = dateTimeZone26.equals((java.lang.Object) dateTimeZone27);
        boolean boolean46 = dateTimeZone0.equals((java.lang.Object) boolean45);
        java.lang.String str47 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-7260001L) + "'", long18 == (-7260001L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
    }

    @Test
    public void test17894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17894");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (short) 100);
        long long14 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (short) 0);
        java.lang.String str16 = dateTimeZone0.getName((long) 360000000);
        java.lang.String str18 = dateTimeZone0.getShortName((-118799913L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        long long23 = dateTimeZone0.nextTransition((-36060058L));
        long long27 = dateTimeZone0.convertLocalToUTC(835200097L, true, 838800052L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName(592320001L, locale29);
        long long32 = dateTimeZone0.nextTransition(128399999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-36060058L) + "'", long23 == (-36060058L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 835200097L + "'", long27 == 835200097L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 128399999L + "'", long32 == 128399999L);
    }

    @Test
    public void test17895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17895");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone21.getShortName((-1L), locale26);
        int int29 = dateTimeZone21.getOffsetFromLocal(0L);
        long long31 = dateTimeZone21.convertUTCToLocal((long) 0);
        long long33 = dateTimeZone21.previousTransition(0L);
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 3600001L);
        long long38 = dateTimeZone0.convertLocalToUTC(118800001L, true);
        java.lang.String str39 = dateTimeZone0.toString();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone0.getName(1L, locale41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3600001L + "'", long35 == 3600001L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 118800001L + "'", long38 == 118800001L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test17896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17896");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        boolean boolean17 = dateTimeZone5.isFixed();
        int int19 = dateTimeZone5.getOffset(129660000L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.lang.String str25 = dateTimeZone20.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone26 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        boolean boolean28 = dateTimeZone5.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone29.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (short) 10);
        boolean boolean36 = dateTimeZone33.isFixed();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getName(52L, locale38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone33.isLocalDateTimeGap(localDateTime40);
        int int43 = dateTimeZone33.getOffset(35L);
        boolean boolean44 = dateTimeZone27.equals((java.lang.Object) 35L);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone27.getShortName(8640152L, locale46);
        int int49 = dateTimeZone27.getOffsetFromLocal(7200052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 115200000 + "'", int19 == 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test17897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        java.lang.String str24 = dateTimeZone15.getShortName(0L);
        boolean boolean26 = dateTimeZone15.equals((java.lang.Object) '4');
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone15.getName(35L, locale28);
        long long31 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (-232079900L));
        int int33 = dateTimeZone8.getStandardOffset((-232079900L));
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        long long36 = dateTimeZone34.convertUTCToLocal((long) (byte) 0);
        java.lang.String str37 = dateTimeZone34.toString();
        long long39 = dateTimeZone34.convertUTCToLocal(0L);
        int int41 = dateTimeZone34.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        boolean boolean43 = dateTimeZone42.isFixed();
        long long45 = dateTimeZone34.getMillisKeepLocal(dateTimeZone42, (long) 10);
        long long47 = dateTimeZone8.getMillisKeepLocal(dateTimeZone34, (long) 100);
        long long51 = dateTimeZone34.convertLocalToUTC(228540087L, false, 115200000L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean54 = dateTimeZone52.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone52.getName(10L, locale57);
        org.joda.time.LocalDateTime localDateTime59 = null;
        boolean boolean60 = dateTimeZone52.isLocalDateTimeGap(localDateTime59);
        long long63 = dateTimeZone52.adjustOffset(1L, true);
        long long65 = dateTimeZone52.convertUTCToLocal(244799991L);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        boolean boolean68 = dateTimeZone66.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone69 = dateTimeZone66.toTimeZone();
        boolean boolean71 = dateTimeZone66.isStandardOffset(100L);
        java.lang.String str72 = dateTimeZone66.getID();
        java.lang.String str74 = dateTimeZone66.getShortName(1L);
        org.joda.time.ReadableInstant readableInstant75 = null;
        int int76 = dateTimeZone66.getOffset(readableInstant75);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone66.isLocalDateTimeGap(localDateTime77);
        int int80 = dateTimeZone66.getOffsetFromLocal((-7200000L));
        java.lang.String str82 = dateTimeZone66.getName((-1L));
        boolean boolean84 = dateTimeZone66.isStandardOffset((-36000000L));
        long long86 = dateTimeZone52.getMillisKeepLocal(dateTimeZone66, 118799999L);
        boolean boolean87 = dateTimeZone34.equals((java.lang.Object) 118799999L);
        java.util.Locale locale89 = null;
        java.lang.String str90 = dateTimeZone34.getShortName((-115199848L), locale89);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-232079900L) + "'", long31 == (-232079900L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 228540087L + "'", long51 == 228540087L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 244799991L + "'", long65 == 244799991L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 118799999L + "'", long86 == 118799999L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
    }

    @Test
    public void test17898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17898");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str6 = dateTimeZone1.toString();
        int int8 = dateTimeZone1.getOffsetFromLocal((long) 1920000);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getShortName((long) 'a', locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getName((long) (short) 0, locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone18.isLocalDateTimeGap(localDateTime19);
        long long22 = dateTimeZone18.nextTransition(151200000L);
        long long25 = dateTimeZone18.convertLocalToUTC(187200001L, true);
        long long27 = dateTimeZone10.getMillisKeepLocal(dateTimeZone18, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forID("UTC");
        int int32 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone30.getShortName((long) (byte) 0, locale34);
        long long37 = dateTimeZone30.nextTransition((long) (byte) -1);
        long long39 = dateTimeZone30.convertUTCToLocal((long) (byte) 10);
        int int41 = dateTimeZone30.getStandardOffset(0L);
        java.util.TimeZone timeZone42 = dateTimeZone30.toTimeZone();
        long long44 = dateTimeZone18.getMillisKeepLocal(dateTimeZone30, (-3599903L));
        long long48 = dateTimeZone18.convertLocalToUTC(0L, true, (long) 115200000);
        boolean boolean49 = dateTimeZone18.isFixed();
        java.lang.String str51 = dateTimeZone18.getShortName(287940006L);
        long long53 = dateTimeZone1.getMillisKeepLocal(dateTimeZone18, 7200052L);
        int int55 = dateTimeZone1.getOffset((-230399991L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:00" + "'", str13, "+100:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:00" + "'", str16, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 151200000L + "'", long22 == 151200000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187199991L + "'", long25 == 187199991L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 359999991L + "'", long27 == 359999991L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599893L) + "'", long44 == (-3599893L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-10L) + "'", long48 == (-10L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 7200042L + "'", long53 == 7200042L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test17899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17899");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean9 = dateTimeZone1.isFixed();
        java.lang.String str11 = dateTimeZone1.getName(200280000L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        int int22 = dateTimeZone12.getStandardOffset((long) (byte) 10);
        boolean boolean23 = dateTimeZone12.isFixed();
        boolean boolean25 = dateTimeZone12.isStandardOffset((long) (byte) 100);
        int int27 = dateTimeZone12.getOffsetFromLocal(115200100L);
        long long31 = dateTimeZone12.convertLocalToUTC((-3599990L), false, 0L);
        java.lang.String str32 = dateTimeZone12.getID();
        int int34 = dateTimeZone12.getOffsetFromLocal((long) 126000000);
        java.lang.String str36 = dateTimeZone12.getName(150599991L);
        long long38 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 190860000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 190860010L + "'", long38 == 190860010L);
    }

    @Test
    public void test17900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17900");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName(97L, locale16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean20 = dateTimeZone0.equals((java.lang.Object) 178860100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getNameKey(52L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) 10);
        java.lang.String str8 = dateTimeZone0.getName(360000097L);
        java.lang.String str10 = dateTimeZone0.getName((-190800010L));
        int int12 = dateTimeZone0.getOffsetFromLocal(363659998L);
        long long14 = dateTimeZone0.convertUTCToLocal(34080032L);
        boolean boolean16 = dateTimeZone0.isStandardOffset(475199996L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone17.getOffset(readableInstant18);
        int int21 = dateTimeZone17.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone22.getShortName((-1L), locale27);
        int int30 = dateTimeZone22.getOffsetFromLocal(0L);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone22, (long) 115200000);
        int int34 = dateTimeZone22.getOffset((long) '4');
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone22.getOffset(readableInstant35);
        long long38 = dateTimeZone22.previousTransition(129599999L);
        long long40 = dateTimeZone22.convertUTCToLocal((-31980010L));
        boolean boolean41 = dateTimeZone0.equals((java.lang.Object) dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34080032L + "'", long14 == 34080032L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115200000L + "'", long32 == 115200000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 129599999L + "'", long38 == 129599999L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-31980010L) + "'", long40 == (-31980010L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test17902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17902");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 126060000, true);
        int int13 = dateTimeZone0.getStandardOffset((long) 349200000);
        java.lang.String str15 = dateTimeZone0.getNameKey((-32399999L));
        int int17 = dateTimeZone0.getStandardOffset(221280020L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 126060000L + "'", long11 == 126060000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17903");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str8 = dateTimeZone7.toString();
        java.lang.String str10 = dateTimeZone7.getNameKey((-464399999L));
        int int12 = dateTimeZone7.getStandardOffset(583259913L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        long long7 = dateTimeZone0.convertUTCToLocal(126060100L);
        long long10 = dateTimeZone0.adjustOffset((-187199968L), false);
        long long12 = dateTimeZone0.convertUTCToLocal(52L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(118799989L, locale14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 126060100L + "'", long7 == 126060100L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-187199968L) + "'", long10 == (-187199968L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
    }

    @Test
    public void test17905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17905");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        long long16 = dateTimeZone0.convertLocalToUTC(10L, true, (long) 10);
        long long19 = dateTimeZone0.convertLocalToUTC(349800000L, false);
        long long22 = dateTimeZone0.adjustOffset((-10800000L), false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone23.getOffset(readableInstant47);
        boolean boolean50 = dateTimeZone23.isStandardOffset((long) 349200000);
        long long52 = dateTimeZone23.convertUTCToLocal((-3600001L));
        java.lang.String str54 = dateTimeZone23.getName(360000052L);
        long long56 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, 129720100L);
        int int58 = dateTimeZone0.getOffsetFromLocal((-187199990L));
        java.lang.String str59 = dateTimeZone0.getID();
        java.lang.String str61 = dateTimeZone0.getName(115200087L);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        long long64 = dateTimeZone62.convertUTCToLocal((long) (byte) 0);
        java.lang.String str65 = dateTimeZone62.toString();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str69 = dateTimeZone67.getShortName((long) 'a');
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone67.getShortName((long) (short) -1, locale71);
        int int74 = dateTimeZone67.getOffset((long) 115200000);
        long long76 = dateTimeZone62.getMillisKeepLocal(dateTimeZone67, (long) (short) 0);
        boolean boolean77 = dateTimeZone62.isFixed();
        boolean boolean78 = dateTimeZone62.isFixed();
        long long80 = dateTimeZone62.convertUTCToLocal(0L);
        org.joda.time.ReadableInstant readableInstant81 = null;
        int int82 = dateTimeZone62.getOffset(readableInstant81);
        java.lang.String str83 = dateTimeZone62.toString();
        java.lang.Object obj84 = null;
        boolean boolean85 = dateTimeZone62.equals(obj84);
        boolean boolean86 = dateTimeZone0.equals((java.lang.Object) boolean85);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 359999999L + "'", long12 == 359999999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 349800000L + "'", long19 == 349800000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-10800000L) + "'", long22 == (-10800000L));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-3600001L) + "'", long52 == (-3600001L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 129720100L + "'", long56 == 129720100L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+32:00" + "'", str69, "+32:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+32:00" + "'", str72, "+32:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 115200000 + "'", int74 == 115200000);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-115200000L) + "'", long76 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17906");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str25 = dateTimeZone3.getID();
        java.lang.String str27 = dateTimeZone3.getShortName(115200010L);
        int int29 = dateTimeZone3.getStandardOffset(37680032L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17907");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        int int8 = dateTimeZone2.getOffsetFromLocal((long) (byte) -1);
        int int10 = dateTimeZone2.getOffset((-233999913L));
        boolean boolean11 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        int int15 = dateTimeZone2.getOffset((-475199958L));
        long long19 = dateTimeZone2.convertLocalToUTC((-725699910L), false, 131519997L);
        int int21 = dateTimeZone2.getOffset((-550799958L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 127920000 + "'", int8 == 127920000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 127920000 + "'", int10 == 127920000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 127920000 + "'", int15 == 127920000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-853619910L) + "'", long19 == (-853619910L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 127920000 + "'", int21 == 127920000);
    }

    @Test
    public void test17908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17908");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        long long10 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 360600000);
        java.lang.String str12 = dateTimeZone0.getNameKey((-368880000L));
        java.lang.String str14 = dateTimeZone0.getName(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getName((-107819990L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 360600000L + "'", long10 == 360600000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test17909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17909");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str15 = dateTimeZone1.getNameKey(100L);
        int int17 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone1.getOffset(readableInstant18);
        long long21 = dateTimeZone1.convertUTCToLocal((-10860001L));
        boolean boolean22 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-10859991L) + "'", long21 == (-10859991L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test17910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17910");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) '#');
        int int4 = dateTimeZone2.getStandardOffset(41340087L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int8 = dateTimeZone6.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone6.isLocalDateTimeGap(localDateTime9);
        int int12 = dateTimeZone6.getStandardOffset((long) 100);
        java.util.TimeZone timeZone13 = dateTimeZone6.toTimeZone();
        boolean boolean14 = dateTimeZone2.equals((java.lang.Object) dateTimeZone6);
        int int16 = dateTimeZone2.getOffset(475200052L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2100000 + "'", int4 == 2100000);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 115200000 + "'", int8 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2100000 + "'", int16 == 2100000);
    }

    @Test
    public void test17911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17911");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        long long17 = dateTimeZone0.convertLocalToUTC((long) 10, false);
        long long21 = dateTimeZone0.convertLocalToUTC((long) (-1), true, 0L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone0.getOffset(readableInstant22);
        java.lang.String str24 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone0.getOffset(readableInstant25);
        long long28 = dateTimeZone0.previousTransition((long) 363120000);
        java.lang.String str30 = dateTimeZone0.getName((-755460000L));
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone31, 68460000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 363120000L + "'", long28 == 363120000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 68460000L + "'", long33 == 68460000L);
    }

    @Test
    public void test17912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17912");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.previousTransition((-183599968L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        long long13 = dateTimeZone11.convertUTCToLocal((long) (byte) 0);
        java.lang.String str14 = dateTimeZone11.toString();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getName((-1L), locale16);
        int int19 = dateTimeZone11.getStandardOffset((-360000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        boolean boolean21 = dateTimeZone0.equals((java.lang.Object) dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean26 = dateTimeZone24.isStandardOffset(115199999L);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone28.nextTransition(14820000L);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, (-5519948L));
        int int34 = dateTimeZone28.getStandardOffset(359999999L);
        long long38 = dateTimeZone28.convertLocalToUTC(0L, false, (-149280000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-183599968L) + "'", long10 == (-183599968L));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 14820000L + "'", long30 == 14820000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-5519948L) + "'", long32 == (-5519948L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test17913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17913");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str4 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider5);
        org.joda.time.DateTimeZone.setProvider(provider5);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) provider5);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forID("UTC");
        int int14 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 0, locale16);
        int int19 = dateTimeZone12.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone23.getName((long) ' ', locale25);
        boolean boolean27 = dateTimeZone21.equals((java.lang.Object) dateTimeZone23);
        boolean boolean28 = dateTimeZone12.equals((java.lang.Object) dateTimeZone23);
        long long30 = dateTimeZone12.nextTransition(100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int33 = dateTimeZone12.getOffset(162000000L);
        boolean boolean34 = dateTimeZone0.equals((java.lang.Object) int33);
        java.lang.String str35 = dateTimeZone0.toString();
        java.lang.String str36 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
    }

    @Test
    public void test17914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17914");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 10);
        java.lang.String str6 = dateTimeZone2.getShortName(10L);
        long long10 = dateTimeZone2.convertLocalToUTC(118799999L, true, (long) (short) 0);
        boolean boolean12 = dateTimeZone2.equals((java.lang.Object) 0.0d);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone2.getName(122460000L, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone2.getName((-356400000L), locale17);
        java.lang.String str19 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 126060000 + "'", int4 == 126060000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:01" + "'", str6, "+35:01");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-7260001L) + "'", long10 == (-7260001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+35:01" + "'", str15, "+35:01");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+35:01" + "'", str18, "+35:01");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:01" + "'", str19, "+35:01");
    }

    @Test
    public void test17915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17915");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        long long7 = dateTimeZone3.convertUTCToLocal(194400000L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((-36059948L), locale9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 194400000L + "'", long7 == 194400000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
    }

    @Test
    public void test17916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17916");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.convertLocalToUTC(0L, true);
        boolean boolean24 = dateTimeZone0.isFixed();
        long long26 = dateTimeZone0.convertUTCToLocal(600000L);
        int int28 = dateTimeZone0.getOffsetFromLocal(244199992L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 600000L + "'", long26 == 600000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17917");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.lang.String str7 = dateTimeZone1.toString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((long) 127920000, locale9);
        java.lang.String str11 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        java.lang.String str20 = dateTimeZone12.getShortName(1L);
        java.lang.String str21 = dateTimeZone12.getID();
        long long24 = dateTimeZone12.convertLocalToUTC(359999999L, true);
        long long26 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 349200000L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone12.isLocalDateTimeGap(localDateTime27);
        java.util.TimeZone timeZone29 = dateTimeZone12.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 359999999L + "'", long24 == 359999999L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 349200000L + "'", long26 == 349200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 100);
        long long27 = dateTimeZone18.adjustOffset(349200010L, false);
        java.lang.String str29 = dateTimeZone18.getNameKey((-183659994L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 349200010L + "'", long27 == 349200010L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
    }

    @Test
    public void test17919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17919");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        long long19 = dateTimeZone5.convertLocalToUTC((long) (short) 1, true);
        int int21 = dateTimeZone5.getOffset(244800097L);
        long long23 = dateTimeZone5.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115199999L) + "'", long19 == (-115199999L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 115200000 + "'", int21 == 115200000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200000L + "'", long23 == 115200000L);
    }

    @Test
    public void test17920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17920");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.previousTransition((long) (short) 10);
        int int5 = dateTimeZone1.getOffset(3600032L);
        int int7 = dateTimeZone1.getStandardOffset((long) 10);
        java.lang.String str8 = dateTimeZone1.getID();
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str10 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3600000 + "'", int5 == 3600000);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3600000 + "'", int7 == 3600000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+01:00" + "'", str9, "+01:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+01:00" + "'", str10, "+01:00");
    }

    @Test
    public void test17921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17921");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) 'a', true, (long) (byte) -1);
        long long20 = dateTimeZone0.convertLocalToUTC(360000097L, false, 0L);
        java.util.TimeZone timeZone21 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        boolean boolean27 = dateTimeZone22.isStandardOffset(100L);
        java.lang.String str29 = dateTimeZone22.getName((long) (byte) 100);
        int int31 = dateTimeZone22.getOffsetFromLocal(360000097L);
        java.lang.String str33 = dateTimeZone22.getName(72000001L);
        int int35 = dateTimeZone22.getOffsetFromLocal(115199991L);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, 707580010L);
        java.lang.String str38 = dateTimeZone22.toString();
        long long40 = dateTimeZone22.convertUTCToLocal(116760000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 360000097L + "'", long20 == 360000097L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 707580010L + "'", long37 == 707580010L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 116760000L + "'", long40 == 116760000L);
    }

    @Test
    public void test17922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17922");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        long long5 = dateTimeZone1.previousTransition(115200100L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getName((long) ' ', locale11);
        boolean boolean13 = dateTimeZone7.equals((java.lang.Object) dateTimeZone9);
        long long15 = dateTimeZone7.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.lang.String str21 = dateTimeZone16.getShortName((long) (byte) 100);
        java.lang.String str23 = dateTimeZone16.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone16.getOffset(readableInstant24);
        long long29 = dateTimeZone16.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int31 = dateTimeZone16.getOffset(115199999L);
        long long33 = dateTimeZone7.getMillisKeepLocal(dateTimeZone16, 10L);
        long long35 = dateTimeZone16.previousTransition((long) 97);
        long long38 = dateTimeZone16.convertLocalToUTC(3600032L, false);
        long long41 = dateTimeZone16.convertLocalToUTC((-7200000L), true);
        long long43 = dateTimeZone16.nextTransition(122460000L);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone16.getShortName((long) (byte) 10, locale45);
        long long48 = dateTimeZone16.nextTransition(0L);
        java.lang.String str50 = dateTimeZone16.getShortName(361920000L);
        boolean boolean51 = dateTimeZone1.equals((java.lang.Object) str50);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 115200100L + "'", long5 == 115200100L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 152L + "'", long15 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 110L + "'", long33 == 110L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3600032L + "'", long38 == 3600032L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-7200000L) + "'", long41 == (-7200000L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 122460000L + "'", long43 == 122460000L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test17923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17923");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        int int11 = dateTimeZone0.getStandardOffset(35L);
        long long14 = dateTimeZone0.convertLocalToUTC(11399999L, true);
        long long16 = dateTimeZone0.previousTransition(466259997L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11399999L + "'", long14 == 11399999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 466259997L + "'", long16 == 466259997L);
    }

    @Test
    public void test17924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17924");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str4 = dateTimeZone0.getShortName((long) '4');
        boolean boolean5 = dateTimeZone0.isFixed();
        int int7 = dateTimeZone0.getStandardOffset((long) 600000);
        boolean boolean9 = dateTimeZone0.isStandardOffset((-3L));
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        long long31 = dateTimeZone24.convertUTCToLocal((-3600000L));
        boolean boolean33 = dateTimeZone24.isStandardOffset(108480000L);
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone24, (-244799999L));
        int int37 = dateTimeZone24.getStandardOffset(0L);
        java.lang.String str39 = dateTimeZone24.getShortName(109680097L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-7200000L) + "'", long31 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-241199999L) + "'", long35 == (-241199999L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-01:00" + "'", str39, "-01:00");
    }

    @Test
    public void test17925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-1L), locale9);
        boolean boolean12 = dateTimeZone1.isStandardOffset((long) 127920000);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str17 = dateTimeZone15.getShortName(100L);
        java.lang.String str19 = dateTimeZone15.getShortName((-115199965L));
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 118799999L);
        java.lang.String str22 = dateTimeZone15.toString();
        boolean boolean23 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone15.isLocalDateTimeGap(localDateTime24);
        long long27 = dateTimeZone15.previousTransition((-3599989L));
        long long30 = dateTimeZone15.adjustOffset(471120000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+35:32" + "'", str17, "+35:32");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:32" + "'", str19, "+35:32");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 350879999L + "'", long21 == 350879999L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+35:32" + "'", str22, "+35:32");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599989L) + "'", long27 == (-3599989L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 471120000L + "'", long30 == 471120000L);
    }

    @Test
    public void test17926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17926");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean3 = dateTimeZone0.isStandardOffset((long) (-3600000));
        long long7 = dateTimeZone0.convertLocalToUTC((long) ' ', false, (-1083599900L));
        java.lang.String str8 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
    }

    @Test
    public void test17927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17927");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.lang.String str5 = dateTimeZone0.getName((long) 0);
        java.lang.String str7 = dateTimeZone0.getShortName(9L);
        long long10 = dateTimeZone0.convertLocalToUTC((-115199999L), true);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName((-149280000L), locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName((-319919990L), locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-115199999L) + "'", long10 == (-115199999L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test17928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17928");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        boolean boolean12 = dateTimeZone10.isStandardOffset((-11L));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone14.getOffset(readableInstant15);
        int int18 = dateTimeZone14.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName((-1L), locale24);
        int int27 = dateTimeZone19.getOffsetFromLocal(0L);
        long long29 = dateTimeZone14.getMillisKeepLocal(dateTimeZone19, (long) 115200000);
        java.lang.String str31 = dateTimeZone14.getShortName((long) '4');
        boolean boolean32 = dateTimeZone14.isFixed();
        long long34 = dateTimeZone14.convertUTCToLocal((long) ' ');
        boolean boolean36 = dateTimeZone14.isStandardOffset(0L);
        java.lang.String str38 = dateTimeZone14.getName((-359999900L));
        long long40 = dateTimeZone14.convertUTCToLocal(356460000L);
        java.lang.String str42 = dateTimeZone14.getShortName((-360000000L));
        long long44 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, (-118799990L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.lang.String str47 = dateTimeZone14.getName((-68399900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 115200000L + "'", long29 == 115200000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 356460000L + "'", long40 == 356460000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-118799990L) + "'", long44 == (-118799990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
    }

    @Test
    public void test17929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17929");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (short) 100);
        long long14 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (short) 0);
        java.lang.String str16 = dateTimeZone0.getName((long) 360000000);
        long long20 = dateTimeZone0.convertLocalToUTC((-6720000L), true, 707580000L);
        java.lang.String str21 = dateTimeZone0.getID();
        java.lang.String str23 = dateTimeZone0.getNameKey(707580010L);
        int int25 = dateTimeZone0.getStandardOffset((-346199990L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-6720000L) + "'", long20 == (-6720000L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17930");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        java.lang.String str18 = dateTimeZone1.getNameKey(187200001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long22 = dateTimeZone1.adjustOffset(223380100L, false);
        boolean boolean23 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 223380100L + "'", long22 == 223380100L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test17931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17931");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(52L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        int int20 = dateTimeZone10.getStandardOffset((long) (byte) 10);
        java.lang.String str22 = dateTimeZone10.getName((long) (byte) 10);
        long long24 = dateTimeZone10.previousTransition(52L);
        long long26 = dateTimeZone9.getMillisKeepLocal(dateTimeZone10, (long) 'a');
        long long29 = dateTimeZone10.adjustOffset((long) (byte) 0, false);
        long long32 = dateTimeZone10.adjustOffset(349200010L, false);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long) 10);
        long long36 = dateTimeZone10.nextTransition(123900152L);
        java.util.TimeZone timeZone37 = dateTimeZone10.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000097L + "'", long26 == 360000097L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 349200010L + "'", long32 == 349200010L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 115200010L + "'", long34 == 115200010L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 123900152L + "'", long36 == 123900152L);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long10 = dateTimeZone0.convertLocalToUTC((-7200000L), true, 152L);
        java.lang.String str11 = dateTimeZone0.getID();
        boolean boolean12 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName(3600001L, locale16);
        long long20 = dateTimeZone0.adjustOffset((long) 1920000, false);
        int int22 = dateTimeZone0.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-7200000L) + "'", long10 == (-7200000L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1920000L + "'", long20 == 1920000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test17933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        long long14 = dateTimeZone0.previousTransition(52L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        java.lang.String str23 = dateTimeZone15.getShortName(1L);
        long long25 = dateTimeZone15.nextTransition((long) 0);
        long long27 = dateTimeZone15.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) '#');
        long long33 = dateTimeZone15.convertUTCToLocal((-3600000L));
        java.lang.String str35 = dateTimeZone15.getNameKey(10L);
        long long39 = dateTimeZone15.convertLocalToUTC((-1L), true, 52L);
        java.lang.String str40 = dateTimeZone15.toString();
        java.lang.String str41 = dateTimeZone15.getID();
        int int43 = dateTimeZone15.getOffset(226320000L);
        java.lang.String str44 = dateTimeZone15.getID();
        java.lang.String str46 = dateTimeZone15.getName(205260010L);
        long long50 = dateTimeZone15.convertLocalToUTC(8640161L, true, (-3599981L));
        boolean boolean51 = dateTimeZone0.equals((java.lang.Object) 8640161L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3600000L) + "'", long33 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8640161L + "'", long50 == 8640161L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test17934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17934");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (short) 10);
        long long5 = dateTimeZone2.convertLocalToUTC((-511199990L), false);
        java.lang.String str7 = dateTimeZone2.getShortName((-302399999L));
        long long11 = dateTimeZone2.convertLocalToUTC((-228900001L), false, 703980010L);
        boolean boolean12 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long16 = dateTimeZone2.adjustOffset(1800100L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-547799990L) + "'", long5 == (-547799990L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:10" + "'", str7, "+10:10");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-265500001L) + "'", long11 == (-265500001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1800100L + "'", long16 == 1800100L);
    }

    @Test
    public void test17935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17935");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone0.nextTransition(118800001L);
        int int16 = dateTimeZone0.getStandardOffset(97L);
        int int18 = dateTimeZone0.getStandardOffset(547199998L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long25 = dateTimeZone23.previousTransition((long) ' ');
        java.lang.String str26 = dateTimeZone23.getID();
        java.lang.String str27 = dateTimeZone23.getID();
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone23.getOffset(readableInstant28);
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (-10320000L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str34 = dateTimeZone33.getID();
        java.lang.String str36 = dateTimeZone33.getShortName((long) (short) 10);
        java.lang.String str38 = dateTimeZone33.getName(97L);
        long long40 = dateTimeZone33.convertUTCToLocal(0L);
        long long43 = dateTimeZone33.convertLocalToUTC(243120097L, false);
        int int45 = dateTimeZone33.getOffsetFromLocal((-111600001L));
        boolean boolean46 = dateTimeZone23.equals((java.lang.Object) (-111600001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 118800001L + "'", long14 == 118800001L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-10320000L) + "'", long31 == (-10320000L));
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 243120097L + "'", long43 == 243120097L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test17936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17936");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        long long9 = dateTimeZone1.previousTransition((long) (short) 1);
        long long11 = dateTimeZone1.convertUTCToLocal(115200000L);
        boolean boolean12 = dateTimeZone1.isFixed();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone1.getName(15899990L, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone1.getName(478800097L, locale17);
        int int20 = dateTimeZone1.getStandardOffset(120719990L);
        int int22 = dateTimeZone1.getStandardOffset(707580009L);
        java.lang.String str23 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 111600000L + "'", long11 == 111600000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:00" + "'", str23, "-01:00");
    }

    @Test
    public void test17937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17937");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) 100);
        int int11 = dateTimeZone0.getOffsetFromLocal(356400000L);
        int int13 = dateTimeZone0.getStandardOffset(25L);
        java.lang.String str15 = dateTimeZone0.getNameKey((-163979948L));
        boolean boolean16 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17938");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        int int5 = dateTimeZone0.getStandardOffset(111600000L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone6.getOffset(readableInstant7);
        int int10 = dateTimeZone6.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getShortName((-1L), locale16);
        int int19 = dateTimeZone11.getOffsetFromLocal(0L);
        long long21 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (long) 115200000);
        boolean boolean23 = dateTimeZone6.isStandardOffset(115200000L);
        long long26 = dateTimeZone6.convertLocalToUTC((long) 10, true);
        java.lang.String str28 = dateTimeZone6.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        long long35 = dateTimeZone29.adjustOffset((long) (short) 10, false);
        boolean boolean36 = dateTimeZone6.equals((java.lang.Object) dateTimeZone29);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) dateTimeZone29);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone0.getName(110L, locale39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone0.getOffset(readableInstant41);
        java.lang.String str43 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone0.isLocalDateTimeGap(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200000L + "'", long21 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test17939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17939");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone0.isLocalDateTimeGap(localDateTime19);
        java.lang.String str22 = dateTimeZone0.getName(0L);
        java.lang.String str24 = dateTimeZone0.getShortName(244199991L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone0.getName((-115199965L), locale26);
        boolean boolean28 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17940");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone21.getName((long) (-1), locale29);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone21.getShortName((long) (byte) 10, locale32);
        long long35 = dateTimeZone21.nextTransition(547199998L);
        java.lang.String str36 = dateTimeZone21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 547199998L + "'", long35 == 547199998L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
    }

    @Test
    public void test17941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17941");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long3 = dateTimeZone0.previousTransition((long) 115200000);
        boolean boolean4 = dateTimeZone0.isFixed();
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 115200000L + "'", long3 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:10" + "'", str5, "+10:10");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:10");
    }

    @Test
    public void test17942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.lang.String str20 = dateTimeZone0.getNameKey(10L);
        long long24 = dateTimeZone0.convertLocalToUTC(111600000L, false, (long) '4');
        long long27 = dateTimeZone0.convertLocalToUTC(356460000L, true);
        long long31 = dateTimeZone0.convertLocalToUTC((-359999948L), true, (-475199910L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone32.equals((java.lang.Object) 100);
        int int36 = dateTimeZone32.getStandardOffset((long) ' ');
        java.lang.String str37 = dateTimeZone32.getID();
        java.lang.String str39 = dateTimeZone32.getShortName((long) '4');
        boolean boolean40 = dateTimeZone32.isFixed();
        long long42 = dateTimeZone32.convertUTCToLocal((-127920000L));
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone32.isLocalDateTimeGap(localDateTime43);
        java.util.TimeZone timeZone45 = dateTimeZone32.toTimeZone();
        long long48 = dateTimeZone32.adjustOffset((-12L), true);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone32.getShortName(75600000L, locale50);
        long long53 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, 6720110L);
        long long57 = dateTimeZone32.convertLocalToUTC(0L, true, (-709800003L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 111600000L + "'", long24 == 111600000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 356460000L + "'", long27 == 356460000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-359999948L) + "'", long31 == (-359999948L));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-127920000L) + "'", long42 == (-127920000L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-12L) + "'", long48 == (-12L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 6720110L + "'", long53 == 6720110L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test17943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17943");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        long long11 = dateTimeZone0.convertLocalToUTC((long) (short) 1, true, 1L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long23 = dateTimeZone21.previousTransition((long) 187200000);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone21.isLocalDateTimeGap(localDateTime24);
        int int27 = dateTimeZone21.getOffset((-952079900L));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        boolean boolean30 = dateTimeZone28.isFixed();
        long long34 = dateTimeZone28.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone28.getName((long) (byte) 100, locale36);
        long long40 = dateTimeZone28.convertLocalToUTC(0L, false);
        int int42 = dateTimeZone28.getOffsetFromLocal((long) (byte) -1);
        long long44 = dateTimeZone28.convertUTCToLocal(547199998L);
        long long46 = dateTimeZone28.previousTransition(32L);
        int int48 = dateTimeZone28.getOffsetFromLocal(127920010L);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone28.getName((-68399965L), locale50);
        long long53 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, 79199999L);
        java.lang.String str55 = dateTimeZone21.getName((-124800010L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 187200000L + "'", long23 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 547199998L + "'", long44 == 547199998L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 79199999L + "'", long53 == 79199999L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
    }

    @Test
    public void test17944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        java.lang.String str17 = dateTimeZone0.getShortName((-360000000L));
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(592380109L, locale19);
        long long24 = dateTimeZone0.convertLocalToUTC(75600001L, true, (-719999900L));
        java.lang.String str26 = dateTimeZone0.getName(471060000L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone0.getName(147479990L, locale28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 75600001L + "'", long24 == 75600001L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test17945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17945");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long26 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        long long30 = dateTimeZone8.convertLocalToUTC(360000097L, true);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone8.getName(0L, locale32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 360000097L + "'", long30 == 360000097L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
    }

    @Test
    public void test17946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17946");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long11 = dateTimeZone8.convertLocalToUTC(1L, true);
        boolean boolean13 = dateTimeZone8.isStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str17 = dateTimeZone15.getShortName((long) 'a');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getShortName((long) (short) -1, locale19);
        int int22 = dateTimeZone15.getOffset((long) 115200000);
        int int24 = dateTimeZone15.getStandardOffset((long) (short) 10);
        int int26 = dateTimeZone15.getStandardOffset((-1L));
        java.lang.String str28 = dateTimeZone15.getName((long) (byte) 10);
        java.lang.String str30 = dateTimeZone15.getShortName(0L);
        long long32 = dateTimeZone15.nextTransition(115200097L);
        boolean boolean33 = dateTimeZone8.equals((java.lang.Object) long32);
        long long36 = dateTimeZone8.adjustOffset((-115200001L), false);
        int int38 = dateTimeZone8.getStandardOffset(118800001L);
        java.util.TimeZone timeZone39 = dateTimeZone8.toTimeZone();
        java.lang.String str41 = dateTimeZone8.getShortName((long) (byte) 10);
        long long43 = dateTimeZone8.previousTransition((long) 126000000);
        java.util.TimeZone timeZone44 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+32:00" + "'", str17, "+32:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 115200000 + "'", int22 == 115200000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 115200000 + "'", int24 == 115200000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 115200000 + "'", int26 == 115200000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+32:00" + "'", str28, "+32:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+32:00" + "'", str30, "+32:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115200097L + "'", long32 == 115200097L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-115200001L) + "'", long36 == (-115200001L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 126000000L + "'", long43 == 126000000L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
    }

    @Test
    public void test17947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17947");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str7 = dateTimeZone0.getName((long) 0);
        int int9 = dateTimeZone0.getOffset((long) 100);
        int int11 = dateTimeZone0.getStandardOffset((long) 1);
        long long13 = dateTimeZone0.previousTransition((long) 0);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) (byte) 10);
        java.lang.String str18 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test17948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17948");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        long long11 = dateTimeZone6.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        long long14 = dateTimeZone6.convertUTCToLocal(359999999L);
        long long18 = dateTimeZone6.convertLocalToUTC((long) 'a', true, (-115200000L));
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) (byte) -1);
        long long24 = dateTimeZone6.convertLocalToUTC(10L, false, 34080032L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone31 = dateTimeZone25.toTimeZone();
        int int33 = dateTimeZone25.getOffset(115199991L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long39 = dateTimeZone25.getMillisKeepLocal(dateTimeZone37, (long) 1);
        java.lang.String str41 = dateTimeZone25.getShortName((-511199990L));
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone25.getShortName(187260000L, locale43);
        long long46 = dateTimeZone6.getMillisKeepLocal(dateTimeZone25, (-355799803L));
        long long49 = dateTimeZone6.convertLocalToUTC(590399997L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 359999999L + "'", long14 == 359999999L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-355799803L) + "'", long46 == (-355799803L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 590399997L + "'", long49 == 590399997L);
    }

    @Test
    public void test17949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone21.getName((long) (-1), locale29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone32, (-11L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.lang.String str36 = dateTimeZone32.getID();
        java.lang.String str38 = dateTimeZone32.getName((-11L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-12L) + "'", long34 == (-12L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.001" + "'", str36, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.001" + "'", str38, "+00:00:00.001");
    }

    @Test
    public void test17950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17950");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(115200000, (-3660000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -3660000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17951");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.lang.String str17 = dateTimeZone0.getNameKey(118800001L);
        java.lang.String str19 = dateTimeZone0.getName((long) 97);
        java.lang.String str20 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.nextTransition(162000032L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        java.lang.String str28 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        java.lang.String str34 = dateTimeZone29.getShortName((long) (short) 10);
        int int36 = dateTimeZone29.getOffset((long) (short) 1);
        int int38 = dateTimeZone29.getStandardOffset((long) 100);
        long long40 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, (long) 97);
        long long43 = dateTimeZone23.convertLocalToUTC(475199996L, true);
        boolean boolean45 = dateTimeZone23.isStandardOffset((-10800000L));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) '4');
        java.lang.String str50 = dateTimeZone48.getName(115200000L);
        java.lang.String str52 = dateTimeZone48.getName((-232500001L));
        long long54 = dateTimeZone48.nextTransition((-430919900L));
        boolean boolean55 = dateTimeZone48.isFixed();
        java.lang.String str56 = dateTimeZone48.toString();
        long long58 = dateTimeZone23.getMillisKeepLocal(dateTimeZone48, (-131520000L));
        boolean boolean59 = dateTimeZone0.equals((java.lang.Object) (-131520000L));
        int int61 = dateTimeZone0.getOffset((-347700001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 162000032L + "'", long22 == 162000032L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 97L + "'", long40 == 97L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 475199996L + "'", long43 == 475199996L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:52" + "'", str50, "-01:52");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-01:52" + "'", str52, "-01:52");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-430919900L) + "'", long54 == (-430919900L));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-01:52" + "'", str56, "-01:52");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-124800000L) + "'", long58 == (-124800000L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test17952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17952");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        java.lang.String str11 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        long long17 = dateTimeZone13.adjustOffset(0L, true);
        boolean boolean18 = dateTimeZone13.isFixed();
        int int20 = dateTimeZone13.getStandardOffset((-232079900L));
        long long22 = dateTimeZone13.convertUTCToLocal(707580000L);
        long long25 = dateTimeZone13.convertLocalToUTC(234000010L, false);
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long30 = dateTimeZone28.previousTransition((long) (byte) -1);
        long long33 = dateTimeZone28.convertLocalToUTC(52L, false);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone28.getShortName((-115200000L), locale35);
        java.lang.String str38 = dateTimeZone28.getShortName((-187859900L));
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, 109920000L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone44 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        boolean boolean47 = dateTimeZone46.isFixed();
        long long49 = dateTimeZone46.previousTransition(0L);
        long long52 = dateTimeZone46.adjustOffset(356460000L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone55.getShortName((long) 'a', locale57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone55.getName((long) (short) 0, locale60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone63.isLocalDateTimeGap(localDateTime64);
        long long67 = dateTimeZone63.nextTransition(151200000L);
        long long70 = dateTimeZone63.convertLocalToUTC(187200001L, true);
        long long72 = dateTimeZone55.getMillisKeepLocal(dateTimeZone63, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.lang.String str75 = dateTimeZone63.getShortName((long) (byte) 100);
        java.lang.String str76 = dateTimeZone63.getID();
        long long78 = dateTimeZone46.getMillisKeepLocal(dateTimeZone63, 230400097L);
        long long80 = dateTimeZone0.getMillisKeepLocal(dateTimeZone63, 118799999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 707580010L + "'", long22 == 707580010L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 234000000L + "'", long25 == 234000000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 109920000L + "'", long40 == 109920000L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 356460000L + "'", long52 == 356460000L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:00" + "'", str58, "+100:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+100:00" + "'", str61, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 151200000L + "'", long67 == 151200000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 187199991L + "'", long70 == 187199991L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 359999991L + "'", long72 == 359999991L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 230400087L + "'", long78 == 230400087L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 118799989L + "'", long80 == 118799989L);
    }

    @Test
    public void test17953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17953");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long11 = dateTimeZone8.convertLocalToUTC(1L, true);
        boolean boolean13 = dateTimeZone8.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone8.getName((-318480000L), locale15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone8.isLocalDateTimeGap(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17954");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) 'a', true, (long) (byte) -1);
        boolean boolean18 = dateTimeZone0.equals((java.lang.Object) (-3599990L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone19.getShortName(0L, locale24);
        java.lang.String str26 = dateTimeZone19.getID();
        java.lang.String str28 = dateTimeZone19.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str32 = dateTimeZone30.getShortName((long) 'a');
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone30.getShortName((long) (short) -1, locale34);
        int int37 = dateTimeZone30.getOffset((long) 115200000);
        int int39 = dateTimeZone30.getStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone30.getID();
        long long42 = dateTimeZone19.getMillisKeepLocal(dateTimeZone30, (long) 0);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 115199999L);
        java.util.TimeZone timeZone45 = dateTimeZone0.toTimeZone();
        long long47 = dateTimeZone0.nextTransition((-64L));
        long long49 = dateTimeZone0.convertUTCToLocal((-115199968L));
        java.util.TimeZone timeZone50 = dateTimeZone0.toTimeZone();
        long long52 = dateTimeZone0.nextTransition(35520000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+32:00" + "'", str32, "+32:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+32:00" + "'", str35, "+32:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 115200000 + "'", int37 == 115200000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 115200000 + "'", int39 == 115200000);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+32:00" + "'", str40, "+32:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-115200000L) + "'", long42 == (-115200000L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-64L) + "'", long47 == (-64L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-115199968L) + "'", long49 == (-115199968L));
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35520000L + "'", long52 == 35520000L);
    }

    @Test
    public void test17955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17955");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        boolean boolean23 = dateTimeZone4.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str26 = dateTimeZone4.getName(478800003L);
        long long30 = dateTimeZone4.convertLocalToUTC((-43199999L), true, (-104880001L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) '#');
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone33.getName(0L, locale35);
        long long38 = dateTimeZone4.getMillisKeepLocal(dateTimeZone33, 41760000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-43199999L) + "'", long30 == (-43199999L));
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+01:35" + "'", str36, "+01:35");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 36060000L + "'", long38 == 36060000L);
    }

    @Test
    public void test17956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17956");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (short) 10);
        java.lang.String str14 = dateTimeZone10.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        java.lang.String str23 = dateTimeZone15.getShortName(1L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) (-1));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone10.getName(0L, locale27);
        long long30 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, 1L);
        boolean boolean32 = dateTimeZone5.isStandardOffset(244800001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test17957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17957");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        boolean boolean27 = dateTimeZone0.isStandardOffset((long) 349200000);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName(547199998L, locale29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone0.getOffset(readableInstant31);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone0.getShortName((-115199965L), locale34);
        boolean boolean36 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone37 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        boolean boolean40 = dateTimeZone38.isStandardOffset((-428399965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test17958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17958");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long9 = dateTimeZone1.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.lang.String str15 = dateTimeZone10.getShortName((long) (byte) 100);
        java.lang.String str17 = dateTimeZone10.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone10.getOffset(readableInstant18);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int25 = dateTimeZone10.getOffset(115199999L);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 10L);
        long long29 = dateTimeZone10.previousTransition((long) 97);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone10.getOffset(readableInstant30);
        long long33 = dateTimeZone10.nextTransition(0L);
        java.lang.String str35 = dateTimeZone10.getNameKey((-109500000L));
        java.lang.Object obj36 = null;
        boolean boolean37 = dateTimeZone10.equals(obj36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 152L + "'", long9 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 110L + "'", long27 == 110L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17959");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:35");
        long long4 = dateTimeZone1.convertLocalToUTC(10L, false);
        long long6 = dateTimeZone1.previousTransition(205260010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-5699990L) + "'", long4 == (-5699990L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 205260010L + "'", long6 == 205260010L);
    }

    @Test
    public void test17960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17960");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.lang.String str17 = dateTimeZone0.getShortName((long) (-1));
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(707580000L, locale19);
        boolean boolean22 = dateTimeZone0.isStandardOffset((long) 115200000);
        java.lang.String str24 = dateTimeZone0.getNameKey(471060000L);
        int int26 = dateTimeZone0.getOffset((-242939903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test17961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17961");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        int int7 = dateTimeZone0.getOffsetFromLocal((long) 10);
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        java.lang.String str9 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test17962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17962");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        int int4 = dateTimeZone0.getOffset((long) (-1));
        java.lang.String str5 = dateTimeZone0.getID();
        long long7 = dateTimeZone0.previousTransition(475260000L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str11 = dateTimeZone9.getName(10L);
        java.lang.String str12 = dateTimeZone9.toString();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getName((long) '4', locale14);
        boolean boolean17 = dateTimeZone9.isStandardOffset(0L);
        java.lang.String str18 = dateTimeZone9.getID();
        int int20 = dateTimeZone9.getStandardOffset((long) 187200000);
        java.util.TimeZone timeZone21 = dateTimeZone9.toTimeZone();
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone9);
        int int24 = dateTimeZone9.getOffsetFromLocal(151800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 475260000L + "'", long7 == 475260000L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
    }

    @Test
    public void test17963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17963");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        long long8 = dateTimeZone0.convertLocalToUTC(1L, false);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 115200000, locale11);
        boolean boolean13 = dateTimeZone9.isFixed();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone9.getName(52L, locale15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getName((long) (byte) -1, locale18);
        int int21 = dateTimeZone9.getOffset((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone9.isLocalDateTimeGap(localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone9.getOffset(readableInstant24);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (-115199990L));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        boolean boolean30 = dateTimeZone28.isFixed();
        int int32 = dateTimeZone28.getOffsetFromLocal((long) 1);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone28.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        boolean boolean36 = dateTimeZone35.isFixed();
        int int38 = dateTimeZone35.getStandardOffset(0L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone35.getShortName((-1L), locale40);
        int int43 = dateTimeZone35.getOffsetFromLocal(0L);
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) dateTimeZone35);
        long long47 = dateTimeZone35.adjustOffset((long) 127920000, true);
        long long49 = dateTimeZone35.previousTransition(118799999L);
        int int51 = dateTimeZone35.getStandardOffset(115200052L);
        java.lang.String str53 = dateTimeZone35.getName((-590399965L));
        long long55 = dateTimeZone9.getMillisKeepLocal(dateTimeZone35, 36600001L);
        long long57 = dateTimeZone35.convertUTCToLocal(283199991L);
        java.util.TimeZone timeZone58 = dateTimeZone35.toTimeZone();
        java.lang.String str60 = dateTimeZone35.getNameKey((-169200001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-115199990L) + "'", long27 == (-115199990L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 127920000L + "'", long47 == 127920000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 118799999L + "'", long49 == 118799999L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 36600001L + "'", long55 == 36600001L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 283199991L + "'", long57 == 283199991L);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
    }

    @Test
    public void test17964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17964");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str4 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider5);
        org.joda.time.DateTimeZone.setProvider(provider5);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) provider5);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        long long12 = dateTimeZone0.nextTransition((long) 97);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int16 = dateTimeZone14.getOffset(129660000L);
        int int18 = dateTimeZone14.getOffset((-1L));
        long long20 = dateTimeZone14.convertUTCToLocal(97L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone14.getShortName((-662399965L), locale22);
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, (-91920000L));
        long long28 = dateTimeZone14.convertLocalToUTC((-293280000L), true);
        java.lang.String str29 = dateTimeZone14.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 97L + "'", long12 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 115200000 + "'", int16 == 115200000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200097L + "'", long20 == 115200097L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+32:00" + "'", str23, "+32:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-207120000L) + "'", long25 == (-207120000L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-408480000L) + "'", long28 == (-408480000L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
    }

    @Test
    public void test17965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17965");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str7 = dateTimeZone0.toString();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        int int11 = dateTimeZone0.getOffsetFromLocal(547199998L);
        long long14 = dateTimeZone0.adjustOffset((-184199900L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-184199900L) + "'", long14 == (-184199900L));
    }

    @Test
    public void test17966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17966");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        int int5 = dateTimeZone0.getOffset(359999999L);
        int int7 = dateTimeZone0.getStandardOffset(363600000L);
        java.lang.String str9 = dateTimeZone0.getName((-10L));
        java.lang.String str11 = dateTimeZone0.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test17967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17967");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(97);
        boolean boolean3 = dateTimeZone1.isStandardOffset(36600000L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test17968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17968");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone0.nextTransition((long) 115200000);
        long long17 = dateTimeZone0.previousTransition(475200097L);
        boolean boolean18 = dateTimeZone0.isFixed();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone0.getName((long) 126060000, locale20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        int int25 = dateTimeZone0.getOffset((-120719948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 475200097L + "'", long17 == 475200097L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17969");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 1);
        int int4 = dateTimeZone2.getStandardOffset(172799991L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 360060000 + "'", int4 == 360060000);
    }

    @Test
    public void test17970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17970");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        boolean boolean3 = dateTimeZone2.isFixed();
        java.lang.String str5 = dateTimeZone2.getName(0L);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone2.isLocalDateTimeGap(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:01" + "'", str5, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test17971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17971");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getID();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getShortName((-709259990L), locale18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone0.getOffset(readableInstant20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17972");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffsetFromLocal(115200000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int5 = dateTimeZone0.getOffset(108480000L);
        long long7 = dateTimeZone0.previousTransition((-3659965L));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getShortName((-202079965L), locale9);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3659965L) + "'", long7 == (-3659965L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17973");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        int int5 = dateTimeZone0.getOffset(359999999L);
        int int7 = dateTimeZone0.getStandardOffset(363600000L);
        java.lang.String str9 = dateTimeZone0.getName((-10L));
        long long11 = dateTimeZone0.convertUTCToLocal((-955679900L));
        long long13 = dateTimeZone0.nextTransition((-277199999L));
        long long15 = dateTimeZone0.previousTransition(268139990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-955679900L) + "'", long11 == (-955679900L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-277199999L) + "'", long13 == (-277199999L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 268139990L + "'", long15 == 268139990L);
    }

    @Test
    public void test17974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17974");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.convertLocalToUTC((-115199900L), true);
        int int14 = dateTimeZone0.getStandardOffset(36000000L);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone0.getOffset(readableInstant17);
        java.lang.String str20 = dateTimeZone0.getName((-34080000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-115199900L) + "'", long12 == (-115199900L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test17975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17975");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        java.lang.String str13 = dateTimeZone4.toString();
        int int15 = dateTimeZone4.getStandardOffset((-3600010L));
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone4.isLocalDateTimeGap(localDateTime16);
        long long19 = dateTimeZone4.nextTransition(176399990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 176399990L + "'", long19 == 176399990L);
    }

    @Test
    public void test17976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17976");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:52");
        int int3 = dateTimeZone1.getOffset(90L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone1.getOffset(readableInstant5);
        boolean boolean8 = dateTimeZone1.isStandardOffset(147479990L);
        long long12 = dateTimeZone1.convertLocalToUTC(0L, false, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-6720000) + "'", int3 == (-6720000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6720000) + "'", int6 == (-6720000));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6720000L + "'", long12 == 6720000L);
    }

    @Test
    public void test17977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17977");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        java.lang.String str3 = dateTimeZone2.getID();
        long long7 = dateTimeZone2.convertLocalToUTC((long) 1920000, true, 3599999L);
        java.lang.String str9 = dateTimeZone2.getNameKey(59099999L);
        long long12 = dateTimeZone2.convertLocalToUTC((-464399900L), false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-185280000L) + "'", long7 == (-185280000L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-651599900L) + "'", long12 == (-651599900L));
    }

    @Test
    public void test17978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        long long25 = dateTimeZone18.convertLocalToUTC((long) '4', false);
        long long28 = dateTimeZone18.adjustOffset(359999999L, true);
        long long32 = dateTimeZone18.convertLocalToUTC((-359999900L), true, (-111600001L));
        int int34 = dateTimeZone18.getStandardOffset(243120097L);
        int int36 = dateTimeZone18.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        int int42 = dateTimeZone39.getStandardOffset(0L);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone39.getShortName((-1L), locale44);
        int int47 = dateTimeZone39.getOffsetFromLocal(0L);
        int int49 = dateTimeZone39.getStandardOffset((long) (byte) 10);
        java.lang.String str51 = dateTimeZone39.getName((long) (byte) 10);
        long long53 = dateTimeZone39.previousTransition(52L);
        long long55 = dateTimeZone38.getMillisKeepLocal(dateTimeZone39, (long) 'a');
        long long58 = dateTimeZone39.adjustOffset((long) (byte) 0, false);
        long long60 = dateTimeZone18.getMillisKeepLocal(dateTimeZone39, (-73440000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 359999999L + "'", long28 == 359999999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-359999900L) + "'", long32 == (-359999900L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 360000097L + "'", long55 == 360000097L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-73440000L) + "'", long60 == (-73440000L));
    }

    @Test
    public void test17979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17979");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        long long9 = dateTimeZone0.previousTransition(3600032L);
        java.lang.String str10 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone11.getOffset(readableInstant12);
        int int15 = dateTimeZone11.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        int int24 = dateTimeZone16.getOffsetFromLocal(0L);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 115200000);
        boolean boolean28 = dateTimeZone11.isStandardOffset(115200000L);
        long long31 = dateTimeZone11.convertLocalToUTC((long) 10, true);
        java.lang.String str32 = dateTimeZone11.toString();
        int int34 = dateTimeZone11.getOffset(52L);
        java.lang.String str36 = dateTimeZone11.getNameKey(0L);
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-187799900L));
        int int40 = dateTimeZone0.getStandardOffset(187199999L);
        java.util.TimeZone timeZone41 = dateTimeZone0.toTimeZone();
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone0.getOffset(readableInstant42);
        long long47 = dateTimeZone0.convertLocalToUTC((long) 349800000, false, 291539996L);
        long long49 = dateTimeZone0.previousTransition(71999904L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600032L + "'", long9 == 3600032L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115200000L + "'", long26 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187799900L) + "'", long38 == (-187799900L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 349800000L + "'", long47 == 349800000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 71999904L + "'", long49 == 71999904L);
    }

    @Test
    public void test17980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17980");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone0.getName(0L, locale3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        int int8 = dateTimeZone0.getStandardOffset((-974579900L));
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        java.lang.String str11 = dateTimeZone0.getNameKey(355800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
    }

    @Test
    public void test17981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17981");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        boolean boolean5 = dateTimeZone1.isStandardOffset((long) '4');
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str8 = dateTimeZone1.getShortName(15899991L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+32:00" + "'", str8, "+32:00");
    }

    @Test
    public void test17982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17982");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        java.lang.String str9 = dateTimeZone0.toString();
        long long11 = dateTimeZone0.nextTransition(35L);
        java.lang.Class<?> wildcardClass12 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test17983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17983");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone23.getOffset(readableInstant31);
        long long36 = dateTimeZone23.convertLocalToUTC((long) 127920000, true, 72000001L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone23.getOffset(readableInstant37);
        java.lang.String str39 = dateTimeZone23.getID();
        boolean boolean40 = dateTimeZone23.isFixed();
        long long42 = dateTimeZone23.convertUTCToLocal((-118740097L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 127920000L + "'", long36 == 127920000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-118740097L) + "'", long42 == (-118740097L));
    }

    @Test
    public void test17984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17984");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((-3600001L));
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long9 = dateTimeZone7.convertUTCToLocal((-7260001L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        boolean boolean30 = dateTimeZone13.isStandardOffset(115200000L);
        int int32 = dateTimeZone13.getOffsetFromLocal((long) (short) 10);
        long long34 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, 1L);
        java.lang.String str35 = dateTimeZone10.toString();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone10.getOffset(readableInstant36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone10.getName((long) (short) 1, locale39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 0);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone43.getName(350879999L, locale45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        boolean boolean48 = dateTimeZone10.equals((java.lang.Object) dateTimeZone43);
        java.util.TimeZone timeZone49 = dateTimeZone10.toTimeZone();
        boolean boolean50 = dateTimeZone10.isFixed();
        int int52 = dateTimeZone10.getStandardOffset((-237000000L));
        long long54 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, 347520107L);
        long long56 = dateTimeZone7.nextTransition(516780097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600001L) + "'", long4 == (-3600001L));
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-10860001L) + "'", long9 == (-10860001L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+97:00" + "'", str46, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 343920107L + "'", long54 == 343920107L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 516780097L + "'", long56 == 516780097L);
    }

    @Test
    public void test17985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17985");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.nextTransition(151200000L);
        long long8 = dateTimeZone1.convertLocalToUTC(187200001L, true);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str13 = dateTimeZone1.getShortName(363660000L);
        java.lang.String str15 = dateTimeZone1.getShortName((-328199900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 151200000L + "'", long5 == 151200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 187199991L + "'", long8 == 187199991L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
    }

    @Test
    public void test17986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17986");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertUTCToLocal(464400001L);
        long long9 = dateTimeZone1.previousTransition(154320052L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        java.lang.String str12 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 464400001L + "'", long7 == 464400001L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 154320052L + "'", long9 == 154320052L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test17987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17987");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        boolean boolean16 = dateTimeZone0.isFixed();
        java.lang.String str17 = dateTimeZone0.getID();
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        boolean boolean19 = dateTimeZone0.isFixed();
        int int21 = dateTimeZone0.getOffsetFromLocal((-8760000L));
        boolean boolean23 = dateTimeZone0.isStandardOffset(244860010L);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17988");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long12 = dateTimeZone0.previousTransition(0L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 0, true, 0L);
        java.lang.String str17 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.getShortName((-115199965L));
        long long21 = dateTimeZone0.nextTransition(97L);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        int int25 = dateTimeZone0.getStandardOffset((-237600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        long long16 = dateTimeZone0.convertLocalToUTC(35520000L, false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35520000L + "'", long16 == 35520000L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test17990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        long long11 = dateTimeZone0.convertLocalToUTC((long) 126060000, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(345600000L, locale14);
        long long17 = dateTimeZone0.convertUTCToLocal(0L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((-124080000L), locale19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 126060000L + "'", long11 == 126060000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test17991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17991");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        java.lang.String str18 = dateTimeZone1.getNameKey(187200001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long22 = dateTimeZone1.adjustOffset(223380100L, false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone23.getShortName((long) 115200000, locale25);
        boolean boolean27 = dateTimeZone23.isFixed();
        int int29 = dateTimeZone23.getOffset((long) '#');
        java.util.TimeZone timeZone30 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone31.getName((-359999900L), locale33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone31.isLocalDateTimeGap(localDateTime35);
        long long39 = dateTimeZone31.adjustOffset((-3599848L), false);
        java.lang.String str41 = dateTimeZone31.getNameKey((-39600000L));
        java.util.TimeZone timeZone42 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) dateTimeZone43);
        boolean boolean45 = dateTimeZone43.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 223380100L + "'", long22 == 223380100L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599848L) + "'", long39 == (-3599848L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test17992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(111600000L, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 100);
        java.lang.String str28 = dateTimeZone21.getShortName((long) (short) 0);
        java.lang.String str30 = dateTimeZone21.getShortName(0L);
        boolean boolean32 = dateTimeZone21.equals((java.lang.Object) '4');
        long long34 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 127920000L);
        long long36 = dateTimeZone21.previousTransition(244199991L);
        boolean boolean37 = dateTimeZone21.isFixed();
        int int39 = dateTimeZone21.getOffsetFromLocal((-68400001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 127920000L + "'", long34 == 127920000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 244199991L + "'", long36 == 244199991L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test17993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17993");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        int int8 = dateTimeZone2.getOffsetFromLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getShortName((long) 'a', locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getName((long) (short) 0, locale15);
        long long18 = dateTimeZone10.convertUTCToLocal((-1L));
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone10.isLocalDateTimeGap(localDateTime19);
        long long22 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, 100L);
        int int24 = dateTimeZone10.getStandardOffset(391800032L);
        long long26 = dateTimeZone10.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 127920000 + "'", int8 == 127920000);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:00" + "'", str13, "+100:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:00" + "'", str16, "+100:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999999L + "'", long18 == 359999999L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-232079900L) + "'", long22 == (-232079900L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 360000000 + "'", int24 == 360000000);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000000L + "'", long26 == 360000000L);
    }

    @Test
    public void test17994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17994");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(349200000, 115800000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 115800000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        boolean boolean5 = dateTimeZone0.isFixed();
        long long8 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone9.convertUTCToLocal(0L);
        java.lang.String str15 = dateTimeZone9.toString();
        long long18 = dateTimeZone9.convertLocalToUTC(100L, true);
        int int20 = dateTimeZone9.getOffsetFromLocal(115199999L);
        boolean boolean21 = dateTimeZone9.isFixed();
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) boolean21);
        java.lang.String str24 = dateTimeZone0.getNameKey(234000000L);
        long long28 = dateTimeZone0.convertLocalToUTC(12720097L, false, 244199991L);
        java.lang.String str29 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115200000L + "'", long2 == 115200000L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 115200000 + "'", int4 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-115199990L) + "'", long8 == (-115199990L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-102479903L) + "'", long28 == (-102479903L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
    }

    @Test
    public void test17996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17996");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str7 = dateTimeZone6.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test17997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17997");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone9.nextTransition(151200000L);
        long long16 = dateTimeZone9.convertLocalToUTC(187200001L, true);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("UTC");
        int int23 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 0, locale25);
        long long28 = dateTimeZone21.nextTransition((long) (byte) -1);
        long long30 = dateTimeZone21.convertUTCToLocal((long) (byte) 10);
        int int32 = dateTimeZone21.getStandardOffset(0L);
        java.util.TimeZone timeZone33 = dateTimeZone21.toTimeZone();
        long long35 = dateTimeZone9.getMillisKeepLocal(dateTimeZone21, (-3599903L));
        long long39 = dateTimeZone9.convertLocalToUTC(363600000L, false, (long) 36600000);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone40.getOffset(readableInstant41);
        int int44 = dateTimeZone40.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone45.isFixed();
        int int48 = dateTimeZone45.getStandardOffset(0L);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone45.getShortName((-1L), locale50);
        int int53 = dateTimeZone45.getOffsetFromLocal(0L);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) 115200000);
        int int57 = dateTimeZone45.getOffset((long) '4');
        int int59 = dateTimeZone45.getOffsetFromLocal(100L);
        long long61 = dateTimeZone45.previousTransition(1L);
        java.lang.String str63 = dateTimeZone45.getShortName(0L);
        java.util.TimeZone timeZone64 = dateTimeZone45.toTimeZone();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone45.getShortName((long) 3600000, locale66);
        java.lang.String str69 = dateTimeZone45.getNameKey((-7200000L));
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone45.getShortName(349200010L, locale71);
        boolean boolean73 = dateTimeZone9.equals((java.lang.Object) str72);
        long long76 = dateTimeZone9.adjustOffset(121920041L, false);
        int int78 = dateTimeZone9.getOffset((-293280000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 151200000L + "'", long13 == 151200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187199991L + "'", long16 == 187199991L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999991L + "'", long18 == 359999991L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599893L) + "'", long35 == (-3599893L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 363599990L + "'", long39 == 363599990L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 115200000L + "'", long55 == 115200000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 121920041L + "'", long76 == 121920041L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test17998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17998");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str22 = dateTimeZone0.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone23.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone23.adjustOffset((long) (short) 10, false);
        boolean boolean30 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str32 = dateTimeZone0.getName((long) (-1));
        long long35 = dateTimeZone0.adjustOffset(35L, false);
        long long37 = dateTimeZone0.nextTransition((long) 360600000);
        long long41 = dateTimeZone0.convertLocalToUTC((long) 38100000, true, 592319997L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone0.getOffset(readableInstant42);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 360600000L + "'", long37 == 360600000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 38100000L + "'", long41 == 38100000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test17999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test17999");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int26 = dateTimeZone5.getOffset(460800000L);
        long long29 = dateTimeZone5.convertLocalToUTC((-299399900L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-299399900L) + "'", long29 == (-299399900L));
    }

    @Test
    public void test18000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest35.test18000");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        long long17 = dateTimeZone0.convertLocalToUTC((long) 10, false);
        long long21 = dateTimeZone0.convertLocalToUTC((long) (-1), true, 0L);
        java.lang.String str23 = dateTimeZone0.getNameKey(187200000L);
        long long26 = dateTimeZone0.convertLocalToUTC(234000010L, true);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.convertUTCToLocal((long) (byte) 0);
        java.lang.String str35 = dateTimeZone32.toString();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getName((-1L), locale37);
        long long41 = dateTimeZone32.adjustOffset((long) (byte) 10, false);
        long long43 = dateTimeZone28.getMillisKeepLocal(dateTimeZone32, 90L);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, 115200097L);
        int int47 = dateTimeZone28.getOffset((-36059948L));
        long long50 = dateTimeZone28.convertLocalToUTC((-417599899L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 234000010L + "'", long26 == 234000010L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 115200087L + "'", long45 == 115200087L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-417599909L) + "'", long50 == (-417599909L));
    }
}

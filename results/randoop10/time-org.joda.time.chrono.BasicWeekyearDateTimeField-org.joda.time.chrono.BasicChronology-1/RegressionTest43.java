import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest43 {

    public static boolean debug = false;

    @Test
    public void test21501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21501");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str15 = dateTimeZone0.getName(359999998L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.lang.String str21 = dateTimeZone16.getNameKey(1L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone16.getShortName((long) (short) -1, locale23);
        java.util.TimeZone timeZone25 = dateTimeZone16.toTimeZone();
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, 126060000L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.lang.String str33 = dateTimeZone28.getShortName((long) (byte) 100);
        java.lang.String str35 = dateTimeZone28.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone28.getOffset(readableInstant36);
        boolean boolean39 = dateTimeZone28.isStandardOffset((long) (short) 1);
        long long43 = dateTimeZone28.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int45 = dateTimeZone28.getOffsetFromLocal((long) (short) 0);
        java.lang.String str47 = dateTimeZone28.getNameKey((long) ' ');
        java.lang.String str49 = dateTimeZone28.getShortName((long) (short) 10);
        java.lang.String str50 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        boolean boolean53 = dateTimeZone51.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone54 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        long long60 = dateTimeZone56.nextTransition(115200000L);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone56.getName(0L, locale62);
        long long65 = dateTimeZone56.nextTransition(187199991L);
        org.joda.time.ReadableInstant readableInstant66 = null;
        int int67 = dateTimeZone56.getOffset(readableInstant66);
        boolean boolean68 = dateTimeZone28.equals((java.lang.Object) int67);
        int int70 = dateTimeZone28.getOffset((-3599903L));
        boolean boolean71 = dateTimeZone0.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone28.isLocalDateTimeGap(localDateTime72);
        java.lang.String str75 = dateTimeZone28.getNameKey((-82800000L));
        java.util.Locale locale77 = null;
        java.lang.String str78 = dateTimeZone28.getName(6719999L, locale77);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 126060000L + "'", long27 == 126060000L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 115200000L + "'", long43 == 115200000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 115200000L + "'", long60 == 115200000L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 187199991L + "'", long65 == 187199991L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
    }

    @Test
    public void test21502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21502");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        java.lang.String str20 = dateTimeZone2.getName((long) (short) 1);
        long long22 = dateTimeZone2.previousTransition(242699999L);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone2.isLocalDateTimeGap(localDateTime23);
        long long28 = dateTimeZone2.convertLocalToUTC(834600097L, false, 99L);
        java.lang.String str30 = dateTimeZone2.getNameKey((-43199999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 242699999L + "'", long22 == 242699999L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 834600097L + "'", long28 == 834600097L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
    }

    @Test
    public void test21503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21503");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone5.getName(0L, locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone25.convertUTCToLocal(0L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone25.getName(0L, locale29);
        long long32 = dateTimeZone5.getMillisKeepLocal(dateTimeZone25, (-359999900L));
        long long34 = dateTimeZone5.previousTransition((-187799900L));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        boolean boolean36 = dateTimeZone35.isFixed();
        int int38 = dateTimeZone35.getStandardOffset(0L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone35.getShortName((-1L), locale40);
        java.lang.String str42 = dateTimeZone35.getID();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone43.isFixed();
        int int46 = dateTimeZone43.getStandardOffset(0L);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone43.getShortName((-1L), locale48);
        int int51 = dateTimeZone43.getOffsetFromLocal(0L);
        java.lang.String str53 = dateTimeZone43.getShortName(0L);
        java.lang.String str55 = dateTimeZone43.getShortName(1L);
        long long57 = dateTimeZone35.getMillisKeepLocal(dateTimeZone43, (long) ' ');
        long long60 = dateTimeZone35.convertLocalToUTC(0L, true);
        long long62 = dateTimeZone35.nextTransition(1860000L);
        long long65 = dateTimeZone35.convertLocalToUTC((-243960000L), true);
        long long68 = dateTimeZone35.convertLocalToUTC(122400000L, true);
        long long70 = dateTimeZone5.getMillisKeepLocal(dateTimeZone35, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-359999900L) + "'", long32 == (-359999900L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-187799900L) + "'", long34 == (-187799900L));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1860000L + "'", long62 == 1860000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-243960000L) + "'", long65 == (-243960000L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 122400000L + "'", long68 == 122400000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test21504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21504");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:10");
        int int3 = dateTimeZone1.getStandardOffset(243120097L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone6.getShortName((-1L), locale11);
        int int14 = dateTimeZone6.getOffsetFromLocal(0L);
        int int16 = dateTimeZone6.getStandardOffset((long) (byte) 10);
        java.lang.String str18 = dateTimeZone6.getName((long) (byte) 10);
        long long20 = dateTimeZone6.previousTransition(52L);
        long long22 = dateTimeZone5.getMillisKeepLocal(dateTimeZone6, (long) 'a');
        long long25 = dateTimeZone6.adjustOffset((long) (byte) 0, false);
        long long28 = dateTimeZone6.adjustOffset(349200010L, false);
        long long30 = dateTimeZone6.nextTransition((-230399968L));
        long long32 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-467999903L));
        long long35 = dateTimeZone6.adjustOffset(115199935L, true);
        java.util.TimeZone timeZone36 = dateTimeZone6.toTimeZone();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone6.getShortName(838800052L, locale38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4200000 + "'", int3 == 4200000);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360000097L + "'", long22 == 360000097L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 349200010L + "'", long28 == 349200010L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-230399968L) + "'", long30 == (-230399968L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-463799903L) + "'", long32 == (-463799903L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 115199935L + "'", long35 == 115199935L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
    }

    @Test
    public void test21505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21505");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(37920000);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+10:32");
    }

    @Test
    public void test21506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21506");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getName((long) 10, locale13);
        java.lang.String str15 = dateTimeZone0.getID();
        long long18 = dateTimeZone0.convertLocalToUTC((long) (-3600000), false);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone0.getShortName((-475199965L), locale20);
        java.util.TimeZone timeZone22 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.lang.String str28 = dateTimeZone23.getShortName((long) (byte) 100);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone23.getName((long) 115200000, locale30);
        int int33 = dateTimeZone23.getStandardOffset((-118799913L));
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (-7199999L));
        java.lang.String str37 = dateTimeZone23.getNameKey(489600097L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-7199999L) + "'", long35 == (-7199999L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
    }

    @Test
    public void test21507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getNameKey(1L);
        int int19 = dateTimeZone12.getOffset((-1L));
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 110L);
        long long24 = dateTimeZone0.adjustOffset(10L, false);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone0.getShortName((-3600001L), locale26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getShortName(0L, locale29);
        long long33 = dateTimeZone0.convertLocalToUTC((-129599965L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 110L + "'", long21 == 110L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-129599965L) + "'", long33 == (-129599965L));
    }

    @Test
    public void test21508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21508");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName((-1L), locale5);
        int int8 = dateTimeZone0.getStandardOffset((-360000000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone0.getNameKey((-180479965L));
        long long17 = dateTimeZone0.convertLocalToUTC((long) 363120000, false, (-590399965L));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        boolean boolean23 = dateTimeZone18.isStandardOffset(100L);
        java.lang.String str24 = dateTimeZone18.getID();
        java.lang.String str26 = dateTimeZone18.getShortName(1L);
        java.lang.String str28 = dateTimeZone18.getNameKey((long) (short) 100);
        long long32 = dateTimeZone18.convertLocalToUTC(1L, true, (long) (short) 0);
        java.lang.String str34 = dateTimeZone18.getName((long) 360000000);
        long long38 = dateTimeZone18.convertLocalToUTC((-6720000L), true, 707580000L);
        java.lang.String str39 = dateTimeZone18.getID();
        java.lang.String str41 = dateTimeZone18.getNameKey((-115199999L));
        long long43 = dateTimeZone18.nextTransition(302400000L);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (-10799968L));
        java.lang.String str46 = dateTimeZone18.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 363120000L + "'", long17 == 363120000L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-6720000L) + "'", long38 == (-6720000L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 302400000L + "'", long43 == 302400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-10799968L) + "'", long45 == (-10799968L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
    }

    @Test
    public void test21509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21509");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        long long9 = dateTimeZone5.previousTransition((-32399999L));
        java.lang.String str10 = dateTimeZone5.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-32399999L) + "'", long9 == (-32399999L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test21510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21510");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        long long12 = dateTimeZone0.nextTransition((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        boolean boolean30 = dateTimeZone13.isStandardOffset(115200000L);
        long long33 = dateTimeZone13.convertLocalToUTC((long) 10, true);
        java.lang.String str34 = dateTimeZone13.toString();
        int int36 = dateTimeZone13.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone13.getOffset(readableInstant37);
        int int40 = dateTimeZone13.getStandardOffset(97L);
        java.lang.String str42 = dateTimeZone13.getName(100L);
        int int44 = dateTimeZone13.getOffset((long) 100);
        boolean boolean45 = dateTimeZone0.equals((java.lang.Object) int44);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone0.isLocalDateTimeGap(localDateTime46);
        boolean boolean48 = dateTimeZone0.isFixed();
        int int50 = dateTimeZone0.getStandardOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        boolean boolean52 = dateTimeZone51.isFixed();
        boolean boolean53 = dateTimeZone51.isFixed();
        long long57 = dateTimeZone51.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.TimeZone timeZone58 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        java.lang.String str62 = dateTimeZone60.getShortName(349200010L);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone60.isLocalDateTimeGap(localDateTime63);
        java.lang.String str65 = dateTimeZone60.getID();
        int int67 = dateTimeZone60.getOffsetFromLocal((long) (-1));
        long long69 = dateTimeZone60.previousTransition((long) 349200000);
        long long71 = dateTimeZone60.previousTransition(359999998L);
        long long73 = dateTimeZone0.getMillisKeepLocal(dateTimeZone60, (-111539990L));
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        boolean boolean75 = dateTimeZone74.isFixed();
        int int77 = dateTimeZone74.getStandardOffset(0L);
        java.lang.String str79 = dateTimeZone74.getNameKey(1L);
        java.util.TimeZone timeZone80 = dateTimeZone74.toTimeZone();
        int int82 = dateTimeZone74.getOffsetFromLocal(118799989L);
        boolean boolean83 = dateTimeZone60.equals((java.lang.Object) int82);
        long long85 = dateTimeZone60.convertUTCToLocal((-7199999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 349200000L + "'", long69 == 349200000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 359999998L + "'", long71 == 359999998L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-111539990L) + "'", long73 == (-111539990L));
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-7199999L) + "'", long85 == (-7199999L));
    }

    @Test
    public void test21511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21511");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.convertUTCToLocal(10L);
        boolean boolean13 = dateTimeZone0.isStandardOffset((long) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName((long) '#', locale15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(110L, locale18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        java.lang.String str26 = dateTimeZone0.getName((-10800000L));
        java.lang.Class<?> wildcardClass27 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test21512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21512");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long5 = dateTimeZone0.nextTransition((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getNameKey(1L);
        int int13 = dateTimeZone6.getOffset((-1L));
        java.lang.String str14 = dateTimeZone6.toString();
        int int16 = dateTimeZone6.getOffset(1L);
        long long18 = dateTimeZone6.convertUTCToLocal((long) (byte) 100);
        int int20 = dateTimeZone6.getOffsetFromLocal(360000097L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) (byte) -1);
        long long24 = dateTimeZone0.previousTransition(122460000L);
        boolean boolean25 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone0.getOffset(readableInstant26);
        java.lang.String str29 = dateTimeZone0.getShortName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 707580000L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone36 = dateTimeZone33.toTimeZone();
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName(0L, locale38);
        java.lang.String str40 = dateTimeZone33.getID();
        java.lang.String str42 = dateTimeZone33.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str46 = dateTimeZone44.getShortName((long) 'a');
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone44.getShortName((long) (short) -1, locale48);
        int int51 = dateTimeZone44.getOffset((long) 115200000);
        int int53 = dateTimeZone44.getStandardOffset((long) (short) 10);
        java.lang.String str54 = dateTimeZone44.getID();
        long long56 = dateTimeZone33.getMillisKeepLocal(dateTimeZone44, (long) 0);
        long long59 = dateTimeZone44.adjustOffset(349200010L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        long long62 = dateTimeZone0.getMillisKeepLocal(dateTimeZone44, 475199996L);
        java.util.TimeZone timeZone63 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.lang.Class<?> wildcardClass65 = dateTimeZone64.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 122460000L + "'", long24 == 122460000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 707580000L + "'", long32 == 707580000L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+32:00" + "'", str46, "+32:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+32:00" + "'", str49, "+32:00");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 115200000 + "'", int51 == 115200000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 115200000 + "'", int53 == 115200000);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+32:00" + "'", str54, "+32:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-115200000L) + "'", long56 == (-115200000L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 349200010L + "'", long59 == 349200010L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 359999996L + "'", long62 == 359999996L);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test21513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21513");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long25 = dateTimeZone0.convertLocalToUTC(0L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str28 = dateTimeZone0.getShortName((long) 187200000);
        java.lang.String str29 = dateTimeZone0.getID();
        long long32 = dateTimeZone0.convertLocalToUTC(36000000L, false);
        boolean boolean34 = dateTimeZone0.isStandardOffset((-3659903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 36000000L + "'", long32 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test21514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        long long3 = dateTimeZone1.nextTransition((long) (short) 100);
        int int5 = dateTimeZone1.getOffsetFromLocal((-118799903L));
        long long7 = dateTimeZone1.previousTransition(234000000L);
        long long9 = dateTimeZone1.previousTransition((long) 115200000);
        long long12 = dateTimeZone1.adjustOffset(244799991L, false);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone1.getName((-115200065L), locale14);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L + "'", long3 == 100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3600000 + "'", int5 == 3600000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 234000000L + "'", long7 == 234000000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115200000L + "'", long9 == 115200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 244799991L + "'", long12 == 244799991L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+01:00" + "'", str15, "+01:00");
    }

    @Test
    public void test21515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21515");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.convertUTCToLocal(10L);
        long long15 = dateTimeZone0.convertLocalToUTC(96L, true, 115199991L);
        long long17 = dateTimeZone0.convertUTCToLocal(464399991L);
        java.lang.String str19 = dateTimeZone0.getNameKey(367259998L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long25 = dateTimeZone21.convertLocalToUTC(0L, true, 100L);
        java.lang.String str27 = dateTimeZone21.getName(3600010L);
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName((-1L), locale34);
        int int37 = dateTimeZone29.getOffsetFromLocal(0L);
        int int39 = dateTimeZone29.getStandardOffset((long) (byte) 10);
        boolean boolean40 = dateTimeZone29.isFixed();
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone29.isLocalDateTimeGap(localDateTime41);
        long long44 = dateTimeZone29.nextTransition((long) 115200000);
        long long46 = dateTimeZone29.previousTransition(475200097L);
        java.lang.String str47 = dateTimeZone29.getID();
        java.lang.String str49 = dateTimeZone29.getName((-190800011L));
        boolean boolean50 = dateTimeZone21.equals((java.lang.Object) str49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 96L + "'", long15 == 96L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 464399991L + "'", long17 == 464399991L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3600000L + "'", long25 == 3600000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 115200000L + "'", long44 == 115200000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 475200097L + "'", long46 == 475200097L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test21516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21516");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str19 = dateTimeZone17.getNameKey(100L);
        java.lang.String str20 = dateTimeZone17.toString();
        long long23 = dateTimeZone17.adjustOffset((long) (-3600000), true);
        java.lang.Class<?> wildcardClass24 = dateTimeZone17.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3600000L) + "'", long23 == (-3600000L));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test21517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        boolean boolean18 = dateTimeZone0.isFixed();
        long long20 = dateTimeZone0.previousTransition((-115200000L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getShortName((-3599893L), locale22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-115200000L) + "'", long20 == (-115200000L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test21518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21518");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        long long12 = dateTimeZone1.nextTransition((long) 1);
        int int14 = dateTimeZone1.getOffsetFromLocal((long) '4');
        java.lang.String str15 = dateTimeZone1.getID();
        long long17 = dateTimeZone1.convertUTCToLocal((-111600000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int20 = dateTimeZone1.getStandardOffset((-178080000L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone1.getName((-395460000L), locale22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone1.getOffset(readableInstant24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-111600000L) + "'", long17 == (-111600000L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21519");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 10);
        int int29 = dateTimeZone0.getOffsetFromLocal((-115200000L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) (short) 0);
        boolean boolean33 = dateTimeZone0.equals((java.lang.Object) boolean32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone0.getName(244799991L, locale35);
        boolean boolean37 = dateTimeZone0.isFixed();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone0.getShortName((-406739900L), locale39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
    }

    @Test
    public void test21520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21520");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone6.isLocalDateTimeGap(localDateTime13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone6.getName(32L, locale16);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, 32L);
        java.lang.String str20 = dateTimeZone1.toString();
        long long22 = dateTimeZone1.previousTransition(464399979L);
        boolean boolean24 = dateTimeZone1.isStandardOffset(478320000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 464399979L + "'", long22 == 464399979L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test21521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21521");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long9 = dateTimeZone5.nextTransition(115200000L);
        long long11 = dateTimeZone5.convertUTCToLocal((long) 'a');
        boolean boolean13 = dateTimeZone5.isStandardOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        long long16 = dateTimeZone14.convertUTCToLocal((long) (byte) 0);
        java.lang.String str17 = dateTimeZone14.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str21 = dateTimeZone19.getShortName((long) 'a');
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone19.getShortName((long) (short) -1, locale23);
        int int26 = dateTimeZone19.getOffset((long) 115200000);
        long long28 = dateTimeZone14.getMillisKeepLocal(dateTimeZone19, (long) (short) 0);
        boolean boolean30 = dateTimeZone14.isStandardOffset(359999999L);
        long long33 = dateTimeZone14.adjustOffset((-359999990L), false);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 1);
        long long38 = dateTimeZone36.nextTransition((-232079900L));
        boolean boolean39 = dateTimeZone14.equals((java.lang.Object) dateTimeZone36);
        boolean boolean40 = dateTimeZone5.equals((java.lang.Object) boolean39);
        int int42 = dateTimeZone5.getOffsetFromLocal(360000097L);
        long long45 = dateTimeZone5.adjustOffset(124320010L, false);
        long long48 = dateTimeZone5.adjustOffset((-336900001L), true);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone5.isLocalDateTimeGap(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115200000L + "'", long9 == 115200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+32:00" + "'", str21, "+32:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 115200000 + "'", int26 == 115200000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-115200000L) + "'", long28 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-359999990L) + "'", long33 == (-359999990L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-232079900L) + "'", long38 == (-232079900L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 124320010L + "'", long45 == 124320010L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-336900001L) + "'", long48 == (-336900001L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test21522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21522");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone1.getOffset(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 10);
        long long17 = dateTimeZone15.nextTransition(0L);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, (-126000068L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-486600068L) + "'", long19 == (-486600068L));
    }

    @Test
    public void test21523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21523");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        int int14 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        long long21 = dateTimeZone15.convertLocalToUTC((long) 100, false);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) 360000000);
        boolean boolean25 = dateTimeZone15.isStandardOffset((-187859900L));
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone15.equals(obj26);
        long long30 = dateTimeZone15.convertLocalToUTC((-360000001L), false);
        long long32 = dateTimeZone15.previousTransition((-242519999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360000000L + "'", long23 == 360000000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360000001L) + "'", long30 == (-360000001L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-242519999L) + "'", long32 == (-242519999L));
    }

    @Test
    public void test21524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21524");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(129660000L, locale19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName((-115199965L), locale22);
        java.lang.String str25 = dateTimeZone0.getShortName(242699999L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getName(711300000L, locale27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        long long32 = dateTimeZone29.nextTransition((long) (byte) 0);
        long long36 = dateTimeZone29.convertLocalToUTC(242699999L, true, (-3599848L));
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 232079980L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 242699999L + "'", long36 == 242699999L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 232079980L + "'", long40 == 232079980L);
    }

    @Test
    public void test21525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21525");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        java.lang.String str8 = dateTimeZone1.getShortName(0L);
        int int10 = dateTimeZone1.getOffsetFromLocal((-233999913L));
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.lang.Class<?> wildcardClass12 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test21526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21526");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        long long7 = dateTimeZone0.adjustOffset((long) ' ', true);
        java.lang.String str8 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getID();
        long long11 = dateTimeZone0.nextTransition(35L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21527");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        boolean boolean18 = dateTimeZone1.isFixed();
        java.lang.String str20 = dateTimeZone1.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone1.getNameKey((-115199990L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int27 = dateTimeZone1.getOffset((-187199965L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test21528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21528");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long9 = dateTimeZone1.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.lang.String str15 = dateTimeZone10.getShortName((long) (byte) 100);
        java.lang.String str17 = dateTimeZone10.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone10.getOffset(readableInstant18);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int25 = dateTimeZone10.getOffset(115199999L);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 10L);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone10.isLocalDateTimeGap(localDateTime28);
        long long31 = dateTimeZone10.convertUTCToLocal(36000000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        java.lang.String str37 = dateTimeZone32.getShortName((long) (short) 10);
        int int39 = dateTimeZone32.getOffset((long) (short) 1);
        int int41 = dateTimeZone32.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone32.isLocalDateTimeGap(localDateTime42);
        int int45 = dateTimeZone32.getOffset((long) (-1));
        boolean boolean46 = dateTimeZone10.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone47.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone50 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = dateTimeZone52.getOffset(readableInstant53);
        int int56 = dateTimeZone52.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        boolean boolean58 = dateTimeZone57.isFixed();
        int int60 = dateTimeZone57.getStandardOffset(0L);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone57.getShortName((-1L), locale62);
        int int65 = dateTimeZone57.getOffsetFromLocal(0L);
        long long67 = dateTimeZone52.getMillisKeepLocal(dateTimeZone57, (long) 115200000);
        java.lang.String str69 = dateTimeZone52.getShortName((long) '4');
        boolean boolean70 = dateTimeZone51.equals((java.lang.Object) dateTimeZone52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        int int73 = dateTimeZone52.getOffset(460800000L);
        boolean boolean74 = dateTimeZone10.equals((java.lang.Object) dateTimeZone52);
        long long76 = dateTimeZone10.convertUTCToLocal(0L);
        java.lang.String str78 = dateTimeZone10.getName(347279999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 152L + "'", long9 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 110L + "'", long27 == 110L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000000L + "'", long31 == 36000000L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 115200000L + "'", long67 == 115200000L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
    }

    @Test
    public void test21529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21529");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        int int5 = dateTimeZone1.getOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone6.getShortName((-1L), locale11);
        java.lang.String str14 = dateTimeZone6.getName((-1L));
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) (-1L));
        long long19 = dateTimeZone1.convertLocalToUTC(349200010L, false, (long) (short) 10);
        int int21 = dateTimeZone1.getStandardOffset((-232500001L));
        long long23 = dateTimeZone1.previousTransition((-127920000L));
        java.lang.String str25 = dateTimeZone1.getShortName(349200110L);
        int int27 = dateTimeZone1.getOffset((-131520000L));
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone1.getShortName((-547799890L), locale29);
        long long32 = dateTimeZone1.previousTransition((-253919903L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 115200000 + "'", int5 == 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 234000010L + "'", long19 == 234000010L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 115200000 + "'", int21 == 115200000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-127920000L) + "'", long23 == (-127920000L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+32:00" + "'", str25, "+32:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 115200000 + "'", int27 == 115200000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+32:00" + "'", str30, "+32:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-253919903L) + "'", long32 == (-253919903L));
    }

    @Test
    public void test21530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21530");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        int int5 = dateTimeZone0.getStandardOffset(111600000L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone6.getOffset(readableInstant7);
        int int10 = dateTimeZone6.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getShortName((-1L), locale16);
        int int19 = dateTimeZone11.getOffsetFromLocal(0L);
        long long21 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (long) 115200000);
        boolean boolean23 = dateTimeZone6.isStandardOffset(115200000L);
        long long26 = dateTimeZone6.convertLocalToUTC((long) 10, true);
        java.lang.String str28 = dateTimeZone6.getNameKey((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone29.isLocalDateTimeGap(localDateTime31);
        long long35 = dateTimeZone29.adjustOffset((long) (short) 10, false);
        boolean boolean36 = dateTimeZone6.equals((java.lang.Object) dateTimeZone29);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) dateTimeZone29);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone0.getName(110L, locale39);
        java.lang.String str41 = dateTimeZone0.getID();
        boolean boolean43 = dateTimeZone0.isStandardOffset(97L);
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone0.isLocalDateTimeGap(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200000L + "'", long21 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test21531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21531");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean5 = dateTimeZone0.isStandardOffset(360000097L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        int int16 = dateTimeZone9.getOffset((-1L));
        java.lang.String str17 = dateTimeZone9.toString();
        java.lang.String str19 = dateTimeZone9.getName(32L);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone9);
        boolean boolean21 = dateTimeZone0.equals((java.lang.Object) dateTimeZone7);
        int int23 = dateTimeZone7.getOffset((-6720000L));
        java.lang.String str24 = dateTimeZone7.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test21532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21532");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long9 = dateTimeZone1.convertUTCToLocal(52L);
        java.lang.String str11 = dateTimeZone1.getNameKey((long) 36600000);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        long long15 = dateTimeZone1.adjustOffset(399720000L, true);
        java.lang.String str17 = dateTimeZone1.getName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 152L + "'", long9 == 152L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 399720000L + "'", long15 == 399720000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.100" + "'", str17, "+00:00:00.100");
    }

    @Test
    public void test21533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21533");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        int int6 = dateTimeZone1.getOffsetFromLocal((-3600001L));
        boolean boolean8 = dateTimeZone1.isStandardOffset((-113280000L));
        int int10 = dateTimeZone1.getOffsetFromLocal(10L);
        long long14 = dateTimeZone1.convertLocalToUTC(0L, true, 351120000L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str19 = dateTimeZone17.getShortName(100L);
        java.lang.String str21 = dateTimeZone17.getShortName((long) (byte) -1);
        int int23 = dateTimeZone17.getOffsetFromLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getShortName((long) 'a', locale27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone25.getName((long) (short) 0, locale30);
        long long33 = dateTimeZone25.convertUTCToLocal((-1L));
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone25.isLocalDateTimeGap(localDateTime34);
        long long37 = dateTimeZone17.getMillisKeepLocal(dateTimeZone25, 100L);
        java.util.TimeZone timeZone38 = dateTimeZone25.toTimeZone();
        java.util.TimeZone timeZone39 = dateTimeZone25.toTimeZone();
        java.lang.String str40 = dateTimeZone25.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) dateTimeZone25);
        long long45 = dateTimeZone25.convertLocalToUTC((-232560001L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 360000000 + "'", int6 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 360000000 + "'", int10 == 360000000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360000000L) + "'", long14 == (-360000000L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:32" + "'", str19, "+35:32");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+35:32" + "'", str21, "+35:32");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 127920000 + "'", int23 == 127920000);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:00" + "'", str28, "+100:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:00" + "'", str31, "+100:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 359999999L + "'", long33 == 359999999L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-232079900L) + "'", long37 == (-232079900L));
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:00" + "'", str40, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-592560001L) + "'", long45 == (-592560001L));
    }

    @Test
    public void test21534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21534");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.nextTransition((long) '4');
        int int15 = dateTimeZone0.getOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long18 = dateTimeZone0.previousTransition(10L);
        boolean boolean20 = dateTimeZone0.isStandardOffset((long) '4');
        long long23 = dateTimeZone0.adjustOffset((long) 3600000, true);
        java.lang.String str25 = dateTimeZone0.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone0.isLocalDateTimeGap(localDateTime26);
        java.lang.String str28 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3600000L + "'", long23 == 3600000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
    }

    @Test
    public void test21535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21535");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.adjustOffset((long) 10, false);
        int int25 = dateTimeZone0.getOffset((long) 600000);
        java.lang.String str27 = dateTimeZone0.getName(3600000L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName((-183599968L), locale29);
        int int32 = dateTimeZone0.getOffset(187200001L);
        java.lang.String str34 = dateTimeZone0.getNameKey(127920010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
    }

    @Test
    public void test21536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21536");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone1.getShortName(35L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.lang.Class<?> wildcardClass7 = timeZone6.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test21537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21537");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        long long12 = dateTimeZone0.convertLocalToUTC(35L, true);
        java.util.TimeZone timeZone13 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone15.getOffset(readableInstant23);
        long long27 = dateTimeZone15.adjustOffset((long) (byte) 1, false);
        int int29 = dateTimeZone15.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.lang.String str32 = dateTimeZone15.getShortName((-184199900L));
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone15.getOffset(readableInstant33);
        java.util.TimeZone timeZone35 = dateTimeZone15.toTimeZone();
        boolean boolean36 = dateTimeZone14.equals((java.lang.Object) dateTimeZone15);
        java.lang.String str37 = dateTimeZone14.toString();
        java.lang.String str39 = dateTimeZone14.getName((-592560001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
    }

    @Test
    public void test21538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21538");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName(360000097L, locale13);
        java.lang.String str16 = dateTimeZone0.getShortName((-7200000L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone0.getOffset(readableInstant17);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone0.getShortName((-7199910L), locale20);
        java.lang.String str23 = dateTimeZone0.getNameKey(20099990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test21539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21539");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 'a');
        long long11 = dateTimeZone1.previousTransition(707580000L);
        long long13 = dateTimeZone1.convertUTCToLocal(1860197L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.toString();
        java.lang.String str18 = dateTimeZone15.toString();
        long long20 = dateTimeZone15.nextTransition(356400100L);
        java.lang.String str21 = dateTimeZone15.getID();
        java.lang.String str22 = dateTimeZone15.getID();
        long long24 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, 349200010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 707580000L + "'", long11 == 707580000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1739803L) + "'", long13 == (-1739803L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+52:00" + "'", str17, "+52:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+52:00" + "'", str18, "+52:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 356400100L + "'", long20 == 356400100L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+52:00" + "'", str22, "+52:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 158400010L + "'", long24 == 158400010L);
    }

    @Test
    public void test21540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.lang.String str5 = dateTimeZone0.getName((long) 0);
        java.lang.String str7 = dateTimeZone0.getShortName(9L);
        long long11 = dateTimeZone0.convertLocalToUTC(356400000L, false, 129660000L);
        long long13 = dateTimeZone0.previousTransition((-183599968L));
        int int15 = dateTimeZone0.getOffsetFromLocal(115260000L);
        java.lang.String str16 = dateTimeZone0.toString();
        int int18 = dateTimeZone0.getOffset((-243120001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+52:00" + "'", str5, "+52:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 169200000L + "'", long11 == 169200000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-183599968L) + "'", long13 == (-183599968L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 187200000 + "'", int18 == 187200000);
    }

    @Test
    public void test21541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21541");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone20.convertUTCToLocal(0L);
        java.lang.String str26 = dateTimeZone20.toString();
        long long29 = dateTimeZone20.convertLocalToUTC(100L, true);
        java.lang.String str31 = dateTimeZone20.getName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean33 = dateTimeZone9.equals((java.lang.Object) dateTimeZone20);
        java.lang.String str34 = dateTimeZone20.getID();
        boolean boolean36 = dateTimeZone20.equals((java.lang.Object) (-91920000L));
        long long38 = dateTimeZone20.previousTransition((-324480001L));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        boolean boolean42 = dateTimeZone39.isStandardOffset((long) (-3600000));
        boolean boolean44 = dateTimeZone39.isStandardOffset(351120000L);
        boolean boolean45 = dateTimeZone20.equals((java.lang.Object) dateTimeZone39);
        long long48 = dateTimeZone39.adjustOffset(34080032L, false);
        java.lang.String str50 = dateTimeZone39.getNameKey((-464399999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-324480001L) + "'", long38 == (-324480001L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 34080032L + "'", long48 == 34080032L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
    }

    @Test
    public void test21542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21542");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.lang.String str26 = dateTimeZone5.getName(187200001L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone5.getOffset(readableInstant27);
        java.util.TimeZone timeZone29 = dateTimeZone5.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21543");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str7 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        int int11 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        int int15 = dateTimeZone0.getStandardOffset((long) 351300000);
        boolean boolean16 = dateTimeZone0.isFixed();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName((-265500001L), locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test21544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21544");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        java.lang.String str5 = dateTimeZone1.getName((long) 115200000);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getNameKey((-590399968L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:00" + "'", str5, "+100:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21545");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.convertUTCToLocal(10L);
        long long15 = dateTimeZone0.convertLocalToUTC(96L, true, 115199991L);
        long long17 = dateTimeZone0.convertUTCToLocal(464399991L);
        long long19 = dateTimeZone0.previousTransition((-61199991L));
        int int21 = dateTimeZone0.getOffset(291539996L);
        long long25 = dateTimeZone0.convertLocalToUTC(8700152L, false, (-180479965L));
        long long28 = dateTimeZone0.adjustOffset(394140010L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 96L + "'", long15 == 96L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 464399991L + "'", long17 == 464399991L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61199991L) + "'", long19 == (-61199991L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 8700152L + "'", long25 == 8700152L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 394140010L + "'", long28 == 394140010L);
    }

    @Test
    public void test21546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21546");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long8 = dateTimeZone6.convertUTCToLocal(9L);
        boolean boolean9 = dateTimeZone6.isFixed();
        java.lang.String str11 = dateTimeZone6.getShortName((-68400001L));
        java.lang.String str13 = dateTimeZone6.getNameKey((-55L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 9L + "'", long8 == 9L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test21547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21547");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, 0);
        java.lang.Class<?> wildcardClass3 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test21548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21548");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long13 = dateTimeZone0.convertUTCToLocal((-115199990L));
        java.lang.String str15 = dateTimeZone0.getShortName((long) 349800000);
        long long17 = dateTimeZone0.nextTransition((-112079965L));
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone0.getOffset(readableInstant18);
        long long23 = dateTimeZone0.convertLocalToUTC((-3599967L), false, (-115199848L));
        long long27 = dateTimeZone0.convertLocalToUTC(349200010L, false, 122460000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115199990L) + "'", long13 == (-115199990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-112079965L) + "'", long17 == (-112079965L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599967L) + "'", long23 == (-3599967L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 349200010L + "'", long27 == 349200010L);
    }

    @Test
    public void test21549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21549");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3120000);
        java.lang.String str3 = dateTimeZone1.getNameKey(431999999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test21550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21550");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        long long5 = dateTimeZone0.convertUTCToLocal((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone0.isLocalDateTimeGap(localDateTime6);
        boolean boolean9 = dateTimeZone0.isStandardOffset((long) 351300000);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName((-184199900L), locale11);
        long long15 = dateTimeZone0.convertLocalToUTC((-356399900L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-356399900L) + "'", long15 == (-356399900L));
    }

    @Test
    public void test21551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21551");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone5.isLocalDateTimeGap(localDateTime6);
        int int9 = dateTimeZone5.getOffsetFromLocal(0L);
        long long11 = dateTimeZone5.previousTransition((-709259966L));
        int int13 = dateTimeZone5.getStandardOffset(263340000L);
        int int15 = dateTimeZone5.getStandardOffset((-7199910L));
        long long19 = dateTimeZone5.convertLocalToUTC((-237599999L), false, 35999899L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-709259966L) + "'", long11 == (-709259966L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-237599999L) + "'", long19 == (-237599999L));
    }

    @Test
    public void test21552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21552");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        int int20 = dateTimeZone0.getOffset((long) (-1));
        int int22 = dateTimeZone0.getOffset((long) '#');
        int int24 = dateTimeZone0.getStandardOffset(350879999L);
        boolean boolean25 = dateTimeZone0.isFixed();
        long long28 = dateTimeZone0.adjustOffset((-356400065L), false);
        java.lang.String str30 = dateTimeZone0.getNameKey(669599981L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-356400065L) + "'", long28 == (-356400065L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
    }

    @Test
    public void test21553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21553");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        int int14 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        long long21 = dateTimeZone15.convertLocalToUTC((long) 100, false);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) 360000000);
        boolean boolean25 = dateTimeZone15.isStandardOffset((-187859900L));
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone15.equals(obj26);
        long long30 = dateTimeZone15.convertLocalToUTC((-360000001L), false);
        java.lang.Object obj31 = null;
        boolean boolean32 = dateTimeZone15.equals(obj31);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone15.isLocalDateTimeGap(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360000000L + "'", long23 == 360000000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360000001L) + "'", long30 == (-360000001L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test21554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21554");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.lang.String str13 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getName(0L);
        long long20 = dateTimeZone0.convertLocalToUTC(243120097L, false, 313260010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 243120097L + "'", long20 == 243120097L);
    }

    @Test
    public void test21555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21555");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(97);
        int int3 = dateTimeZone1.getOffsetFromLocal(187200100L);
        long long5 = dateTimeZone1.previousTransition(239520110L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 97 + "'", int3 == 97);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 239520110L + "'", long5 == 239520110L);
    }

    @Test
    public void test21556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21556");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone0.getName(0L, locale3);
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition((long) (-3600000));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(834600097L, locale9);
        boolean boolean12 = dateTimeZone0.isStandardOffset(242699899L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3600000L) + "'", long7 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test21557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21557");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.previousTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        java.lang.String str13 = dateTimeZone0.getName((-127920000L));
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone0.isLocalDateTimeGap(localDateTime14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone0.getOffset(readableInstant16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test21558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21558");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long6 = dateTimeZone1.convertUTCToLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName((long) (byte) 1, locale10);
        boolean boolean12 = dateTimeZone1.isFixed();
        boolean boolean14 = dateTimeZone1.isStandardOffset((long) 127920000);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone1.getOffset(readableInstant15);
        java.lang.String str18 = dateTimeZone1.getNameKey((long) (byte) 10);
        java.lang.String str20 = dateTimeZone1.getShortName((long) 39120000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long23 = dateTimeZone1.nextTransition((-356400001L));
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone1.getShortName((-148200000L), locale25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 115200100L + "'", long6 == 115200100L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+32:00" + "'", str11, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 115200000 + "'", int16 == 115200000);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-356400001L) + "'", long23 == (-356400001L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+32:00" + "'", str26, "+32:00");
    }

    @Test
    public void test21559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21559");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) 100);
        long long12 = dateTimeZone0.previousTransition(129660000L);
        java.lang.String str13 = dateTimeZone0.getID();
        int int15 = dateTimeZone0.getOffset(187199999L);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str20 = dateTimeZone18.getShortName(182460100L);
        java.lang.String str22 = dateTimeZone18.getName((-349199900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 129660000L + "'", long12 == 129660000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
    }

    @Test
    public void test21560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21560");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        long long15 = dateTimeZone9.convertLocalToUTC(10L, false);
        long long19 = dateTimeZone9.convertLocalToUTC(244799991L, true, 243780000L);
        java.lang.Object obj20 = null;
        boolean boolean21 = dateTimeZone9.equals(obj20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 244799991L + "'", long19 == 244799991L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21561");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str21 = dateTimeZone19.getName(10L);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        boolean boolean23 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime24);
        java.lang.String str27 = dateTimeZone19.getShortName(3599999L);
        java.util.TimeZone timeZone28 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test21562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21562");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName(359999998L, locale17);
        java.lang.String str19 = dateTimeZone0.getID();
        long long22 = dateTimeZone0.convertLocalToUTC(360000032L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360000032L + "'", long22 == 360000032L);
    }

    @Test
    public void test21563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21563");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        int int15 = dateTimeZone0.getOffsetFromLocal((long) (byte) 100);
        java.lang.String str16 = dateTimeZone0.toString();
        int int18 = dateTimeZone0.getOffset(118800001L);
        long long21 = dateTimeZone0.adjustOffset(126060000L, false);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone22.convertUTCToLocal((long) (byte) 0);
        java.lang.String str25 = dateTimeZone22.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str29 = dateTimeZone27.getShortName((long) 'a');
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone27.getShortName((long) (short) -1, locale31);
        int int34 = dateTimeZone27.getOffset((long) 115200000);
        long long36 = dateTimeZone22.getMillisKeepLocal(dateTimeZone27, (long) (short) 0);
        boolean boolean37 = dateTimeZone22.isFixed();
        boolean boolean38 = dateTimeZone22.isFixed();
        long long40 = dateTimeZone22.convertUTCToLocal(0L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone22.getOffset(readableInstant41);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (long) 126000000);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone0.isLocalDateTimeGap(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 126060000L + "'", long21 == 126060000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+32:00" + "'", str32, "+32:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 115200000 + "'", int34 == 115200000);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-115200000L) + "'", long36 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 126000000L + "'", long44 == 126000000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test21564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21564");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean9 = dateTimeZone7.isStandardOffset(115199999L);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.isStandardOffset(3600000L);
        java.lang.String str15 = dateTimeZone11.getShortName((long) 600000);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone11.getOffset(readableInstant17);
        long long20 = dateTimeZone2.getMillisKeepLocal(dateTimeZone11, 952319997L);
        java.util.TimeZone timeZone21 = dateTimeZone11.toTimeZone();
        long long24 = dateTimeZone11.adjustOffset(111600000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:00" + "'", str4, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1139519997L + "'", long20 == 1139519997L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 111600000L + "'", long24 == 111600000L);
    }

    @Test
    public void test21565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21565");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        long long16 = dateTimeZone0.convertLocalToUTC(10L, true, (long) 10);
        boolean boolean17 = dateTimeZone0.isFixed();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName((long) '#', locale19);
        int int22 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean23 = dateTimeZone0.isFixed();
        int int25 = dateTimeZone0.getOffset(1078380000L);
        long long29 = dateTimeZone0.convertLocalToUTC((-463799903L), true, (-1680000L));
        long long33 = dateTimeZone0.convertLocalToUTC((-500400000L), true, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 359999999L + "'", long12 == 359999999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-463799903L) + "'", long29 == (-463799903L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-500400000L) + "'", long33 == (-500400000L));
    }

    @Test
    public void test21566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21566");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        java.lang.String str12 = dateTimeZone0.getID();
        long long14 = dateTimeZone0.nextTransition(115200052L);
        long long16 = dateTimeZone0.previousTransition(118799999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 115200052L + "'", long14 == 115200052L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 118799999L + "'", long16 == 118799999L);
    }

    @Test
    public void test21567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getName((long) 10, locale13);
        long long17 = dateTimeZone11.convertLocalToUTC((long) (byte) 0, false);
        long long20 = dateTimeZone11.adjustOffset((-232500001L), false);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone21.getShortName((-1L), locale26);
        java.lang.String str29 = dateTimeZone21.getShortName(1L);
        long long31 = dateTimeZone21.nextTransition((long) 0);
        long long33 = dateTimeZone21.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean37 = dateTimeZone21.equals((java.lang.Object) '#');
        long long39 = dateTimeZone11.getMillisKeepLocal(dateTimeZone21, (-306000000L));
        long long43 = dateTimeZone21.convertLocalToUTC((long) 10, false, 464400001L);
        java.lang.String str45 = dateTimeZone21.getName(187200010L);
        java.lang.String str46 = dateTimeZone21.getID();
        long long50 = dateTimeZone21.convertLocalToUTC(115199999L, true, 350400000L);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 228480052L);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone0.getName(6720035L, locale54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+35:32" + "'", str14, "+35:32");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-127920000L) + "'", long17 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-232500001L) + "'", long20 == (-232500001L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-178080000L) + "'", long39 == (-178080000L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 115199999L + "'", long50 == 115199999L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 228480052L + "'", long52 == 228480052L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
    }

    @Test
    public void test21568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21568");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 10);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.lang.String str13 = dateTimeZone6.getShortName((long) (short) 0);
        java.lang.String str15 = dateTimeZone6.getShortName(0L);
        long long17 = dateTimeZone6.previousTransition(100L);
        java.lang.String str19 = dateTimeZone6.getShortName((long) (byte) 10);
        int int21 = dateTimeZone6.getOffset(10L);
        java.lang.String str23 = dateTimeZone6.getShortName((-360000000L));
        long long25 = dateTimeZone6.previousTransition(122460000L);
        boolean boolean26 = dateTimeZone2.equals((java.lang.Object) dateTimeZone6);
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        boolean boolean36 = dateTimeZone6.equals((java.lang.Object) nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider27);
        java.lang.Class<?> wildcardClass40 = nameProvider27.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 122460000L + "'", long25 == 122460000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test21569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21569");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.nextTransition((long) '4');
        int int15 = dateTimeZone0.getOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long18 = dateTimeZone0.previousTransition(10L);
        boolean boolean20 = dateTimeZone0.isStandardOffset((long) '4');
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName(119400000L, locale22);
        int int25 = dateTimeZone0.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21570");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long11 = dateTimeZone8.convertLocalToUTC(1L, true);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getName((-7260001L), locale13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone15.getOffset(readableInstant16);
        int int19 = dateTimeZone15.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone20.getShortName((-1L), locale25);
        int int28 = dateTimeZone20.getOffsetFromLocal(0L);
        long long30 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (long) 115200000);
        boolean boolean32 = dateTimeZone15.isStandardOffset(115200000L);
        long long35 = dateTimeZone15.convertLocalToUTC((long) 10, true);
        java.lang.String str36 = dateTimeZone15.toString();
        int int38 = dateTimeZone15.getOffset(52L);
        long long41 = dateTimeZone15.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str47 = dateTimeZone45.getNameKey(32L);
        boolean boolean48 = dateTimeZone15.equals((java.lang.Object) 32L);
        int int50 = dateTimeZone15.getOffset(152L);
        boolean boolean52 = dateTimeZone15.isStandardOffset((-11L));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        boolean boolean54 = dateTimeZone53.isFixed();
        boolean boolean55 = dateTimeZone53.isFixed();
        long long59 = dateTimeZone53.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone53.getName((long) (-1), locale61);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone53.isLocalDateTimeGap(localDateTime63);
        long long66 = dateTimeZone15.getMillisKeepLocal(dateTimeZone53, (-12L));
        boolean boolean67 = dateTimeZone8.equals((java.lang.Object) dateTimeZone53);
        boolean boolean68 = dateTimeZone53.isFixed();
        long long70 = dateTimeZone53.convertUTCToLocal(115199999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 115200000L + "'", long30 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-12L) + "'", long66 == (-12L));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 115199999L + "'", long70 == 115199999L);
    }

    @Test
    public void test21571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21571");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone4.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone4.getNameKey(152L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone4.getOffset(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (short) 10);
        java.lang.String str27 = dateTimeZone23.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        java.lang.String str36 = dateTimeZone28.getShortName(1L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getName(0L, locale40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone42.getOffset(readableInstant43);
        int int46 = dateTimeZone42.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean48 = dateTimeZone47.isFixed();
        int int50 = dateTimeZone47.getStandardOffset(0L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone47.getShortName((-1L), locale52);
        int int55 = dateTimeZone47.getOffsetFromLocal(0L);
        long long57 = dateTimeZone42.getMillisKeepLocal(dateTimeZone47, (long) 115200000);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone42.getShortName((long) (short) 0, locale59);
        long long62 = dateTimeZone23.getMillisKeepLocal(dateTimeZone42, (long) ' ');
        java.lang.String str64 = dateTimeZone23.getNameKey(3600001L);
        java.lang.String str65 = dateTimeZone23.toString();
        long long67 = dateTimeZone23.previousTransition(3600052L);
        long long69 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (-179999968L));
        java.lang.Object obj70 = null;
        boolean boolean71 = dateTimeZone4.equals(obj70);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 115200000L + "'", long57 == 115200000L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 3600052L + "'", long67 == 3600052L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-179999968L) + "'", long69 == (-179999968L));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test21572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21572");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        long long16 = dateTimeZone0.convertLocalToUTC(10L, true, (long) 10);
        boolean boolean17 = dateTimeZone0.isFixed();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName((long) '#', locale19);
        int int22 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean24 = dateTimeZone0.isStandardOffset((-306000000L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        int int29 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (long) 115200000);
        java.lang.String str42 = dateTimeZone30.getShortName((long) (short) 1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone30.getShortName((long) 10, locale44);
        long long47 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 100L);
        boolean boolean49 = dateTimeZone30.isStandardOffset((-111600000L));
        long long51 = dateTimeZone30.nextTransition(119400000L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = dateTimeZone30.getOffset(readableInstant52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = dateTimeZone30.getOffset(readableInstant54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 359999999L + "'", long12 == 359999999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 119400000L + "'", long51 == 119400000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test21573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21573");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str15 = dateTimeZone1.getNameKey(100L);
        java.util.TimeZone timeZone16 = dateTimeZone1.toTimeZone();
        boolean boolean17 = dateTimeZone1.isFixed();
        long long19 = dateTimeZone1.nextTransition((-486599900L));
        java.lang.String str21 = dateTimeZone1.getShortName((-7199999L));
        java.lang.String str23 = dateTimeZone1.getShortName(9L);
        java.util.TimeZone timeZone24 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone1.getShortName(387120110L, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-486599900L) + "'", long19 == (-486599900L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.010" + "'", str28, "+00:00:00.010");
    }

    @Test
    public void test21574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21574");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str21 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone0.getName(115200001L, locale25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone0.getShortName((-148199900L), locale28);
        long long31 = dateTimeZone0.previousTransition((-547799900L));
        java.lang.String str32 = dateTimeZone0.getID();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone0.getName((-198839900L), locale34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-547799900L) + "'", long31 == (-547799900L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test21575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21575");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        long long5 = dateTimeZone1.convertLocalToUTC(0L, false, 0L);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-36000000L) + "'", long5 == (-36000000L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test21576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21576");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean8 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 115200000, locale11);
        boolean boolean13 = dateTimeZone9.isFixed();
        long long15 = dateTimeZone9.previousTransition((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getShortName((long) 349200000);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) dateTimeZone9);
        long long21 = dateTimeZone0.previousTransition(32L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone22.getShortName((-1L), locale27);
        java.lang.String str29 = dateTimeZone22.getID();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        java.lang.String str40 = dateTimeZone30.getShortName(0L);
        java.lang.String str42 = dateTimeZone30.getShortName(1L);
        long long44 = dateTimeZone22.getMillisKeepLocal(dateTimeZone30, (long) ' ');
        java.lang.String str46 = dateTimeZone22.getNameKey((long) 126060000);
        java.lang.String str48 = dateTimeZone22.getShortName((-118800000L));
        int int50 = dateTimeZone22.getOffsetFromLocal(244860010L);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, 287999991L);
        boolean boolean54 = dateTimeZone0.isStandardOffset((-188880000L));
        boolean boolean55 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 287999991L + "'", long52 == 287999991L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test21577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21577");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getName((-1L));
        long long10 = dateTimeZone0.convertUTCToLocal((long) '4');
        boolean boolean11 = dateTimeZone0.isFixed();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName(115200000L, locale13);
        int int16 = dateTimeZone0.getOffset(187199999L);
        java.lang.String str17 = dateTimeZone0.toString();
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getStandardOffset(108000001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test21578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21578");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        long long10 = dateTimeZone0.convertLocalToUTC(100L, true);
        long long13 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(1L, locale15);
        long long19 = dateTimeZone0.convertLocalToUTC((-111600010L), false);
        long long22 = dateTimeZone0.adjustOffset(707520001L, false);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-111600010L) + "'", long19 == (-111600010L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 707520001L + "'", long22 == 707520001L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21579");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long9 = dateTimeZone1.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.lang.String str15 = dateTimeZone10.getShortName((long) (byte) 100);
        java.lang.String str17 = dateTimeZone10.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone10.getOffset(readableInstant18);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int25 = dateTimeZone10.getOffset(115199999L);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 10L);
        long long29 = dateTimeZone10.previousTransition((long) 97);
        long long32 = dateTimeZone10.convertLocalToUTC(3600032L, false);
        long long35 = dateTimeZone10.convertLocalToUTC((-7200000L), true);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone36.getName(0L, locale39);
        boolean boolean41 = dateTimeZone10.equals((java.lang.Object) locale39);
        java.lang.String str43 = dateTimeZone10.getName((long) (short) 0);
        int int45 = dateTimeZone10.getOffset(10199991L);
        long long48 = dateTimeZone10.adjustOffset((-113100032L), true);
        java.lang.Class<?> wildcardClass49 = dateTimeZone10.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 152L + "'", long9 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 110L + "'", long27 == 110L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600032L + "'", long32 == 3600032L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-7200000L) + "'", long35 == (-7200000L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-113100032L) + "'", long48 == (-113100032L));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test21580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21580");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(115200000L);
        boolean boolean8 = dateTimeZone1.isFixed();
        java.lang.String str9 = dateTimeZone1.toString();
        java.lang.String str11 = dateTimeZone1.getNameKey((-3599893L));
        int int13 = dateTimeZone1.getOffsetFromLocal(0L);
        java.lang.String str15 = dateTimeZone1.getName((-328199900L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int18 = dateTimeZone1.getOffsetFromLocal((-1126799997L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115200000L + "'", long7 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+32:00" + "'", str9, "+32:00");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 115200000 + "'", int13 == 115200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+32:00" + "'", str15, "+32:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
    }

    @Test
    public void test21581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone0.getNameKey(115199999L);
        java.util.TimeZone timeZone22 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.lang.String str24 = dateTimeZone23.getID();
        java.lang.String str25 = dateTimeZone23.getID();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone23.getName(45120000L, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test21582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21582");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        int int9 = dateTimeZone1.getStandardOffset((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str12 = dateTimeZone1.getName(68460000L);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21583");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 10);
        int int13 = dateTimeZone6.getOffset((long) (short) 1);
        int int15 = dateTimeZone6.getStandardOffset((long) 100);
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) 97);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.lang.String str23 = dateTimeZone18.getShortName((long) (byte) 100);
        java.lang.String str25 = dateTimeZone18.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone18.getOffset(readableInstant26);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) 97);
        boolean boolean31 = dateTimeZone0.isStandardOffset(35L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getName((long) (byte) 0, locale37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.lang.String str41 = dateTimeZone32.getShortName((-65L));
        int int43 = dateTimeZone32.getOffsetFromLocal(79199999L);
        long long46 = dateTimeZone32.convertLocalToUTC(32L, false);
        long long48 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, 234000010L);
        long long51 = dateTimeZone32.convertLocalToUTC((-2099904L), true);
        boolean boolean52 = dateTimeZone32.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.100" + "'", str38, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.100" + "'", str41, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-68L) + "'", long46 == (-68L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 233999910L + "'", long48 == 233999910L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-2100004L) + "'", long51 == (-2100004L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test21584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21584");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        java.lang.String str7 = dateTimeZone3.getName((long) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getShortName((long) (short) 1, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone3.isLocalDateTimeGap(localDateTime11);
        long long15 = dateTimeZone3.adjustOffset((long) (short) 1, false);
        long long18 = dateTimeZone3.convertLocalToUTC((-3599903L), true);
        java.lang.String str20 = dateTimeZone3.getShortName(703980010L);
        long long24 = dateTimeZone3.convertLocalToUTC(147660000L, false, (-142319903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599903L) + "'", long18 == (-3599903L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 147660000L + "'", long24 == 147660000L);
    }

    @Test
    public void test21585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21585");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        boolean boolean8 = dateTimeZone5.isFixed();
        java.lang.String str10 = dateTimeZone5.getShortName((-3599893L));
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        java.lang.String str12 = dateTimeZone5.toString();
        java.lang.String str13 = dateTimeZone5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test21586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21586");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        java.lang.String str24 = dateTimeZone0.getNameKey((long) 126060000);
        java.lang.String str26 = dateTimeZone0.getShortName((-118800000L));
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone0.getName(187200001L, locale28);
        java.lang.String str31 = dateTimeZone0.getNameKey((long) 361920000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
    }

    @Test
    public void test21587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21587");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long30 = dateTimeZone28.nextTransition((long) 10);
        long long32 = dateTimeZone4.getMillisKeepLocal(dateTimeZone28, (-351299848L));
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone4.getShortName(10320000L, locale34);
        boolean boolean37 = dateTimeZone4.isStandardOffset((-148079990L));
        java.util.TimeZone timeZone38 = dateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-351299848L) + "'", long32 == (-351299848L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21588");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        boolean boolean16 = dateTimeZone0.isStandardOffset(3600001L);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        long long20 = dateTimeZone0.convertLocalToUTC(387120000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 387120000L + "'", long20 == 387120000L);
    }

    @Test
    public void test21589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21589");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:10");
        int int3 = dateTimeZone1.getOffset(126060032L);
        int int5 = dateTimeZone1.getStandardOffset((-115200065L));
        long long7 = dateTimeZone1.nextTransition(148140051L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 600000 + "'", int3 == 600000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 600000 + "'", int5 == 600000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 148140051L + "'", long7 == 148140051L);
    }

    @Test
    public void test21590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21590");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) ' ', locale3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffset((long) 115200000);
        long long9 = dateTimeZone1.nextTransition((long) '#');
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName(350879999L, locale11);
        long long14 = dateTimeZone1.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (short) 10);
        int int22 = dateTimeZone15.getOffset((long) (short) 1);
        long long26 = dateTimeZone15.convertLocalToUTC((long) (short) 1, true, 1L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone15.isLocalDateTimeGap(localDateTime27);
        long long30 = dateTimeZone15.convertUTCToLocal(100L);
        java.util.TimeZone timeZone31 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long38 = dateTimeZone34.convertLocalToUTC(356399932L, false, 72000002L);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone34, (long) 5700000);
        long long43 = dateTimeZone34.convertLocalToUTC(0L, false);
        org.joda.time.ReadableInstant readableInstant44 = null;
        int int45 = dateTimeZone34.getOffset(readableInstant44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 356399932L + "'", long38 == 356399932L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2100000L + "'", long40 == 2100000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test21591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21591");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) 115200000);
        boolean boolean27 = dateTimeZone10.isStandardOffset(115200000L);
        int int29 = dateTimeZone10.getOffsetFromLocal((long) (short) 10);
        long long31 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, 1L);
        java.lang.String str32 = dateTimeZone7.toString();
        int int34 = dateTimeZone7.getStandardOffset((long) 1);
        long long36 = dateTimeZone7.convertUTCToLocal(1L);
        java.lang.String str38 = dateTimeZone7.getNameKey((long) (byte) 10);
        long long41 = dateTimeZone7.adjustOffset((-3600001L), true);
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) true);
        int int44 = dateTimeZone1.getOffset(0L);
        boolean boolean46 = dateTimeZone1.isStandardOffset((-352800000L));
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        long long49 = dateTimeZone47.convertUTCToLocal((long) (byte) 0);
        java.lang.String str50 = dateTimeZone47.toString();
        long long52 = dateTimeZone47.convertUTCToLocal(0L);
        int int54 = dateTimeZone47.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        boolean boolean56 = dateTimeZone55.isFixed();
        long long58 = dateTimeZone47.getMillisKeepLocal(dateTimeZone55, (long) 10);
        boolean boolean59 = dateTimeZone47.isFixed();
        boolean boolean60 = dateTimeZone1.equals((java.lang.Object) dateTimeZone47);
        java.util.TimeZone timeZone61 = dateTimeZone47.toTimeZone();
        int int63 = dateTimeZone47.getOffsetFromLocal((-101040010L));
        java.lang.String str64 = dateTimeZone47.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200000L + "'", long25 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3600001L) + "'", long41 == (-3600001L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-3600000L) + "'", long49 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-01:00" + "'", str50, "-01:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-3600000L) + "'", long52 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3600000) + "'", int54 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-3599990L) + "'", long58 == (-3599990L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3600000) + "'", int63 == (-3600000));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-01:00" + "'", str64, "-01:00");
    }

    @Test
    public void test21592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21592");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        java.lang.String str27 = dateTimeZone0.getName(100L);
        boolean boolean28 = dateTimeZone0.isFixed();
        long long32 = dateTimeZone0.convertLocalToUTC(118799999L, false, 35L);
        java.util.TimeZone timeZone33 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 118799999L + "'", long32 == 118799999L);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test21593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        java.lang.String str24 = dateTimeZone15.getShortName(0L);
        boolean boolean26 = dateTimeZone15.equals((java.lang.Object) '4');
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone15.getName(35L, locale28);
        long long31 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (-232079900L));
        java.util.TimeZone timeZone32 = dateTimeZone15.toTimeZone();
        boolean boolean33 = dateTimeZone15.isFixed();
        long long37 = dateTimeZone15.convertLocalToUTC(360000052L, false, (long) (short) 100);
        long long40 = dateTimeZone15.adjustOffset((-614519900L), false);
        long long42 = dateTimeZone15.convertUTCToLocal((-324600000L));
        boolean boolean43 = dateTimeZone15.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-232079900L) + "'", long31 == (-232079900L));
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 360000052L + "'", long37 == 360000052L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-614519900L) + "'", long40 == (-614519900L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-324600000L) + "'", long42 == (-324600000L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test21594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21594");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        java.lang.String str10 = dateTimeZone1.getNameKey((long) (short) 0);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getShortName((long) (short) -1, locale12);
        java.util.TimeZone timeZone14 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long18 = dateTimeZone16.convertUTCToLocal((-7200065L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-7200065L) + "'", long18 == (-7200065L));
    }

    @Test
    public void test21595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21595");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName(820799997L, locale8);
        java.lang.Class<?> wildcardClass10 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test21596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21596");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) '4');
        java.lang.String str4 = dateTimeZone2.getName(115200000L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (short) 1);
        long long10 = dateTimeZone2.convertLocalToUTC(110L, true, 115200010L);
        java.lang.String str11 = dateTimeZone2.toString();
        long long14 = dateTimeZone2.adjustOffset(68400001L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:52" + "'", str4, "-01:52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:52" + "'", str6, "-01:52");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6720110L + "'", long10 == 6720110L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:52" + "'", str11, "-01:52");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 68400001L + "'", long14 == 68400001L);
    }

    @Test
    public void test21597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21597");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        java.lang.String str24 = dateTimeZone0.getNameKey((long) 126060000);
        java.lang.String str26 = dateTimeZone0.getShortName((-118800000L));
        java.lang.String str27 = dateTimeZone0.getID();
        long long29 = dateTimeZone0.previousTransition((-709259990L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        boolean boolean35 = dateTimeZone30.isStandardOffset(100L);
        java.lang.String str36 = dateTimeZone30.toString();
        java.lang.String str37 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone30.isLocalDateTimeGap(localDateTime38);
        java.lang.String str41 = dateTimeZone30.getName(0L);
        long long44 = dateTimeZone30.adjustOffset(244800097L, false);
        long long46 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 7259988L);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone30.isLocalDateTimeGap(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-709259990L) + "'", long29 == (-709259990L));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 244800097L + "'", long44 == 244800097L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 7259988L + "'", long46 == 7259988L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21598");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        int int4 = dateTimeZone0.getOffsetFromLocal((long) 1);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) 126060000);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.convertUTCToLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        boolean boolean30 = dateTimeZone13.isStandardOffset(115200000L);
        int int32 = dateTimeZone13.getOffsetFromLocal((long) (short) 10);
        long long34 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone13.getShortName((long) (byte) 10, locale37);
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, (-127920000L));
        long long43 = dateTimeZone13.convertLocalToUTC((-3599990L), true);
        int int45 = dateTimeZone13.getOffsetFromLocal(359999989L);
        long long47 = dateTimeZone13.previousTransition(359999999L);
        java.lang.String str49 = dateTimeZone13.getShortName((long) (byte) -1);
        long long52 = dateTimeZone13.adjustOffset(0L, false);
        long long55 = dateTimeZone13.convertLocalToUTC(0L, true);
        long long58 = dateTimeZone13.convertLocalToUTC(468000110L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-127920000L) + "'", long40 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 359999999L + "'", long47 == 359999999L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 468000110L + "'", long58 == 468000110L);
    }

    @Test
    public void test21599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21599");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName((long) (short) 0, locale17);
        long long22 = dateTimeZone0.convertLocalToUTC((-124800000L), true, (-39600001L));
        java.lang.Class<?> wildcardClass23 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-124800000L) + "'", long22 == (-124800000L));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test21600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21600");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (short) 10);
        java.lang.String str19 = dateTimeZone15.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone20.getShortName((-1L), locale25);
        java.lang.String str28 = dateTimeZone20.getShortName(1L);
        long long30 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (long) (-1));
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone15.getName(0L, locale32);
        long long35 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, 1L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone15.getName((long) '4', locale37);
        boolean boolean39 = dateTimeZone15.isFixed();
        boolean boolean40 = dateTimeZone1.equals((java.lang.Object) boolean39);
        int int42 = dateTimeZone1.getOffset(359999998L);
        java.lang.String str44 = dateTimeZone1.getShortName(75600000L);
        long long46 = dateTimeZone1.nextTransition((long) (short) 0);
        long long49 = dateTimeZone1.adjustOffset(399600000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 399600000L + "'", long49 == 399600000L);
    }

    @Test
    public void test21601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, true);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone0.getStandardOffset(367200000L);
        java.lang.String str16 = dateTimeZone0.getShortName((-232079900L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName((long) (-6720000), locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test21602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getShortName(151200000L, locale26);
        java.lang.String str28 = dateTimeZone24.getID();
        java.lang.String str29 = dateTimeZone24.toString();
        java.lang.String str30 = dateTimeZone24.getID();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getShortName((-1L), locale36);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        java.lang.String str41 = dateTimeZone31.getShortName(0L);
        long long45 = dateTimeZone31.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long48 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone31.getName(0L, locale50);
        int int53 = dateTimeZone31.getStandardOffset((long) (byte) -1);
        long long55 = dateTimeZone31.previousTransition(360060000L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        boolean boolean57 = dateTimeZone56.isFixed();
        int int59 = dateTimeZone56.getStandardOffset(0L);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone56.getShortName((-1L), locale61);
        int int64 = dateTimeZone56.getOffsetFromLocal(0L);
        java.lang.String str66 = dateTimeZone56.getShortName(0L);
        long long70 = dateTimeZone56.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long73 = dateTimeZone56.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str74 = dateTimeZone56.getID();
        java.lang.String str75 = dateTimeZone56.toString();
        long long78 = dateTimeZone56.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone79 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        long long87 = dateTimeZone83.convertLocalToUTC((long) 1, false, (-359999900L));
        boolean boolean88 = dateTimeZone31.equals((java.lang.Object) dateTimeZone83);
        long long92 = dateTimeZone83.convertLocalToUTC((-1919948L), true, 75600000L);
        int int94 = dateTimeZone83.getStandardOffset(108000097L);
        long long96 = dateTimeZone24.getMillisKeepLocal(dateTimeZone83, (-417599900L));
        int int98 = dateTimeZone83.getStandardOffset(365700000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 360060000L + "'", long55 == 360060000L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1919948L) + "'", long92 == (-1919948L));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-417599900L) + "'", long96 == (-417599900L));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test21603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21603");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 10);
        int int4 = dateTimeZone2.getOffsetFromLocal(118800001L);
        java.lang.String str6 = dateTimeZone2.getShortName(360000097L);
        boolean boolean7 = dateTimeZone2.isFixed();
        int int9 = dateTimeZone2.getOffsetFromLocal((long) 600000);
        boolean boolean11 = dateTimeZone2.isStandardOffset(464399991L);
        long long13 = dateTimeZone2.nextTransition((-541079900L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 600000 + "'", int4 == 600000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:10" + "'", str6, "+00:10");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 600000 + "'", int9 == 600000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-541079900L) + "'", long13 == (-541079900L));
    }

    @Test
    public void test21604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21604");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        int int8 = dateTimeZone0.getOffset(115199991L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName((long) 'a', locale10);
        long long14 = dateTimeZone0.adjustOffset((-3600010L), false);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3600010L) + "'", long14 == (-3600010L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21605");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        int int4 = dateTimeZone0.getOffsetFromLocal((long) 1);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) 126060000);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.convertUTCToLocal((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset((-306000000L));
        boolean boolean15 = dateTimeZone12.isFixed();
        long long19 = dateTimeZone12.convertLocalToUTC(10L, false, 633600000L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone12.getOffset(readableInstant20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test21606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21606");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long6 = dateTimeZone1.convertUTCToLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone9.getOffset(readableInstant10);
        int int13 = dateTimeZone9.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        int int17 = dateTimeZone14.getStandardOffset(0L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone14.getShortName((-1L), locale19);
        int int22 = dateTimeZone14.getOffsetFromLocal(0L);
        long long24 = dateTimeZone9.getMillisKeepLocal(dateTimeZone14, (long) 115200000);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone14.getName(0L, locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long36 = dateTimeZone34.convertUTCToLocal(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone34.getName(0L, locale38);
        long long41 = dateTimeZone14.getMillisKeepLocal(dateTimeZone34, (-359999900L));
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) dateTimeZone14);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone14.getShortName(152L, locale44);
        int int47 = dateTimeZone14.getStandardOffset(349200010L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        int int49 = dateTimeZone14.getOffset(readableInstant48);
        int int51 = dateTimeZone14.getOffsetFromLocal((-3599848L));
        java.lang.String str52 = dateTimeZone14.getID();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        boolean boolean55 = dateTimeZone53.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone56 = dateTimeZone53.toTimeZone();
        boolean boolean58 = dateTimeZone53.isStandardOffset(100L);
        java.lang.String str59 = dateTimeZone53.getID();
        java.lang.String str61 = dateTimeZone53.getShortName(1L);
        long long63 = dateTimeZone53.previousTransition(115200000L);
        boolean boolean64 = dateTimeZone53.isFixed();
        java.lang.String str65 = dateTimeZone53.getID();
        long long69 = dateTimeZone53.convertLocalToUTC(75600000L, false, 187199991L);
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone53.getShortName((long) 1, locale71);
        boolean boolean73 = dateTimeZone53.isFixed();
        int int75 = dateTimeZone53.getStandardOffset((-181139900L));
        long long77 = dateTimeZone53.nextTransition((-3599893L));
        boolean boolean78 = dateTimeZone14.equals((java.lang.Object) long77);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 115200100L + "'", long6 == 115200100L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200000L + "'", long24 == 115200000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-359999900L) + "'", long41 == (-359999900L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 115200000L + "'", long63 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 75600000L + "'", long69 == 75600000L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-3599893L) + "'", long77 == (-3599893L));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test21607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21607");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        long long23 = dateTimeZone20.adjustOffset((-3600000L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        long long28 = dateTimeZone20.convertLocalToUTC(707580000L, true, 34080032L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone20.getName(12299990L, locale30);
        long long34 = dateTimeZone20.adjustOffset(0L, true);
        long long37 = dateTimeZone20.adjustOffset((-307740000L), false);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean39 = dateTimeZone38.isFixed();
        boolean boolean40 = dateTimeZone38.isFixed();
        int int42 = dateTimeZone38.getOffsetFromLocal((long) 1);
        java.lang.String str44 = dateTimeZone38.getNameKey((long) 126060000);
        boolean boolean45 = dateTimeZone38.isFixed();
        long long47 = dateTimeZone38.convertUTCToLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone48.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = dateTimeZone51.getOffset(readableInstant52);
        int int55 = dateTimeZone51.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        boolean boolean57 = dateTimeZone56.isFixed();
        int int59 = dateTimeZone56.getStandardOffset(0L);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone56.getShortName((-1L), locale61);
        int int64 = dateTimeZone56.getOffsetFromLocal(0L);
        long long66 = dateTimeZone51.getMillisKeepLocal(dateTimeZone56, (long) 115200000);
        boolean boolean68 = dateTimeZone51.isStandardOffset(115200000L);
        int int70 = dateTimeZone51.getOffsetFromLocal((long) (short) 10);
        long long72 = dateTimeZone48.getMillisKeepLocal(dateTimeZone51, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeZone51.getShortName((long) (byte) 10, locale75);
        long long78 = dateTimeZone38.getMillisKeepLocal(dateTimeZone51, (-127920000L));
        long long81 = dateTimeZone51.convertLocalToUTC((-3599990L), true);
        long long83 = dateTimeZone51.nextTransition(151200000L);
        java.util.Locale locale85 = null;
        java.lang.String str86 = dateTimeZone51.getShortName((-111600001L), locale85);
        boolean boolean88 = dateTimeZone51.isStandardOffset(187200001L);
        boolean boolean89 = dateTimeZone20.equals((java.lang.Object) dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3600000L) + "'", long23 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 707580000L + "'", long28 == 707580000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-307740000L) + "'", long37 == (-307740000L));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 115200000L + "'", long66 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-127920000L) + "'", long78 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-3599990L) + "'", long81 == (-3599990L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 151200000L + "'", long83 == 151200000L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test21608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (short) 10);
        java.lang.String str14 = dateTimeZone10.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        java.lang.String str23 = dateTimeZone15.getShortName(1L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) (-1));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone10.getName(0L, locale27);
        long long30 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, 1L);
        boolean boolean31 = dateTimeZone10.isFixed();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone10.getName(126060100L, locale33);
        java.util.TimeZone timeZone35 = dateTimeZone10.toTimeZone();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone10.getShortName(360000100L, locale37);
        java.util.TimeZone timeZone39 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test21609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21609");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        long long17 = dateTimeZone0.previousTransition((long) (byte) -1);
        int int19 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName((-356400000L), locale21);
        long long25 = dateTimeZone0.convertLocalToUTC((-3599848L), false);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone0.getOffset(readableInstant26);
        long long30 = dateTimeZone0.convertLocalToUTC(1860000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3599848L) + "'", long25 == (-3599848L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1860000L + "'", long30 == 1860000L);
    }

    @Test
    public void test21610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21610");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.nextTransition(151200000L);
        java.lang.String str7 = dateTimeZone1.getNameKey(115200097L);
        long long9 = dateTimeZone1.previousTransition(711300000L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName((-181680000L), locale11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 151200000L + "'", long5 == 151200000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 711300000L + "'", long9 == 711300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
    }

    @Test
    public void test21611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21611");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str21 = dateTimeZone19.getShortName((long) 'a');
        java.lang.String str23 = dateTimeZone19.getNameKey((long) 100);
        java.lang.String str24 = dateTimeZone19.toString();
        java.lang.String str26 = dateTimeZone19.getShortName(10L);
        java.lang.Class<?> wildcardClass27 = dateTimeZone19.getClass();
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) wildcardClass27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone0.getName(35L, locale30);
        java.lang.String str33 = dateTimeZone0.getNameKey((long) 600000);
        java.lang.String str34 = dateTimeZone0.toString();
        long long37 = dateTimeZone0.adjustOffset((-298800001L), false);
        long long39 = dateTimeZone0.convertUTCToLocal(226980100L);
        long long41 = dateTimeZone0.previousTransition(42720010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+32:00" + "'", str21, "+32:00");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+32:00" + "'", str26, "+32:00");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-298800001L) + "'", long37 == (-298800001L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 226980100L + "'", long39 == 226980100L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 42720010L + "'", long41 == 42720010L);
    }

    @Test
    public void test21612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21612");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 0);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.lang.String str9 = dateTimeZone4.getShortName((long) (byte) 100);
        java.lang.String str11 = dateTimeZone4.getShortName((long) (short) 0);
        java.lang.String str13 = dateTimeZone4.getShortName(0L);
        int int15 = dateTimeZone4.getStandardOffset(35L);
        boolean boolean16 = dateTimeZone4.isFixed();
        long long20 = dateTimeZone4.convertLocalToUTC((-190800010L), false, 244800000L);
        java.lang.String str22 = dateTimeZone4.getName((-59965L));
        boolean boolean23 = dateTimeZone2.equals((java.lang.Object) str22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long27 = dateTimeZone25.previousTransition((long) (byte) -1);
        long long30 = dateTimeZone25.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone31 = dateTimeZone25.toTimeZone();
        java.lang.String str33 = dateTimeZone25.getShortName(464399991L);
        long long36 = dateTimeZone25.convertLocalToUTC(599999L, true);
        long long38 = dateTimeZone2.getMillisKeepLocal(dateTimeZone25, (-460800053L));
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forID("UTC");
        int int42 = dateTimeZone40.getStandardOffset(0L);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone40.getShortName((long) (byte) 0, locale44);
        int int47 = dateTimeZone40.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone51.getName((long) ' ', locale53);
        boolean boolean55 = dateTimeZone49.equals((java.lang.Object) dateTimeZone51);
        boolean boolean56 = dateTimeZone40.equals((java.lang.Object) dateTimeZone51);
        boolean boolean57 = dateTimeZone40.isFixed();
        java.lang.String str59 = dateTimeZone40.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone40.isLocalDateTimeGap(localDateTime60);
        java.lang.String str63 = dateTimeZone40.getNameKey((-115199990L));
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone40.getName(3600010L, locale65);
        java.lang.String str67 = dateTimeZone40.toString();
        long long70 = dateTimeZone40.adjustOffset((-118799900L), false);
        boolean boolean71 = dateTimeZone2.equals((java.lang.Object) dateTimeZone40);
        long long74 = dateTimeZone40.convertLocalToUTC(248400052L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+97:00" + "'", str3, "+97:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-190800010L) + "'", long20 == (-190800010L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 599999L + "'", long36 == 599999L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-111600053L) + "'", long38 == (-111600053L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-118799900L) + "'", long70 == (-118799900L));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 248400052L + "'", long74 == 248400052L);
    }

    @Test
    public void test21613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21613");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset(0L);
        long long7 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true, (long) (-1));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(115199999L, locale9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str15 = dateTimeZone13.getShortName(100L);
        int int17 = dateTimeZone13.getOffsetFromLocal(349200010L);
        java.lang.String str19 = dateTimeZone13.getShortName((long) 115200000);
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (-115199999L));
        long long25 = dateTimeZone1.convertLocalToUTC((-470099904L), true, (-127919968L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int29 = dateTimeZone27.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone27.isLocalDateTimeGap(localDateTime30);
        long long33 = dateTimeZone27.previousTransition(115200000L);
        boolean boolean34 = dateTimeZone27.isFixed();
        int int36 = dateTimeZone27.getOffsetFromLocal(480780010L);
        long long38 = dateTimeZone27.previousTransition(187200010L);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone27, 345599999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+35:32" + "'", str15, "+35:32");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 127920000 + "'", int17 == 127920000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:32" + "'", str19, "+35:32");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-243119999L) + "'", long21 == (-243119999L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-470099904L) + "'", long25 == (-470099904L));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 115200000 + "'", int29 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 115200000 + "'", int36 == 115200000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 187200010L + "'", long38 == 187200010L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 230399999L + "'", long40 == 230399999L);
    }

    @Test
    public void test21614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21614");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        long long23 = dateTimeZone20.convertUTCToLocal((long) 0);
        boolean boolean24 = dateTimeZone20.isFixed();
        long long26 = dateTimeZone20.nextTransition((-115199848L));
        int int28 = dateTimeZone20.getOffsetFromLocal(242699998L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone29.getOffset(readableInstant30);
        int int33 = dateTimeZone29.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        int int37 = dateTimeZone34.getStandardOffset(0L);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone34.getShortName((-1L), locale39);
        int int42 = dateTimeZone34.getOffsetFromLocal(0L);
        long long44 = dateTimeZone29.getMillisKeepLocal(dateTimeZone34, (long) 115200000);
        int int46 = dateTimeZone34.getOffset((long) '4');
        int int48 = dateTimeZone34.getOffsetFromLocal(100L);
        long long51 = dateTimeZone34.convertLocalToUTC(32L, false);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        long long54 = dateTimeZone34.getMillisKeepLocal(dateTimeZone52, (-115199965L));
        java.lang.String str56 = dateTimeZone34.getNameKey(350700000L);
        int int58 = dateTimeZone34.getOffset((-302399999L));
        int int60 = dateTimeZone34.getOffset((-289499968L));
        boolean boolean61 = dateTimeZone20.equals((java.lang.Object) dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-115199848L) + "'", long26 == (-115199848L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 115200000L + "'", long44 == 115200000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-115199965L) + "'", long54 == (-115199965L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test21615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21615");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        int int7 = dateTimeZone0.getOffsetFromLocal((long) 10);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str10 = dateTimeZone0.getShortName((-3599990L));
        long long12 = dateTimeZone0.convertUTCToLocal((-183599968L));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone13.isLocalDateTimeGap(localDateTime15);
        java.lang.String str18 = dateTimeZone13.getShortName((long) (short) 10);
        int int20 = dateTimeZone13.getOffset((long) (short) 1);
        int int22 = dateTimeZone13.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone13.isLocalDateTimeGap(localDateTime23);
        long long26 = dateTimeZone13.convertUTCToLocal((-359999900L));
        long long28 = dateTimeZone13.convertUTCToLocal(1L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone13.getShortName((-460800053L), locale30);
        boolean boolean32 = dateTimeZone0.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-183599968L) + "'", long12 == (-183599968L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-359999900L) + "'", long26 == (-359999900L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21616");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-1L), locale9);
        boolean boolean12 = dateTimeZone1.isStandardOffset((long) 127920000);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        java.lang.String str30 = dateTimeZone13.getShortName((long) '4');
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone13.getName((long) '4', locale32);
        long long36 = dateTimeZone13.convertLocalToUTC(0L, true);
        boolean boolean37 = dateTimeZone13.isFixed();
        boolean boolean38 = dateTimeZone13.isFixed();
        java.lang.String str39 = dateTimeZone13.toString();
        long long43 = dateTimeZone13.convertLocalToUTC(356400032L, false, 0L);
        int int45 = dateTimeZone13.getOffset((-3600000L));
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, 475200097L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone48.isLocalDateTimeGap(localDateTime50);
        long long53 = dateTimeZone48.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        java.lang.String str56 = dateTimeZone48.getNameKey((long) (byte) 0);
        long long58 = dateTimeZone48.nextTransition((-3600000L));
        java.lang.String str59 = dateTimeZone48.toString();
        java.util.TimeZone timeZone60 = dateTimeZone48.toTimeZone();
        long long62 = dateTimeZone48.previousTransition(345600000L);
        long long64 = dateTimeZone13.getMillisKeepLocal(dateTimeZone48, (long) (-4200000));
        java.lang.String str66 = dateTimeZone48.getNameKey((-371880000L));
        java.lang.String str68 = dateTimeZone48.getNameKey(589920001L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 356400032L + "'", long43 == 356400032L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 835200097L + "'", long47 == 835200097L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-3600000L) + "'", long58 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 345600000L + "'", long62 == 345600000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-4200000L) + "'", long64 == (-4200000L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
    }

    @Test
    public void test21617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21617");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        boolean boolean13 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200100L);
        long long19 = dateTimeZone0.convertLocalToUTC((-3599990L), false, 0L);
        java.lang.String str20 = dateTimeZone0.getID();
        int int22 = dateTimeZone0.getOffsetFromLocal((long) 126000000);
        long long26 = dateTimeZone0.convertLocalToUTC(3600010L, false, (-359399803L));
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone0.getShortName(0L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3600010L + "'", long26 == 3600010L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test21618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21618");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-1L), locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str12 = dateTimeZone1.toString();
        int int14 = dateTimeZone1.getOffsetFromLocal((-6720065L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str18 = dateTimeZone16.getName(10L);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getName((-115200001L), locale21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone16.getOffset(readableInstant23);
        long long26 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, 133200052L);
        java.lang.String str27 = dateTimeZone16.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 136800052L + "'", long26 == 136800052L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
    }

    @Test
    public void test21619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        boolean boolean13 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200100L);
        long long19 = dateTimeZone0.convertLocalToUTC((-3599990L), false, 0L);
        java.lang.String str20 = dateTimeZone0.getID();
        int int22 = dateTimeZone0.getOffsetFromLocal((long) 126000000);
        int int24 = dateTimeZone0.getOffset((-467999903L));
        long long26 = dateTimeZone0.convertUTCToLocal((-6720065L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-6720065L) + "'", long26 == (-6720065L));
    }

    @Test
    public void test21620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21620");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getShortName(359999998L, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(1L, locale9);
        java.lang.String str11 = dateTimeZone1.getID();
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        java.lang.Class<?> wildcardClass13 = timeZone12.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test21621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21621");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.nextTransition((long) '4');
        int int15 = dateTimeZone0.getOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long19 = dateTimeZone0.adjustOffset((-359999990L), false);
        long long22 = dateTimeZone0.convertLocalToUTC(3600001L, false);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName((-111599990L), locale24);
        java.lang.String str26 = dateTimeZone0.getID();
        java.lang.String str27 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-359999990L) + "'", long19 == (-359999990L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3600001L + "'", long22 == 3600001L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test21622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        boolean boolean5 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone0.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        long long12 = dateTimeZone0.adjustOffset(8700152L, true);
        long long14 = dateTimeZone0.nextTransition((-309059900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 8700152L + "'", long12 == 8700152L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-309059900L) + "'", long14 == (-309059900L));
    }

    @Test
    public void test21623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(10);
        java.lang.String str13 = dateTimeZone11.getNameKey((-115199948L));
        long long17 = dateTimeZone11.convertLocalToUTC((-359999990L), true, (-1L));
        long long21 = dateTimeZone11.convertLocalToUTC(115200010L, false, 0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName((-486599900L), locale23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        int int31 = dateTimeZone27.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getShortName((-1L), locale37);
        int int40 = dateTimeZone32.getOffsetFromLocal(0L);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 115200000);
        java.lang.String str44 = dateTimeZone27.getShortName((long) '4');
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone27.getName((long) '4', locale46);
        long long50 = dateTimeZone27.convertLocalToUTC(0L, true);
        boolean boolean51 = dateTimeZone27.isFixed();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = dateTimeZone52.getOffset(readableInstant53);
        int int56 = dateTimeZone52.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        boolean boolean58 = dateTimeZone57.isFixed();
        int int60 = dateTimeZone57.getStandardOffset(0L);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeZone57.getShortName((-1L), locale62);
        int int65 = dateTimeZone57.getOffsetFromLocal(0L);
        long long67 = dateTimeZone52.getMillisKeepLocal(dateTimeZone57, (long) 115200000);
        boolean boolean69 = dateTimeZone52.isStandardOffset(115200000L);
        int int71 = dateTimeZone52.getOffsetFromLocal((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forID("+00:00:00.097");
        boolean boolean74 = dateTimeZone52.equals((java.lang.Object) "+00:00:00.097");
        boolean boolean75 = dateTimeZone27.equals((java.lang.Object) boolean74);
        boolean boolean76 = dateTimeZone26.equals((java.lang.Object) dateTimeZone27);
        long long78 = dateTimeZone11.getMillisKeepLocal(dateTimeZone26, (-104400001L));
        long long80 = dateTimeZone0.getMillisKeepLocal(dateTimeZone26, 478800100L);
        boolean boolean81 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-395999990L) + "'", long17 == (-395999990L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 79200010L + "'", long21 == 79200010L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 115200000L + "'", long67 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-68400001L) + "'", long78 == (-68400001L));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 478800100L + "'", long80 == 478800100L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test21624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21624");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(115200000L);
        long long9 = dateTimeZone1.nextTransition((long) 115200000);
        long long11 = dateTimeZone1.previousTransition(115199991L);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        int int14 = dateTimeZone1.getOffset((-183599968L));
        long long16 = dateTimeZone1.nextTransition((long) 2100000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115200000L + "'", long7 == 115200000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115200000L + "'", long9 == 115200000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115199991L + "'", long11 == 115199991L);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2100000L + "'", long16 == 2100000L);
    }

    @Test
    public void test21625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        int int27 = dateTimeZone0.getStandardOffset(97L);
        int int29 = dateTimeZone0.getOffsetFromLocal((-1L));
        int int31 = dateTimeZone0.getStandardOffset(359999999L);
        long long35 = dateTimeZone0.convertLocalToUTC((-306000000L), false, 244199991L);
        boolean boolean36 = dateTimeZone0.isFixed();
        java.lang.String str37 = dateTimeZone0.getID();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone0.getName((-558839900L), locale39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-306000000L) + "'", long35 == (-306000000L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
    }

    @Test
    public void test21626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21626");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        java.lang.String str10 = dateTimeZone0.getName(115199999L);
        long long13 = dateTimeZone0.convertLocalToUTC(52L, true);
        java.lang.String str15 = dateTimeZone0.getNameKey(223380100L);
        java.lang.String str16 = dateTimeZone0.getID();
        java.lang.String str18 = dateTimeZone0.getNameKey((-127919965L));
        boolean boolean20 = dateTimeZone0.isStandardOffset((-190800010L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test21627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21627");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        int int15 = dateTimeZone0.getOffsetFromLocal((long) (byte) 100);
        java.lang.String str16 = dateTimeZone0.toString();
        int int18 = dateTimeZone0.getOffset(118800001L);
        long long21 = dateTimeZone0.adjustOffset(126060000L, false);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone22.convertUTCToLocal((long) (byte) 0);
        java.lang.String str25 = dateTimeZone22.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str29 = dateTimeZone27.getShortName((long) 'a');
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone27.getShortName((long) (short) -1, locale31);
        int int34 = dateTimeZone27.getOffset((long) 115200000);
        long long36 = dateTimeZone22.getMillisKeepLocal(dateTimeZone27, (long) (short) 0);
        boolean boolean37 = dateTimeZone22.isFixed();
        boolean boolean38 = dateTimeZone22.isFixed();
        long long40 = dateTimeZone22.convertUTCToLocal(0L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone22.getOffset(readableInstant41);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (long) 126000000);
        long long47 = dateTimeZone0.convertLocalToUTC(116879991L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 126060000L + "'", long21 == 126060000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+32:00" + "'", str29, "+32:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+32:00" + "'", str32, "+32:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 115200000 + "'", int34 == 115200000);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-115200000L) + "'", long36 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 126000000L + "'", long44 == 126000000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 116879991L + "'", long47 == 116879991L);
    }

    @Test
    public void test21628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21628");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        long long24 = dateTimeZone20.convertLocalToUTC(115200001L, true);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long30 = dateTimeZone27.adjustOffset(32L, true);
        int int32 = dateTimeZone27.getOffsetFromLocal((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        long long35 = dateTimeZone27.convertUTCToLocal(0L);
        long long37 = dateTimeZone20.getMillisKeepLocal(dateTimeZone27, 244199991L);
        long long40 = dateTimeZone27.adjustOffset((-111600001L), false);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone27.isLocalDateTimeGap(localDateTime41);
        long long44 = dateTimeZone27.nextTransition(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200001L + "'", long24 == 115200001L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 349200000 + "'", int32 == 349200000);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 349200000L + "'", long35 == 349200000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-105000009L) + "'", long37 == (-105000009L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-111600001L) + "'", long40 == (-111600001L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test21629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21629");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 60000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 60000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21630");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone0.equals(obj3);
        long long7 = dateTimeZone0.adjustOffset(72000000L, false);
        java.lang.String str9 = dateTimeZone0.getNameKey(712320000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 349200000L + "'", long2 == 349200000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 72000000L + "'", long7 == 72000000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21631");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        int int24 = dateTimeZone0.getOffsetFromLocal((-115199990L));
        java.lang.String str26 = dateTimeZone0.getName(111600000L);
        int int28 = dateTimeZone0.getOffsetFromLocal((-22L));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName((-1L), locale34);
        java.lang.String str37 = dateTimeZone29.getShortName(1L);
        java.lang.String str39 = dateTimeZone29.getNameKey((long) (byte) -1);
        java.lang.String str41 = dateTimeZone29.getShortName((long) (byte) -1);
        long long44 = dateTimeZone29.convertLocalToUTC((long) ' ', true);
        java.lang.String str46 = dateTimeZone29.getNameKey(118800001L);
        java.lang.String str48 = dateTimeZone29.getName((long) 97);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone29.isLocalDateTimeGap(localDateTime49);
        long long52 = dateTimeZone29.previousTransition(115200097L);
        org.joda.time.ReadableInstant readableInstant53 = null;
        int int54 = dateTimeZone29.getOffset(readableInstant53);
        java.util.TimeZone timeZone55 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        long long58 = dateTimeZone56.convertUTCToLocal(486000000L);
        long long60 = dateTimeZone0.getMillisKeepLocal(dateTimeZone56, 6719913L);
        java.util.TimeZone timeZone61 = dateTimeZone56.toTimeZone();
        java.lang.String str62 = dateTimeZone56.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 115200097L + "'", long52 == 115200097L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 486000000L + "'", long58 == 486000000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 6719913L + "'", long60 == 6719913L);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
    }

    @Test
    public void test21632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.nextTransition(1L);
        java.lang.String str7 = dateTimeZone0.getNameKey((long) 115200000);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getShortName((-187859900L), locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long13 = dateTimeZone0.nextTransition(547199998L);
        long long15 = dateTimeZone0.nextTransition((-464399999L));
        java.lang.String str16 = dateTimeZone0.toString();
        long long18 = dateTimeZone0.convertUTCToLocal(588780000L);
        long long20 = dateTimeZone0.previousTransition(41520000L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = dateTimeZone0.getOffset(readableInstant21);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 547199998L + "'", long13 == 547199998L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-464399999L) + "'", long15 == (-464399999L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 588780000L + "'", long18 == 588780000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 41520000L + "'", long20 == 41520000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test21633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21633");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        int int6 = dateTimeZone0.getStandardOffset((-7200000L));
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(360000097L, locale8);
        int int11 = dateTimeZone0.getOffset((long) (-3600000));
        long long14 = dateTimeZone0.adjustOffset((long) 126060000, true);
        java.lang.String str16 = dateTimeZone0.getNameKey(399720000L);
        int int18 = dateTimeZone0.getOffsetFromLocal((-833159965L));
        int int20 = dateTimeZone0.getOffsetFromLocal(67260100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 126060000L + "'", long14 == 126060000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test21634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21634");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:52");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str4 = dateTimeZone3.getID();
        java.lang.String str6 = dateTimeZone3.getShortName((long) (short) 10);
        java.lang.String str8 = dateTimeZone3.getName(97L);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, 115200000L);
        boolean boolean11 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        long long15 = dateTimeZone13.nextTransition(360000100L);
        long long17 = dateTimeZone3.getMillisKeepLocal(dateTimeZone13, (-719999900L));
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone13.getOffset(readableInstant18);
        boolean boolean20 = dateTimeZone13.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 108480000L + "'", long10 == 108480000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 360000100L + "'", long15 == 360000100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-719999910L) + "'", long17 == (-719999910L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test21635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21635");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int19 = dateTimeZone0.getOffsetFromLocal((long) (byte) 1);
        long long21 = dateTimeZone0.previousTransition((-113100000L));
        java.lang.Object obj22 = null;
        boolean boolean23 = dateTimeZone0.equals(obj22);
        long long25 = dateTimeZone0.previousTransition((-475199965L));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getShortName(698400000L, locale27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getShortName((long) 115200000, locale31);
        boolean boolean33 = dateTimeZone29.isFixed();
        long long35 = dateTimeZone29.previousTransition((long) (short) 10);
        int int37 = dateTimeZone29.getOffset((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone29.isLocalDateTimeGap(localDateTime38);
        long long41 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, (-60001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-113100000L) + "'", long21 == (-113100000L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-475199965L) + "'", long25 == (-475199965L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-60001L) + "'", long41 == (-60001L));
    }

    @Test
    public void test21636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21636");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (short) -1, locale5);
        int int8 = dateTimeZone1.getOffset((long) 115200000);
        long long10 = dateTimeZone1.previousTransition((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.lang.String str16 = dateTimeZone11.getShortName((long) (byte) 100);
        java.lang.String str18 = dateTimeZone11.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone11.getOffset(readableInstant19);
        boolean boolean22 = dateTimeZone11.isStandardOffset((long) (short) 1);
        long long26 = dateTimeZone11.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long29 = dateTimeZone11.adjustOffset((long) (byte) 0, false);
        java.lang.String str31 = dateTimeZone11.getShortName((long) 1);
        long long33 = dateTimeZone11.convertUTCToLocal((-3600000L));
        long long35 = dateTimeZone11.nextTransition(118799999L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        java.lang.String str38 = dateTimeZone36.toString();
        boolean boolean39 = dateTimeZone11.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone36.isLocalDateTimeGap(localDateTime40);
        java.lang.String str43 = dateTimeZone36.getName((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone36.isLocalDateTimeGap(localDateTime44);
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone36, (long) 360060000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 115200000 + "'", int8 == 115200000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115200000L + "'", long26 == 115200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3600000L) + "'", long33 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 118799999L + "'", long35 == 118799999L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 475260000L + "'", long47 == 475260000L);
    }

    @Test
    public void test21637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21637");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (short) 100);
        java.lang.String str12 = dateTimeZone0.getName((-187799900L));
        boolean boolean14 = dateTimeZone0.isStandardOffset((long) 187200000);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        long long24 = dateTimeZone20.nextTransition(115200000L);
        long long26 = dateTimeZone20.convertUTCToLocal((long) 'a');
        boolean boolean28 = dateTimeZone20.isStandardOffset((-1L));
        java.util.TimeZone timeZone29 = dateTimeZone20.toTimeZone();
        long long31 = dateTimeZone20.nextTransition((-115199948L));
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone20.getShortName((-351299848L), locale33);
        java.lang.String str36 = dateTimeZone20.getShortName((long) 349200000);
        int int38 = dateTimeZone20.getOffsetFromLocal((-232500001L));
        long long42 = dateTimeZone20.convertLocalToUTC((-118799990L), false, 72000000L);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, 707580000L);
        java.util.TimeZone timeZone45 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone0.isLocalDateTimeGap(localDateTime46);
        boolean boolean49 = dateTimeZone0.isStandardOffset((long) 36600000);
        long long52 = dateTimeZone0.convertLocalToUTC((-306000000L), true);
        long long54 = dateTimeZone0.previousTransition(126060100L);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone55.getShortName((long) 115200000, locale57);
        boolean boolean60 = dateTimeZone55.isStandardOffset(360000097L);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean63 = dateTimeZone62.isFixed();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        boolean boolean65 = dateTimeZone64.isFixed();
        int int67 = dateTimeZone64.getStandardOffset(0L);
        java.lang.String str69 = dateTimeZone64.getNameKey(1L);
        int int71 = dateTimeZone64.getOffset((-1L));
        java.lang.String str72 = dateTimeZone64.toString();
        java.lang.String str74 = dateTimeZone64.getName(32L);
        boolean boolean75 = dateTimeZone62.equals((java.lang.Object) dateTimeZone64);
        boolean boolean76 = dateTimeZone55.equals((java.lang.Object) dateTimeZone62);
        long long78 = dateTimeZone0.getMillisKeepLocal(dateTimeZone55, 3600090L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200000L + "'", long24 == 115200000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-115199948L) + "'", long31 == (-115199948L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-118799990L) + "'", long42 == (-118799990L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 707580000L + "'", long44 == 707580000L);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-306000000L) + "'", long52 == (-306000000L));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 126060100L + "'", long54 == 126060100L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 3600090L + "'", long78 == 3600090L);
    }

    @Test
    public void test21638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21638");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone8.isLocalDateTimeGap(localDateTime11);
        java.lang.String str13 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test21639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        long long22 = dateTimeZone0.convertUTCToLocal((-3600000L));
        long long24 = dateTimeZone0.nextTransition(118799999L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.lang.String str27 = dateTimeZone25.toString();
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        int int30 = dateTimeZone0.getStandardOffset(701520000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        long long35 = dateTimeZone32.convertLocalToUTC((long) 360000000, false);
        long long37 = dateTimeZone32.previousTransition(0L);
        long long39 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, 0L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone32.getOffset(readableInstant40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone32.getShortName((long) (byte) 0, locale43);
        boolean boolean45 = dateTimeZone32.isFixed();
        int int47 = dateTimeZone32.getOffset((-307620001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3600000L) + "'", long22 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 118799999L + "'", long24 == 118799999L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 359999999L + "'", long35 == 359999999L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.001" + "'", str44, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test21640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21640");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) 100);
        long long12 = dateTimeZone0.convertLocalToUTC(356400032L, true);
        int int14 = dateTimeZone0.getOffsetFromLocal((-360000001L));
        long long16 = dateTimeZone0.previousTransition((-118799990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 356400032L + "'", long12 == 356400032L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-118799990L) + "'", long16 == (-118799990L));
    }

    @Test
    public void test21641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21641");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        java.lang.String str10 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertUTCToLocal(348600110L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 348600110L + "'", long12 == 348600110L);
    }

    @Test
    public void test21642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21642");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone0.equals(obj3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getNameKey(1L);
        int int12 = dateTimeZone5.getOffset((-1L));
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (-115199990L));
        boolean boolean16 = dateTimeZone5.isStandardOffset((-115199990L));
        long long18 = dateTimeZone5.convertUTCToLocal(1L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getStandardOffset(0L);
        java.lang.String str24 = dateTimeZone19.getShortName((long) (byte) 100);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone19.getName((long) 115200000, locale26);
        java.lang.String str29 = dateTimeZone19.getShortName((long) 100);
        long long31 = dateTimeZone19.previousTransition(129660000L);
        java.lang.String str32 = dateTimeZone19.getID();
        int int34 = dateTimeZone19.getOffset(187199999L);
        boolean boolean35 = dateTimeZone5.equals((java.lang.Object) dateTimeZone19);
        int int37 = dateTimeZone19.getOffsetFromLocal((-113100000L));
        long long39 = dateTimeZone19.previousTransition(122460100L);
        boolean boolean41 = dateTimeZone19.isStandardOffset(117060097L);
        long long43 = dateTimeZone19.nextTransition((-511259958L));
        long long46 = dateTimeZone19.adjustOffset((-115200166L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199990L) + "'", long14 == (-115199990L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 129660000L + "'", long31 == 129660000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 122460100L + "'", long39 == 122460100L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-511259958L) + "'", long43 == (-511259958L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-115200166L) + "'", long46 == (-115200166L));
    }

    @Test
    public void test21643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21643");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        long long3 = dateTimeZone1.previousTransition(237600000L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(201600001L, locale5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 237600000L + "'", long3 == 237600000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.100" + "'", str6, "+00:00:00.100");
    }

    @Test
    public void test21644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21644");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        long long9 = dateTimeZone1.nextTransition(187199991L);
        long long12 = dateTimeZone1.adjustOffset((-60001L), true);
        java.util.TimeZone timeZone13 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, 10);
        boolean boolean20 = dateTimeZone18.isStandardOffset(363600052L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone18.getShortName(79199999L, locale22);
        boolean boolean24 = dateTimeZone14.equals((java.lang.Object) str23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 187199991L + "'", long9 == 187199991L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60001L) + "'", long12 == (-60001L));
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+01:10" + "'", str23, "+01:10");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21645");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(115200001L, locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (short) 10);
        java.lang.String str19 = dateTimeZone15.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone20.getShortName((-1L), locale25);
        java.lang.String str28 = dateTimeZone20.getShortName(1L);
        long long30 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (long) (-1));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean33 = dateTimeZone20.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone20.isLocalDateTimeGap(localDateTime34);
        int int37 = dateTimeZone20.getOffset((long) 115200000);
        java.lang.String str38 = dateTimeZone20.toString();
        int int40 = dateTimeZone20.getOffset(115199999L);
        boolean boolean41 = dateTimeZone20.isFixed();
        int int43 = dateTimeZone20.getStandardOffset(547199998L);
        long long45 = dateTimeZone1.getMillisKeepLocal(dateTimeZone20, 123900152L);
        java.lang.String str46 = dateTimeZone20.getID();
        long long48 = dateTimeZone20.convertUTCToLocal(360000100L);
        boolean boolean49 = dateTimeZone20.isFixed();
        long long52 = dateTimeZone20.convertLocalToUTC((-3599948L), false);
        boolean boolean54 = dateTimeZone20.isStandardOffset((-545280000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 483900152L + "'", long45 == 483900152L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 360000100L + "'", long48 == 360000100L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-3599948L) + "'", long52 == (-3599948L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test21646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21646");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long5 = dateTimeZone0.nextTransition((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getNameKey(1L);
        int int13 = dateTimeZone6.getOffset((-1L));
        java.lang.String str14 = dateTimeZone6.toString();
        int int16 = dateTimeZone6.getOffset(1L);
        long long18 = dateTimeZone6.convertUTCToLocal((long) (byte) 100);
        int int20 = dateTimeZone6.getOffsetFromLocal(360000097L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) (byte) -1);
        long long24 = dateTimeZone0.previousTransition(122460000L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone0.getShortName(52L, locale26);
        long long29 = dateTimeZone0.previousTransition(187200000L);
        int int31 = dateTimeZone0.getOffset((-180479965L));
        java.lang.String str32 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((-3600000));
        java.lang.String str36 = dateTimeZone34.getShortName((-287999998L));
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone34, 148139999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 122460000L + "'", long24 == 122460000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 187200000L + "'", long29 == 187200000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 151739999L + "'", long38 == 151739999L);
    }

    @Test
    public void test21647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21647");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        int int4 = dateTimeZone0.getOffsetFromLocal((long) 1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone0.getID();
        long long11 = dateTimeZone0.convertLocalToUTC(100L, true, 187200000L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        java.lang.String str19 = dateTimeZone12.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone12.getOffset(readableInstant20);
        boolean boolean23 = dateTimeZone12.isStandardOffset((long) (short) 1);
        long long27 = dateTimeZone12.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long30 = dateTimeZone12.adjustOffset((long) (byte) 0, false);
        java.lang.String str32 = dateTimeZone12.getShortName((long) 1);
        long long34 = dateTimeZone12.convertUTCToLocal((-3600000L));
        long long37 = dateTimeZone12.convertLocalToUTC(0L, false);
        int int39 = dateTimeZone12.getOffsetFromLocal((-118799903L));
        long long41 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, (long) 100);
        java.lang.String str42 = dateTimeZone12.toString();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone12.getName(4200000L, locale44);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str49 = dateTimeZone48.toString();
        boolean boolean50 = dateTimeZone48.isFixed();
        boolean boolean52 = dateTimeZone48.isStandardOffset((long) 10);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone48.getName((-360000000L), locale54);
        java.lang.String str56 = dateTimeZone48.getID();
        long long58 = dateTimeZone12.getMillisKeepLocal(dateTimeZone48, (-163979948L));
        java.lang.String str60 = dateTimeZone48.getName((-345599990L));
        boolean boolean62 = dateTimeZone48.isStandardOffset(75600001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600000L) + "'", long34 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-163979958L) + "'", long58 == (-163979958L));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test21648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.previousTransition((long) 115200000);
        int int13 = dateTimeZone0.getOffset(100L);
        int int15 = dateTimeZone0.getOffset(36000000L);
        boolean boolean16 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test21649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        java.lang.String str7 = dateTimeZone3.getName((long) 1);
        long long9 = dateTimeZone3.convertUTCToLocal(349200010L);
        int int11 = dateTimeZone3.getOffsetFromLocal(90L);
        java.lang.String str13 = dateTimeZone3.getShortName(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 349200010L + "'", long9 == 349200010L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test21650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21650");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        boolean boolean18 = dateTimeZone1.isFixed();
        java.lang.String str20 = dateTimeZone1.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone1.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone1.getNameKey((-115199990L));
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getName(3600010L, locale26);
        java.lang.String str28 = dateTimeZone1.toString();
        long long31 = dateTimeZone1.adjustOffset((-118799900L), false);
        java.util.TimeZone timeZone32 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-118799900L) + "'", long31 == (-118799900L));
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21651");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) 115200000);
        boolean boolean27 = dateTimeZone10.isStandardOffset(115200000L);
        int int29 = dateTimeZone10.getOffsetFromLocal((long) (short) 10);
        long long31 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, 1L);
        java.lang.String str32 = dateTimeZone7.toString();
        int int34 = dateTimeZone7.getStandardOffset((long) 1);
        long long36 = dateTimeZone7.convertUTCToLocal(1L);
        java.lang.String str38 = dateTimeZone7.getNameKey((long) (byte) 10);
        long long41 = dateTimeZone7.adjustOffset((-3600001L), true);
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) true);
        int int44 = dateTimeZone1.getOffset(0L);
        boolean boolean46 = dateTimeZone1.isStandardOffset((-352800000L));
        long long49 = dateTimeZone1.convertLocalToUTC((-395999990L), false);
        int int51 = dateTimeZone1.getStandardOffset((-1011599900L));
        java.lang.String str53 = dateTimeZone1.getNameKey(161999932L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200000L + "'", long25 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3600001L) + "'", long41 == (-3600001L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-395999990L) + "'", long49 == (-395999990L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
    }

    @Test
    public void test21652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21652");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.convertUTCToLocal(10L);
        long long15 = dateTimeZone0.convertLocalToUTC(96L, true, 115199991L);
        long long17 = dateTimeZone0.convertUTCToLocal(464399991L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone0.getOffset(readableInstant18);
        long long21 = dateTimeZone0.previousTransition((-43199999L));
        java.lang.String str23 = dateTimeZone0.getShortName(0L);
        int int25 = dateTimeZone0.getOffset((-475199965L));
        java.lang.String str27 = dateTimeZone0.getNameKey(590399997L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean31 = dateTimeZone29.equals((java.lang.Object) 1.0f);
        java.lang.String str32 = dateTimeZone29.getID();
        java.lang.String str34 = dateTimeZone29.getNameKey(115200101L);
        long long36 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 200280000L);
        java.util.TimeZone timeZone37 = dateTimeZone0.toTimeZone();
        long long40 = dateTimeZone0.convertLocalToUTC(277200000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 96L + "'", long15 == 96L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 464399991L + "'", long17 == 464399991L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-43199999L) + "'", long21 == (-43199999L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 200280000L + "'", long36 == 200280000L);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 277200000L + "'", long40 == 277200000L);
    }

    @Test
    public void test21653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21653");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(111600000L, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 100);
        java.lang.String str28 = dateTimeZone21.getShortName((long) (short) 0);
        java.lang.String str30 = dateTimeZone21.getShortName(0L);
        boolean boolean32 = dateTimeZone21.equals((java.lang.Object) '4');
        long long34 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 127920000L);
        java.lang.String str35 = dateTimeZone0.getID();
        long long38 = dateTimeZone0.adjustOffset((-243120001L), false);
        int int40 = dateTimeZone0.getOffset(478799991L);
        boolean boolean42 = dateTimeZone0.isStandardOffset(349800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 127920000L + "'", long34 == 127920000L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-243120001L) + "'", long38 == (-243120001L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test21654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21654");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.nextTransition(100L);
        int int24 = dateTimeZone0.getStandardOffset((long) (short) -1);
        int int26 = dateTimeZone0.getOffsetFromLocal((-115199948L));
        int int28 = dateTimeZone0.getOffsetFromLocal(302400010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test21655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21655");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        java.lang.String str13 = dateTimeZone0.getID();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(91919999L, locale15);
        java.lang.String str17 = dateTimeZone0.toString();
        long long20 = dateTimeZone0.adjustOffset((-109L), false);
        int int22 = dateTimeZone0.getOffsetFromLocal((-277199999L));
        long long24 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone0.isLocalDateTimeGap(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-109L) + "'", long20 == (-109L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test21656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21656");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str16 = dateTimeZone5.getID();
        long long18 = dateTimeZone5.previousTransition(1L);
        int int20 = dateTimeZone5.getStandardOffset((long) 187200000);
        int int22 = dateTimeZone5.getOffset(235920000L);
        java.lang.String str24 = dateTimeZone5.getNameKey(0L);
        int int26 = dateTimeZone5.getOffsetFromLocal((-131520065L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test21657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21657");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        long long35 = dateTimeZone13.convertLocalToUTC(115200052L, false);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone13.getShortName((-118799903L), locale37);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone39.isLocalDateTimeGap(localDateTime41);
        long long45 = dateTimeZone39.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = dateTimeZone39.getOffset(readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean49 = dateTimeZone48.isFixed();
        int int51 = dateTimeZone48.getStandardOffset(0L);
        java.lang.String str53 = dateTimeZone48.getNameKey(1L);
        java.lang.String str55 = dateTimeZone48.getShortName((long) 100);
        boolean boolean56 = dateTimeZone39.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        long long59 = dateTimeZone57.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        boolean boolean61 = dateTimeZone39.equals((java.lang.Object) dateTimeZone57);
        long long64 = dateTimeZone57.convertLocalToUTC((long) '4', false);
        long long66 = dateTimeZone57.convertUTCToLocal((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone57.isLocalDateTimeGap(localDateTime67);
        long long70 = dateTimeZone13.getMillisKeepLocal(dateTimeZone57, (-115200000L));
        java.lang.Class<?> wildcardClass71 = dateTimeZone57.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 115200052L + "'", long35 == 115200052L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-115200000L) + "'", long70 == (-115200000L));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test21658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21658");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        int int27 = dateTimeZone0.getStandardOffset(97L);
        int int29 = dateTimeZone0.getOffsetFromLocal((-1L));
        int int31 = dateTimeZone0.getStandardOffset(359999999L);
        long long35 = dateTimeZone0.convertLocalToUTC((-306000000L), false, 244199991L);
        boolean boolean36 = dateTimeZone0.isFixed();
        java.lang.String str37 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone0.isLocalDateTimeGap(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-306000000L) + "'", long35 == (-306000000L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test21659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21659");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        java.lang.String str11 = dateTimeZone0.getID();
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        long long14 = dateTimeZone0.convertUTCToLocal((-10320000L));
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-10320000L) + "'", long14 == (-10320000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test21660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21660");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long5 = dateTimeZone1.adjustOffset(0L, true);
        boolean boolean6 = dateTimeZone1.isFixed();
        int int8 = dateTimeZone1.getStandardOffset((-232079900L));
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone1.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone1.toString();
        boolean boolean12 = dateTimeZone1.isFixed();
        int int14 = dateTimeZone1.getStandardOffset(178860100L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test21661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21661");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) 100);
        long long12 = dateTimeZone0.previousTransition(129660000L);
        java.lang.String str13 = dateTimeZone0.getID();
        int int15 = dateTimeZone0.getOffset(187199999L);
        int int17 = dateTimeZone0.getOffset((-131520000L));
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str25 = dateTimeZone23.getNameKey(32L);
        java.lang.String str27 = dateTimeZone23.getName((long) 1);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone23.getShortName((long) (short) 1, locale29);
        long long32 = dateTimeZone23.previousTransition((-228900001L));
        long long35 = dateTimeZone23.adjustOffset(116879991L, true);
        long long39 = dateTimeZone23.convertLocalToUTC((-3599999L), false, 467520000L);
        long long41 = dateTimeZone19.getMillisKeepLocal(dateTimeZone23, 8940000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 129660000L + "'", long12 == 129660000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-228900001L) + "'", long32 == (-228900001L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 116879991L + "'", long35 == 116879991L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599999L) + "'", long39 == (-3599999L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 8940000L + "'", long41 == 8940000L);
    }

    @Test
    public void test21662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21662");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(360060000L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forID("UTC");
        int int10 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone8.getShortName((long) (byte) 0, locale12);
        int int15 = dateTimeZone8.getOffset((long) (byte) 100);
        java.lang.String str17 = dateTimeZone8.getNameKey((long) (short) 0);
        java.lang.String str19 = dateTimeZone8.getName(221280010L);
        java.lang.String str21 = dateTimeZone8.getShortName((-111540000L));
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (-359399900L));
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) '4');
        java.lang.String str28 = dateTimeZone26.getName(115200000L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone26.getShortName(0L, locale30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        java.lang.String str34 = dateTimeZone26.getName(711180000L);
        boolean boolean35 = dateTimeZone2.equals((java.lang.Object) str34);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 360060000L + "'", long4 == 360060000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-359399900L) + "'", long23 == (-359399900L));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:52" + "'", str28, "-01:52");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:52" + "'", str31, "-01:52");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:52" + "'", str34, "-01:52");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21663");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        java.lang.String str21 = dateTimeZone0.getShortName(0L);
        boolean boolean23 = dateTimeZone0.isStandardOffset((long) '#');
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone0.isLocalDateTimeGap(localDateTime24);
        java.util.TimeZone timeZone26 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test21664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21664");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        long long17 = dateTimeZone0.convertLocalToUTC((long) 10, false);
        long long21 = dateTimeZone0.convertLocalToUTC((long) (-1), true, 0L);
        java.lang.String str23 = dateTimeZone0.getNameKey(187200000L);
        long long26 = dateTimeZone0.convertLocalToUTC(234000010L, true);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str29 = dateTimeZone28.toString();
        int int31 = dateTimeZone28.getOffsetFromLocal((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long34 = dateTimeZone32.convertUTCToLocal((long) (byte) 0);
        java.lang.String str35 = dateTimeZone32.toString();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getName((-1L), locale37);
        long long41 = dateTimeZone32.adjustOffset((long) (byte) 10, false);
        long long43 = dateTimeZone28.getMillisKeepLocal(dateTimeZone32, 90L);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, 115200097L);
        boolean boolean46 = dateTimeZone28.isFixed();
        int int48 = dateTimeZone28.getOffset((-475200012L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 234000010L + "'", long26 == 234000010L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.010" + "'", str29, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 115200087L + "'", long45 == 115200087L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
    }

    @Test
    public void test21665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21665");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) '4');
        java.lang.String str5 = dateTimeZone1.getNameKey((long) 349200000);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 10);
        int int13 = dateTimeZone6.getOffset((long) (short) 1);
        int int15 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.lang.String str21 = dateTimeZone16.getNameKey(1L);
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone24.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        boolean boolean28 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone16.getMillisKeepLocal(dateTimeZone24, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getStandardOffset(0L);
        java.lang.String str36 = dateTimeZone31.getShortName((long) (byte) 100);
        java.lang.String str38 = dateTimeZone31.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone31.getOffset(readableInstant39);
        boolean boolean42 = dateTimeZone31.isStandardOffset((long) (short) 1);
        long long46 = dateTimeZone31.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int48 = dateTimeZone31.getOffsetFromLocal((long) (short) 0);
        java.lang.String str50 = dateTimeZone31.getNameKey((long) ' ');
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone31.getShortName((long) (byte) 100, locale52);
        long long55 = dateTimeZone16.getMillisKeepLocal(dateTimeZone31, (-115200000L));
        int int57 = dateTimeZone31.getOffset((-1L));
        long long60 = dateTimeZone31.adjustOffset(359999998L, false);
        java.lang.String str62 = dateTimeZone31.getName((-7200000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        boolean boolean64 = dateTimeZone6.equals((java.lang.Object) dateTimeZone31);
        long long66 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (long) 126000000);
        org.joda.time.ReadableInstant readableInstant67 = null;
        int int68 = dateTimeZone6.getOffset(readableInstant67);
        long long71 = dateTimeZone6.adjustOffset((-4920000L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 115200000L + "'", long46 == 115200000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-115200000L) + "'", long55 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 359999998L + "'", long60 == 359999998L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 486000000L + "'", long66 == 486000000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-4920000L) + "'", long71 == (-4920000L));
    }

    @Test
    public void test21666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.nextTransition((long) (byte) 1);
        java.lang.String str8 = dateTimeZone4.getNameKey((long) (byte) 1);
        long long10 = dateTimeZone4.convertUTCToLocal((-7200000L));
        long long12 = dateTimeZone4.convertUTCToLocal(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone4.getName(187200000L, locale14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        long long20 = dateTimeZone4.convertLocalToUTC((-115200166L), true, 350400000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-7200000L) + "'", long10 == (-7200000L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-115200166L) + "'", long20 == (-115200166L));
    }

    @Test
    public void test21667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21667");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.nextTransition(151200000L);
        long long8 = dateTimeZone1.convertLocalToUTC(187200001L, true);
        java.lang.String str10 = dateTimeZone1.getShortName((-3599990L));
        org.joda.time.tz.Provider provider11 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 151200000L + "'", long5 == 151200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 187199991L + "'", long8 == 187199991L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21668");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        long long9 = dateTimeZone0.nextTransition(127920097L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (short) 0);
        int int14 = dateTimeZone12.getOffsetFromLocal((-60001L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        int int19 = dateTimeZone12.getOffsetFromLocal(115199999L);
        java.lang.String str21 = dateTimeZone12.getName(711300000L);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 71999904L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone12.getShortName(3600100L, locale25);
        java.lang.String str28 = dateTimeZone12.getNameKey(356400100L);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone12.getOffset(readableInstant29);
        java.lang.String str32 = dateTimeZone12.getNameKey(199920000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 127920097L + "'", long9 == 127920097L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 349200000 + "'", int14 == 349200000);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 349200000 + "'", int19 == 349200000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+97:00" + "'", str21, "+97:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-277200096L) + "'", long23 == (-277200096L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+97:00" + "'", str26, "+97:00");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 349200000 + "'", int30 == 349200000);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test21669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21669");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone17.getOffset(readableInstant18);
        int int21 = dateTimeZone17.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone22.getShortName((-1L), locale27);
        int int30 = dateTimeZone22.getOffsetFromLocal(0L);
        long long32 = dateTimeZone17.getMillisKeepLocal(dateTimeZone22, (long) 115200000);
        boolean boolean34 = dateTimeZone17.isStandardOffset(115200000L);
        long long37 = dateTimeZone17.convertLocalToUTC((long) 10, true);
        java.lang.String str38 = dateTimeZone17.toString();
        int int40 = dateTimeZone17.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone17.getOffset(readableInstant41);
        int int44 = dateTimeZone17.getStandardOffset(97L);
        java.lang.String str46 = dateTimeZone17.getName(100L);
        long long48 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, 234000010L);
        long long50 = dateTimeZone5.previousTransition(359999991L);
        long long53 = dateTimeZone5.adjustOffset(187199999L, true);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int57 = dateTimeZone55.getOffset(129660000L);
        int int59 = dateTimeZone55.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        int int62 = dateTimeZone55.getOffset((-3599893L));
        int int64 = dateTimeZone55.getOffsetFromLocal(0L);
        boolean boolean65 = dateTimeZone5.equals((java.lang.Object) 0L);
        long long69 = dateTimeZone5.convertLocalToUTC(6720032L, true, 0L);
        long long72 = dateTimeZone5.convertLocalToUTC((-42720010L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115200000L + "'", long32 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 349200010L + "'", long48 == 349200010L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 359999991L + "'", long50 == 359999991L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 187199999L + "'", long53 == 187199999L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 115200000 + "'", int57 == 115200000);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 115200000 + "'", int59 == 115200000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 115200000 + "'", int62 == 115200000);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 115200000 + "'", int64 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-108479968L) + "'", long69 == (-108479968L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-157920010L) + "'", long72 == (-157920010L));
    }

    @Test
    public void test21670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21670");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        boolean boolean18 = dateTimeZone0.isFixed();
        int int20 = dateTimeZone0.getOffsetFromLocal(590400152L);
        long long22 = dateTimeZone0.nextTransition((-116699999L));
        long long25 = dateTimeZone0.convertLocalToUTC(0L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-116699999L) + "'", long22 == (-116699999L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test21671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21671");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        boolean boolean17 = dateTimeZone5.isFixed();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        long long27 = dateTimeZone23.nextTransition(115200000L);
        long long29 = dateTimeZone23.convertUTCToLocal((long) 'a');
        boolean boolean31 = dateTimeZone23.isStandardOffset((-1L));
        java.util.TimeZone timeZone32 = dateTimeZone23.toTimeZone();
        long long34 = dateTimeZone23.nextTransition((-115199948L));
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone23.getShortName((-351299848L), locale36);
        java.lang.String str39 = dateTimeZone23.getShortName((long) 349200000);
        long long43 = dateTimeZone23.convertLocalToUTC(125999999L, false, (-11L));
        boolean boolean44 = dateTimeZone5.equals((java.lang.Object) dateTimeZone23);
        long long48 = dateTimeZone5.convertLocalToUTC(1920000L, false, (long) 97);
        long long51 = dateTimeZone5.convertLocalToUTC(172740006L, true);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        long long54 = dateTimeZone52.convertUTCToLocal((long) (byte) 0);
        int int56 = dateTimeZone52.getOffsetFromLocal((long) (-1));
        long long59 = dateTimeZone52.adjustOffset((long) ' ', true);
        java.lang.String str60 = dateTimeZone52.getID();
        java.lang.String str61 = dateTimeZone52.getID();
        boolean boolean63 = dateTimeZone52.isStandardOffset((long) 187200000);
        long long65 = dateTimeZone52.convertUTCToLocal((long) (-3600000));
        java.lang.String str66 = dateTimeZone52.toString();
        java.lang.String str68 = dateTimeZone52.getNameKey(5700000L);
        java.lang.Class<?> wildcardClass69 = dateTimeZone52.getClass();
        boolean boolean70 = dateTimeZone5.equals((java.lang.Object) dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115200000L + "'", long2 == 115200000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-115199948L) + "'", long34 == (-115199948L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 125999999L + "'", long43 == 125999999L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-113280000L) + "'", long48 == (-113280000L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 57540006L + "'", long51 == 57540006L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3600000L) + "'", long65 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test21672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 10);
        int int29 = dateTimeZone0.getOffsetFromLocal((-115200000L));
        long long31 = dateTimeZone0.convertUTCToLocal(118799999L);
        java.lang.String str32 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone33.getOffset(readableInstant34);
        int int37 = dateTimeZone33.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean39 = dateTimeZone38.isFixed();
        int int41 = dateTimeZone38.getStandardOffset(0L);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone38.getShortName((-1L), locale43);
        int int46 = dateTimeZone38.getOffsetFromLocal(0L);
        long long48 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, (long) 115200000);
        boolean boolean50 = dateTimeZone33.isStandardOffset(115200000L);
        long long53 = dateTimeZone33.convertLocalToUTC((long) 10, true);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = dateTimeZone54.getOffset(readableInstant55);
        int int58 = dateTimeZone54.getStandardOffset(1L);
        long long60 = dateTimeZone33.getMillisKeepLocal(dateTimeZone54, (long) 10);
        java.lang.String str62 = dateTimeZone54.getNameKey((-1L));
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone54.isLocalDateTimeGap(localDateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        boolean boolean66 = dateTimeZone65.isFixed();
        int int68 = dateTimeZone65.getStandardOffset(0L);
        java.lang.String str70 = dateTimeZone65.getShortName((long) (byte) 100);
        java.lang.String str72 = dateTimeZone65.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant73 = null;
        int int74 = dateTimeZone65.getOffset(readableInstant73);
        long long78 = dateTimeZone65.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int80 = dateTimeZone65.getOffset(115199999L);
        long long82 = dateTimeZone54.getMillisKeepLocal(dateTimeZone65, (-244799989L));
        boolean boolean83 = dateTimeZone65.isFixed();
        long long85 = dateTimeZone0.getMillisKeepLocal(dateTimeZone65, 223380100L);
        int int87 = dateTimeZone0.getOffsetFromLocal(68399934L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 118799999L + "'", long31 == 118799999L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 115200000L + "'", long48 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10L + "'", long78 == 10L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-244799989L) + "'", long82 == (-244799989L));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 223380100L + "'", long85 == 223380100L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test21673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21673");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str25 = dateTimeZone0.toString();
        int int27 = dateTimeZone0.getStandardOffset((long) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long32 = dateTimeZone0.convertLocalToUTC(118800001L, false, 360000032L);
        long long35 = dateTimeZone0.adjustOffset(32L, true);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone0.isLocalDateTimeGap(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 118800001L + "'", long32 == 118800001L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test21674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21674");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) '4');
        long long13 = dateTimeZone0.previousTransition(32L);
        long long16 = dateTimeZone0.convertLocalToUTC(187200001L, false);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone0.isLocalDateTimeGap(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187200001L + "'", long16 == 187200001L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21675");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        java.lang.String str20 = dateTimeZone1.getShortName(100L);
        int int22 = dateTimeZone1.getOffsetFromLocal(0L);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone1.isLocalDateTimeGap(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 360000000 + "'", int22 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21676");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((-3600001L));
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        long long7 = dateTimeZone1.nextTransition(115200001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long11 = dateTimeZone1.convertLocalToUTC((-709199893L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600001L) + "'", long4 == (-3600001L));
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115200001L + "'", long7 == 115200001L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-705599893L) + "'", long11 == (-705599893L));
    }

    @Test
    public void test21677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21677");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.previousTransition(124320010L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str13 = dateTimeZone1.getName((-241200000L));
        long long15 = dateTimeZone1.previousTransition(151739999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 124320010L + "'", long10 == 124320010L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 151739999L + "'", long15 == 151739999L);
    }

    @Test
    public void test21678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21678");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long10 = dateTimeZone7.adjustOffset((-359999900L), true);
        int int12 = dateTimeZone7.getStandardOffset(79199999L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone7.getName((-187260001L), locale14);
        int int17 = dateTimeZone7.getStandardOffset(349200009L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-359999900L) + "'", long10 == (-359999900L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test21679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21679");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(349200000);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone10.getOffset(readableInstant13);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        java.lang.String str17 = dateTimeZone10.getName((long) 115200000);
        boolean boolean18 = dateTimeZone10.isFixed();
        long long21 = dateTimeZone10.convertLocalToUTC((-3660001L), false);
        long long23 = dateTimeZone10.convertUTCToLocal((-583199900L));
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 7200022L);
        boolean boolean27 = dateTimeZone10.isStandardOffset(71999991L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115200000 + "'", int7 == 115200000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 349200000 + "'", int12 == 349200000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 349200000 + "'", int14 == 349200000);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+97:00" + "'", str17, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-352860001L) + "'", long21 == (-352860001L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-233999900L) + "'", long23 == (-233999900L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-226799978L) + "'", long25 == (-226799978L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test21680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21680");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone9.nextTransition(151200000L);
        long long16 = dateTimeZone9.convertLocalToUTC(187200001L, true);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("UTC");
        int int23 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 0, locale25);
        long long28 = dateTimeZone21.nextTransition((long) (byte) -1);
        long long30 = dateTimeZone21.convertUTCToLocal((long) (byte) 10);
        int int32 = dateTimeZone21.getStandardOffset(0L);
        java.util.TimeZone timeZone33 = dateTimeZone21.toTimeZone();
        long long35 = dateTimeZone9.getMillisKeepLocal(dateTimeZone21, (-3599903L));
        long long38 = dateTimeZone9.adjustOffset((-184199900L), true);
        long long40 = dateTimeZone9.nextTransition(834600097L);
        long long42 = dateTimeZone9.previousTransition((-75599965L));
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone9.isLocalDateTimeGap(localDateTime43);
        long long46 = dateTimeZone9.nextTransition((-162059948L));
        long long49 = dateTimeZone9.convertLocalToUTC((-226859991L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 151200000L + "'", long13 == 151200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187199991L + "'", long16 == 187199991L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999991L + "'", long18 == 359999991L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599893L) + "'", long35 == (-3599893L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-184199900L) + "'", long38 == (-184199900L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 834600097L + "'", long40 == 834600097L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-75599965L) + "'", long42 == (-75599965L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-162059948L) + "'", long46 == (-162059948L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-226860001L) + "'", long49 == (-226860001L));
    }

    @Test
    public void test21681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21681");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long4 = dateTimeZone1.previousTransition((-3600001L));
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) 360000000);
        java.lang.String str7 = dateTimeZone1.getID();
        int int9 = dateTimeZone1.getOffset((-7260001L));
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        boolean boolean12 = dateTimeZone1.isStandardOffset(234000010L);
        long long14 = dateTimeZone1.convertUTCToLocal(44880000L);
        java.lang.Class<?> wildcardClass15 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600001L) + "'", long4 == (-3600001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 41280000L + "'", long14 == 41280000L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test21682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21682");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int4 = dateTimeZone2.getStandardOffset((long) (short) 10);
        java.lang.String str6 = dateTimeZone2.getShortName(10L);
        java.lang.String str8 = dateTimeZone2.getName(244199991L);
        java.lang.String str10 = dateTimeZone2.getShortName(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str13 = dateTimeZone2.getShortName(109500000L);
        long long16 = dateTimeZone2.adjustOffset(534479999L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.lang.String str19 = dateTimeZone2.getShortName((-242700032L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 126060000 + "'", int4 == 126060000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:01" + "'", str6, "+35:01");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:01" + "'", str8, "+35:01");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:01" + "'", str10, "+35:01");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:01" + "'", str13, "+35:01");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 534479999L + "'", long16 == 534479999L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:01" + "'", str19, "+35:01");
    }

    @Test
    public void test21683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int27 = dateTimeZone25.getOffset(1920000L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone28.getOffset(readableInstant29);
        int int32 = dateTimeZone28.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        int int36 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName((-1L), locale38);
        int int41 = dateTimeZone33.getOffsetFromLocal(0L);
        long long43 = dateTimeZone28.getMillisKeepLocal(dateTimeZone33, (long) 115200000);
        java.util.TimeZone timeZone44 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long48 = dateTimeZone46.previousTransition((long) (byte) -1);
        long long51 = dateTimeZone46.convertLocalToUTC(52L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone46.getName(111600000L, locale54);
        java.lang.String str57 = dateTimeZone46.getName(187200000L);
        java.lang.String str59 = dateTimeZone46.getNameKey(115199991L);
        boolean boolean60 = dateTimeZone28.equals((java.lang.Object) str59);
        java.lang.String str62 = dateTimeZone28.getName((-115199999L));
        long long64 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 3600000);
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = dateTimeZone25.getOffset(readableInstant65);
        java.lang.Class<?> wildcardClass67 = dateTimeZone25.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 115200000L + "'", long43 == 115200000L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3600000L + "'", long64 == 3600000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test21684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21684");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        java.lang.String str5 = dateTimeZone1.getName((-115199948L));
        java.lang.String str6 = dateTimeZone1.getID();
        long long9 = dateTimeZone1.adjustOffset(391800032L, false);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone1.getOffsetFromLocal(121920000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+32:00" + "'", str5, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 391800032L + "'", long9 == 391800032L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 115200000 + "'", int13 == 115200000);
    }

    @Test
    public void test21685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21685");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        int int20 = dateTimeZone0.getOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) (short) 100);
        java.lang.String str25 = dateTimeZone0.getName(115200001L);
        java.util.TimeZone timeZone26 = dateTimeZone0.toTimeZone();
        java.lang.String str27 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test21686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21686");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        int int6 = dateTimeZone1.getStandardOffset((-3600001L));
        long long8 = dateTimeZone1.nextTransition(835200097L);
        java.lang.String str9 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 115200000 + "'", int6 == 115200000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 835200097L + "'", long8 == 835200097L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+32:00" + "'", str9, "+32:00");
    }

    @Test
    public void test21687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21687");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long13 = dateTimeZone0.convertUTCToLocal((-115199990L));
        int int15 = dateTimeZone0.getOffsetFromLocal(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getName((-10200000L), locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone19.getShortName((long) 115200000, locale21);
        boolean boolean23 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.previousTransition((long) (short) 10);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone19.getShortName(356460000L, locale27);
        int int30 = dateTimeZone19.getStandardOffset((long) '#');
        int int32 = dateTimeZone19.getStandardOffset((-115199900L));
        long long34 = dateTimeZone19.previousTransition((long) ' ');
        boolean boolean35 = dateTimeZone19.isFixed();
        long long39 = dateTimeZone19.convertLocalToUTC(355800000L, false, (-71999965L));
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) long39);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone0.isLocalDateTimeGap(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-115199990L) + "'", long13 == (-115199990L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 355800000L + "'", long39 == 355800000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21688");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        java.lang.String str7 = dateTimeZone3.getName((long) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getShortName((long) (short) 1, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone3.isLocalDateTimeGap(localDateTime11);
        long long15 = dateTimeZone3.adjustOffset((long) (short) 1, false);
        long long17 = dateTimeZone3.convertUTCToLocal(14820000L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone3.getShortName(247920000L, locale19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone3.getName(0L, locale22);
        java.lang.String str24 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 14820000L + "'", long17 == 14820000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test21689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21689");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition((long) 115200000);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) 'a');
        java.lang.String str9 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone0.getShortName((-56100001L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        long long22 = dateTimeZone15.nextTransition((-352799903L));
        long long24 = dateTimeZone15.previousTransition((-118860001L));
        boolean boolean25 = dateTimeZone0.equals((java.lang.Object) long24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone0.getOffset(readableInstant26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 115200000L + "'", long4 == 115200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-352799903L) + "'", long22 == (-352799903L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-118860001L) + "'", long24 == (-118860001L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test21690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21690");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.lang.String str5 = dateTimeZone0.getName((long) 0);
        java.lang.String str7 = dateTimeZone0.getShortName(9L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(0L, locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(359999999L);
        java.util.TimeZone timeZone15 = dateTimeZone12.toTimeZone();
        long long19 = dateTimeZone12.convertLocalToUTC((-7200000L), true, (long) 0);
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, (-719999900L));
        java.lang.String str22 = dateTimeZone0.toString();
        long long26 = dateTimeZone0.convertLocalToUTC(147479990L, true, 123960001L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone0.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 359999998L + "'", long14 == 359999998L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7199999L) + "'", long19 == (-7199999L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-719999899L) + "'", long21 == (-719999899L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 147479990L + "'", long26 == 147479990L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test21691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21691");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.previousTransition((long) (short) 10);
        int int8 = dateTimeZone0.getOffset((long) (short) 0);
        long long11 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        java.lang.String str13 = dateTimeZone0.getShortName(187200001L);
        long long16 = dateTimeZone0.convertLocalToUTC(3599935L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 359999999L + "'", long11 == 359999999L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3599935L + "'", long16 == 3599935L);
    }

    @Test
    public void test21692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21692");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName((long) (byte) 0, locale5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((-65L));
        int int11 = dateTimeZone0.getOffsetFromLocal(79199999L);
        long long14 = dateTimeZone0.convertLocalToUTC(32L, false);
        boolean boolean16 = dateTimeZone0.isStandardOffset((-76019965L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(120719990L, locale18);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21693");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long11 = dateTimeZone9.previousTransition((-1L));
        long long15 = dateTimeZone9.convertLocalToUTC(115200052L, false, (-181139900L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.lang.String str21 = dateTimeZone16.getShortName((long) (byte) 100);
        int int23 = dateTimeZone16.getStandardOffset(600000L);
        long long27 = dateTimeZone16.convertLocalToUTC((-2L), true, 0L);
        boolean boolean28 = dateTimeZone16.isFixed();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int32 = dateTimeZone30.getOffset(1L);
        long long34 = dateTimeZone30.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 100);
        boolean boolean39 = dateTimeZone16.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone16.getOffset(readableInstant40);
        boolean boolean42 = dateTimeZone9.equals((java.lang.Object) dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200052L + "'", long15 == 115200052L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2L) + "'", long27 == (-2L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 115200000 + "'", int32 == 115200000);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test21694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21694");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getNameKey(1L);
        int int19 = dateTimeZone12.getOffset((-1L));
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 110L);
        boolean boolean22 = dateTimeZone0.isFixed();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName(115200001L, locale24);
        java.lang.String str27 = dateTimeZone0.getNameKey((-124799903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 110L + "'", long21 == 110L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test21695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21695");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        long long6 = dateTimeZone1.convertLocalToUTC((-187859900L), true);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getShortName((long) (short) 10);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone13 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-547859900L) + "'", long6 == (-547859900L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+:0:00");
    }

    @Test
    public void test21696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21696");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        int int11 = dateTimeZone0.getStandardOffset((long) (byte) -1);
        int int13 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        long long15 = dateTimeZone0.convertUTCToLocal(824399997L);
        long long19 = dateTimeZone0.convertLocalToUTC(8640162L, true, 711300000L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone0.getOffset(readableInstant20);
        java.lang.String str23 = dateTimeZone0.getShortName((-141060009L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 824399997L + "'", long15 == 824399997L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 8640162L + "'", long19 == 8640162L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test21697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21697");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long9 = dateTimeZone1.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        long long13 = dateTimeZone11.previousTransition((long) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getName((long) (short) -1, locale15);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone11);
        java.lang.String str19 = dateTimeZone1.getShortName((-181139900L));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone1.getShortName(115200010L, locale21);
        long long26 = dateTimeZone1.convertLocalToUTC((-36059958L), false, 1860000L);
        java.lang.String str28 = dateTimeZone1.getNameKey(163920000L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone1.getShortName((-108L), locale30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 152L + "'", long9 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:00" + "'", str16, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.100" + "'", str19, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.100" + "'", str22, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-36060058L) + "'", long26 == (-36060058L));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.100" + "'", str31, "+00:00:00.100");
    }

    @Test
    public void test21698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getName((long) '#');
        long long17 = dateTimeZone0.convertLocalToUTC((long) 10, false);
        int int19 = dateTimeZone0.getOffset((-118799903L));
        java.lang.String str20 = dateTimeZone0.toString();
        int int22 = dateTimeZone0.getStandardOffset((-180479965L));
        java.lang.String str24 = dateTimeZone0.getNameKey(115200035L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test21699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21699");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        int int6 = dateTimeZone2.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        int int10 = dateTimeZone7.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone7.getShortName((-1L), locale12);
        int int15 = dateTimeZone7.getOffsetFromLocal(0L);
        long long17 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, (long) 115200000);
        java.lang.String str19 = dateTimeZone2.getShortName((long) '4');
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone2.getName((long) '4', locale21);
        long long25 = dateTimeZone2.convertLocalToUTC(0L, true);
        boolean boolean26 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        int int31 = dateTimeZone27.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone32.getShortName((-1L), locale37);
        int int40 = dateTimeZone32.getOffsetFromLocal(0L);
        long long42 = dateTimeZone27.getMillisKeepLocal(dateTimeZone32, (long) 115200000);
        boolean boolean44 = dateTimeZone27.isStandardOffset(115200000L);
        int int46 = dateTimeZone27.getOffsetFromLocal((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forID("+00:00:00.097");
        boolean boolean49 = dateTimeZone27.equals((java.lang.Object) "+00:00:00.097");
        boolean boolean50 = dateTimeZone2.equals((java.lang.Object) boolean49);
        boolean boolean51 = dateTimeZone1.equals((java.lang.Object) dateTimeZone2);
        long long55 = dateTimeZone2.convertLocalToUTC((-486599900L), false, (-68400001L));
        java.lang.String str56 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 115200000L + "'", long42 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-486599900L) + "'", long55 == (-486599900L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
    }

    @Test
    public void test21700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21700");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(111600000L, locale19);
        java.util.TimeZone timeZone21 = dateTimeZone0.toTimeZone();
        long long23 = dateTimeZone0.previousTransition(367200000L);
        java.lang.String str25 = dateTimeZone0.getName(3600090L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 367200000L + "'", long23 == 367200000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test21701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21701");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean6 = dateTimeZone5.isFixed();
        java.lang.String str8 = dateTimeZone5.getShortName(359999999L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str12 = dateTimeZone10.getName(10L);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone17.isLocalDateTimeGap(localDateTime18);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone17, (long) 97);
        long long23 = dateTimeZone10.convertUTCToLocal(125999999L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone10.getShortName(235200000L, locale25);
        java.util.TimeZone timeZone27 = dateTimeZone10.toTimeZone();
        boolean boolean28 = dateTimeZone5.equals((java.lang.Object) dateTimeZone10);
        java.util.TimeZone timeZone29 = dateTimeZone5.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-01:00" + "'", str12, "-01:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599903L) + "'", long21 == (-3599903L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 122399999L + "'", long23 == 122399999L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21702");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        long long10 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone0.previousTransition((long) (-1));
        int int16 = dateTimeZone0.getOffsetFromLocal(97L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        boolean boolean19 = dateTimeZone17.isFixed();
        long long23 = dateTimeZone17.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone17.getName((long) (-1), locale25);
        java.lang.String str27 = dateTimeZone17.getID();
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, 600000L);
        boolean boolean31 = dateTimeZone17.isStandardOffset((-187799900L));
        java.lang.String str33 = dateTimeZone17.getNameKey((long) 36000000);
        long long35 = dateTimeZone17.convertUTCToLocal((-82800009L));
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone17.getOffset(readableInstant36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 600000L + "'", long29 == 600000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-82800009L) + "'", long35 == (-82800009L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test21703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21703");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str23 = dateTimeZone10.getShortName((-417599900L));
        java.lang.String str24 = dateTimeZone10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test21704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long11 = dateTimeZone8.convertLocalToUTC(1L, true);
        boolean boolean13 = dateTimeZone8.isStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str17 = dateTimeZone15.getShortName((long) 'a');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getShortName((long) (short) -1, locale19);
        int int22 = dateTimeZone15.getOffset((long) 115200000);
        int int24 = dateTimeZone15.getStandardOffset((long) (short) 10);
        int int26 = dateTimeZone15.getStandardOffset((-1L));
        java.lang.String str28 = dateTimeZone15.getName((long) (byte) 10);
        java.lang.String str30 = dateTimeZone15.getShortName(0L);
        long long32 = dateTimeZone15.nextTransition(115200097L);
        boolean boolean33 = dateTimeZone8.equals((java.lang.Object) long32);
        long long36 = dateTimeZone8.adjustOffset((-115200001L), false);
        int int38 = dateTimeZone8.getStandardOffset(118800001L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone8.getShortName(356399932L, locale40);
        java.lang.String str43 = dateTimeZone8.getNameKey((-187199968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+32:00" + "'", str17, "+32:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 115200000 + "'", int22 == 115200000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 115200000 + "'", int24 == 115200000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 115200000 + "'", int26 == 115200000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+32:00" + "'", str28, "+32:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+32:00" + "'", str30, "+32:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 115200097L + "'", long32 == 115200097L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-115200001L) + "'", long36 == (-115200001L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
    }

    @Test
    public void test21705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21705");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        int int14 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone15.isLocalDateTimeGap(localDateTime17);
        long long21 = dateTimeZone15.convertLocalToUTC((long) 100, false);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) 360000000);
        long long25 = dateTimeZone15.previousTransition((-359999990L));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone15.getName(265800032L, locale27);
        int int30 = dateTimeZone15.getStandardOffset((-118860001L));
        long long34 = dateTimeZone15.convertLocalToUTC(0L, true, (-115199958L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360000000L + "'", long23 == 360000000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-359999990L) + "'", long25 == (-359999990L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test21706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21706");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.convertUTCToLocal(3600052L);
        int int7 = dateTimeZone1.getStandardOffset((-367200000L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forID("UTC");
        long long12 = dateTimeZone9.adjustOffset((long) (byte) 0, false);
        int int14 = dateTimeZone9.getOffsetFromLocal(111600000L);
        long long17 = dateTimeZone9.adjustOffset(0L, false);
        int int19 = dateTimeZone9.getStandardOffset(10800032L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str22 = dateTimeZone21.getID();
        java.lang.String str24 = dateTimeZone21.getShortName((long) (short) 10);
        java.lang.String str26 = dateTimeZone21.getName(97L);
        int int28 = dateTimeZone21.getOffset(0L);
        int int30 = dateTimeZone21.getOffsetFromLocal(590399997L);
        long long32 = dateTimeZone9.getMillisKeepLocal(dateTimeZone21, 362100000L);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone21, 391800032L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3600052L + "'", long5 == 3600052L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 362100000L + "'", long32 == 362100000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 391800032L + "'", long34 == 391800032L);
    }

    @Test
    public void test21707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21707");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        java.lang.String str11 = dateTimeZone0.getName((-11L));
        int int13 = dateTimeZone0.getOffsetFromLocal(9L);
        java.lang.String str14 = dateTimeZone0.getID();
        java.lang.Class<?> wildcardClass15 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test21708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21708");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        long long26 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        java.lang.String str29 = dateTimeZone8.getName(0L);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone8.isLocalDateTimeGap(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21709");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.097");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.lang.String str7 = dateTimeZone2.getNameKey(1L);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) dateTimeZone11);
        java.lang.String str13 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        boolean boolean16 = dateTimeZone14.isFixed();
        long long20 = dateTimeZone14.convertLocalToUTC(1L, true, (long) (byte) 10);
        long long24 = dateTimeZone14.convertLocalToUTC((long) 115200000, false, (long) 10);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone14.isLocalDateTimeGap(localDateTime25);
        long long28 = dateTimeZone14.previousTransition((long) (-1));
        int int30 = dateTimeZone14.getOffsetFromLocal(97L);
        int int32 = dateTimeZone14.getStandardOffset(10L);
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) dateTimeZone14);
        java.util.TimeZone timeZone34 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.097' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.097" + "'", str13, "+00:00:00.097");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200000L + "'", long24 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test21710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21710");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long6 = dateTimeZone1.convertUTCToLocal((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone1.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone9.getOffset(readableInstant10);
        int int13 = dateTimeZone9.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        int int17 = dateTimeZone14.getStandardOffset(0L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone14.getShortName((-1L), locale19);
        int int22 = dateTimeZone14.getOffsetFromLocal(0L);
        long long24 = dateTimeZone9.getMillisKeepLocal(dateTimeZone14, (long) 115200000);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone14.getName(0L, locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        long long36 = dateTimeZone34.convertUTCToLocal(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone34.getName(0L, locale38);
        long long41 = dateTimeZone14.getMillisKeepLocal(dateTimeZone34, (-359999900L));
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) dateTimeZone14);
        java.lang.String str43 = dateTimeZone1.toString();
        long long47 = dateTimeZone1.convertLocalToUTC(71999913L, true, (-363659965L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 115200100L + "'", long6 == 115200100L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200000L + "'", long24 == 115200000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-359999900L) + "'", long41 == (-359999900L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+32:00" + "'", str43, "+32:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-43200087L) + "'", long47 == (-43200087L));
    }

    @Test
    public void test21711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21711");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        long long23 = dateTimeZone20.adjustOffset((-3600000L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean25 = dateTimeZone20.isFixed();
        java.lang.String str27 = dateTimeZone20.getName(0L);
        java.lang.String str28 = dateTimeZone20.toString();
        long long32 = dateTimeZone20.convertLocalToUTC((-53999989L), false, 244800097L);
        java.lang.String str33 = dateTimeZone20.getID();
        boolean boolean35 = dateTimeZone20.equals((java.lang.Object) (-835259965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3600000L) + "'", long23 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-53999989L) + "'", long32 == (-53999989L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21712");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        long long7 = dateTimeZone0.convertUTCToLocal((long) (-1));
        java.lang.String str8 = dateTimeZone0.toString();
        int int10 = dateTimeZone0.getOffsetFromLocal(221280010L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone12.getShortName(126060000L, locale18);
        long long21 = dateTimeZone12.convertUTCToLocal(360000100L);
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 152L);
        boolean boolean25 = dateTimeZone0.equals((java.lang.Object) 429899999L);
        int int27 = dateTimeZone0.getStandardOffset((-235739990L));
        long long31 = dateTimeZone0.convertLocalToUTC(115200052L, false, 152880032L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        int int35 = dateTimeZone32.getStandardOffset(0L);
        java.lang.String str37 = dateTimeZone32.getShortName((long) (byte) 100);
        java.lang.String str39 = dateTimeZone32.getShortName((long) (short) 0);
        java.lang.String str41 = dateTimeZone32.getShortName(0L);
        long long43 = dateTimeZone32.previousTransition(100L);
        long long46 = dateTimeZone32.convertLocalToUTC(97L, true);
        java.lang.String str48 = dateTimeZone32.getName(235920010L);
        long long50 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, (-779279900L));
        long long52 = dateTimeZone32.previousTransition(356399932L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 360000100L + "'", long21 == 360000100L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 152L + "'", long23 == 152L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 115200052L + "'", long31 == 115200052L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 97L + "'", long46 == 97L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-779279900L) + "'", long50 == (-779279900L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 356399932L + "'", long52 == 356399932L);
    }

    @Test
    public void test21713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21713");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone5.getName((long) 4200000, locale7);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test21714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        long long8 = dateTimeZone0.convertLocalToUTC(1L, false);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName((long) 115200000, locale11);
        boolean boolean13 = dateTimeZone9.isFixed();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone9.getName(52L, locale15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getName((long) (byte) -1, locale18);
        int int21 = dateTimeZone9.getOffset((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone9.isLocalDateTimeGap(localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone9.getOffset(readableInstant24);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (-115199990L));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        boolean boolean30 = dateTimeZone28.isFixed();
        int int32 = dateTimeZone28.getOffsetFromLocal((long) 1);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone28.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        boolean boolean36 = dateTimeZone35.isFixed();
        int int38 = dateTimeZone35.getStandardOffset(0L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone35.getShortName((-1L), locale40);
        int int43 = dateTimeZone35.getOffsetFromLocal(0L);
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) dateTimeZone35);
        long long47 = dateTimeZone35.adjustOffset((long) 127920000, true);
        long long49 = dateTimeZone35.previousTransition(118799999L);
        int int51 = dateTimeZone35.getStandardOffset(115200052L);
        java.lang.String str53 = dateTimeZone35.getName((-590399965L));
        long long55 = dateTimeZone9.getMillisKeepLocal(dateTimeZone35, 36600001L);
        java.lang.String str56 = dateTimeZone9.toString();
        boolean boolean57 = dateTimeZone9.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-115199990L) + "'", long27 == (-115199990L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 127920000L + "'", long47 == 127920000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 118799999L + "'", long49 == 118799999L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 36600001L + "'", long55 == 36600001L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test21715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21715");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        int int5 = dateTimeZone0.getStandardOffset(111600000L);
        java.lang.String str7 = dateTimeZone0.getName(115199991L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        long long14 = dateTimeZone0.adjustOffset((-277200096L), false);
        int int16 = dateTimeZone0.getStandardOffset(351120010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-277200096L) + "'", long14 == (-277200096L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test21716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21716");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        int int7 = dateTimeZone0.getOffset((-1L));
        java.lang.String str8 = dateTimeZone0.toString();
        int int10 = dateTimeZone0.getOffset(1L);
        java.lang.String str11 = dateTimeZone0.getID();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName((-115200022L), locale13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
    }

    @Test
    public void test21717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21717");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str3 = dateTimeZone0.getID();
        java.lang.String str4 = dateTimeZone0.getID();
        java.lang.String str6 = dateTimeZone0.getNameKey(360000032L);
        java.lang.String str8 = dateTimeZone0.getNameKey(442260000L);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        long long11 = dateTimeZone0.previousTransition((-7200000L));
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.lang.String str15 = dateTimeZone0.getShortName(10860132L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName((-115200166L), locale17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7200000L) + "'", long11 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test21719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21719");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone0.convertUTCToLocal(115199991L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long11 = dateTimeZone0.adjustOffset((-12L), true);
        long long13 = dateTimeZone0.convertUTCToLocal((-119400011L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115199991L + "'", long7 == 115199991L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-12L) + "'", long11 == (-12L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-119400011L) + "'", long13 == (-119400011L));
    }

    @Test
    public void test21720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        long long19 = dateTimeZone12.convertUTCToLocal((-3600000L));
        boolean boolean21 = dateTimeZone12.isStandardOffset(108480000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        long long26 = dateTimeZone12.convertLocalToUTC(71399904L, false, 289920032L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7200000L) + "'", long19 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 74999904L + "'", long26 == 74999904L);
    }

    @Test
    public void test21721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21721");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        long long16 = dateTimeZone0.convertUTCToLocal((-243120001L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone0.getOffset(readableInstant17);
        java.lang.String str19 = dateTimeZone0.toString();
        java.lang.String str21 = dateTimeZone0.getNameKey(360000000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-243120001L) + "'", long16 == (-243120001L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test21722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21722");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.100");
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.Class<?> wildcardClass3 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.100" + "'", str2, "+00:00:00.100");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test21723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21723");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone2.equals(obj10);
        long long13 = dateTimeZone2.previousTransition((long) 127920000);
        java.lang.String str14 = dateTimeZone2.getID();
        java.lang.String str16 = dateTimeZone2.getNameKey((-318480000L));
        long long19 = dateTimeZone2.convertLocalToUTC(302399904L, false);
        boolean boolean21 = dateTimeZone2.isStandardOffset((-1739803L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 127920000L + "'", long13 == 127920000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+52:00" + "'", str14, "+52:00");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 115199904L + "'", long19 == 115199904L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test21724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21724");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:52");
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone1.getOffset(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        java.lang.String str13 = dateTimeZone5.getShortName(1L);
        java.lang.String str14 = dateTimeZone5.getID();
        long long17 = dateTimeZone5.convertLocalToUTC(359999999L, true);
        long long21 = dateTimeZone5.convertLocalToUTC(10L, true, (long) 10);
        long long23 = dateTimeZone5.previousTransition(32L);
        long long25 = dateTimeZone1.getMillisKeepLocal(dateTimeZone5, (long) 187200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int28 = dateTimeZone5.getOffsetFromLocal(187200000L);
        java.lang.String str30 = dateTimeZone5.getShortName((-198839900L));
        java.lang.String str32 = dateTimeZone5.getShortName(115199998L);
        long long35 = dateTimeZone5.adjustOffset(79200010L, false);
        boolean boolean37 = dateTimeZone5.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:52" + "'", str2, "+10:52");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39120000 + "'", int4 == 39120000);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 359999999L + "'", long17 == 359999999L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 226320000L + "'", long25 == 226320000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 79200010L + "'", long35 == 79200010L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test21725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21725");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone6.getOffset(readableInstant7);
        int int10 = dateTimeZone6.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getShortName((-1L), locale16);
        int int19 = dateTimeZone11.getOffsetFromLocal(0L);
        long long21 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (long) 115200000);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone6.getShortName((long) (short) 0, locale23);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone6.isLocalDateTimeGap(localDateTime25);
        long long30 = dateTimeZone6.convertLocalToUTC(152L, true, 234000010L);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) (byte) 0);
        java.lang.String str34 = dateTimeZone6.getName((-3599903L));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long40 = dateTimeZone6.getMillisKeepLocal(dateTimeZone38, (-5520000L));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone42.getShortName((long) 'a', locale44);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone42.getName((long) (short) 0, locale47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone50.isLocalDateTimeGap(localDateTime51);
        long long54 = dateTimeZone50.nextTransition(151200000L);
        long long57 = dateTimeZone50.convertLocalToUTC(187200001L, true);
        long long59 = dateTimeZone42.getMillisKeepLocal(dateTimeZone50, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forID("UTC");
        int int64 = dateTimeZone62.getStandardOffset(0L);
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone62.getShortName((long) (byte) 0, locale66);
        long long69 = dateTimeZone62.nextTransition((long) (byte) -1);
        long long71 = dateTimeZone62.convertUTCToLocal((long) (byte) 10);
        int int73 = dateTimeZone62.getStandardOffset(0L);
        java.util.TimeZone timeZone74 = dateTimeZone62.toTimeZone();
        long long76 = dateTimeZone50.getMillisKeepLocal(dateTimeZone62, (-3599903L));
        int int78 = dateTimeZone62.getOffset(115199991L);
        long long80 = dateTimeZone38.getMillisKeepLocal(dateTimeZone62, 154320052L);
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeZone62.getShortName(7200000L, locale82);
        java.lang.String str85 = dateTimeZone62.getName((-715980000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200000L + "'", long21 == 115200000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 152L + "'", long30 == 152L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-5520000L) + "'", long40 == (-5520000L));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:00" + "'", str45, "+100:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+100:00" + "'", str48, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 151200000L + "'", long54 == 151200000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 187199991L + "'", long57 == 187199991L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 359999991L + "'", long59 == 359999991L);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-3599893L) + "'", long76 == (-3599893L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 154320052L + "'", long80 == 154320052L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
    }

    @Test
    public void test21726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21726");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getNameKey(345600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test21727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21727");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(129660000L);
        int int5 = dateTimeZone1.getOffset((-1L));
        long long7 = dateTimeZone1.convertUTCToLocal(97L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName((-662399965L), locale9);
        java.lang.String str12 = dateTimeZone1.getNameKey((long) 100);
        java.util.TimeZone timeZone13 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        long long17 = dateTimeZone15.previousTransition(148139999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 115200000 + "'", int5 == 115200000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115200097L + "'", long7 == 115200097L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 148139999L + "'", long17 == 148139999L);
    }

    @Test
    public void test21728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21728");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str4 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.tz.Provider provider5 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider5);
        org.joda.time.DateTimeZone.setProvider(provider5);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) provider5);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forID("UTC");
        int int14 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 0, locale16);
        int int19 = dateTimeZone12.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone23.getName((long) ' ', locale25);
        boolean boolean27 = dateTimeZone21.equals((java.lang.Object) dateTimeZone23);
        boolean boolean28 = dateTimeZone12.equals((java.lang.Object) dateTimeZone23);
        long long30 = dateTimeZone12.nextTransition(100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int33 = dateTimeZone12.getOffset(162000000L);
        boolean boolean34 = dateTimeZone0.equals((java.lang.Object) int33);
        java.lang.String str35 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone0.getOffset(readableInstant36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(provider5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-01:00" + "'", str26, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test21729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21729");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str22 = dateTimeZone12.toString();
        java.util.TimeZone timeZone23 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test21730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21730");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        long long10 = dateTimeZone0.convertUTCToLocal((long) 0);
        java.lang.String str11 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        long long17 = dateTimeZone13.adjustOffset(0L, true);
        boolean boolean18 = dateTimeZone13.isFixed();
        int int20 = dateTimeZone13.getStandardOffset((-232079900L));
        long long22 = dateTimeZone13.convertUTCToLocal(707580000L);
        long long25 = dateTimeZone13.convertLocalToUTC(234000010L, false);
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long30 = dateTimeZone28.previousTransition((long) (byte) -1);
        long long33 = dateTimeZone28.convertLocalToUTC(52L, false);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone28.getShortName((-115200000L), locale35);
        java.lang.String str38 = dateTimeZone28.getShortName((-187859900L));
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone28, 109920000L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone44 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        boolean boolean47 = dateTimeZone46.isFixed();
        long long49 = dateTimeZone46.previousTransition(0L);
        long long52 = dateTimeZone46.adjustOffset(356460000L, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone55.getShortName((long) 'a', locale57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone55.getName((long) (short) 0, locale60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone63.isLocalDateTimeGap(localDateTime64);
        long long67 = dateTimeZone63.nextTransition(151200000L);
        long long70 = dateTimeZone63.convertLocalToUTC(187200001L, true);
        long long72 = dateTimeZone55.getMillisKeepLocal(dateTimeZone63, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.lang.String str75 = dateTimeZone63.getShortName((long) (byte) 100);
        java.lang.String str76 = dateTimeZone63.getID();
        long long78 = dateTimeZone46.getMillisKeepLocal(dateTimeZone63, 230400097L);
        long long80 = dateTimeZone0.getMillisKeepLocal(dateTimeZone63, 118799999L);
        int int82 = dateTimeZone0.getStandardOffset((-187799968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 707580010L + "'", long22 == 707580010L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 234000000L + "'", long25 == 234000000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 109920000L + "'", long40 == 109920000L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 356460000L + "'", long52 == 356460000L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:00" + "'", str58, "+100:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+100:00" + "'", str61, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 151200000L + "'", long67 == 151200000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 187199991L + "'", long70 == 187199991L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 359999991L + "'", long72 == 359999991L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.010" + "'", str76, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 230400087L + "'", long78 == 230400087L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 118799989L + "'", long80 == 118799989L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test21731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone9.nextTransition(151200000L);
        long long16 = dateTimeZone9.convertLocalToUTC(187200001L, true);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("UTC");
        int int23 = dateTimeZone21.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 0, locale25);
        long long28 = dateTimeZone21.nextTransition((long) (byte) -1);
        long long30 = dateTimeZone21.convertUTCToLocal((long) (byte) 10);
        int int32 = dateTimeZone21.getStandardOffset(0L);
        java.util.TimeZone timeZone33 = dateTimeZone21.toTimeZone();
        long long35 = dateTimeZone9.getMillisKeepLocal(dateTimeZone21, (-3599903L));
        long long39 = dateTimeZone9.convertLocalToUTC(363600000L, false, (long) 36600000);
        boolean boolean40 = dateTimeZone9.isFixed();
        java.lang.String str42 = dateTimeZone9.getName(89399999L);
        java.util.TimeZone timeZone43 = dateTimeZone9.toTimeZone();
        boolean boolean44 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int48 = dateTimeZone46.getOffset(129660000L);
        int int50 = dateTimeZone46.getOffset((-1L));
        boolean boolean51 = dateTimeZone46.isFixed();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean53 = dateTimeZone52.isFixed();
        int int55 = dateTimeZone52.getStandardOffset(0L);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone52.getShortName((-1L), locale57);
        int int60 = dateTimeZone52.getOffsetFromLocal(0L);
        java.lang.String str62 = dateTimeZone52.getShortName(0L);
        long long66 = dateTimeZone52.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long69 = dateTimeZone52.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str70 = dateTimeZone52.getID();
        java.lang.String str71 = dateTimeZone52.toString();
        long long74 = dateTimeZone52.adjustOffset((long) (byte) 1, false);
        int int76 = dateTimeZone52.getOffsetFromLocal((-115199990L));
        boolean boolean77 = dateTimeZone46.equals((java.lang.Object) (-115199990L));
        java.lang.String str79 = dateTimeZone46.getShortName((-11280100L));
        boolean boolean80 = dateTimeZone9.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.ReadableInstant readableInstant81 = null;
        int int82 = dateTimeZone46.getOffset(readableInstant81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 151200000L + "'", long13 == 151200000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187199991L + "'", long16 == 187199991L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999991L + "'", long18 == 359999991L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599893L) + "'", long35 == (-3599893L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 363599990L + "'", long39 == 363599990L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 115200000 + "'", int48 == 115200000);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 115200000 + "'", int50 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10L + "'", long69 == 10L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTC" + "'", str71, "UTC");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+32:00" + "'", str79, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 115200000 + "'", int82 == 115200000);
    }

    @Test
    public void test21732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21732");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (byte) -1);
        java.lang.String str12 = dateTimeZone0.getShortName((long) (byte) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) ' ', true);
        java.lang.String str17 = dateTimeZone0.getShortName((long) (-1));
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(707580000L, locale19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getShortName((-53999989L), locale22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test21733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21733");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getShortName((long) (short) 0, locale40);
        long long43 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) ' ');
        long long45 = dateTimeZone4.previousTransition(0L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = dateTimeZone4.getOffset(readableInstant46);
        int int49 = dateTimeZone4.getOffsetFromLocal(122460000L);
        long long51 = dateTimeZone4.nextTransition((long) 127920000);
        java.lang.String str53 = dateTimeZone4.getShortName((long) (-3600000));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.tz.Provider provider55 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        boolean boolean68 = dateTimeZone4.equals((java.lang.Object) provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.joda.time.DateTimeZone.setProvider(provider55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 127920000L + "'", long51 == 127920000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test21734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21734");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 10L);
        java.lang.String str23 = dateTimeZone0.getNameKey((long) 600000);
        boolean boolean24 = dateTimeZone0.isFixed();
        long long26 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        boolean boolean27 = dateTimeZone0.isFixed();
        java.lang.String str29 = dateTimeZone0.getShortName((-302999900L));
        boolean boolean31 = dateTimeZone0.isStandardOffset(187200001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test21735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21735");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        long long11 = dateTimeZone0.convertLocalToUTC(115200000L, true, 1L);
        long long14 = dateTimeZone0.adjustOffset(118799999L, true);
        java.lang.String str15 = dateTimeZone0.getID();
        int int17 = dateTimeZone0.getStandardOffset((long) 1);
        java.lang.String str19 = dateTimeZone0.getName((-1L));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone20.getShortName((-1L), locale25);
        int int28 = dateTimeZone20.getOffsetFromLocal(0L);
        int int30 = dateTimeZone20.getStandardOffset((long) (byte) 10);
        java.lang.String str32 = dateTimeZone20.getName((long) (byte) 10);
        java.lang.String str34 = dateTimeZone20.getName((long) '#');
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone20.getShortName(97L, locale36);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone20.getName(10L, locale39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone20.getOffset(readableInstant41);
        long long44 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, 12720000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 118799999L + "'", long14 == 118799999L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 12720000L + "'", long44 == 12720000L);
    }

    @Test
    public void test21736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21736");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long10 = dateTimeZone7.adjustOffset((-359999900L), true);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone11.adjustOffset((long) (short) 10, true);
        long long16 = dateTimeZone11.nextTransition((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forID("+01:00");
        boolean boolean19 = dateTimeZone11.equals((java.lang.Object) "+01:00");
        long long21 = dateTimeZone7.getMillisKeepLocal(dateTimeZone11, (-3599903L));
        long long24 = dateTimeZone7.convertLocalToUTC((-59965L), false);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone25.getShortName((-1L), locale30);
        java.lang.String str33 = dateTimeZone25.getShortName(1L);
        long long35 = dateTimeZone25.nextTransition((long) 0);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean41 = dateTimeZone25.equals((java.lang.Object) '#');
        long long43 = dateTimeZone25.convertUTCToLocal((-3600000L));
        java.lang.String str45 = dateTimeZone25.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        boolean boolean47 = dateTimeZone46.isFixed();
        int int49 = dateTimeZone46.getStandardOffset(0L);
        java.util.Locale locale51 = null;
        java.lang.String str52 = dateTimeZone46.getShortName((-1L), locale51);
        int int54 = dateTimeZone46.getOffsetFromLocal(0L);
        int int56 = dateTimeZone46.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        int int59 = dateTimeZone46.getOffset((long) (short) 0);
        long long62 = dateTimeZone46.adjustOffset((-115199948L), false);
        boolean boolean64 = dateTimeZone46.isStandardOffset((-181139900L));
        long long66 = dateTimeZone25.getMillisKeepLocal(dateTimeZone46, 366720000L);
        long long68 = dateTimeZone7.getMillisKeepLocal(dateTimeZone25, 239520110L);
        long long70 = dateTimeZone7.convertUTCToLocal(129600011L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-359999900L) + "'", long10 == (-359999900L));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599903L) + "'", long21 == (-3599903L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-59965L) + "'", long24 == (-59965L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3600000L) + "'", long43 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-115199948L) + "'", long62 == (-115199948L));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 366720000L + "'", long66 == 366720000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 239520110L + "'", long68 == 239520110L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 129600011L + "'", long70 == 129600011L);
    }

    @Test
    public void test21737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21737");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str8 = dateTimeZone6.getNameKey((long) (short) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone11.getShortName((-1L), locale16);
        java.lang.String str19 = dateTimeZone11.getShortName(1L);
        long long21 = dateTimeZone6.getMillisKeepLocal(dateTimeZone11, (long) (-1));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone6.getName(0L, locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        int int29 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (long) 115200000);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone25.getShortName((long) (short) 0, locale42);
        long long45 = dateTimeZone6.getMillisKeepLocal(dateTimeZone25, (long) ' ');
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone25, (long) 115200000);
        boolean boolean48 = dateTimeZone25.isFixed();
        boolean boolean49 = dateTimeZone25.isFixed();
        java.util.TimeZone timeZone50 = dateTimeZone25.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 151200000L + "'", long47 == 151200000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21738");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) 100, false);
        java.lang.String str11 = dateTimeZone0.getName(360060000L);
        long long13 = dateTimeZone0.convertUTCToLocal(127920010L);
        java.lang.String str15 = dateTimeZone0.getShortName((-118800000L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.convertUTCToLocal((long) (byte) 0);
        int int20 = dateTimeZone16.getOffsetFromLocal((long) (-1));
        long long23 = dateTimeZone16.adjustOffset((long) ' ', true);
        java.lang.String str24 = dateTimeZone16.getID();
        java.lang.String str25 = dateTimeZone16.getID();
        boolean boolean27 = dateTimeZone16.isStandardOffset((long) 187200000);
        long long29 = dateTimeZone16.convertUTCToLocal((long) (-3600000));
        java.lang.String str30 = dateTimeZone16.toString();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone16.isLocalDateTimeGap(localDateTime31);
        long long35 = dateTimeZone16.adjustOffset(0L, false);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, 707580000L);
        boolean boolean38 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', 0);
        long long44 = dateTimeZone41.adjustOffset(32L, true);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone41.getName(115200010L, locale46);
        boolean boolean48 = dateTimeZone0.equals((java.lang.Object) str47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = dateTimeZone0.getOffset(readableInstant49);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone0.getName((-241199968L), locale52);
        long long56 = dateTimeZone0.adjustOffset(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 127920010L + "'", long13 == 127920010L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-3600000L) + "'", long29 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 707580000L + "'", long37 == 707580000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+97:00" + "'", str47, "+97:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test21739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.previousTransition(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long12 = dateTimeZone0.convertLocalToUTC((-3599903L), false);
        boolean boolean14 = dateTimeZone0.isStandardOffset(0L);
        java.lang.String str16 = dateTimeZone0.getName((-5700000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599903L) + "'", long12 == (-3599903L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test21740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21740");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        long long9 = dateTimeZone1.adjustOffset((long) (-1), true);
        java.lang.String str11 = dateTimeZone1.getName(0L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone12.getOffset(readableInstant13);
        int int16 = dateTimeZone12.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone17.isFixed();
        int int20 = dateTimeZone17.getStandardOffset(0L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone17.getShortName((-1L), locale22);
        int int25 = dateTimeZone17.getOffsetFromLocal(0L);
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone17, (long) 115200000);
        int int29 = dateTimeZone17.getOffset((long) '4');
        int int31 = dateTimeZone17.getOffsetFromLocal(100L);
        long long33 = dateTimeZone17.previousTransition(1L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        int int37 = dateTimeZone34.getStandardOffset(0L);
        java.lang.String str39 = dateTimeZone34.getNameKey(1L);
        java.lang.String str41 = dateTimeZone34.getShortName((long) 100);
        int int43 = dateTimeZone34.getStandardOffset(0L);
        long long45 = dateTimeZone17.getMillisKeepLocal(dateTimeZone34, 360000000L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        int int47 = dateTimeZone17.getOffset(readableInstant46);
        java.util.TimeZone timeZone48 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        java.lang.String str50 = dateTimeZone49.toString();
        boolean boolean51 = dateTimeZone49.isFixed();
        long long53 = dateTimeZone1.getMillisKeepLocal(dateTimeZone49, 351300000L);
        java.lang.String str55 = dateTimeZone1.getShortName((-319919990L));
        boolean boolean56 = dateTimeZone1.isFixed();
        int int58 = dateTimeZone1.getOffset(840300152L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 360000000L + "'", long45 == 360000000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 351300000L + "'", long53 == 351300000L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test21741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone9 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (short) 10);
        java.lang.String str14 = dateTimeZone10.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        java.lang.String str23 = dateTimeZone15.getShortName(1L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) (-1));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone10.getName(0L, locale27);
        long long30 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, 1L);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone10.getName((long) '4', locale32);
        boolean boolean34 = dateTimeZone10.isFixed();
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone10.getOffset(readableInstant35);
        java.lang.String str37 = dateTimeZone10.toString();
        int int39 = dateTimeZone10.getStandardOffset(475200100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test21742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21742");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:01");
        int int3 = dateTimeZone1.getOffset(600000L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str7 = dateTimeZone5.getName(10L);
        java.lang.String str8 = dateTimeZone5.toString();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getName((long) '4', locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal((long) 'a');
        java.lang.String str14 = dateTimeZone5.getID();
        java.lang.String str15 = dateTimeZone5.getID();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone5.getName(359999999L, locale17);
        java.lang.String str20 = dateTimeZone5.getShortName((-360000001L));
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone5, 360060000L);
        java.lang.String str23 = dateTimeZone5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3660000 + "'", int3 == 3660000);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:00" + "'", str8, "-01:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 367320000L + "'", long22 == 367320000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:00" + "'", str23, "-01:00");
    }

    @Test
    public void test21743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21743");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.convertUTCToLocal(32L);
        java.lang.String str5 = dateTimeZone1.getName((long) 349200000);
        int int7 = dateTimeZone1.getStandardOffset(152L);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) (short) 100);
        java.lang.String str11 = dateTimeZone1.getShortName(187200100L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        long long15 = dateTimeZone1.convertUTCToLocal(383880000L);
        int int17 = dateTimeZone1.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int22 = dateTimeZone20.getStandardOffset((long) (short) 10);
        java.lang.String str24 = dateTimeZone20.getShortName(10L);
        long long28 = dateTimeZone20.convertLocalToUTC(118799999L, true, (long) (short) 0);
        boolean boolean30 = dateTimeZone20.equals((java.lang.Object) 0.0d);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone20.getName(122460000L, locale32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone20.getName((-356400000L), locale35);
        long long39 = dateTimeZone20.adjustOffset((long) (byte) -1, true);
        boolean boolean40 = dateTimeZone20.isFixed();
        boolean boolean41 = dateTimeZone1.equals((java.lang.Object) boolean40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3600032L + "'", long3 == 3600032L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:00" + "'", str5, "+01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3600000 + "'", int7 == 3600000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3600000 + "'", int9 == 3600000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+01:00" + "'", str11, "+01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600000 + "'", int13 == 3600000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 387480000L + "'", long15 == 387480000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3600000 + "'", int17 == 3600000);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 126060000 + "'", int22 == 126060000);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+35:01" + "'", str24, "+35:01");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-7260001L) + "'", long28 == (-7260001L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+35:01" + "'", str33, "+35:01");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+35:01" + "'", str36, "+35:01");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test21744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21744");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        long long23 = dateTimeZone0.convertLocalToUTC(115200100L, false);
        long long26 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        java.lang.String str28 = dateTimeZone0.getNameKey(127920000L);
        long long32 = dateTimeZone0.convertLocalToUTC((long) 349800000, false, 356400032L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str35 = dateTimeZone34.getID();
        java.lang.String str37 = dateTimeZone34.getShortName((long) (short) 10);
        java.lang.String str39 = dateTimeZone34.getName(97L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        long long42 = dateTimeZone34.previousTransition((-302999900L));
        long long44 = dateTimeZone34.convertUTCToLocal((-7200000L));
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone34.getName(0L, locale46);
        long long49 = dateTimeZone0.getMillisKeepLocal(dateTimeZone34, 478800097L);
        boolean boolean51 = dateTimeZone34.isStandardOffset(8640163L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200100L + "'", long23 == 115200100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 359999999L + "'", long26 == 359999999L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 349800000L + "'", long32 == 349800000L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-302999900L) + "'", long42 == (-302999900L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-7200000L) + "'", long44 == (-7200000L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 478800097L + "'", long49 == 478800097L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test21745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.previousTransition(115200000L);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone13.getShortName((long) 'a', locale15);
        long long19 = dateTimeZone13.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        boolean boolean22 = dateTimeZone13.equals((java.lang.Object) dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getName(1L);
        java.lang.String str25 = dateTimeZone20.toString();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone20.getName((-43199999L), locale27);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, 356399932L);
        int int32 = dateTimeZone20.getStandardOffset(208860010L);
        long long35 = dateTimeZone20.adjustOffset((-111599910L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:00" + "'", str16, "+100:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 356399932L + "'", long30 == 356399932L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-111599910L) + "'", long35 == (-111599910L));
    }

    @Test
    public void test21746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21746");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:01");
        int int3 = dateTimeZone1.getOffsetFromLocal(391800032L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.previousTransition((long) 39120000);
        boolean boolean8 = dateTimeZone1.isStandardOffset(431999999L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36060000 + "'", int3 == 36060000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:01");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 39120000L + "'", long6 == 39120000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test21747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21747");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str7 = dateTimeZone0.getName((long) (byte) 100);
        int int9 = dateTimeZone0.getOffsetFromLocal(360000097L);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getName((long) 60000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test21748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21748");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        java.lang.String str7 = dateTimeZone3.getName((long) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getShortName((long) (short) 1, locale9);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        boolean boolean12 = dateTimeZone3.isFixed();
        boolean boolean13 = dateTimeZone3.isFixed();
        int int15 = dateTimeZone3.getOffsetFromLocal((-428460109L));
        int int17 = dateTimeZone3.getOffset(1860197L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        java.lang.String str28 = dateTimeZone18.getShortName(0L);
        long long32 = dateTimeZone18.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long35 = dateTimeZone18.convertLocalToUTC((long) (short) 10, true);
        long long39 = dateTimeZone18.convertLocalToUTC(475200097L, true, 127920097L);
        long long41 = dateTimeZone18.nextTransition((-118799913L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long44 = dateTimeZone3.getMillisKeepLocal(dateTimeZone18, 244799891L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 475200097L + "'", long39 == 475200097L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-118799913L) + "'", long41 == (-118799913L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 244799891L + "'", long44 == 244799891L);
    }

    @Test
    public void test21749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21749");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (byte) 1, locale7);
        java.lang.String str9 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        int int25 = dateTimeZone15.getStandardOffset((long) (byte) 10);
        long long27 = dateTimeZone15.nextTransition((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone28.getOffset(readableInstant29);
        int int32 = dateTimeZone28.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        int int36 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName((-1L), locale38);
        int int41 = dateTimeZone33.getOffsetFromLocal(0L);
        long long43 = dateTimeZone28.getMillisKeepLocal(dateTimeZone33, (long) 115200000);
        boolean boolean45 = dateTimeZone28.isStandardOffset(115200000L);
        long long48 = dateTimeZone28.convertLocalToUTC((long) 10, true);
        java.lang.String str49 = dateTimeZone28.toString();
        int int51 = dateTimeZone28.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant52 = null;
        int int53 = dateTimeZone28.getOffset(readableInstant52);
        int int55 = dateTimeZone28.getStandardOffset(97L);
        java.lang.String str57 = dateTimeZone28.getName(100L);
        int int59 = dateTimeZone28.getOffset((long) 100);
        boolean boolean60 = dateTimeZone15.equals((java.lang.Object) int59);
        boolean boolean61 = dateTimeZone14.equals((java.lang.Object) dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        boolean boolean64 = dateTimeZone62.equals((java.lang.Object) 100);
        int int66 = dateTimeZone62.getStandardOffset((long) ' ');
        long long68 = dateTimeZone62.convertUTCToLocal((long) 'a');
        long long71 = dateTimeZone62.convertLocalToUTC(127920000L, true);
        long long73 = dateTimeZone15.getMillisKeepLocal(dateTimeZone62, (-7260001L));
        java.util.TimeZone timeZone74 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        boolean boolean76 = dateTimeZone75.isFixed();
        boolean boolean77 = dateTimeZone0.equals((java.lang.Object) dateTimeZone75);
        java.util.TimeZone timeZone78 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime79 = null;
        boolean boolean80 = dateTimeZone0.isLocalDateTimeGap(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 115200000L + "'", long27 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 115200000L + "'", long43 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 97L + "'", long68 == 97L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 127920000L + "'", long71 == 127920000L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-7260001L) + "'", long73 == (-7260001L));
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test21750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21750");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(359999999L);
        java.lang.String str14 = dateTimeZone0.getShortName(0L);
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        java.lang.String str17 = dateTimeZone0.getName(127920010L);
        long long19 = dateTimeZone0.previousTransition((-126060001L));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getName((-115199900L), locale21);
        int int24 = dateTimeZone0.getStandardOffset(590400097L);
        java.util.TimeZone timeZone25 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-126060001L) + "'", long19 == (-126060001L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21751");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone6.getShortName((-1L), locale11);
        java.lang.String str13 = dateTimeZone6.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        int int17 = dateTimeZone14.getStandardOffset(0L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone14.getShortName((-1L), locale19);
        int int22 = dateTimeZone14.getOffsetFromLocal(0L);
        java.lang.String str24 = dateTimeZone14.getShortName(0L);
        java.lang.String str26 = dateTimeZone14.getShortName(1L);
        long long28 = dateTimeZone6.getMillisKeepLocal(dateTimeZone14, (long) ' ');
        long long32 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, false, (long) 127920000);
        java.util.TimeZone timeZone33 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) timeZone33);
        boolean boolean37 = dateTimeZone0.isStandardOffset((-122399913L));
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone0.getOffset(readableInstant38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test21752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21752");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone0.getOffset(readableInstant24);
        java.lang.String str27 = dateTimeZone0.getName(100L);
        boolean boolean28 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        long long39 = dateTimeZone0.getMillisKeepLocal(dateTimeZone37, 115200001L);
        int int41 = dateTimeZone0.getStandardOffset((-113100000L));
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone0.getShortName((-532800109L), locale43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 115200001L + "'", long39 == 115200001L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
    }

    @Test
    public void test21753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        int int14 = dateTimeZone0.getStandardOffset((-1L));
        int int16 = dateTimeZone0.getOffsetFromLocal((long) 10);
        long long19 = dateTimeZone0.adjustOffset(711300000L, false);
        int int21 = dateTimeZone0.getStandardOffset((-351299848L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 711300000L + "'", long19 == 711300000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test21754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21754");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        long long18 = dateTimeZone0.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        int int21 = dateTimeZone0.getOffset((-115199990L));
        boolean boolean23 = dateTimeZone0.isStandardOffset(35L);
        boolean boolean25 = dateTimeZone0.isStandardOffset((-113280000L));
        int int27 = dateTimeZone0.getOffset((-221700001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600000L) + "'", long18 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test21755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21755");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean9 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        int int22 = dateTimeZone12.getStandardOffset((long) (byte) 10);
        java.lang.String str24 = dateTimeZone12.getName((long) (byte) 10);
        long long26 = dateTimeZone12.previousTransition(52L);
        long long28 = dateTimeZone11.getMillisKeepLocal(dateTimeZone12, (long) 'a');
        long long31 = dateTimeZone12.adjustOffset((long) (byte) 0, false);
        long long33 = dateTimeZone12.nextTransition((long) (short) 10);
        long long35 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-244799999L));
        java.lang.String str37 = dateTimeZone1.getShortName(358320097L);
        long long39 = dateTimeZone1.previousTransition((-469680000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 360000097L + "'", long28 == 360000097L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-244799989L) + "'", long35 == (-244799989L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-469680000L) + "'", long39 == (-469680000L));
    }

    @Test
    public void test21756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21756");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        boolean boolean5 = dateTimeZone1.isFixed();
        int int7 = dateTimeZone1.getOffset((-486119965L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
    }

    @Test
    public void test21757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21757");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) 10, locale4);
        long long8 = dateTimeZone2.convertLocalToUTC((long) (byte) 0, false);
        boolean boolean9 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        int int14 = dateTimeZone10.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone15.getShortName((-1L), locale20);
        int int23 = dateTimeZone15.getOffsetFromLocal(0L);
        long long25 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, (long) 115200000);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone15.getName(0L, locale27);
        long long30 = dateTimeZone15.previousTransition(464400001L);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone15.isLocalDateTimeGap(localDateTime31);
        long long34 = dateTimeZone2.getMillisKeepLocal(dateTimeZone15, (long) (short) 10);
        long long38 = dateTimeZone15.convertLocalToUTC((-243120001L), true, 36000000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        long long41 = dateTimeZone15.nextTransition((long) 1920000);
        int int43 = dateTimeZone15.getOffsetFromLocal((-719999910L));
        java.lang.String str44 = dateTimeZone15.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:32" + "'", str5, "+35:32");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-127920000L) + "'", long8 == (-127920000L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 115200000L + "'", long25 == 115200000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 464400001L + "'", long30 == 464400001L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 127920010L + "'", long34 == 127920010L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-243120001L) + "'", long38 == (-243120001L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1920000L + "'", long41 == 1920000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
    }

    @Test
    public void test21758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21758");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getName((long) 115200000, locale7);
        int int10 = dateTimeZone0.getStandardOffset((-118799913L));
        boolean boolean11 = dateTimeZone0.isFixed();
        long long13 = dateTimeZone0.previousTransition(236100001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 236100001L + "'", long13 == 236100001L);
    }

    @Test
    public void test21759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21759");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone0.getOffset(readableInstant26);
        java.lang.String str29 = dateTimeZone0.getNameKey(115200100L);
        java.util.TimeZone timeZone30 = dateTimeZone0.toTimeZone();
        java.lang.String str32 = dateTimeZone0.getName(10L);
        java.lang.String str34 = dateTimeZone0.getShortName(0L);
        long long37 = dateTimeZone0.adjustOffset((-228900001L), false);
        long long40 = dateTimeZone0.convertLocalToUTC((-1L), true);
        long long43 = dateTimeZone0.adjustOffset((-345599990L), true);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone0.getName(386400000L, locale45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-228900001L) + "'", long37 == (-228900001L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-345599990L) + "'", long43 == (-345599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
    }

    @Test
    public void test21760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21760");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        boolean boolean18 = dateTimeZone0.isFixed();
        long long20 = dateTimeZone0.previousTransition((-115200000L));
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName(187200001L, locale22);
        long long26 = dateTimeZone0.adjustOffset(82199991L, true);
        long long29 = dateTimeZone0.convertLocalToUTC(707579999L, false);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone0.getName(3599936L, locale31);
        java.lang.Class<?> wildcardClass33 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-115200000L) + "'", long20 == (-115200000L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 82199991L + "'", long26 == 82199991L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 707579999L + "'", long29 == 707579999L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test21761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        long long21 = dateTimeZone2.adjustOffset((long) (byte) 0, false);
        long long24 = dateTimeZone2.adjustOffset(349200010L, false);
        long long26 = dateTimeZone2.previousTransition((-118799903L));
        java.lang.String str27 = dateTimeZone2.getID();
        int int29 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone2.getName((long) 187800000, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 349200010L + "'", long24 == 349200010L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-118799903L) + "'", long26 == (-118799903L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
    }

    @Test
    public void test21762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21762");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        java.lang.String str2 = dateTimeZone1.toString();
        long long5 = dateTimeZone1.adjustOffset(35L, false);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forID("UTC");
        int int9 = dateTimeZone7.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone7.getShortName((long) (byte) 0, locale11);
        int int14 = dateTimeZone7.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone18.getName((long) ' ', locale20);
        boolean boolean22 = dateTimeZone16.equals((java.lang.Object) dateTimeZone18);
        boolean boolean23 = dateTimeZone7.equals((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone7.isFixed();
        java.lang.String str26 = dateTimeZone7.getNameKey(0L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone7.isLocalDateTimeGap(localDateTime27);
        java.lang.String str30 = dateTimeZone7.getNameKey((-115199990L));
        java.lang.String str32 = dateTimeZone7.getNameKey((long) (short) 100);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 359999999L);
        int int36 = dateTimeZone7.getOffsetFromLocal((-208319989L));
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone7.isLocalDateTimeGap(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-00:00:00.001" + "'", str2, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 35L + "'", long5 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 359999998L + "'", long34 == 359999998L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21763");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getShortName((long) (short) 0, locale40);
        long long43 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) ' ');
        java.lang.String str45 = dateTimeZone4.getNameKey(3600001L);
        java.lang.String str46 = dateTimeZone4.toString();
        boolean boolean47 = dateTimeZone4.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test21764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21764");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) '4', locale6);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 'a');
        java.lang.String str10 = dateTimeZone1.getID();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getShortName(363599990L, locale12);
        long long16 = dateTimeZone1.adjustOffset(115139990L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-01:00" + "'", str7, "-01:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 115139990L + "'", long16 == 115139990L);
    }

    @Test
    public void test21765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone4.getName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone23.getShortName((long) (short) 0, locale40);
        long long43 = dateTimeZone4.getMillisKeepLocal(dateTimeZone23, (long) ' ');
        long long45 = dateTimeZone4.previousTransition(0L);
        long long47 = dateTimeZone4.previousTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone48.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone51 = dateTimeZone48.toTimeZone();
        boolean boolean52 = dateTimeZone48.isFixed();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone54.getShortName((long) 'a', locale56);
        long long60 = dateTimeZone54.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        boolean boolean62 = dateTimeZone61.isFixed();
        boolean boolean63 = dateTimeZone54.equals((java.lang.Object) dateTimeZone61);
        long long65 = dateTimeZone48.getMillisKeepLocal(dateTimeZone54, (long) (short) -1);
        java.lang.String str67 = dateTimeZone48.getName(363600000L);
        long long69 = dateTimeZone4.getMillisKeepLocal(dateTimeZone48, (long) (short) 0);
        int int71 = dateTimeZone4.getOffset(115200000L);
        java.lang.String str73 = dateTimeZone4.getShortName((long) (byte) 100);
        java.lang.String str74 = dateTimeZone4.toString();
        java.util.Locale locale76 = null;
        java.lang.String str77 = dateTimeZone4.getName(187200091L, locale76);
        int int79 = dateTimeZone4.getOffset((-256199900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+100:00" + "'", str57, "+100:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-360000001L) + "'", long65 == (-360000001L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test21766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21766");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str23 = dateTimeZone10.getName((long) (byte) 100);
        java.lang.Class<?> wildcardClass24 = dateTimeZone10.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test21767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21767");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.lang.String str20 = dateTimeZone4.getShortName((long) 115200000);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone4.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone4.convertLocalToUTC((-118799913L), false);
        long long29 = dateTimeZone4.convertLocalToUTC((-115199948L), false, (long) (short) 100);
        int int31 = dateTimeZone4.getOffsetFromLocal((-115200000L));
        java.lang.String str33 = dateTimeZone4.getNameKey((-118800000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        long long38 = dateTimeZone4.convertLocalToUTC((-590399965L), true, 14999999L);
        java.util.TimeZone timeZone39 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-118799913L) + "'", long25 == (-118799913L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-115199948L) + "'", long29 == (-115199948L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-590399965L) + "'", long38 == (-590399965L));
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test21768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21768");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) 100, false);
        java.lang.String str11 = dateTimeZone0.getName(360060000L);
        long long13 = dateTimeZone0.convertUTCToLocal(127920010L);
        java.lang.String str15 = dateTimeZone0.getShortName((-118800000L));
        int int17 = dateTimeZone0.getOffset((-299399900L));
        java.lang.String str18 = dateTimeZone0.toString();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone0.getShortName((-144599900L), locale20);
        long long23 = dateTimeZone0.nextTransition((long) 187800000);
        int int25 = dateTimeZone0.getOffset((long) 352320000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 127920010L + "'", long13 == 127920010L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 187800000L + "'", long23 == 187800000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21769");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset(0L);
        long long7 = dateTimeZone1.convertLocalToUTC((long) (short) -1, true, (long) (-1));
        java.lang.String str8 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.nextTransition((-364139900L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-364139900L) + "'", long10 == (-364139900L));
    }

    @Test
    public void test21770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21770");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        int int19 = dateTimeZone5.getOffsetFromLocal(100L);
        long long21 = dateTimeZone5.previousTransition(1L);
        java.lang.String str23 = dateTimeZone5.getShortName(0L);
        java.util.TimeZone timeZone24 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getName((long) 97);
        long long29 = dateTimeZone25.nextTransition(8940000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 8940000L + "'", long29 == 8940000L);
    }

    @Test
    public void test21771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21771");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) ' ', locale3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int7 = dateTimeZone1.getOffset((long) 115200000);
        java.lang.String str9 = dateTimeZone1.getShortName(111600000L);
        long long11 = dateTimeZone1.previousTransition((-604859989L));
        java.lang.String str13 = dateTimeZone1.getShortName(182460090L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-604859989L) + "'", long11 == (-604859989L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
    }

    @Test
    public void test21772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str6 = dateTimeZone1.getName(187200001L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName((-302400002L), locale8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+100:00" + "'", str9, "+100:00");
    }

    @Test
    public void test21773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21773");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 0);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        long long7 = dateTimeZone2.adjustOffset((-592079900L), true);
        java.lang.String str8 = dateTimeZone2.toString();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone2.getName((-187199900L), locale10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-592079900L) + "'", long7 == (-592079900L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+52:00" + "'", str8, "+52:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+52:00" + "'", str11, "+52:00");
    }

    @Test
    public void test21774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21774");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 0);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(350879999L, locale4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        long long11 = dateTimeZone2.convertUTCToLocal(629999997L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+97:00" + "'", str5, "+97:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 349200000 + "'", int9 == 349200000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 979199997L + "'", long11 == 979199997L);
    }

    @Test
    public void test21775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone20.convertUTCToLocal(0L);
        java.lang.String str26 = dateTimeZone20.toString();
        long long29 = dateTimeZone20.convertLocalToUTC(100L, true);
        java.lang.String str31 = dateTimeZone20.getName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean33 = dateTimeZone9.equals((java.lang.Object) dateTimeZone20);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone9.getName((-65L), locale35);
        boolean boolean37 = dateTimeZone9.isFixed();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone9.getName(226320000L, locale39);
        long long43 = dateTimeZone9.adjustOffset(37920097L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 37920097L + "'", long43 == 37920097L);
    }

    @Test
    public void test21776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21776");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        int int4 = dateTimeZone0.getOffsetFromLocal((long) 1);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) 126060000);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.convertUTCToLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        boolean boolean30 = dateTimeZone13.isStandardOffset(115200000L);
        int int32 = dateTimeZone13.getOffsetFromLocal((long) (short) 10);
        long long34 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone13.getShortName((long) (byte) 10, locale37);
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, (-127920000L));
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone13.getOffset(readableInstant41);
        java.lang.String str44 = dateTimeZone13.getNameKey(481920000L);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone13.getShortName((-1070879900L), locale46);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone13.getShortName(593520000L, locale49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-127920000L) + "'", long40 == (-127920000L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test21777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        java.lang.String str20 = dateTimeZone1.getShortName(100L);
        int int22 = dateTimeZone1.getOffset((-32399999L));
        int int24 = dateTimeZone1.getOffset((-39600000L));
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getShortName((long) 36060000, locale26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 360000000 + "'", int22 == 360000000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 360000000 + "'", int24 == 360000000);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:00" + "'", str27, "+100:00");
    }

    @Test
    public void test21778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21778");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) (short) 1, false);
        java.lang.String str11 = dateTimeZone0.getShortName((long) (byte) 0);
        java.lang.String str12 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test21779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21779");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        boolean boolean18 = dateTimeZone1.isFixed();
        int int20 = dateTimeZone1.getOffset(115199991L);
        boolean boolean22 = dateTimeZone1.isStandardOffset(835200097L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone26.getOffset(readableInstant27);
        int int30 = dateTimeZone26.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getShortName((-1L), locale36);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) 115200000);
        boolean boolean43 = dateTimeZone26.isStandardOffset(115200000L);
        int int45 = dateTimeZone26.getOffsetFromLocal((long) (short) 10);
        long long47 = dateTimeZone23.getMillisKeepLocal(dateTimeZone26, 1L);
        java.lang.String str48 = dateTimeZone26.toString();
        java.lang.String str49 = dateTimeZone26.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        java.util.TimeZone timeZone51 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean53 = dateTimeZone52.isFixed();
        boolean boolean54 = dateTimeZone52.isFixed();
        long long58 = dateTimeZone52.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone52.getName((long) (-1), locale60);
        java.lang.String str62 = dateTimeZone52.getID();
        java.lang.String str64 = dateTimeZone52.getNameKey((long) 115200000);
        java.lang.String str65 = dateTimeZone52.toString();
        boolean boolean66 = dateTimeZone26.equals((java.lang.Object) dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        boolean boolean68 = dateTimeZone67.isFixed();
        int int70 = dateTimeZone67.getStandardOffset(0L);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone67.getShortName((-1L), locale72);
        java.lang.String str75 = dateTimeZone67.getShortName(1L);
        long long78 = dateTimeZone67.convertLocalToUTC(0L, false);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeZone67.getShortName(360000097L, locale80);
        int int83 = dateTimeZone67.getStandardOffset((-359999990L));
        long long85 = dateTimeZone26.getMillisKeepLocal(dateTimeZone67, 8940000L);
        long long89 = dateTimeZone67.convertLocalToUTC(0L, true, (-226800000L));
        boolean boolean90 = dateTimeZone1.equals((java.lang.Object) (-226800000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 115200000L + "'", long41 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 8940000L + "'", long85 == 8940000L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test21780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21780");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone0.getOffsetFromLocal((-7200000L));
        long long16 = dateTimeZone0.convertUTCToLocal((long) 'a');
        long long19 = dateTimeZone0.adjustOffset((-547859900L), false);
        int int21 = dateTimeZone0.getOffset((-834660000L));
        java.lang.String str23 = dateTimeZone0.getNameKey(102480020L);
        java.lang.String str25 = dateTimeZone0.getNameKey((-106559839L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-547859900L) + "'", long19 == (-547859900L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test21781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21781");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 1);
        long long3 = dateTimeZone1.previousTransition((long) (short) 10);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName(360000032L, locale5);
        boolean boolean7 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        int int11 = dateTimeZone1.getOffset((-239519999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+01:00" + "'", str6, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3600000 + "'", int9 == 3600000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3600000 + "'", int11 == 3600000);
    }

    @Test
    public void test21782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21782");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str8 = dateTimeZone0.getNameKey((long) (byte) 0);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test21783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21783");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone4.getOffset(readableInstant7);
        java.lang.String str10 = dateTimeZone4.getShortName((long) 349200000);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone4.getShortName((-349199990L), locale12);
        boolean boolean14 = dateTimeZone4.isFixed();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone4.getShortName((-3660010L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test21784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21784");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.toString();
        java.lang.String str5 = dateTimeZone1.getNameKey((-136799903L));
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-838320000L), locale9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+52:00" + "'", str10, "+52:00");
    }

    @Test
    public void test21785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21785");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean15 = dateTimeZone0.isFixed();
        boolean boolean16 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone0.isLocalDateTimeGap(localDateTime17);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone0.getShortName((-179999968L), locale20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone0.getOffset(readableInstant22);
        int int25 = dateTimeZone0.getOffset(151199999L);
        java.lang.String str27 = dateTimeZone0.getName(64800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 187200000L + "'", long2 == 187200000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+52:00" + "'", str3, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 72000000L + "'", long14 == 72000000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 187200000 + "'", int25 == 187200000);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+52:00" + "'", str27, "+52:00");
    }

    @Test
    public void test21786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21786");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) 1.0f);
        java.lang.String str4 = dateTimeZone1.getID();
        java.lang.String str6 = dateTimeZone1.getShortName((-169199989L));
        java.lang.String str7 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test21787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21787");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName(1L);
        long long15 = dateTimeZone8.convertLocalToUTC(115200097L, false);
        int int17 = dateTimeZone8.getStandardOffset((long) 360000000);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        long long27 = dateTimeZone8.getMillisKeepLocal(dateTimeZone23, (-65L));
        long long29 = dateTimeZone23.convertUTCToLocal((-36000000L));
        long long32 = dateTimeZone23.convertLocalToUTC((-351299848L), false);
        java.util.TimeZone timeZone33 = dateTimeZone23.toTimeZone();
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone23.getOffset(readableInstant34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200097L + "'", long15 == 115200097L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-65L) + "'", long27 == (-65L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-36000000L) + "'", long29 == (-36000000L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-351299848L) + "'", long32 == (-351299848L));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test21788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21788");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 10L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone0.getOffset(readableInstant22);
        int int25 = dateTimeZone0.getOffset((long) 600000);
        java.lang.String str26 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone27.adjustOffset((long) (short) 10, true);
        long long32 = dateTimeZone27.nextTransition((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forID("+01:00");
        boolean boolean35 = dateTimeZone27.equals((java.lang.Object) "+01:00");
        int int37 = dateTimeZone27.getOffsetFromLocal((-178080000L));
        long long39 = dateTimeZone27.previousTransition((-115199980L));
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) (-115199980L));
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone0.getOffset(readableInstant41);
        java.lang.String str44 = dateTimeZone0.getShortName((-359999958L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 187200000 + "'", int37 == 187200000);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-115199980L) + "'", long39 == (-115199980L));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
    }

    @Test
    public void test21789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21789");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (-1), locale8);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str12 = dateTimeZone0.getNameKey((long) 115200000);
        int int14 = dateTimeZone0.getOffset((-1L));
        java.lang.String str16 = dateTimeZone0.getName(111600000L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getShortName((-111599990L), locale18);
        long long21 = dateTimeZone0.nextTransition((-68400001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-68400001L) + "'", long21 == (-68400001L));
    }

    @Test
    public void test21790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21790");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 10);
        int int13 = dateTimeZone6.getOffset((long) (short) 1);
        int int15 = dateTimeZone6.getStandardOffset((long) 100);
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) 97);
        long long20 = dateTimeZone0.convertLocalToUTC(475199996L, true);
        boolean boolean22 = dateTimeZone0.isStandardOffset((-10800000L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) '4');
        java.lang.String str27 = dateTimeZone25.getName(115200000L);
        java.lang.String str29 = dateTimeZone25.getName((-232500001L));
        long long31 = dateTimeZone25.nextTransition((-430919900L));
        boolean boolean32 = dateTimeZone25.isFixed();
        java.lang.String str33 = dateTimeZone25.toString();
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone25, (-131520000L));
        boolean boolean37 = dateTimeZone0.isStandardOffset(187200001L);
        int int39 = dateTimeZone0.getStandardOffset((-368880000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 475199996L + "'", long20 == 475199996L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:52" + "'", str27, "-01:52");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-01:52" + "'", str29, "-01:52");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-430919900L) + "'", long31 == (-430919900L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:52" + "'", str33, "-01:52");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-124800000L) + "'", long35 == (-124800000L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test21791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21791");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.lang.String str7 = dateTimeZone0.getShortName(32L);
        long long9 = dateTimeZone0.convertUTCToLocal(72000001L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int13 = dateTimeZone11.getOffset(1L);
        int int15 = dateTimeZone11.getOffsetFromLocal((long) 97);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) dateTimeZone11);
        java.lang.String str19 = dateTimeZone0.getNameKey(1206299990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 72000001L + "'", long9 == 72000001L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 115200000 + "'", int13 == 115200000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 115200000 + "'", int15 == 115200000);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test21792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21792");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        long long5 = dateTimeZone1.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        boolean boolean9 = dateTimeZone7.isFixed();
        long long11 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 0L);
        long long13 = dateTimeZone7.convertUTCToLocal(707580000L);
        java.lang.String str15 = dateTimeZone7.getName((long) 10);
        java.util.TimeZone timeZone16 = dateTimeZone7.toTimeZone();
        int int18 = dateTimeZone7.getStandardOffset(1860097L);
        java.lang.String str19 = dateTimeZone7.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 707580000L + "'", long13 == 707580000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test21793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21793");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(115199991L, locale3);
        long long6 = dateTimeZone1.convertUTCToLocal((-115200001L));
        long long8 = dateTimeZone1.previousTransition((-234000100L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-115200001L) + "'", long6 == (-115200001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-234000100L) + "'", long8 == (-234000100L));
    }

    @Test
    public void test21794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21794");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str13 = dateTimeZone11.getShortName((long) 'a');
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getShortName((long) (short) -1, locale15);
        int int18 = dateTimeZone11.getOffset((long) 115200000);
        int int20 = dateTimeZone11.getStandardOffset((long) (short) 10);
        java.lang.String str21 = dateTimeZone11.getID();
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) 0);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone0.isLocalDateTimeGap(localDateTime24);
        java.lang.String str26 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forID("+00:00:00.097");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.lang.String str34 = dateTimeZone29.getNameKey(1L);
        java.util.TimeZone timeZone35 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        boolean boolean39 = dateTimeZone28.equals((java.lang.Object) dateTimeZone38);
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) dateTimeZone28);
        boolean boolean41 = dateTimeZone28.isFixed();
        int int43 = dateTimeZone28.getOffsetFromLocal(356400032L);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone28.getName((-3L), locale45);
        java.lang.String str47 = dateTimeZone28.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+32:00" + "'", str13, "+32:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:00" + "'", str16, "+32:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 115200000 + "'", int20 == 115200000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+32:00" + "'", str21, "+32:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115200000L) + "'", long23 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.097" + "'", str46, "+00:00:00.097");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.097" + "'", str47, "+00:00:00.097");
    }

    @Test
    public void test21795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21795");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone0.isLocalDateTimeGap(localDateTime19);
        java.util.TimeZone timeZone21 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        long long10 = dateTimeZone8.previousTransition(716460000L);
        java.lang.String str12 = dateTimeZone8.getNameKey((long) 126060000);
        boolean boolean14 = dateTimeZone8.isStandardOffset((-36060000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 716460000L + "'", long10 == 716460000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test21797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        int int19 = dateTimeZone0.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str21 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test21798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21798");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        int int6 = dateTimeZone0.getOffset((long) '#');
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getNameKey(190800000L);
        long long14 = dateTimeZone8.convertLocalToUTC((-604859989L), true, (-547859900L));
        int int16 = dateTimeZone8.getOffset((-351299848L));
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone8.isLocalDateTimeGap(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-604859989L) + "'", long14 == (-604859989L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21799");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.lang.String str13 = dateTimeZone0.getName((long) 10);
        int int15 = dateTimeZone0.getOffset(3600032L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        int int24 = dateTimeZone16.getOffsetFromLocal(0L);
        long long26 = dateTimeZone16.convertUTCToLocal((long) 0);
        java.lang.String str27 = dateTimeZone16.getID();
        java.lang.String str29 = dateTimeZone16.getShortName((-36000000L));
        java.lang.String str31 = dateTimeZone16.getNameKey(835200097L);
        java.lang.String str33 = dateTimeZone16.getNameKey((-1083599900L));
        long long35 = dateTimeZone16.nextTransition((-360060000L));
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) (-360060000L));
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 10);
        long long42 = dateTimeZone39.adjustOffset((long) '#', false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        boolean boolean44 = dateTimeZone0.equals((java.lang.Object) dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360060000L) + "'", long35 == (-360060000L));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21800");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        long long22 = dateTimeZone0.convertUTCToLocal((-3600000L));
        long long24 = dateTimeZone0.nextTransition(118799999L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.lang.String str27 = dateTimeZone25.toString();
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone25.getName(824399997L, locale30);
        int int33 = dateTimeZone25.getStandardOffset(464400110L);
        long long36 = dateTimeZone25.adjustOffset(9300000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3600000L) + "'", long22 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 118799999L + "'", long24 == 118799999L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 9300000L + "'", long36 == 9300000L);
    }

    @Test
    public void test21801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21801");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        long long9 = dateTimeZone0.convertLocalToUTC(100L, true);
        java.lang.String str11 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long15 = dateTimeZone0.convertLocalToUTC((long) (-6720000), true);
        long long18 = dateTimeZone0.adjustOffset(475200097L, false);
        long long20 = dateTimeZone0.previousTransition(478800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-6720000L) + "'", long15 == (-6720000L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 475200097L + "'", long18 == 475200097L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 478800000L + "'", long20 == 478800000L);
    }

    @Test
    public void test21802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21802");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        long long28 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.lang.String str34 = dateTimeZone29.getShortName((long) (byte) 100);
        java.lang.String str36 = dateTimeZone29.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone29.getOffset(readableInstant37);
        boolean boolean40 = dateTimeZone29.isStandardOffset((long) (short) 1);
        long long44 = dateTimeZone29.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long47 = dateTimeZone29.adjustOffset((long) (byte) 0, false);
        java.lang.String str49 = dateTimeZone29.getShortName((long) 1);
        java.lang.String str51 = dateTimeZone29.getNameKey(129660000L);
        long long53 = dateTimeZone29.nextTransition(187200000L);
        long long55 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 360000032L);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone0.getName((-2099904L), locale57);
        int int60 = dateTimeZone0.getOffset((-241200000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 359999999L + "'", long28 == 359999999L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 115200000L + "'", long44 == 115200000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 187200000L + "'", long53 == 187200000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 360000032L + "'", long55 == 360000032L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test21803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21803");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone8.getShortName(0L);
        java.lang.String str20 = dateTimeZone8.getShortName(1L);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) ' ');
        boolean boolean23 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        java.lang.String str25 = dateTimeZone0.getID();
        java.util.TimeZone timeZone26 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone27.isFixed();
        int int30 = dateTimeZone27.getStandardOffset(0L);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone27.getShortName((-1L), locale32);
        java.lang.String str35 = dateTimeZone27.getShortName(1L);
        long long37 = dateTimeZone27.nextTransition((long) 0);
        long long39 = dateTimeZone27.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean43 = dateTimeZone27.equals((java.lang.Object) '#');
        long long45 = dateTimeZone27.convertUTCToLocal((-3600000L));
        java.lang.String str47 = dateTimeZone27.getNameKey(10L);
        long long51 = dateTimeZone27.convertLocalToUTC(111600000L, false, (long) '4');
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone27.getName(126060000L, locale53);
        long long56 = dateTimeZone27.nextTransition((-306000000L));
        long long58 = dateTimeZone0.getMillisKeepLocal(dateTimeZone27, 165600032L);
        int int60 = dateTimeZone27.getStandardOffset((-351119965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-3600000L) + "'", long45 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 111600000L + "'", long51 == 111600000L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-306000000L) + "'", long56 == (-306000000L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 165600032L + "'", long58 == 165600032L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test21804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21804");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(360060000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str3 = dateTimeZone1.getID();
        long long6 = dateTimeZone1.convertLocalToUTC((-244799989L), false);
        java.lang.String str7 = dateTimeZone1.getID();
        int int9 = dateTimeZone1.getOffsetFromLocal(242699899L);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:01" + "'", str3, "+100:01");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-604859989L) + "'", long6 == (-604859989L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:01" + "'", str7, "+100:01");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 360060000 + "'", int9 == 360060000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 360060000 + "'", int13 == 360060000);
    }

    @Test
    public void test21805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21805");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(351300000, 126600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21806");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, 0);
        java.lang.String str4 = dateTimeZone2.getShortName((-115260011L));
        boolean boolean5 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test21807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21807");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        java.lang.String str27 = dateTimeZone0.getName((long) 0);
        long long29 = dateTimeZone0.nextTransition(115199991L);
        boolean boolean30 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone31 = dateTimeZone0.toTimeZone();
        java.lang.String str32 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 115199991L + "'", long29 == 115199991L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
    }

    @Test
    public void test21808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone19.getOffset(readableInstant20);
        int int23 = dateTimeZone19.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone24.isFixed();
        int int27 = dateTimeZone24.getStandardOffset(0L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone24.getShortName((-1L), locale29);
        int int32 = dateTimeZone24.getOffsetFromLocal(0L);
        long long34 = dateTimeZone19.getMillisKeepLocal(dateTimeZone24, (long) 115200000);
        boolean boolean36 = dateTimeZone19.isStandardOffset(115200000L);
        long long39 = dateTimeZone19.convertLocalToUTC((long) 10, true);
        java.lang.String str40 = dateTimeZone19.toString();
        int int42 = dateTimeZone19.getOffset(52L);
        java.lang.String str44 = dateTimeZone19.getNameKey(0L);
        java.lang.String str46 = dateTimeZone19.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forID("UTC");
        int int50 = dateTimeZone48.getStandardOffset(0L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone48.getShortName((long) (byte) 0, locale52);
        boolean boolean54 = dateTimeZone19.equals((java.lang.Object) locale52);
        long long56 = dateTimeZone19.nextTransition((long) 'a');
        long long59 = dateTimeZone19.adjustOffset((long) (short) 100, true);
        long long61 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, 359999998L);
        long long63 = dateTimeZone18.nextTransition(234000010L);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone64.getShortName((long) 115200000, locale66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        int int69 = dateTimeZone64.getOffset(readableInstant68);
        java.lang.String str71 = dateTimeZone64.getShortName(32L);
        boolean boolean73 = dateTimeZone64.isStandardOffset((long) 115200000);
        long long75 = dateTimeZone64.previousTransition(115200100L);
        long long77 = dateTimeZone18.getMillisKeepLocal(dateTimeZone64, (long) (short) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long80 = dateTimeZone5.getMillisKeepLocal(dateTimeZone18, (-1011599900L));
        int int82 = dateTimeZone18.getStandardOffset(464399980L);
        long long86 = dateTimeZone18.convertLocalToUTC(201600001L, false, 64800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 360060000L + "'", long2 == 360060000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+100:01" + "'", str3, "+100:01");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 244860000L + "'", long14 == 244860000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 115200000L + "'", long34 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 97L + "'", long56 == 97L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 547199998L + "'", long61 == 547199998L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 234000010L + "'", long63 == 234000010L);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 115200100L + "'", long75 == 115200100L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 187199999L + "'", long77 == 187199999L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1083599900L) + "'", long80 == (-1083599900L));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 187200000 + "'", int82 == 187200000);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 14400001L + "'", long86 == 14400001L);
    }

    @Test
    public void test21809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21809");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.previousTransition((-1L));
        int int24 = dateTimeZone0.getOffset(118800000L);
        java.lang.String str25 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test21810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21810");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone0.nextTransition(118800001L);
        int int16 = dateTimeZone0.getStandardOffset(97L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(0L, locale18);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName(152L, locale21);
        java.lang.String str24 = dateTimeZone0.getShortName(669599981L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 118800001L + "'", long14 == 118800001L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test21811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21811");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 10);
        long long5 = dateTimeZone2.convertLocalToUTC(4200000L, false);
        java.lang.String str7 = dateTimeZone2.getShortName((-256199900L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3600000L + "'", long5 == 3600000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:10" + "'", str7, "+00:10");
    }

    @Test
    public void test21812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(115200000L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        int int11 = dateTimeZone1.getStandardOffset(111600000L);
        java.lang.Object obj12 = null;
        boolean boolean13 = dateTimeZone1.equals(obj12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 115200000L + "'", long7 == 115200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 115200000 + "'", int9 == 115200000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 115200000 + "'", int11 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21813");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-1));
        int int3 = dateTimeZone1.getOffsetFromLocal(601260010L);
        long long5 = dateTimeZone1.convertUTCToLocal(399120110L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 399120109L + "'", long5 == 399120109L);
    }

    @Test
    public void test21814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21814");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone0.getOffset(readableInstant2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.Class<?> wildcardClass5 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test21815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        int int8 = dateTimeZone0.getOffset(115199991L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName((long) 'a', locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone14.isLocalDateTimeGap(localDateTime15);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) localDateTime15);
        java.lang.String str19 = dateTimeZone0.getShortName((-307740000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test21816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21816");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        int int8 = dateTimeZone0.getOffsetFromLocal(118799989L);
        int int10 = dateTimeZone0.getOffset((-426240000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test21817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21817");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        boolean boolean5 = dateTimeZone1.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (short) 10);
        java.lang.String str22 = dateTimeZone18.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone23.getShortName((-1L), locale28);
        java.lang.String str31 = dateTimeZone23.getShortName(1L);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) (-1));
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone18.getName(0L, locale35);
        long long38 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, 1L);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone18.getName((long) '4', locale40);
        boolean boolean42 = dateTimeZone18.isFixed();
        boolean boolean43 = dateTimeZone1.equals((java.lang.Object) boolean42);
        org.joda.time.LocalDateTime localDateTime44 = null;
        boolean boolean45 = dateTimeZone1.isLocalDateTimeGap(localDateTime44);
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone1.getShortName(349200000L, locale47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean51 = dateTimeZone49.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone52 = dateTimeZone49.toTimeZone();
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone49.getShortName(0L, locale54);
        java.lang.String str56 = dateTimeZone49.getID();
        java.lang.String str58 = dateTimeZone49.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str62 = dateTimeZone60.getShortName((long) 'a');
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone60.getShortName((long) (short) -1, locale64);
        int int67 = dateTimeZone60.getOffset((long) 115200000);
        int int69 = dateTimeZone60.getStandardOffset((long) (short) 10);
        java.lang.String str70 = dateTimeZone60.getID();
        long long72 = dateTimeZone49.getMillisKeepLocal(dateTimeZone60, (long) 0);
        int int74 = dateTimeZone49.getOffset(151200000L);
        long long76 = dateTimeZone1.getMillisKeepLocal(dateTimeZone49, (-3599903L));
        long long78 = dateTimeZone49.previousTransition((-115199968L));
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeZone49.getName(592319997L, locale80);
        long long83 = dateTimeZone49.convertUTCToLocal(475199997L);
        org.joda.time.LocalDateTime localDateTime84 = null;
        boolean boolean85 = dateTimeZone49.isLocalDateTimeGap(localDateTime84);
        java.lang.String str87 = dateTimeZone49.getShortName((-79679890L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+32:00" + "'", str48, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+32:00" + "'", str62, "+32:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+32:00" + "'", str65, "+32:00");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 115200000 + "'", int67 == 115200000);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 115200000 + "'", int69 == 115200000);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+32:00" + "'", str70, "+32:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-115200000L) + "'", long72 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 111600097L + "'", long76 == 111600097L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-115199968L) + "'", long78 == (-115199968L));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 475199997L + "'", long83 == 475199997L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
    }

    @Test
    public void test21818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21818");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone4.getOffset(35L);
        boolean boolean16 = dateTimeZone4.isStandardOffset((-360000000L));
        boolean boolean17 = dateTimeZone4.isFixed();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone4.getOffset(readableInstant18);
        int int21 = dateTimeZone4.getOffset((-10800000L));
        int int23 = dateTimeZone4.getOffsetFromLocal(147479990L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone4.getOffset(readableInstant24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21819");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        boolean boolean10 = dateTimeZone0.isFixed();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName((-174299968L), locale12);
        long long16 = dateTimeZone0.convertLocalToUTC(475200000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 475200000L + "'", long16 == 475200000L);
    }

    @Test
    public void test21820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21820");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        long long15 = dateTimeZone6.convertUTCToLocal((-3600000L));
        int int17 = dateTimeZone6.getOffset(187200091L);
        java.lang.String str19 = dateTimeZone6.getName(230400052L);
        boolean boolean20 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone6.isLocalDateTimeGap(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3600000L) + "'", long15 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21821");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 600000);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getShortName((-32399999L), locale6);
        boolean boolean8 = dateTimeZone1.isFixed();
        int int10 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        boolean boolean12 = dateTimeZone1.isStandardOffset(7200042L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test21822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21822");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey((long) (short) 100);
        java.lang.String str12 = dateTimeZone0.getName((-187799900L));
        boolean boolean14 = dateTimeZone0.isStandardOffset((long) 187200000);
        long long17 = dateTimeZone0.adjustOffset(14820000L, true);
        long long20 = dateTimeZone0.adjustOffset(122460100L, true);
        java.util.TimeZone timeZone21 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean24 = dateTimeZone22.isStandardOffset((-115799903L));
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone22.getName(19919999L, locale26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 14820000L + "'", long17 == 14820000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 122460100L + "'", long20 == 122460100L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test21823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(10);
        java.lang.String str3 = dateTimeZone1.getNameKey((-115199948L));
        long long7 = dateTimeZone1.convertLocalToUTC((-359999990L), true, (-1L));
        long long11 = dateTimeZone1.convertLocalToUTC(115200010L, false, 0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName((-115200109L), locale13);
        java.lang.String str15 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-395999990L) + "'", long7 == (-395999990L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 79200010L + "'", long11 == 79200010L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
    }

    @Test
    public void test21824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21824");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getName(10L);
        java.lang.String str4 = dateTimeZone1.toString();
        int int6 = dateTimeZone1.getOffset((-163979948L));
        long long8 = dateTimeZone1.previousTransition((-346199890L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-346199890L) + "'", long8 == (-346199890L));
    }

    @Test
    public void test21825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21825");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition((long) ' ');
        java.lang.String str9 = dateTimeZone6.getID();
        java.lang.String str10 = dateTimeZone6.getID();
        long long12 = dateTimeZone6.previousTransition(115200000L);
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str15 = dateTimeZone6.getNameKey((-36000000L));
        java.util.TimeZone timeZone16 = dateTimeZone6.toTimeZone();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone6.getOffset(readableInstant17);
        java.lang.String str20 = dateTimeZone6.getName((-360000001L));
        long long22 = dateTimeZone6.previousTransition((-77040000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 32L + "'", long8 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 115200000L + "'", long12 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-77040000L) + "'", long22 == (-77040000L));
    }

    @Test
    public void test21826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21826");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        long long7 = dateTimeZone1.adjustOffset((long) (byte) 10, true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getName(1L);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        long long17 = dateTimeZone14.convertLocalToUTC(230400052L, false);
        long long21 = dateTimeZone14.convertLocalToUTC(41280000L, false, 243780000L);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone14.isLocalDateTimeGap(localDateTime22);
        int int25 = dateTimeZone14.getStandardOffset(234000087L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 230400052L + "'", long17 == 230400052L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 41280000L + "'", long21 == 41280000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21827");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        int int11 = dateTimeZone0.getOffset(1860097L);
        java.lang.String str13 = dateTimeZone0.getNameKey(72000000L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        boolean boolean15 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        long long19 = dateTimeZone0.nextTransition((-230399991L));
        long long21 = dateTimeZone0.convertUTCToLocal((-347700098L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-230399991L) + "'", long19 == (-230399991L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-347700098L) + "'", long21 == (-347700098L));
    }

    @Test
    public void test21828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21828");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(359999999L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.convertUTCToLocal(242699999L);
        long long8 = dateTimeZone1.convertUTCToLocal(116760000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 359999998L + "'", long3 == 359999998L);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 242699998L + "'", long6 == 242699998L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 116759999L + "'", long8 == 116759999L);
    }

    @Test
    public void test21829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21829");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone3.isFixed();
        int int6 = dateTimeZone3.getStandardOffset(0L);
        java.lang.String str8 = dateTimeZone3.getNameKey(1L);
        int int10 = dateTimeZone3.getOffset((-1L));
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str13 = dateTimeZone3.getName(32L);
        boolean boolean14 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        long long16 = dateTimeZone3.previousTransition((-3600000L));
        java.util.TimeZone timeZone17 = dateTimeZone3.toTimeZone();
        java.lang.Class<?> wildcardClass18 = timeZone17.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3600000L) + "'", long16 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test21830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21830");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone4.getOffset(readableInstant5);
        int int8 = dateTimeZone4.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        int int17 = dateTimeZone9.getOffsetFromLocal(0L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) 115200000);
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.lang.String str27 = dateTimeZone22.getShortName((long) (byte) 100);
        java.lang.String str29 = dateTimeZone22.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone22.getOffset(readableInstant30);
        boolean boolean33 = dateTimeZone22.isStandardOffset((long) (short) 1);
        long long37 = dateTimeZone22.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int39 = dateTimeZone22.getOffsetFromLocal((long) (short) 0);
        java.lang.String str41 = dateTimeZone22.getNameKey((long) ' ');
        java.lang.String str42 = dateTimeZone22.toString();
        long long44 = dateTimeZone22.nextTransition(100L);
        int int46 = dateTimeZone22.getStandardOffset((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean48 = dateTimeZone47.isFixed();
        int int50 = dateTimeZone47.getStandardOffset(0L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone47.getShortName((-1L), locale52);
        int int55 = dateTimeZone47.getOffsetFromLocal(0L);
        long long57 = dateTimeZone47.convertUTCToLocal((long) 0);
        long long59 = dateTimeZone47.previousTransition(0L);
        long long63 = dateTimeZone47.convertLocalToUTC((long) (short) 0, true, 0L);
        int int65 = dateTimeZone47.getStandardOffset((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant66 = null;
        int int67 = dateTimeZone47.getOffset(readableInstant66);
        long long70 = dateTimeZone47.convertLocalToUTC((long) 187200000, false);
        java.lang.String str72 = dateTimeZone47.getNameKey((-10320000L));
        long long74 = dateTimeZone22.getMillisKeepLocal(dateTimeZone47, 3600052L);
        boolean boolean75 = dateTimeZone1.equals((java.lang.Object) dateTimeZone47);
        java.lang.String str76 = dateTimeZone1.toString();
        int int78 = dateTimeZone1.getOffsetFromLocal((-3660001L));
        int int80 = dateTimeZone1.getStandardOffset((-118800000L));
        java.lang.String str81 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant82 = null;
        int int83 = dateTimeZone1.getOffset(readableInstant82);
        java.util.TimeZone timeZone84 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 115200000L + "'", long19 == 115200000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 115200001L + "'", long21 == 115200001L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 115200000L + "'", long37 == 115200000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 187200000L + "'", long70 == 187200000L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3600052L + "'", long74 == 3600052L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+32:00" + "'", str76, "+32:00");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 115200000 + "'", int78 == 115200000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 115200000 + "'", int80 == 115200000);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+32:00" + "'", str81, "+32:00");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 115200000 + "'", int83 == 115200000);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test21831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21831");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone20.convertUTCToLocal(0L);
        java.lang.String str26 = dateTimeZone20.toString();
        long long29 = dateTimeZone20.convertLocalToUTC(100L, true);
        java.lang.String str31 = dateTimeZone20.getName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean33 = dateTimeZone9.equals((java.lang.Object) dateTimeZone20);
        java.lang.String str34 = dateTimeZone20.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        long long38 = dateTimeZone20.adjustOffset(0L, false);
        long long42 = dateTimeZone20.convertLocalToUTC((-176399991L), true, 356460087L);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone20.getName((-687659900L), locale44);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-176399991L) + "'", long42 == (-176399991L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
    }

    @Test
    public void test21832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21832");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone4.isLocalDateTimeGap(localDateTime6);
        long long10 = dateTimeZone4.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone4.getOffset(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        int int16 = dateTimeZone13.getStandardOffset(0L);
        java.lang.String str18 = dateTimeZone13.getNameKey(1L);
        java.lang.String str20 = dateTimeZone13.getShortName((long) 100);
        boolean boolean21 = dateTimeZone4.equals((java.lang.Object) 100);
        boolean boolean22 = dateTimeZone4.isFixed();
        java.lang.String str24 = dateTimeZone4.getName(108480000L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone27.isFixed();
        int int30 = dateTimeZone27.getStandardOffset(0L);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone27.getShortName((-1L), locale32);
        int int35 = dateTimeZone27.getOffsetFromLocal(0L);
        int int37 = dateTimeZone27.getStandardOffset((long) (byte) 10);
        java.lang.String str39 = dateTimeZone27.getName((long) (byte) 10);
        long long41 = dateTimeZone27.previousTransition(52L);
        long long43 = dateTimeZone26.getMillisKeepLocal(dateTimeZone27, (long) 'a');
        long long45 = dateTimeZone26.previousTransition((long) '4');
        long long47 = dateTimeZone4.getMillisKeepLocal(dateTimeZone26, (-115199965L));
        boolean boolean49 = dateTimeZone26.isStandardOffset(75600000L);
        boolean boolean51 = dateTimeZone26.isStandardOffset(0L);
        int int53 = dateTimeZone26.getStandardOffset((-57660009L));
        long long55 = dateTimeZone3.getMillisKeepLocal(dateTimeZone26, 1139519997L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 52L + "'", long41 == 52L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 360000097L + "'", long43 == 360000097L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-475199965L) + "'", long47 == (-475199965L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 360000000 + "'", int53 == 360000000);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 779519997L + "'", long55 == 779519997L);
    }

    @Test
    public void test21833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21833");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 'a');
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (short) -1, locale5);
        int int8 = dateTimeZone1.getOffset((long) 115200000);
        long long10 = dateTimeZone1.previousTransition((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone1.getOffset(readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone18.getOffset(readableInstant19);
        int int22 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone23.getShortName((-1L), locale28);
        int int31 = dateTimeZone23.getOffsetFromLocal(0L);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) 115200000);
        boolean boolean35 = dateTimeZone18.isStandardOffset(115200000L);
        int int37 = dateTimeZone18.getOffsetFromLocal((long) (short) 10);
        long long39 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, 1L);
        long long41 = dateTimeZone1.getMillisKeepLocal(dateTimeZone18, (-511199990L));
        java.lang.String str43 = dateTimeZone18.getShortName(113340087L);
        java.lang.String str45 = dateTimeZone18.getShortName(356460010L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 115200000 + "'", int8 == 115200000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-395999990L) + "'", long41 == (-395999990L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
    }

    @Test
    public void test21834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21834");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) -1, (int) '4');
        java.lang.String str4 = dateTimeZone2.getName(115200000L);
        java.lang.String str6 = dateTimeZone2.getName((-232500001L));
        long long8 = dateTimeZone2.nextTransition((-430919900L));
        java.lang.String str9 = dateTimeZone2.getID();
        long long13 = dateTimeZone2.convertLocalToUTC((-162000000L), true, 127920010L);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:52" + "'", str4, "-01:52");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:52" + "'", str6, "-01:52");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-430919900L) + "'", long8 == (-430919900L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:52" + "'", str9, "-01:52");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-155280000L) + "'", long13 == (-155280000L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-01:52");
    }

    @Test
    public void test21835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        int int8 = dateTimeZone0.getOffset(115199991L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str16 = dateTimeZone9.getID();
        long long20 = dateTimeZone9.convertLocalToUTC(115200000L, true, 1L);
        long long23 = dateTimeZone9.adjustOffset(118799999L, true);
        long long25 = dateTimeZone9.previousTransition((-547799990L));
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) (-547799990L));
        int int28 = dateTimeZone0.getStandardOffset((-313260000L));
        java.util.TimeZone timeZone29 = dateTimeZone0.toTimeZone();
        long long33 = dateTimeZone0.convertLocalToUTC((-208800000L), false, (-32879893L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 118799999L + "'", long23 == 118799999L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-547799990L) + "'", long25 == (-547799990L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-208800000L) + "'", long33 == (-208800000L));
    }

    @Test
    public void test21836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21836");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getShortName(359999998L, locale6);
        java.lang.String str9 = dateTimeZone1.getNameKey((-3599903L));
        java.lang.String str11 = dateTimeZone1.getShortName((-360000000L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getName(115200097L, locale13);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone1.isLocalDateTimeGap(localDateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone1.getOffset(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone19.isLocalDateTimeGap(localDateTime21);
        long long24 = dateTimeZone19.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.lang.String str27 = dateTimeZone19.getNameKey((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = dateTimeZone31.getOffset(readableInstant32);
        int int35 = dateTimeZone31.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        int int39 = dateTimeZone36.getStandardOffset(0L);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone36.getShortName((-1L), locale41);
        int int44 = dateTimeZone36.getOffsetFromLocal(0L);
        long long46 = dateTimeZone31.getMillisKeepLocal(dateTimeZone36, (long) 115200000);
        boolean boolean48 = dateTimeZone31.isStandardOffset(115200000L);
        int int50 = dateTimeZone31.getOffsetFromLocal((long) (short) 10);
        long long52 = dateTimeZone28.getMillisKeepLocal(dateTimeZone31, 1L);
        long long54 = dateTimeZone19.getMillisKeepLocal(dateTimeZone28, (long) ' ');
        long long58 = dateTimeZone19.convertLocalToUTC(125999999L, true, 127920097L);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeZone19.getName(111600000L, locale60);
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeZone19.getName(547199998L, locale63);
        boolean boolean65 = dateTimeZone19.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        long long68 = dateTimeZone1.getMillisKeepLocal(dateTimeZone19, (long) 5700000);
        long long72 = dateTimeZone19.convertLocalToUTC((-232079900L), true, 46800010L);
        long long75 = dateTimeZone19.adjustOffset(350879999L, true);
        long long78 = dateTimeZone19.adjustOffset((-241199968L), true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 360000000 + "'", int18 == 360000000);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 115200000L + "'", long46 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32L + "'", long54 == 32L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 125999999L + "'", long58 == 125999999L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 365700000L + "'", long68 == 365700000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-232079900L) + "'", long72 == (-232079900L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 350879999L + "'", long75 == 350879999L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-241199968L) + "'", long78 == (-241199968L));
    }

    @Test
    public void test21837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21837");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        java.lang.String str22 = dateTimeZone0.getNameKey(129660000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone23.getOffset(readableInstant24);
        int int27 = dateTimeZone23.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone28.isFixed();
        int int31 = dateTimeZone28.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone28.getShortName((-1L), locale33);
        int int36 = dateTimeZone28.getOffsetFromLocal(0L);
        long long38 = dateTimeZone23.getMillisKeepLocal(dateTimeZone28, (long) 115200000);
        boolean boolean40 = dateTimeZone23.isStandardOffset(115200000L);
        long long43 = dateTimeZone23.convertLocalToUTC((long) 10, true);
        java.lang.String str44 = dateTimeZone23.toString();
        int int46 = dateTimeZone23.getOffset(52L);
        java.lang.String str48 = dateTimeZone23.getNameKey(0L);
        java.lang.String str50 = dateTimeZone23.getName((long) 0);
        long long52 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (long) 0);
        java.lang.String str54 = dateTimeZone0.getName(349200010L);
        int int56 = dateTimeZone0.getOffsetFromLocal((-7260001L));
        java.lang.String str57 = dateTimeZone0.getID();
        long long59 = dateTimeZone0.nextTransition(190800000L);
        int int61 = dateTimeZone0.getStandardOffset(52L);
        int int63 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone0.getShortName((-471060000L), locale65);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 115200000L + "'", long38 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 190800000L + "'", long59 == 190800000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
    }

    @Test
    public void test21838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21838");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long10 = dateTimeZone0.nextTransition((long) 0);
        long long12 = dateTimeZone0.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long19 = dateTimeZone0.nextTransition(10L);
        java.lang.Class<?> wildcardClass20 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test21839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21839");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone1.getOffset(readableInstant5);
        boolean boolean8 = dateTimeZone1.isStandardOffset((-176339968L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        boolean boolean14 = dateTimeZone9.isStandardOffset(100L);
        java.lang.String str15 = dateTimeZone9.getID();
        long long17 = dateTimeZone9.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone18 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        int int24 = dateTimeZone21.getStandardOffset(0L);
        java.lang.String str26 = dateTimeZone21.getShortName((long) (byte) 100);
        long long28 = dateTimeZone21.previousTransition((long) (short) 100);
        long long30 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, 127499999L);
        java.lang.String str31 = dateTimeZone21.toString();
        java.util.TimeZone timeZone32 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        boolean boolean35 = dateTimeZone1.equals((java.lang.Object) dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 127499999L + "'", long30 == 127499999L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test21840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21840");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:10");
        int int3 = dateTimeZone1.getStandardOffset(243120097L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone6.getShortName((-1L), locale11);
        int int14 = dateTimeZone6.getOffsetFromLocal(0L);
        int int16 = dateTimeZone6.getStandardOffset((long) (byte) 10);
        java.lang.String str18 = dateTimeZone6.getName((long) (byte) 10);
        long long20 = dateTimeZone6.previousTransition(52L);
        long long22 = dateTimeZone5.getMillisKeepLocal(dateTimeZone6, (long) 'a');
        long long25 = dateTimeZone6.adjustOffset((long) (byte) 0, false);
        long long28 = dateTimeZone6.adjustOffset(349200010L, false);
        long long30 = dateTimeZone6.nextTransition((-230399968L));
        long long32 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-467999903L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.equals((java.lang.Object) 100);
        java.lang.String str37 = dateTimeZone33.getShortName((long) 1);
        java.lang.String str39 = dateTimeZone33.getNameKey((long) (short) 100);
        long long41 = dateTimeZone1.getMillisKeepLocal(dateTimeZone33, 43320000L);
        long long45 = dateTimeZone33.convertLocalToUTC(154320052L, false, (-464399999L));
        java.util.TimeZone timeZone46 = dateTimeZone33.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4200000 + "'", int3 == 4200000);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360000097L + "'", long22 == 360000097L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 349200010L + "'", long28 == 349200010L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-230399968L) + "'", long30 == (-230399968L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-463799903L) + "'", long32 == (-463799903L));
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 47520000L + "'", long41 == 47520000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 154320052L + "'", long45 == 154320052L);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21841");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        long long11 = dateTimeZone9.convertUTCToLocal((long) (byte) 0);
        java.lang.String str12 = dateTimeZone9.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str16 = dateTimeZone14.getShortName((long) 'a');
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone14.getShortName((long) (short) -1, locale18);
        int int21 = dateTimeZone14.getOffset((long) 115200000);
        long long23 = dateTimeZone9.getMillisKeepLocal(dateTimeZone14, (long) (short) 0);
        boolean boolean25 = dateTimeZone14.isStandardOffset((long) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone26.getOffset(readableInstant27);
        int int30 = dateTimeZone26.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getStandardOffset(0L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getShortName((-1L), locale36);
        int int39 = dateTimeZone31.getOffsetFromLocal(0L);
        long long41 = dateTimeZone26.getMillisKeepLocal(dateTimeZone31, (long) 115200000);
        boolean boolean43 = dateTimeZone26.isStandardOffset(115200000L);
        long long46 = dateTimeZone26.convertLocalToUTC((long) 10, true);
        java.lang.String str47 = dateTimeZone26.toString();
        int int49 = dateTimeZone26.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = dateTimeZone26.getOffset(readableInstant50);
        int int53 = dateTimeZone26.getStandardOffset(97L);
        java.lang.String str55 = dateTimeZone26.getName(100L);
        long long57 = dateTimeZone14.getMillisKeepLocal(dateTimeZone26, 234000010L);
        java.lang.String str59 = dateTimeZone14.getShortName(100L);
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone14.getName((-359999910L), locale61);
        boolean boolean63 = dateTimeZone0.equals((java.lang.Object) str62);
        int int65 = dateTimeZone0.getOffset(822659996L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:00" + "'", str16, "+32:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+32:00" + "'", str19, "+32:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 115200000 + "'", int21 == 115200000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115200000L) + "'", long23 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 115200000L + "'", long41 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 349200010L + "'", long57 == 349200010L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+32:00" + "'", str59, "+32:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+32:00" + "'", str62, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test21842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21842");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition((long) 115200000);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) 'a');
        boolean boolean9 = dateTimeZone0.isFixed();
        long long11 = dateTimeZone0.previousTransition((long) (byte) 100);
        java.lang.String str12 = dateTimeZone0.toString();
        long long14 = dateTimeZone0.previousTransition((-234060001L));
        java.lang.String str15 = dateTimeZone0.getID();
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        int int18 = dateTimeZone0.getStandardOffset((-34139948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 115200000L + "'", long4 == 115200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-234060001L) + "'", long14 == (-234060001L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test21843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21843");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone0.getNameKey(100L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getNameKey(1L);
        int int19 = dateTimeZone12.getOffset((-1L));
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 110L);
        long long24 = dateTimeZone0.adjustOffset(10L, false);
        java.lang.String str26 = dateTimeZone0.getName(75600000L);
        java.lang.String str27 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int30 = dateTimeZone0.getOffsetFromLocal((-354480000L));
        java.lang.String str32 = dateTimeZone0.getShortName((-3660001L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        int int36 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName((-1L), locale38);
        java.lang.String str40 = dateTimeZone33.getID();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean42 = dateTimeZone41.isFixed();
        int int44 = dateTimeZone41.getStandardOffset(0L);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone41.getShortName((-1L), locale46);
        int int49 = dateTimeZone41.getOffsetFromLocal(0L);
        java.lang.String str51 = dateTimeZone41.getShortName(0L);
        java.lang.String str53 = dateTimeZone41.getShortName(1L);
        long long55 = dateTimeZone33.getMillisKeepLocal(dateTimeZone41, (long) ' ');
        java.lang.String str57 = dateTimeZone33.getNameKey((long) 126060000);
        java.lang.String str59 = dateTimeZone33.getShortName((-118800000L));
        long long62 = dateTimeZone33.convertLocalToUTC((-359400000L), true);
        boolean boolean64 = dateTimeZone33.isStandardOffset(1920000L);
        long long66 = dateTimeZone0.getMillisKeepLocal(dateTimeZone33, 244800000L);
        long long69 = dateTimeZone0.adjustOffset(829440000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 110L + "'", long21 == 110L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 32L + "'", long55 == 32L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-359400000L) + "'", long62 == (-359400000L));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 244800000L + "'", long66 == 244800000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 829440000L + "'", long69 == 829440000L);
    }

    @Test
    public void test21844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21844");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str7 = dateTimeZone0.getName(52L);
        long long9 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str11 = dateTimeZone0.getName(115199999L);
        int int13 = dateTimeZone0.getOffsetFromLocal(35L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21845");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test21846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21846");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 10);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getShortName(115860000L, locale4);
        long long7 = dateTimeZone2.convertUTCToLocal(79200010L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+100:10" + "'", str5, "+100:10");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 439800010L + "'", long7 == 439800010L);
    }

    @Test
    public void test21847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21847");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        boolean boolean7 = dateTimeZone1.isStandardOffset((-3600000L));
        int int9 = dateTimeZone1.getStandardOffset((-511199990L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName((-1L), locale17);
        int int20 = dateTimeZone12.getOffsetFromLocal(0L);
        int int22 = dateTimeZone12.getStandardOffset((long) (byte) 10);
        java.lang.String str24 = dateTimeZone12.getName((long) (byte) 10);
        long long26 = dateTimeZone12.previousTransition(52L);
        long long28 = dateTimeZone11.getMillisKeepLocal(dateTimeZone12, (long) 'a');
        java.lang.String str30 = dateTimeZone11.getShortName(100L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forID("UTC");
        int int34 = dateTimeZone32.getStandardOffset(0L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone32.getShortName((long) (byte) 0, locale36);
        long long39 = dateTimeZone32.nextTransition((long) (byte) -1);
        long long41 = dateTimeZone32.convertUTCToLocal((long) (byte) 10);
        long long43 = dateTimeZone32.nextTransition((long) 1);
        int int45 = dateTimeZone32.getOffsetFromLocal(0L);
        long long47 = dateTimeZone11.getMillisKeepLocal(dateTimeZone32, (long) (byte) 100);
        long long49 = dateTimeZone32.previousTransition(835200097L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getShortName((long) 115200000, locale52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = dateTimeZone50.getOffset(readableInstant54);
        java.lang.String str57 = dateTimeZone50.getShortName(32L);
        java.lang.String str59 = dateTimeZone50.getShortName((-3599903L));
        long long61 = dateTimeZone50.previousTransition((-349199990L));
        java.lang.Class<?> wildcardClass62 = dateTimeZone50.getClass();
        boolean boolean63 = dateTimeZone32.equals((java.lang.Object) dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone32.isLocalDateTimeGap(localDateTime64);
        long long67 = dateTimeZone1.getMillisKeepLocal(dateTimeZone32, (-125999965L));
        long long69 = dateTimeZone32.convertUTCToLocal((-242579948L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 360000097L + "'", long28 == 360000097L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:00" + "'", str30, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 360000100L + "'", long47 == 360000100L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 835200097L + "'", long49 == 835200097L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-349199990L) + "'", long61 == (-349199990L));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-125999965L) + "'", long67 == (-125999965L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-242579948L) + "'", long69 == (-242579948L));
    }

    @Test
    public void test21848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21848");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str7 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        int int11 = dateTimeZone0.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.convertLocalToUTC((-53999902L), true, 223380100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-53999902L) + "'", long15 == (-53999902L));
    }

    @Test
    public void test21849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21849");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        java.lang.String str12 = dateTimeZone0.getShortName(1L);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 0, true);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getShortName((long) 115200000, locale18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone16.getOffset(readableInstant20);
        java.lang.String str23 = dateTimeZone16.getShortName(32L);
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (-1L));
        long long28 = dateTimeZone0.adjustOffset(0L, false);
        int int30 = dateTimeZone0.getStandardOffset(127920035L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test21850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21850");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        long long20 = dateTimeZone1.convertLocalToUTC((-187799900L), false, 359999989L);
        java.lang.String str22 = dateTimeZone1.getShortName((-113100000L));
        java.lang.String str24 = dateTimeZone1.getShortName((-125520000L));
        boolean boolean26 = dateTimeZone1.isStandardOffset(131520097L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-302999900L) + "'", long20 == (-302999900L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+32:00" + "'", str22, "+32:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test21851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21851");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.String str2 = dateTimeZone0.toString();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone0.getName(467519990L, locale4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
    }

    @Test
    public void test21852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21852");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str16 = dateTimeZone0.getID();
        long long18 = dateTimeZone0.nextTransition((-7260001L));
        boolean boolean19 = dateTimeZone0.isFixed();
        long long21 = dateTimeZone0.previousTransition((-360000001L));
        long long23 = dateTimeZone0.previousTransition((-360060000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-7260001L) + "'", long18 == (-7260001L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360000001L) + "'", long21 == (-360000001L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360060000L) + "'", long23 == (-360060000L));
    }

    @Test
    public void test21853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21853");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone15.getOffset(readableInstant23);
        boolean boolean26 = dateTimeZone15.isStandardOffset((long) (short) 1);
        long long30 = dateTimeZone15.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int32 = dateTimeZone15.getOffsetFromLocal((long) (short) 0);
        java.lang.String str34 = dateTimeZone15.getNameKey((long) ' ');
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone15.getShortName((long) (byte) 100, locale36);
        long long39 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (-115200000L));
        int int41 = dateTimeZone15.getOffset((-1L));
        long long44 = dateTimeZone15.adjustOffset(359999998L, false);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone45.isFixed();
        int int48 = dateTimeZone45.getStandardOffset(0L);
        java.lang.String str50 = dateTimeZone45.getNameKey(1L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone45.getShortName((long) (short) -1, locale52);
        java.lang.String str55 = dateTimeZone45.getShortName((long) (-1));
        long long57 = dateTimeZone45.nextTransition(118800001L);
        java.lang.String str58 = dateTimeZone45.getID();
        boolean boolean59 = dateTimeZone15.equals((java.lang.Object) str58);
        int int61 = dateTimeZone15.getStandardOffset((-357900032L));
        long long63 = dateTimeZone15.previousTransition((-297119968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 115200000L + "'", long30 == 115200000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-115200000L) + "'", long39 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 359999998L + "'", long44 == 359999998L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 118800001L + "'", long57 == 118800001L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-297119968L) + "'", long63 == (-297119968L));
    }

    @Test
    public void test21854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21854");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(52L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test21855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21855");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int3 = dateTimeZone1.getOffset(1L);
        long long5 = dateTimeZone1.previousTransition((long) (short) 1);
        java.lang.String str6 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean9 = dateTimeZone1.isStandardOffset(3599999L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getName(190860000L, locale11);
        java.lang.String str13 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115200000 + "'", int3 == 115200000);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+32:00" + "'", str6, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+32:00" + "'", str12, "+32:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+32:00" + "'", str13, "+32:00");
    }

    @Test
    public void test21856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str4 = dateTimeZone0.getShortName((long) '4');
        boolean boolean5 = dateTimeZone0.isFixed();
        int int7 = dateTimeZone0.getStandardOffset((long) 600000);
        boolean boolean9 = dateTimeZone0.isStandardOffset((-3L));
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        long long31 = dateTimeZone24.convertUTCToLocal((-3600000L));
        boolean boolean33 = dateTimeZone24.isStandardOffset(108480000L);
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone24, (-244799999L));
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone24.getOffset(readableInstant36);
        long long39 = dateTimeZone24.convertUTCToLocal((-5520000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115200000L + "'", long2 == 115200000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+32:00" + "'", str4, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 115200000 + "'", int7 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-7200000L) + "'", long31 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-125999999L) + "'", long35 == (-125999999L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-9120000L) + "'", long39 == (-9120000L));
    }

    @Test
    public void test21857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21857");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone2.convertUTCToLocal((long) (-1));
        java.lang.String str8 = dateTimeZone2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 359999999L + "'", long7 == 359999999L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+100:00" + "'", str8, "+100:00");
    }

    @Test
    public void test21858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21858");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:10");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        long long4 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) (byte) 1);
        long long6 = dateTimeZone1.nextTransition(54899900L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-323399999L) + "'", long4 == (-323399999L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 54899900L + "'", long6 == 54899900L);
    }

    @Test
    public void test21859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21859");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        java.lang.String str10 = dateTimeZone1.getNameKey((long) (short) 0);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getShortName((long) (short) -1, locale12);
        long long15 = dateTimeZone1.nextTransition((-127920000L));
        java.lang.String str17 = dateTimeZone1.getName((long) (-3600000));
        java.lang.String str18 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-127920000L) + "'", long15 == (-127920000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test21860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21860");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName((long) (-1), locale8);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str12 = dateTimeZone0.getNameKey((long) 115200000);
        int int14 = dateTimeZone0.getOffset((-1L));
        long long16 = dateTimeZone0.nextTransition(110L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone0.getOffset(readableInstant17);
        java.lang.String str20 = dateTimeZone0.getName((-60011L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test21861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21861");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long11 = dateTimeZone0.previousTransition((long) 115200000);
        int int13 = dateTimeZone0.getOffsetFromLocal(97L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        java.lang.Class<?> wildcardClass16 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test21862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21862");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        int int16 = dateTimeZone0.getOffset((-127920000L));
        long long18 = dateTimeZone0.nextTransition(246960010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 246960010L + "'", long18 == 246960010L);
    }

    @Test
    public void test21863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21863");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        long long19 = dateTimeZone0.previousTransition(10L);
        long long22 = dateTimeZone0.convertLocalToUTC(152L, false);
        long long24 = dateTimeZone0.nextTransition(72000002L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 152L + "'", long22 == 152L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 72000002L + "'", long24 == 72000002L);
    }

    @Test
    public void test21864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21864");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        long long9 = dateTimeZone1.convertUTCToLocal((-1L));
        long long12 = dateTimeZone1.adjustOffset((long) (short) 0, false);
        int int14 = dateTimeZone1.getOffsetFromLocal((-60001L));
        boolean boolean15 = dateTimeZone1.isFixed();
        int int17 = dateTimeZone1.getStandardOffset((-65L));
        boolean boolean19 = dateTimeZone1.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 359999999L + "'", long9 == 359999999L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360000000 + "'", int14 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 360000000 + "'", int17 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test21865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getShortName((-115199999L), locale10);
        java.lang.Class<?> wildcardClass12 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test21866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21866");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (short) 10);
        int int13 = dateTimeZone6.getOffset((long) (short) 1);
        int int15 = dateTimeZone6.getStandardOffset((long) 100);
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) 97);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.lang.String str23 = dateTimeZone18.getShortName((long) (byte) 100);
        java.lang.String str25 = dateTimeZone18.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone18.getOffset(readableInstant26);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) 97);
        long long33 = dateTimeZone18.convertLocalToUTC(360000000L, true, 356400000L);
        java.util.TimeZone timeZone34 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long38 = dateTimeZone35.adjustOffset(42L, true);
        java.lang.String str40 = dateTimeZone35.getShortName(0L);
        int int42 = dateTimeZone35.getOffset((long) 351300000);
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone35.getOffset(readableInstant43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 360000000L + "'", long33 == 360000000L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 42L + "'", long38 == 42L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test21867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21867");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        java.lang.String str12 = dateTimeZone1.getName((long) (short) -1);
        long long14 = dateTimeZone1.previousTransition((-115199900L));
        long long16 = dateTimeZone1.nextTransition(110L);
        java.util.TimeZone timeZone17 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.lang.String str20 = dateTimeZone19.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199900L) + "'", long14 == (-115199900L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
    }

    @Test
    public void test21868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21868");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName((long) (byte) 0, locale5);
        java.lang.String str8 = dateTimeZone0.getNameKey(115200001L);
        boolean boolean10 = dateTimeZone0.isStandardOffset(32L);
        boolean boolean11 = dateTimeZone0.isFixed();
        boolean boolean12 = dateTimeZone0.isFixed();
        java.lang.String str13 = dateTimeZone0.getID();
        boolean boolean14 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3600000L) + "'", long2 == (-3600000L));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
// flaky:         org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test21869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21869");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        long long7 = dateTimeZone0.convertLocalToUTC(111600000L, false);
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 111600000L + "'", long7 == 111600000L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21870");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        long long9 = dateTimeZone1.adjustOffset((long) (-1), true);
        int int11 = dateTimeZone1.getOffset((-3600000L));
        java.lang.String str13 = dateTimeZone1.getNameKey(302400000L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone1.getOffset(readableInstant14);
        long long18 = dateTimeZone1.adjustOffset(700200000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 700200000L + "'", long18 == 700200000L);
    }

    @Test
    public void test21871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21871");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str8 = dateTimeZone0.getNameKey(600000L);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.lang.String str15 = dateTimeZone10.getShortName((long) (byte) 100);
        int int17 = dateTimeZone10.getStandardOffset(359999999L);
        long long19 = dateTimeZone10.previousTransition(3600032L);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        int int34 = dateTimeZone26.getOffsetFromLocal(0L);
        long long36 = dateTimeZone21.getMillisKeepLocal(dateTimeZone26, (long) 115200000);
        boolean boolean38 = dateTimeZone21.isStandardOffset(115200000L);
        long long41 = dateTimeZone21.convertLocalToUTC((long) 10, true);
        java.lang.String str42 = dateTimeZone21.toString();
        int int44 = dateTimeZone21.getOffset(52L);
        java.lang.String str46 = dateTimeZone21.getNameKey(0L);
        long long48 = dateTimeZone10.getMillisKeepLocal(dateTimeZone21, (-187799900L));
        int int50 = dateTimeZone10.getOffsetFromLocal(172799991L);
        org.joda.time.ReadableInstant readableInstant51 = null;
        int int52 = dateTimeZone10.getOffset(readableInstant51);
        int int54 = dateTimeZone10.getStandardOffset((-11L));
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone10.getShortName(349800001L, locale56);
        long long59 = dateTimeZone0.getMillisKeepLocal(dateTimeZone10, (-135119903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3600032L + "'", long19 == 3600032L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 115200000L + "'", long36 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-187799900L) + "'", long48 == (-187799900L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-135119903L) + "'", long59 == (-135119903L));
    }

    @Test
    public void test21872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21872");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone0.adjustOffset((long) (short) 10, false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getNameKey(1L);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 100);
        boolean boolean17 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean22 = dateTimeZone0.equals((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) 100);
        long long27 = dateTimeZone18.adjustOffset(349200010L, false);
        java.util.TimeZone timeZone28 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 349200010L + "'", long27 == 349200010L);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test21873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21873");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        long long23 = dateTimeZone0.convertLocalToUTC(115200100L, false);
        long long26 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        java.lang.String str28 = dateTimeZone0.getShortName(100L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName((-1L), locale34);
        java.lang.String str37 = dateTimeZone29.getShortName(1L);
        long long39 = dateTimeZone29.nextTransition((long) 0);
        long long41 = dateTimeZone29.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean45 = dateTimeZone29.equals((java.lang.Object) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        int int49 = dateTimeZone29.getOffsetFromLocal(115200000L);
        long long51 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, (-36059948L));
        int int53 = dateTimeZone0.getOffset((-349199965L));
        int int55 = dateTimeZone0.getOffsetFromLocal((-194400000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 115200100L + "'", long23 == 115200100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 359999999L + "'", long26 == 359999999L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-36059948L) + "'", long51 == (-36059948L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test21874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21874");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long5 = dateTimeZone0.nextTransition((long) (byte) 0);
        long long8 = dateTimeZone0.adjustOffset(287939996L, true);
        long long10 = dateTimeZone0.nextTransition(599999L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getStandardOffset(0L);
        java.lang.String str16 = dateTimeZone11.getNameKey(1L);
        java.lang.String str18 = dateTimeZone11.getShortName((long) 100);
        int int20 = dateTimeZone11.getStandardOffset(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName(244800001L, locale23);
        boolean boolean25 = dateTimeZone0.equals((java.lang.Object) locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 287939996L + "'", long8 == 287939996L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 599999L + "'", long10 == 599999L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test21875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        java.lang.String str26 = dateTimeZone3.getShortName((-417599900L));
        boolean boolean28 = dateTimeZone3.isStandardOffset(826259997L);
        int int30 = dateTimeZone3.getStandardOffset(481920000L);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone32.getName((long) ' ', locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone36.isFixed();
        int int39 = dateTimeZone36.getStandardOffset(0L);
        java.lang.String str41 = dateTimeZone36.getNameKey(1L);
        java.lang.String str43 = dateTimeZone36.getShortName((long) 100);
        long long46 = dateTimeZone36.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        long long49 = dateTimeZone36.nextTransition((-115200001L));
        boolean boolean50 = dateTimeZone32.equals((java.lang.Object) (-115200001L));
        long long52 = dateTimeZone32.nextTransition(109920000L);
        long long54 = dateTimeZone32.convertUTCToLocal(0L);
        long long56 = dateTimeZone3.getMillisKeepLocal(dateTimeZone32, (-244799965L));
        java.lang.Class<?> wildcardClass57 = dateTimeZone3.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:00" + "'", str35, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-115200001L) + "'", long49 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 109920000L + "'", long52 == 109920000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3600000L) + "'", long54 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-241199965L) + "'", long56 == (-241199965L));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test21876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21876");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone2.equals(obj10);
        int int13 = dateTimeZone2.getOffsetFromLocal((-118799903L));
        java.lang.String str15 = dateTimeZone2.getNameKey(10320000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 187200000 + "'", int13 == 187200000);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test21877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str7 = dateTimeZone0.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        java.lang.String str16 = dateTimeZone8.getShortName(1L);
        long long18 = dateTimeZone8.nextTransition((long) 0);
        long long20 = dateTimeZone8.nextTransition((long) (short) -1);
        long long22 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (-7200000L));
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        java.lang.String str25 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-7200000L) + "'", long22 == (-7200000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
    }

    @Test
    public void test21878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21878");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) (short) 1);
        boolean boolean10 = dateTimeZone1.isStandardOffset((-118799913L));
        java.lang.String str11 = dateTimeZone1.getID();
        java.lang.String str13 = dateTimeZone1.getName(711180009L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test21879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21879");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        long long5 = dateTimeZone1.previousTransition(115200100L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.lang.String str9 = dateTimeZone7.getName(10L);
        java.lang.String str10 = dateTimeZone7.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone7.getName((long) '4', locale12);
        long long15 = dateTimeZone7.previousTransition((long) (short) 1);
        long long17 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) 115200000);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone7.getShortName(34080032L, locale19);
        java.lang.String str22 = dateTimeZone7.getNameKey((-1011599997L));
        java.lang.String str24 = dateTimeZone7.getShortName((-43199998L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 115200100L + "'", long5 == 115200100L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 118800000L + "'", long17 == 118800000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
    }

    @Test
    public void test21880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21880");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        boolean boolean5 = dateTimeZone0.isFixed();
        java.lang.String str6 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        int int10 = dateTimeZone0.getStandardOffset(187200000L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName(0L, locale12);
        java.lang.String str14 = dateTimeZone0.toString();
        long long16 = dateTimeZone0.nextTransition(67260100L);
        java.lang.String str18 = dateTimeZone0.getShortName((-125520000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 67260100L + "'", long16 == 67260100L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test21881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21881");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone2.getOffset(readableInstant8);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone2.equals(obj10);
        long long13 = dateTimeZone2.previousTransition((long) 127920000);
        long long16 = dateTimeZone2.convertLocalToUTC((-122400000L), true);
        int int18 = dateTimeZone2.getOffset((long) 126060000);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone2.getShortName((-237600000L), locale20);
        int int23 = dateTimeZone2.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 187200000 + "'", int6 == 187200000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+52:00" + "'", str7, "+52:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 187200000 + "'", int9 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 127920000L + "'", long13 == 127920000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-309600000L) + "'", long16 == (-309600000L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 187200000 + "'", int18 == 187200000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+52:00" + "'", str21, "+52:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 187200000 + "'", int23 == 187200000);
    }

    @Test
    public void test21882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21882");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        long long18 = dateTimeZone0.adjustOffset((long) (byte) 0, false);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str24 = dateTimeZone22.getShortName((long) 'a');
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone22.getShortName((long) (short) -1, locale26);
        int int29 = dateTimeZone22.getOffset((long) 115200000);
        int int31 = dateTimeZone22.getStandardOffset((long) (short) 10);
        int int33 = dateTimeZone22.getStandardOffset((-1L));
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone22.getName((long) 187200000, locale35);
        java.lang.String str37 = dateTimeZone22.getID();
        java.lang.String str38 = dateTimeZone22.toString();
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (-142319903L));
        boolean boolean42 = dateTimeZone22.isStandardOffset(287999991L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+32:00" + "'", str24, "+32:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+32:00" + "'", str27, "+32:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 115200000 + "'", int29 == 115200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 115200000 + "'", int31 == 115200000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 115200000 + "'", int33 == 115200000);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+32:00" + "'", str36, "+32:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+32:00" + "'", str37, "+32:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+32:00" + "'", str38, "+32:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-257519903L) + "'", long40 == (-257519903L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test21883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21883");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 126000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        long long17 = dateTimeZone0.nextTransition(126060022L);
        java.lang.String str18 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 126060022L + "'", long17 == 126060022L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test21885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21885");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        boolean boolean17 = dateTimeZone0.isStandardOffset(115200000L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 10, true);
        java.lang.String str21 = dateTimeZone0.toString();
        int int23 = dateTimeZone0.getOffset(52L);
        java.lang.String str25 = dateTimeZone0.getNameKey(0L);
        java.lang.String str27 = dateTimeZone0.getName((long) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forID("UTC");
        int int31 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone29.getShortName((long) (byte) 0, locale33);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) locale33);
        long long37 = dateTimeZone0.nextTransition((long) 'a');
        boolean boolean39 = dateTimeZone0.isStandardOffset(115200097L);
        java.lang.String str41 = dateTimeZone0.getNameKey((-36059958L));
        long long43 = dateTimeZone0.convertUTCToLocal(8099990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 8099990L + "'", long43 == 8099990L);
    }

    @Test
    public void test21886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 600000);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (short) 10);
        java.lang.String str19 = dateTimeZone15.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        int int23 = dateTimeZone20.getStandardOffset(0L);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone20.getShortName((-1L), locale25);
        java.lang.String str28 = dateTimeZone20.getShortName(1L);
        long long30 = dateTimeZone15.getMillisKeepLocal(dateTimeZone20, (long) (-1));
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone15.getName(0L, locale32);
        long long35 = dateTimeZone10.getMillisKeepLocal(dateTimeZone15, 1L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone15.getName((long) '4', locale37);
        boolean boolean39 = dateTimeZone15.isFixed();
        boolean boolean40 = dateTimeZone1.equals((java.lang.Object) boolean39);
        int int42 = dateTimeZone1.getOffset(359999998L);
        java.lang.String str44 = dateTimeZone1.getShortName(75600000L);
        long long46 = dateTimeZone1.convertUTCToLocal(129600001L);
        long long48 = dateTimeZone1.convertUTCToLocal(257039999L);
        java.lang.Class<?> wildcardClass49 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 129600011L + "'", long46 == 129600011L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 257040009L + "'", long48 == 257040009L);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test21887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21887");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (short) 0);
        boolean boolean13 = dateTimeZone11.isStandardOffset(115199999L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone11.getOffset(readableInstant14);
        java.lang.String str16 = dateTimeZone11.getID();
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone11.getOffset(readableInstant17);
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-118800000L));
        long long23 = dateTimeZone0.convertLocalToUTC(10L, false);
        long long26 = dateTimeZone0.convertLocalToUTC((-125999965L), false);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, 32);
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 360600001L);
        boolean boolean32 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 187200000 + "'", int15 == 187200000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+52:00" + "'", str16, "+52:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 187200000 + "'", int18 == 187200000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-306000000L) + "'", long20 == (-306000000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-125999965L) + "'", long26 == (-125999965L));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 355080001L + "'", long31 == 355080001L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test21888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21888");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(360060000L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forID("UTC");
        int int10 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone8.getShortName((long) (byte) 0, locale12);
        int int15 = dateTimeZone8.getOffset((long) (byte) 100);
        java.lang.String str17 = dateTimeZone8.getNameKey((long) (short) 0);
        java.lang.String str19 = dateTimeZone8.getName(221280010L);
        java.lang.String str21 = dateTimeZone8.getShortName((-111540000L));
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (-359399900L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        long long26 = dateTimeZone24.convertUTCToLocal((long) (byte) 0);
        int int28 = dateTimeZone24.getOffsetFromLocal((long) (-1));
        int int30 = dateTimeZone24.getStandardOffset((-7200000L));
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone24.getShortName(360000097L, locale32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone24.getOffset(readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str39 = dateTimeZone37.getShortName((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone40.getOffset(readableInstant41);
        int int44 = dateTimeZone40.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone45.isFixed();
        int int48 = dateTimeZone45.getStandardOffset(0L);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone45.getShortName((-1L), locale50);
        int int53 = dateTimeZone45.getOffsetFromLocal(0L);
        long long55 = dateTimeZone40.getMillisKeepLocal(dateTimeZone45, (long) 115200000);
        long long57 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        long long60 = dateTimeZone58.convertUTCToLocal((long) (byte) 0);
        java.lang.String str61 = dateTimeZone58.toString();
        long long63 = dateTimeZone58.convertUTCToLocal(0L);
        int int65 = dateTimeZone58.getOffset((long) (short) 100);
        long long67 = dateTimeZone37.getMillisKeepLocal(dateTimeZone58, (-111600001L));
        long long69 = dateTimeZone24.getMillisKeepLocal(dateTimeZone58, (-4200011L));
        long long71 = dateTimeZone2.getMillisKeepLocal(dateTimeZone58, (-35520064L));
        java.lang.String str73 = dateTimeZone2.getShortName(241200000L);
        java.lang.String str75 = dateTimeZone2.getName(3599989L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 360060000L + "'", long4 == 360060000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-359399900L) + "'", long23 == (-359399900L));
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+32:00" + "'", str39, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 115200000L + "'", long55 == 115200000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 115200001L + "'", long57 == 115200001L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 3599999L + "'", long67 == 3599999L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-4200011L) + "'", long69 == (-4200011L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-35520064L) + "'", long71 == (-35520064L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
    }

    @Test
    public void test21889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21889");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone9.getShortName((-1L), locale14);
        java.lang.String str17 = dateTimeZone9.getShortName(1L);
        long long19 = dateTimeZone4.getMillisKeepLocal(dateTimeZone9, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone20.convertUTCToLocal(0L);
        java.lang.String str26 = dateTimeZone20.toString();
        long long29 = dateTimeZone20.convertLocalToUTC(100L, true);
        java.lang.String str31 = dateTimeZone20.getName((long) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        boolean boolean33 = dateTimeZone9.equals((java.lang.Object) dateTimeZone20);
        java.lang.String str34 = dateTimeZone20.getID();
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone20.getName(41760000L, locale36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test21890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21890");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        int int4 = dateTimeZone0.getStandardOffset((long) ' ');
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((-244800021L), locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
    }

    @Test
    public void test21891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21891");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.nextTransition((long) '4');
        java.lang.String str15 = dateTimeZone0.getShortName(3600032L);
        long long17 = dateTimeZone0.nextTransition((-127920000L));
        long long19 = dateTimeZone0.nextTransition(363659998L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(126060000);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        int int25 = dateTimeZone22.getStandardOffset(0L);
        java.lang.String str27 = dateTimeZone22.getShortName((long) (byte) 100);
        java.lang.String str29 = dateTimeZone22.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone22.getOffset(readableInstant30);
        long long34 = dateTimeZone22.adjustOffset((long) (byte) 1, false);
        java.lang.String str35 = dateTimeZone22.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str38 = dateTimeZone22.getName(0L);
        boolean boolean39 = dateTimeZone21.equals((java.lang.Object) str38);
        int int41 = dateTimeZone21.getStandardOffset((-70080000L));
        long long43 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (-618119900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-127920000L) + "'", long17 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 363659998L + "'", long19 == 363659998L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 126060000 + "'", int41 == 126060000);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-744179900L) + "'", long43 == (-744179900L));
    }

    @Test
    public void test21892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21892");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(37920000, 349800000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 349800000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21893");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getOffsetFromLocal((long) 600000);
        java.lang.String str6 = dateTimeZone1.getNameKey(32L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName(460799979L, locale8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
    }

    @Test
    public void test21894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21894");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        long long20 = dateTimeZone1.convertLocalToUTC((-187799900L), false, 359999989L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = dateTimeZone1.getOffset(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone23.getShortName((-1L), locale28);
        int int31 = dateTimeZone23.getOffsetFromLocal(0L);
        int int33 = dateTimeZone23.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int36 = dateTimeZone23.getOffset((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone23.getOffset(readableInstant37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone23.getOffset(readableInstant39);
        java.lang.String str41 = dateTimeZone23.getID();
        boolean boolean42 = dateTimeZone23.isFixed();
        java.lang.Class<?> wildcardClass43 = dateTimeZone23.getClass();
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) wildcardClass43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-302999900L) + "'", long20 == (-302999900L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 115200000 + "'", int22 == 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21895");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertUTCToLocal(10800100L);
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone0.isLocalDateTimeGap(localDateTime6);
        int int9 = dateTimeZone0.getOffsetFromLocal((-115199991L));
        java.lang.String str11 = dateTimeZone0.getShortName((-111600065L));
        java.lang.String str13 = dateTimeZone0.getShortName(96L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10800100L + "'", long5 == 10800100L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test21896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21896");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        int int14 = dateTimeZone0.getOffsetFromLocal(0L);
        boolean boolean15 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test21897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) 'a', true, (long) (byte) -1);
        boolean boolean18 = dateTimeZone0.equals((java.lang.Object) (-3599990L));
        long long21 = dateTimeZone0.convertLocalToUTC((-115199900L), false);
        java.lang.String str22 = dateTimeZone0.toString();
        java.lang.String str24 = dateTimeZone0.getNameKey((-115199923L));
        java.lang.String str26 = dateTimeZone0.getName((-11460001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-115199900L) + "'", long21 == (-115199900L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test21898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21898");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.lang.String str13 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.equals((java.lang.Object) 100);
        int int18 = dateTimeZone14.getStandardOffset((long) ' ');
        long long20 = dateTimeZone14.convertUTCToLocal((long) 'a');
        long long23 = dateTimeZone14.convertLocalToUTC(127920000L, true);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long28 = dateTimeZone14.convertLocalToUTC((-7260001L), false, (long) 32);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, (-151800000L));
        int int32 = dateTimeZone0.getStandardOffset((-178080000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 127920000L + "'", long23 == 127920000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-7260001L) + "'", long28 == (-7260001L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-151800000L) + "'", long30 == (-151800000L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test21899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21899");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone2.convertUTCToLocal((long) (byte) 0);
        java.lang.String str5 = dateTimeZone2.toString();
        long long7 = dateTimeZone2.convertUTCToLocal(0L);
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) 0L);
        long long11 = dateTimeZone1.adjustOffset(359999999L, false);
        long long14 = dateTimeZone1.convertLocalToUTC(360000097L, false);
        long long17 = dateTimeZone1.adjustOffset((-127920011L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 359999999L + "'", long11 == 359999999L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 360000000L + "'", long14 == 360000000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-127920011L) + "'", long17 == (-127920011L));
    }

    @Test
    public void test21900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21900");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) 10, locale4);
        long long8 = dateTimeZone2.convertLocalToUTC((long) (byte) 0, false);
        long long11 = dateTimeZone2.adjustOffset((-232500001L), false);
        int int13 = dateTimeZone2.getOffsetFromLocal(0L);
        long long15 = dateTimeZone2.nextTransition((-1859900L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:32" + "'", str5, "+35:32");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-127920000L) + "'", long8 == (-127920000L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-232500001L) + "'", long11 == (-232500001L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 127920000 + "'", int13 == 127920000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1859900L) + "'", long15 == (-1859900L));
    }

    @Test
    public void test21901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21901");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(115200000);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.nextTransition((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone6.isFixed();
        int int9 = dateTimeZone6.getStandardOffset(0L);
        java.lang.String str11 = dateTimeZone6.getShortName((long) (byte) 100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName((long) 115200000, locale13);
        long long16 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-118799903L));
        int int18 = dateTimeZone1.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone1.getShortName(126060100L);
        long long23 = dateTimeZone1.convertLocalToUTC(349199999L, false);
        java.lang.Class<?> wildcardClass24 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+32:00" + "'", str3, "+32:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 97L + "'", long5 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599903L) + "'", long16 == (-3599903L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 233999999L + "'", long23 == 233999999L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test21902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21902");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        boolean boolean2 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.convertLocalToUTC(1L, true, (long) (byte) 10);
        long long10 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) 10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone0.previousTransition((-228479900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 115200000L + "'", long10 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-228479900L) + "'", long14 == (-228479900L));
    }

    @Test
    public void test21903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21903");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getShortName((long) (byte) 100);
        java.lang.String str12 = dateTimeZone5.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone5.getOffset(readableInstant13);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) (short) 1);
        long long20 = dateTimeZone5.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int22 = dateTimeZone5.getOffsetFromLocal((long) (short) 0);
        java.lang.String str24 = dateTimeZone5.getNameKey((long) ' ');
        java.lang.String str25 = dateTimeZone5.toString();
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, 97L);
        int int29 = dateTimeZone5.getOffset((-360000000L));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone31.getName((long) ' ', locale33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        long long37 = dateTimeZone5.getMillisKeepLocal(dateTimeZone31, (-460799948L));
        java.lang.String str39 = dateTimeZone5.getShortName(592319997L);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone5.getName(200279990L, locale41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-457199948L) + "'", long37 == (-457199948L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test21904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long6 = dateTimeZone0.adjustOffset((long) (short) 0, false);
        int int8 = dateTimeZone0.getOffset((long) 127920000);
        boolean boolean10 = dateTimeZone0.isStandardOffset(122460000L);
        long long12 = dateTimeZone0.nextTransition(5520000L);
        int int14 = dateTimeZone0.getStandardOffset(142320000L);
        long long17 = dateTimeZone0.convertLocalToUTC((-460799948L), false);
        int int19 = dateTimeZone0.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3600000L) + "'", long2 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5520000L + "'", long12 == 5520000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3600000) + "'", int14 == (-3600000));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-457199948L) + "'", long17 == (-457199948L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3600000) + "'", int19 == (-3600000));
    }

    @Test
    public void test21905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21905");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone5.getName(0L, locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        long long27 = dateTimeZone25.convertUTCToLocal(0L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone25.getName(0L, locale29);
        long long32 = dateTimeZone5.getMillisKeepLocal(dateTimeZone25, (-359999900L));
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        int int36 = dateTimeZone33.getStandardOffset(0L);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone33.getShortName((-1L), locale38);
        int int41 = dateTimeZone33.getOffsetFromLocal(0L);
        java.lang.String str43 = dateTimeZone33.getShortName(0L);
        long long45 = dateTimeZone33.nextTransition((long) 0);
        long long47 = dateTimeZone5.getMillisKeepLocal(dateTimeZone33, (-184199900L));
        boolean boolean48 = dateTimeZone33.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-359999900L) + "'", long32 == (-359999900L));
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-184199900L) + "'", long47 == (-184199900L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test21906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21906");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-6720000), 126000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21907");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone4.isFixed();
        int int7 = dateTimeZone4.getStandardOffset(0L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getShortName((-1L), locale9);
        int int12 = dateTimeZone4.getOffsetFromLocal(0L);
        java.lang.String str14 = dateTimeZone4.getShortName(0L);
        java.lang.String str16 = dateTimeZone4.getShortName(359999999L);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (-1L));
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone4.getName(115200035L, locale20);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone4.getShortName(54899997L, locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3600000L) + "'", long2 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-01:00" + "'", str3, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3600001L) + "'", long18 == (-3600001L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test21908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21908");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        int int7 = dateTimeZone0.getOffset((long) (short) 1);
        int int9 = dateTimeZone0.getStandardOffset((long) 115200000);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.nextTransition((long) '4');
        int int15 = dateTimeZone0.getOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long19 = dateTimeZone0.adjustOffset((-232079900L), true);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone0.convertLocalToUTC(53L, true);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone0.getOffset(readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone27.isFixed();
        int int30 = dateTimeZone27.getStandardOffset(0L);
        java.lang.String str32 = dateTimeZone27.getShortName((long) (byte) 100);
        int int34 = dateTimeZone27.getStandardOffset(359999999L);
        long long36 = dateTimeZone27.previousTransition(3600032L);
        java.lang.String str37 = dateTimeZone27.getID();
        long long39 = dateTimeZone27.convertUTCToLocal((long) 349200000);
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) dateTimeZone27);
        java.lang.String str42 = dateTimeZone27.getNameKey((-299399900L));
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone27.isLocalDateTimeGap(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-232079900L) + "'", long19 == (-232079900L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3600032L + "'", long36 == 3600032L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 349200000L + "'", long39 == 349200000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21909");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str7 = dateTimeZone0.getName((long) 0);
        int int9 = dateTimeZone0.getOffset((long) 100);
        int int11 = dateTimeZone0.getStandardOffset((long) 1);
        long long13 = dateTimeZone0.previousTransition((long) 0);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        int int17 = dateTimeZone0.getStandardOffset(71999991L);
        long long20 = dateTimeZone0.convertLocalToUTC((-204719948L), true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        int int25 = dateTimeZone21.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone26.isFixed();
        int int29 = dateTimeZone26.getStandardOffset(0L);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getShortName((-1L), locale31);
        int int34 = dateTimeZone26.getOffsetFromLocal(0L);
        long long36 = dateTimeZone21.getMillisKeepLocal(dateTimeZone26, (long) 115200000);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone21.getShortName((long) (short) 0, locale38);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone21.isLocalDateTimeGap(localDateTime40);
        long long45 = dateTimeZone21.convertLocalToUTC(152L, true, 234000010L);
        java.lang.String str46 = dateTimeZone21.getID();
        long long49 = dateTimeZone21.convertLocalToUTC(0L, true);
        boolean boolean50 = dateTimeZone0.equals((java.lang.Object) long49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-204719948L) + "'", long20 == (-204719948L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 115200000L + "'", long36 == 115200000L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 152L + "'", long45 == 152L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test21910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21910");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) ' ', locale5);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        int int9 = dateTimeZone1.getStandardOffset((long) (byte) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str12 = dateTimeZone1.getShortName(5700035L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone1.getOffset(readableInstant13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test21911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21911");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertUTCToLocal(464400001L);
        long long9 = dateTimeZone1.convertUTCToLocal(115199999L);
        int int11 = dateTimeZone1.getStandardOffset((-59965L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName((-48720001L), locale13);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        long long18 = dateTimeZone1.convertLocalToUTC(115200097L, true);
        java.lang.String str20 = dateTimeZone1.getNameKey(822659997L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 464400001L + "'", long7 == 464400001L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115199999L + "'", long9 == 115199999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200097L + "'", long18 == 115200097L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
    }

    @Test
    public void test21912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21912");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone4.getName(187200004L);
        int int16 = dateTimeZone4.getOffsetFromLocal(68400010L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        java.util.TimeZone timeZone23 = dateTimeZone20.toTimeZone();
        boolean boolean25 = dateTimeZone20.isStandardOffset(360000032L);
        long long27 = dateTimeZone4.getMillisKeepLocal(dateTimeZone20, (-238140001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-238140001L) + "'", long27 == (-238140001L));
    }

    @Test
    public void test21913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21913");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200097L);
        boolean boolean16 = dateTimeZone0.isFixed();
        int int18 = dateTimeZone0.getOffset(0L);
        long long21 = dateTimeZone0.convertLocalToUTC(345600010L, false);
        java.lang.String str23 = dateTimeZone0.getName((-359400000L));
        int int25 = dateTimeZone0.getOffsetFromLocal((-352799903L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 345600010L + "'", long21 == 345600010L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21914");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone0.equals(obj3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.lang.String str10 = dateTimeZone5.getNameKey(1L);
        int int12 = dateTimeZone5.getOffset((-1L));
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (-115199990L));
        java.lang.String str16 = dateTimeZone0.getName((-65L));
        long long18 = dateTimeZone0.nextTransition(0L);
        boolean boolean19 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199890L) + "'", long14 == (-115199890L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.100" + "'", str16, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test21915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21915");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        long long12 = dateTimeZone0.nextTransition(118800001L);
        int int14 = dateTimeZone0.getOffsetFromLocal(356400000L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone0.getOffset(readableInstant15);
        long long19 = dateTimeZone0.convertLocalToUTC((-115200001L), true);
        boolean boolean21 = dateTimeZone0.isStandardOffset((-111539990L));
        int int23 = dateTimeZone0.getOffsetFromLocal(355800000L);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        boolean boolean26 = dateTimeZone0.isStandardOffset((-298740087L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118800001L + "'", long12 == 118800001L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-115200001L) + "'", long19 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test21916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21916");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str3 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getShortName(349199999L, locale6);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
    }

    @Test
    public void test21917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21917");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        long long9 = dateTimeZone0.previousTransition(3600032L);
        java.lang.String str10 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone11.getOffset(readableInstant12);
        int int15 = dateTimeZone11.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        int int24 = dateTimeZone16.getOffsetFromLocal(0L);
        long long26 = dateTimeZone11.getMillisKeepLocal(dateTimeZone16, (long) 115200000);
        boolean boolean28 = dateTimeZone11.isStandardOffset(115200000L);
        long long31 = dateTimeZone11.convertLocalToUTC((long) 10, true);
        java.lang.String str32 = dateTimeZone11.toString();
        int int34 = dateTimeZone11.getOffset(52L);
        java.lang.String str36 = dateTimeZone11.getNameKey(0L);
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-187799900L));
        int int40 = dateTimeZone0.getOffsetFromLocal(172799991L);
        org.joda.time.ReadableInstant readableInstant41 = null;
        int int42 = dateTimeZone0.getOffset(readableInstant41);
        long long44 = dateTimeZone0.nextTransition(234000000L);
        int int46 = dateTimeZone0.getOffset((-244799965L));
        boolean boolean48 = dateTimeZone0.isStandardOffset(460800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600032L + "'", long9 == 3600032L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115200000L + "'", long26 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-187799900L) + "'", long38 == (-187799900L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 234000000L + "'", long44 == 234000000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test21918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        java.lang.String str9 = dateTimeZone0.getShortName(0L);
        long long11 = dateTimeZone0.previousTransition(100L);
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 10);
        int int15 = dateTimeZone0.getOffset(10L);
        boolean boolean16 = dateTimeZone0.isFixed();
        java.lang.String str17 = dateTimeZone0.getID();
        long long19 = dateTimeZone0.nextTransition(129660000L);
        java.lang.String str21 = dateTimeZone0.getShortName(360000097L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getShortName((long) 115200000, locale24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone22.getOffset(readableInstant26);
        java.lang.String str29 = dateTimeZone22.getShortName(32L);
        boolean boolean30 = dateTimeZone22.isFixed();
        java.lang.String str32 = dateTimeZone22.getName((-351299848L));
        boolean boolean33 = dateTimeZone0.equals((java.lang.Object) str32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 129660000L + "'", long19 == 129660000L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21919");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone4.getOffset(35L);
        boolean boolean16 = dateTimeZone4.isStandardOffset((-360000000L));
        boolean boolean17 = dateTimeZone4.isFixed();
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone4.getOffset(readableInstant18);
        int int21 = dateTimeZone4.getOffset((-10800000L));
        int int23 = dateTimeZone4.getOffset((-359999900L));
        boolean boolean24 = dateTimeZone4.isFixed();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        boolean boolean28 = dateTimeZone26.equals((java.lang.Object) 1.0f);
        long long30 = dateTimeZone4.getMillisKeepLocal(dateTimeZone26, (-349200003L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-349200003L) + "'", long30 == (-349200003L));
    }

    @Test
    public void test21920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21920");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone0.getNameKey(115199999L);
        java.util.TimeZone timeZone22 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffsetFromLocal((-118800000L));
        int int27 = dateTimeZone23.getOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test21921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21921");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        int int7 = dateTimeZone0.getStandardOffset(359999999L);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (-1), locale9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getName(97L, locale12);
        int int15 = dateTimeZone0.getOffsetFromLocal(115200097L);
        boolean boolean16 = dateTimeZone0.isFixed();
        int int18 = dateTimeZone0.getOffset(0L);
        long long21 = dateTimeZone0.convertLocalToUTC(345600010L, false);
        java.lang.String str23 = dateTimeZone0.getName((-359400000L));
        long long25 = dateTimeZone0.convertUTCToLocal(187199904L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 345600010L + "'", long21 == 345600010L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 187199904L + "'", long25 == 187199904L);
    }

    @Test
    public void test21922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21922");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        long long11 = dateTimeZone0.convertLocalToUTC(0L, false);
        java.lang.String str13 = dateTimeZone0.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getShortName((long) 115200000, locale16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone14.getOffset(readableInstant18);
        java.lang.String str21 = dateTimeZone14.getShortName(32L);
        java.lang.String str23 = dateTimeZone14.getShortName(115199999L);
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, (long) '4');
        boolean boolean26 = dateTimeZone14.isFixed();
        int int28 = dateTimeZone14.getOffsetFromLocal((-547799900L));
        java.lang.String str29 = dateTimeZone14.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
    }

    @Test
    public void test21923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21923");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(115199991L, locale3);
        long long6 = dateTimeZone1.convertUTCToLocal((-115200001L));
        boolean boolean8 = dateTimeZone1.isStandardOffset((-1L));
        long long10 = dateTimeZone1.nextTransition((-3599989L));
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getShortName(230400152L, locale12);
        boolean boolean15 = dateTimeZone1.isStandardOffset((-1919948L));
        java.lang.Class<?> wildcardClass16 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-115200001L) + "'", long6 == (-115200001L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599989L) + "'", long10 == (-3599989L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test21924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21924");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        boolean boolean6 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        boolean boolean9 = dateTimeZone7.isFixed();
        long long13 = dateTimeZone7.convertLocalToUTC(1L, true, (long) (byte) 10);
        long long17 = dateTimeZone7.convertLocalToUTC((long) 115200000, false, (long) 10);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone7.isLocalDateTimeGap(localDateTime18);
        int int21 = dateTimeZone7.getOffsetFromLocal((-3599990L));
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, 360000032L);
        long long25 = dateTimeZone7.previousTransition((-302399900L));
        int int27 = dateTimeZone7.getStandardOffset((-115200000L));
        long long29 = dateTimeZone7.nextTransition((-241200000L));
        int int31 = dateTimeZone7.getStandardOffset((-5700000L));
        long long33 = dateTimeZone7.previousTransition((-10799990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360000032L + "'", long23 == 360000032L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-302399900L) + "'", long25 == (-302399900L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-241200000L) + "'", long29 == (-241200000L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-10799990L) + "'", long33 == (-10799990L));
    }

    @Test
    public void test21925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) 1);
        boolean boolean9 = dateTimeZone0.isFixed();
        int int11 = dateTimeZone0.getStandardOffset((long) 100);
        java.lang.String str13 = dateTimeZone0.getShortName((-131520000L));
        java.lang.String str15 = dateTimeZone0.getName(116760000L);
        int int17 = dateTimeZone0.getOffset(113039989L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test21926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21926");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        java.lang.Class<?> wildcardClass5 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test21927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21927");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.lang.String str7 = dateTimeZone1.toString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((long) 127920000, locale9);
        java.lang.String str11 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int14 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone18.getName((long) ' ', locale20);
        boolean boolean22 = dateTimeZone16.equals((java.lang.Object) dateTimeZone18);
        long long24 = dateTimeZone16.convertUTCToLocal(52L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.lang.String str30 = dateTimeZone25.getShortName((long) (byte) 100);
        java.lang.String str32 = dateTimeZone25.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone25.getOffset(readableInstant33);
        long long38 = dateTimeZone25.convertLocalToUTC((long) (short) 10, false, (long) (short) 1);
        int int40 = dateTimeZone25.getOffset(115199999L);
        long long42 = dateTimeZone16.getMillisKeepLocal(dateTimeZone25, 10L);
        long long44 = dateTimeZone25.previousTransition((long) 97);
        long long47 = dateTimeZone25.convertLocalToUTC(3600032L, false);
        long long50 = dateTimeZone25.convertLocalToUTC((-7200000L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean52 = dateTimeZone1.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone1.isLocalDateTimeGap(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 152L + "'", long24 == 152L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 110L + "'", long42 == 110L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 97L + "'", long44 == 97L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3600032L + "'", long47 == 3600032L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-7200000L) + "'", long50 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test21928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21928");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long6 = dateTimeZone4.nextTransition((long) (byte) 1);
        java.lang.String str8 = dateTimeZone4.getNameKey((long) (byte) 1);
        long long10 = dateTimeZone4.convertUTCToLocal((-7200000L));
        long long13 = dateTimeZone4.convertLocalToUTC(100L, true);
        java.lang.String str15 = dateTimeZone4.getName(226320000L);
        java.lang.String str17 = dateTimeZone4.getNameKey(481920001L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone18.convertUTCToLocal((long) 0);
        long long30 = dateTimeZone18.previousTransition(0L);
        boolean boolean32 = dateTimeZone18.isStandardOffset((-475199965L));
        long long34 = dateTimeZone18.nextTransition((-3600010L));
        java.lang.String str36 = dateTimeZone18.getName((-61200000L));
        long long38 = dateTimeZone4.getMillisKeepLocal(dateTimeZone18, 200279990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-7200000L) + "'", long10 == (-7200000L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600010L) + "'", long34 == (-3600010L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 200279990L + "'", long38 == 200279990L);
    }

    @Test
    public void test21929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21929");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:52");
        boolean boolean2 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.convertLocalToUTC(51L, true, (-241199999L));
        java.lang.String str8 = dateTimeZone1.getName((-7199999L));
        java.lang.Class<?> wildcardClass9 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 6720051L + "'", long6 == 6720051L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-01:52" + "'", str8, "-01:52");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test21930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21930");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        java.lang.String str11 = dateTimeZone0.getShortName(442260000L);
        long long14 = dateTimeZone0.convertLocalToUTC((-53999999L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-53999999L) + "'", long14 == (-53999999L));
    }

    @Test
    public void test21931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21931");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone5.equals((java.lang.Object) dateTimeZone24);
        java.util.TimeZone timeZone30 = dateTimeZone5.toTimeZone();
        java.lang.String str31 = dateTimeZone5.toString();
        boolean boolean32 = dateTimeZone2.equals((java.lang.Object) str31);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        long long35 = dateTimeZone33.convertUTCToLocal((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        long long38 = dateTimeZone33.nextTransition((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        int int42 = dateTimeZone39.getStandardOffset(0L);
        java.lang.String str44 = dateTimeZone39.getNameKey(1L);
        int int46 = dateTimeZone39.getOffset((-1L));
        java.lang.String str47 = dateTimeZone39.toString();
        int int49 = dateTimeZone39.getOffset(1L);
        long long51 = dateTimeZone39.convertUTCToLocal((long) (byte) 100);
        int int53 = dateTimeZone39.getOffsetFromLocal(360000097L);
        long long55 = dateTimeZone33.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        long long58 = dateTimeZone33.adjustOffset(118800032L, true);
        long long60 = dateTimeZone2.getMillisKeepLocal(dateTimeZone33, (-469680000L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 118800032L + "'", long58 == 118800032L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-282420000L) + "'", long60 == (-282420000L));
    }

    @Test
    public void test21932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        int int14 = dateTimeZone0.getOffsetFromLocal((-7200000L));
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        long long18 = dateTimeZone0.adjustOffset(235200000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 235200000L + "'", long18 == 235200000L);
    }

    @Test
    public void test21933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        int int7 = dateTimeZone3.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        int int11 = dateTimeZone8.getStandardOffset(0L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone8.getShortName((-1L), locale13);
        int int16 = dateTimeZone8.getOffsetFromLocal(0L);
        long long18 = dateTimeZone3.getMillisKeepLocal(dateTimeZone8, (long) 115200000);
        boolean boolean20 = dateTimeZone3.isStandardOffset(115200000L);
        int int22 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.lang.String str27 = dateTimeZone3.getName((long) (short) -1);
        java.util.TimeZone timeZone28 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone3.isLocalDateTimeGap(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200000L + "'", long18 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test21934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21934");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(356460000L, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long13 = dateTimeZone11.previousTransition((long) (byte) -1);
        long long16 = dateTimeZone11.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone17 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) timeZone17);
        java.lang.String str20 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone0.isLocalDateTimeGap(localDateTime21);
        java.lang.String str23 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test21935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21935");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        int int8 = dateTimeZone2.getOffsetFromLocal((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getShortName((long) 'a', locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getName((long) (short) 0, locale15);
        long long18 = dateTimeZone10.convertUTCToLocal((-1L));
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone10.isLocalDateTimeGap(localDateTime19);
        long long22 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, 100L);
        java.util.TimeZone timeZone23 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone24.isFixed();
        int int27 = dateTimeZone24.getStandardOffset(0L);
        java.lang.String str29 = dateTimeZone24.getShortName((long) (byte) 100);
        int int31 = dateTimeZone24.getStandardOffset(359999999L);
        long long33 = dateTimeZone24.previousTransition(3600032L);
        java.lang.String str34 = dateTimeZone24.getID();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone35.getOffset(readableInstant36);
        int int39 = dateTimeZone35.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        boolean boolean41 = dateTimeZone40.isFixed();
        int int43 = dateTimeZone40.getStandardOffset(0L);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone40.getShortName((-1L), locale45);
        int int48 = dateTimeZone40.getOffsetFromLocal(0L);
        long long50 = dateTimeZone35.getMillisKeepLocal(dateTimeZone40, (long) 115200000);
        boolean boolean52 = dateTimeZone35.isStandardOffset(115200000L);
        long long55 = dateTimeZone35.convertLocalToUTC((long) 10, true);
        java.lang.String str56 = dateTimeZone35.toString();
        int int58 = dateTimeZone35.getOffset(52L);
        java.lang.String str60 = dateTimeZone35.getNameKey(0L);
        long long62 = dateTimeZone24.getMillisKeepLocal(dateTimeZone35, (-187799900L));
        int int64 = dateTimeZone24.getOffsetFromLocal(172799991L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        boolean boolean67 = dateTimeZone65.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone68 = dateTimeZone65.toTimeZone();
        boolean boolean70 = dateTimeZone65.isStandardOffset(100L);
        java.lang.String str72 = dateTimeZone65.getName((long) (byte) 100);
        java.util.TimeZone timeZone73 = dateTimeZone65.toTimeZone();
        long long75 = dateTimeZone24.getMillisKeepLocal(dateTimeZone65, 0L);
        boolean boolean76 = dateTimeZone10.equals((java.lang.Object) dateTimeZone65);
        long long78 = dateTimeZone10.convertUTCToLocal(273600000L);
        boolean boolean79 = dateTimeZone10.isFixed();
        long long81 = dateTimeZone10.nextTransition(61080000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 127920000 + "'", int8 == 127920000);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:00" + "'", str13, "+100:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:00" + "'", str16, "+100:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 359999999L + "'", long18 == 359999999L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-232079900L) + "'", long22 == (-232079900L));
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3600032L + "'", long33 == 3600032L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 115200000L + "'", long50 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-187799900L) + "'", long62 == (-187799900L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 633600000L + "'", long78 == 633600000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 61080000L + "'", long81 == 61080000L);
    }

    @Test
    public void test21936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21936");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        java.lang.String str24 = dateTimeZone15.getShortName(0L);
        boolean boolean26 = dateTimeZone15.equals((java.lang.Object) '4');
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone15.getName(35L, locale28);
        long long31 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, (-232079900L));
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = dateTimeZone8.getOffset(readableInstant32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone8.getShortName((-354480000L), locale35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        boolean boolean38 = dateTimeZone37.isFixed();
        int int40 = dateTimeZone37.getStandardOffset(0L);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone37.getShortName((-1L), locale42);
        java.lang.String str45 = dateTimeZone37.getName((-1L));
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone37.getName(0L, locale47);
        long long50 = dateTimeZone37.convertUTCToLocal((long) 100);
        boolean boolean51 = dateTimeZone37.isFixed();
        boolean boolean53 = dateTimeZone37.equals((java.lang.Object) (-71999965L));
        long long56 = dateTimeZone37.adjustOffset(198060000L, true);
        int int58 = dateTimeZone37.getOffset((-131519999L));
        long long60 = dateTimeZone8.getMillisKeepLocal(dateTimeZone37, (-417600109L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-232079900L) + "'", long31 == (-232079900L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 198060000L + "'", long56 == 198060000L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-417600109L) + "'", long60 == (-417600109L));
    }

    @Test
    public void test21937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21937");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        boolean boolean17 = dateTimeZone0.isStandardOffset((long) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        long long21 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 10L);
        java.lang.String str23 = dateTimeZone0.getNameKey((long) 600000);
        boolean boolean24 = dateTimeZone0.isFixed();
        long long26 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        long long29 = dateTimeZone27.convertUTCToLocal((long) (byte) 0);
        java.lang.String str30 = dateTimeZone27.toString();
        long long33 = dateTimeZone27.adjustOffset((long) (short) 0, false);
        java.util.TimeZone timeZone34 = dateTimeZone27.toTimeZone();
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) dateTimeZone27);
        java.util.TimeZone timeZone36 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
    }

    @Test
    public void test21938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21938");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        long long19 = dateTimeZone12.convertUTCToLocal((-3600000L));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        int int23 = dateTimeZone21.getOffset(1L);
        long long25 = dateTimeZone21.previousTransition((long) (short) 1);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone27.isFixed();
        boolean boolean29 = dateTimeZone27.isFixed();
        long long31 = dateTimeZone21.getMillisKeepLocal(dateTimeZone27, 0L);
        long long33 = dateTimeZone12.getMillisKeepLocal(dateTimeZone21, (long) 5700000);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        int int37 = dateTimeZone34.getStandardOffset(0L);
        java.lang.String str39 = dateTimeZone34.getShortName((long) (byte) 100);
        java.lang.String str41 = dateTimeZone34.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone34.getOffset(readableInstant42);
        long long46 = dateTimeZone34.adjustOffset((long) (byte) 1, false);
        java.lang.String str47 = dateTimeZone34.getID();
        long long50 = dateTimeZone34.convertLocalToUTC((long) 126060000, false);
        long long52 = dateTimeZone34.convertUTCToLocal((-651599890L));
        boolean boolean53 = dateTimeZone21.equals((java.lang.Object) dateTimeZone34);
        int int55 = dateTimeZone34.getStandardOffset(283199991L);
        long long58 = dateTimeZone34.convertLocalToUTC(234000010L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7200000L) + "'", long19 == (-7200000L));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 115200000 + "'", int23 == 115200000);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 115200000L + "'", long31 == 115200000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-113100000L) + "'", long33 == (-113100000L));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 126060000L + "'", long50 == 126060000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-651599890L) + "'", long52 == (-651599890L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 234000010L + "'", long58 == 234000010L);
    }

    @Test
    public void test21939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21939");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) ' ');
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21940");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone0.getShortName((long) (short) -1, locale7);
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1));
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        java.util.TimeZone timeZone13 = dateTimeZone0.toTimeZone();
        java.lang.String str15 = dateTimeZone0.getName(3600032L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("-01:00");
        boolean boolean19 = dateTimeZone17.isStandardOffset((-115199948L));
        long long22 = dateTimeZone17.convertLocalToUTC((-187799900L), true);
        int int24 = dateTimeZone17.getOffset((long) (byte) -1);
        long long27 = dateTimeZone17.adjustOffset((-719999910L), true);
        long long31 = dateTimeZone17.convertLocalToUTC(351120010L, false, 57600023L);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, 0L);
        java.util.TimeZone timeZone34 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-184199900L) + "'", long22 == (-184199900L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-719999910L) + "'", long27 == (-719999910L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 354720010L + "'", long31 == 354720010L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3600000L + "'", long33 == 3600000L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test21941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21941");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.lang.String str4 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test21942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long20 = dateTimeZone18.previousTransition((long) (byte) -1);
        long long23 = dateTimeZone18.convertLocalToUTC(52L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone18.getName(111600000L, locale26);
        java.lang.String str29 = dateTimeZone18.getName(187200000L);
        java.lang.String str31 = dateTimeZone18.getNameKey(115199991L);
        boolean boolean32 = dateTimeZone0.equals((java.lang.Object) str31);
        java.lang.String str34 = dateTimeZone0.getName((-115199999L));
        long long36 = dateTimeZone0.convertUTCToLocal((-536999900L));
        java.lang.String str38 = dateTimeZone0.getName((-233400000L));
        int int40 = dateTimeZone0.getOffset((-302399905L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-536999900L) + "'", long36 == (-536999900L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test21943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21943");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.adjustOffset((long) 10, false);
        int int25 = dateTimeZone0.getOffset((long) 600000);
        long long27 = dateTimeZone0.nextTransition((long) (byte) -1);
        java.lang.String str29 = dateTimeZone0.getName((long) 3600000);
        boolean boolean30 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone0.isLocalDateTimeGap(localDateTime31);
        long long34 = dateTimeZone0.convertUTCToLocal((-583199900L));
        int int36 = dateTimeZone0.getOffsetFromLocal(122940000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-583199900L) + "'", long34 == (-583199900L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test21944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        boolean boolean6 = dateTimeZone0.isFixed();
        java.lang.String str7 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test21945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21945");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2100000, 351120000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 351120000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21946");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(356460000L, locale3);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        int int8 = dateTimeZone1.getStandardOffset((-547859900L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str11 = dateTimeZone1.getName(3599999L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getName((-118799900L), locale13);
        java.lang.String str15 = dateTimeZone1.getID();
        long long17 = dateTimeZone1.nextTransition(0L);
        int int19 = dateTimeZone1.getOffsetFromLocal(8700152L);
        java.lang.String str21 = dateTimeZone1.getShortName((-604799899L));
        int int23 = dateTimeZone1.getOffsetFromLocal((-115199913L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone24.getOffset(readableInstant25);
        int int28 = dateTimeZone24.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone29.getShortName((-1L), locale34);
        int int37 = dateTimeZone29.getOffsetFromLocal(0L);
        long long39 = dateTimeZone24.getMillisKeepLocal(dateTimeZone29, (long) 115200000);
        int int41 = dateTimeZone29.getOffset((long) '4');
        int int43 = dateTimeZone29.getOffsetFromLocal(100L);
        long long45 = dateTimeZone29.previousTransition(1L);
        java.lang.String str47 = dateTimeZone29.getNameKey((-187799900L));
        org.joda.time.LocalDateTime localDateTime48 = null;
        boolean boolean49 = dateTimeZone29.isLocalDateTimeGap(localDateTime48);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone29.isLocalDateTimeGap(localDateTime50);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean53 = dateTimeZone52.isFixed();
        int int55 = dateTimeZone52.getStandardOffset(0L);
        java.lang.String str57 = dateTimeZone52.getShortName((long) (byte) 100);
        java.lang.String str59 = dateTimeZone52.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant60 = null;
        int int61 = dateTimeZone52.getOffset(readableInstant60);
        long long64 = dateTimeZone52.adjustOffset((long) (byte) 1, false);
        int int66 = dateTimeZone52.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        java.lang.String str69 = dateTimeZone52.getShortName((-184199900L));
        org.joda.time.ReadableInstant readableInstant70 = null;
        int int71 = dateTimeZone52.getOffset(readableInstant70);
        boolean boolean73 = dateTimeZone52.isStandardOffset((-115200001L));
        boolean boolean74 = dateTimeZone29.equals((java.lang.Object) dateTimeZone52);
        long long77 = dateTimeZone29.convertLocalToUTC(5700000L, true);
        long long80 = dateTimeZone29.adjustOffset((-500400000L), false);
        boolean boolean81 = dateTimeZone1.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360000000 + "'", int8 == 360000000);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:00" + "'", str15, "+100:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 360000000 + "'", int19 == 360000000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:00" + "'", str21, "+100:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 360000000 + "'", int23 == 360000000);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 115200000L + "'", long39 == 115200000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 5700000L + "'", long77 == 5700000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-500400000L) + "'", long80 == (-500400000L));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21947");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        boolean boolean7 = dateTimeZone4.isFixed();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone4.getName(52L, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        java.lang.String str13 = dateTimeZone4.toString();
        int int15 = dateTimeZone4.getStandardOffset((-3600010L));
        long long17 = dateTimeZone4.convertUTCToLocal((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone4.getOffset(readableInstant18);
        java.lang.String str21 = dateTimeZone4.getName((-131519999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
    }

    @Test
    public void test21948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21948");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int5 = dateTimeZone1.getOffset((-115199900L));
        org.joda.time.LocalDateTime localDateTime6 = null;
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-359999900L), locale9);
        java.lang.String str12 = dateTimeZone1.getNameKey(187199904L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        int int16 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone13.getShortName((-1L), locale18);
        int int21 = dateTimeZone13.getOffsetFromLocal(0L);
        int int23 = dateTimeZone13.getStandardOffset((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone13.isLocalDateTimeGap(localDateTime24);
        boolean boolean26 = dateTimeZone13.isFixed();
        long long29 = dateTimeZone13.convertLocalToUTC((-53999989L), true);
        long long31 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, (-79200000L));
        int int33 = dateTimeZone13.getOffset(35L);
        long long36 = dateTimeZone13.adjustOffset((-42480000L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-53999989L) + "'", long29 == (-53999989L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-79200000L) + "'", long31 == (-79200000L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-42480000L) + "'", long36 == (-42480000L));
    }

    @Test
    public void test21949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.String str5 = dateTimeZone3.getNameKey(32L);
        java.lang.String str7 = dateTimeZone3.getName((long) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getShortName((long) (short) 1, locale9);
        long long12 = dateTimeZone3.previousTransition((-228900001L));
        long long15 = dateTimeZone3.adjustOffset(116879991L, true);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("-01:00");
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone17.isLocalDateTimeGap(localDateTime19);
        java.lang.String str22 = dateTimeZone17.getNameKey(115200000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.lang.String str28 = dateTimeZone23.getNameKey(1L);
        java.lang.String str30 = dateTimeZone23.getShortName((long) 100);
        int int32 = dateTimeZone23.getStandardOffset(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int35 = dateTimeZone23.getOffset((-244799989L));
        long long37 = dateTimeZone17.getMillisKeepLocal(dateTimeZone23, 360000032L);
        java.lang.String str39 = dateTimeZone23.getNameKey(277199981L);
        int int41 = dateTimeZone23.getStandardOffset(57600023L);
        long long43 = dateTimeZone3.getMillisKeepLocal(dateTimeZone23, 170099997L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-228900001L) + "'", long12 == (-228900001L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 116879991L + "'", long15 == 116879991L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 356400032L + "'", long37 == 356400032L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 170099997L + "'", long43 == 170099997L);
    }

    @Test
    public void test21950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21950");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (short) 10);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 115200000);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) 100);
        int int11 = dateTimeZone0.getOffsetFromLocal(356400000L);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        long long14 = dateTimeZone0.convertUTCToLocal((-115199900L));
        long long16 = dateTimeZone0.convertUTCToLocal((-36060000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199900L) + "'", long14 == (-115199900L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-36060000L) + "'", long16 == (-36060000L));
    }

    @Test
    public void test21951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21951");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, (int) (byte) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset((-220200009L));
        boolean boolean5 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test21952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21952");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        java.lang.String str4 = dateTimeZone2.getShortName(100L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) -1);
        long long9 = dateTimeZone2.convertLocalToUTC(349200010L, true);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone2.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone2.isStandardOffset(190800000L);
        int int15 = dateTimeZone2.getStandardOffset(190799902L);
        long long18 = dateTimeZone2.adjustOffset((-68399990L), false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:32" + "'", str4, "+35:32");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:32" + "'", str6, "+35:32");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 221280010L + "'", long9 == 221280010L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 127920000 + "'", int11 == 127920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 127920000 + "'", int15 == 127920000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-68399990L) + "'", long18 == (-68399990L));
    }

    @Test
    public void test21953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21953");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str11 = dateTimeZone0.toString();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName((-232079900L), locale13);
        boolean boolean15 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        int int19 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone16.getShortName((-1L), locale21);
        java.lang.String str24 = dateTimeZone16.getShortName(1L);
        long long26 = dateTimeZone16.nextTransition((long) 0);
        long long28 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean32 = dateTimeZone16.equals((java.lang.Object) '#');
        long long34 = dateTimeZone16.convertUTCToLocal((-3600000L));
        java.util.TimeZone timeZone35 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long39 = dateTimeZone36.adjustOffset((-3600000L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        boolean boolean41 = dateTimeZone36.isFixed();
        boolean boolean42 = dateTimeZone0.equals((java.lang.Object) dateTimeZone36);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone0.getName((-709259965L), locale44);
        long long47 = dateTimeZone0.previousTransition(111600087L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600000L) + "'", long34 == (-3600000L));
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3600000L) + "'", long39 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 111600087L + "'", long47 == 111600087L);
    }

    @Test
    public void test21954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21954");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        long long5 = dateTimeZone0.convertUTCToLocal(0L);
        int int7 = dateTimeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone8.isFixed();
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("UTC");
        int int15 = dateTimeZone13.getStandardOffset(0L);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone13.getShortName((long) (byte) 0, locale17);
        int int20 = dateTimeZone13.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) ' ', locale26);
        boolean boolean28 = dateTimeZone22.equals((java.lang.Object) dateTimeZone24);
        boolean boolean29 = dateTimeZone13.equals((java.lang.Object) dateTimeZone24);
        boolean boolean30 = dateTimeZone13.isFixed();
        long long32 = dateTimeZone8.getMillisKeepLocal(dateTimeZone13, 3600052L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 1);
        int int37 = dateTimeZone35.getStandardOffset((long) (short) 10);
        boolean boolean39 = dateTimeZone35.isStandardOffset((long) (short) 10);
        java.lang.String str40 = dateTimeZone35.getID();
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone35);
        boolean boolean42 = dateTimeZone13.isFixed();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.convertUTCToLocal((long) (byte) 0);
        java.lang.String str46 = dateTimeZone43.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        boolean boolean48 = dateTimeZone47.isFixed();
        int int50 = dateTimeZone47.getStandardOffset(0L);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone47.getShortName((-1L), locale52);
        int int55 = dateTimeZone47.getOffsetFromLocal(0L);
        java.lang.String str57 = dateTimeZone47.getShortName(0L);
        java.lang.String str59 = dateTimeZone47.getShortName(359999999L);
        long long61 = dateTimeZone43.getMillisKeepLocal(dateTimeZone47, (-1L));
        java.lang.String str63 = dateTimeZone47.getShortName((long) 115200000);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone47.isLocalDateTimeGap(localDateTime64);
        long long68 = dateTimeZone47.convertLocalToUTC((-118799913L), false);
        long long72 = dateTimeZone47.convertLocalToUTC((-115199948L), false, (long) (short) 100);
        long long74 = dateTimeZone13.getMillisKeepLocal(dateTimeZone47, (long) 'a');
        java.lang.String str75 = dateTimeZone13.getID();
        org.joda.time.LocalDateTime localDateTime76 = null;
        boolean boolean77 = dateTimeZone13.isLocalDateTimeGap(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600052L + "'", long32 == 3600052L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 126060000 + "'", int37 == 126060000);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+35:01" + "'", str40, "+35:01");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-118799913L) + "'", long68 == (-118799913L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-115199948L) + "'", long72 == (-115199948L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test21955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21955");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(129660000L, locale19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName((-115199965L), locale22);
        java.lang.String str25 = dateTimeZone0.getShortName(242699999L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getShortName((-91920000L), locale27);
        long long30 = dateTimeZone0.convertUTCToLocal(716460000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 716460000L + "'", long30 == 716460000L);
    }

    @Test
    public void test21956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21956");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        int int7 = dateTimeZone0.getOffset((-1L));
        java.lang.String str8 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
    }

    @Test
    public void test21957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21957");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, 10);
        int int4 = dateTimeZone2.getOffsetFromLocal(118800001L);
        java.lang.String str6 = dateTimeZone2.getShortName(360000097L);
        boolean boolean7 = dateTimeZone2.isFixed();
        int int9 = dateTimeZone2.getOffsetFromLocal((long) 600000);
        boolean boolean11 = dateTimeZone2.isStandardOffset(464399991L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone2.getOffset(readableInstant15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone2.getShortName((-431999965L), locale18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 600000 + "'", int4 == 600000);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:10" + "'", str6, "+00:10");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 600000 + "'", int9 == 600000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 600000 + "'", int16 == 600000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:10" + "'", str19, "+00:10");
    }

    @Test
    public void test21958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21958");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getNameKey((long) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone4.getOffset(readableInstant7);
        java.lang.String str10 = dateTimeZone4.getShortName((long) 349200000);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone4.isLocalDateTimeGap(localDateTime11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        int int15 = dateTimeZone13.getOffsetFromLocal(115200000L);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone13.isLocalDateTimeGap(localDateTime16);
        boolean boolean18 = dateTimeZone4.equals((java.lang.Object) boolean17);
        long long20 = dateTimeZone4.convertUTCToLocal(100559990L);
        long long23 = dateTimeZone4.adjustOffset(129600000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100559990L + "'", long20 == 100559990L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 129600000L + "'", long23 == 129600000L);
    }

    @Test
    public void test21959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21959");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        java.lang.String str7 = dateTimeZone0.getShortName((long) 100);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone0.getOffset(readableInstant12);
        java.lang.String str15 = dateTimeZone0.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
    }

    @Test
    public void test21960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21960");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName(0L);
        boolean boolean4 = dateTimeZone0.isStandardOffset((long) 349200000);
        long long7 = dateTimeZone0.adjustOffset(0L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str10 = dateTimeZone0.getNameKey((-4199948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test21961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21961");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        int int15 = dateTimeZone5.getStandardOffset((long) (byte) 10);
        long long17 = dateTimeZone5.nextTransition((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone18.getOffset(readableInstant19);
        int int22 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        int int26 = dateTimeZone23.getStandardOffset(0L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone23.getShortName((-1L), locale28);
        int int31 = dateTimeZone23.getOffsetFromLocal(0L);
        long long33 = dateTimeZone18.getMillisKeepLocal(dateTimeZone23, (long) 115200000);
        boolean boolean35 = dateTimeZone18.isStandardOffset(115200000L);
        long long38 = dateTimeZone18.convertLocalToUTC((long) 10, true);
        java.lang.String str39 = dateTimeZone18.toString();
        int int41 = dateTimeZone18.getOffset(52L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone18.getOffset(readableInstant42);
        int int45 = dateTimeZone18.getStandardOffset(97L);
        java.lang.String str47 = dateTimeZone18.getName(100L);
        int int49 = dateTimeZone18.getOffset((long) 100);
        boolean boolean50 = dateTimeZone5.equals((java.lang.Object) int49);
        boolean boolean51 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean54 = dateTimeZone52.equals((java.lang.Object) 100);
        int int56 = dateTimeZone52.getStandardOffset((long) ' ');
        long long58 = dateTimeZone52.convertUTCToLocal((long) 'a');
        long long61 = dateTimeZone52.convertLocalToUTC(127920000L, true);
        long long63 = dateTimeZone5.getMillisKeepLocal(dateTimeZone52, (-7260001L));
        java.util.TimeZone timeZone64 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        boolean boolean66 = dateTimeZone65.isFixed();
        java.util.TimeZone timeZone67 = dateTimeZone65.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 115200000L + "'", long17 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200000L + "'", long33 == 115200000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 97L + "'", long58 == 97L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 127920000L + "'", long61 == 127920000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-7260001L) + "'", long63 == (-7260001L));
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21962");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        java.lang.String str17 = dateTimeZone0.getShortName((long) '4');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((long) '4', locale19);
        long long23 = dateTimeZone0.adjustOffset((long) 10, false);
        int int25 = dateTimeZone0.getOffset((long) 600000);
        long long27 = dateTimeZone0.nextTransition((long) (byte) -1);
        java.lang.String str29 = dateTimeZone0.getName((long) 3600000);
        java.lang.String str31 = dateTimeZone0.getNameKey((-486060000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
    }

    @Test
    public void test21963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21963");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str20 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.previousTransition((-1L));
        long long24 = dateTimeZone0.convertUTCToLocal((-1083599900L));
        boolean boolean26 = dateTimeZone0.isStandardOffset((-590399999L));
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1083599900L) + "'", long24 == (-1083599900L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test21964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21964");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getShortName((long) (short) 10);
        long long6 = dateTimeZone1.nextTransition((long) 0);
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) (short) 1);
        java.lang.String str9 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getName(547199998L, locale16);
        long long20 = dateTimeZone14.convertLocalToUTC(110L, false);
        long long22 = dateTimeZone14.previousTransition((long) (short) 100);
        long long24 = dateTimeZone14.convertUTCToLocal((-351299848L));
        long long26 = dateTimeZone1.getMillisKeepLocal(dateTimeZone14, 0L);
        java.lang.String str28 = dateTimeZone14.getName(5700000L);
        java.lang.String str29 = dateTimeZone14.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 110L + "'", long20 == 110L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-351299848L) + "'", long24 == (-351299848L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
    }

    @Test
    public void test21965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21965");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        java.lang.String str3 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str7 = dateTimeZone0.getName((long) 0);
        int int9 = dateTimeZone0.getOffset((long) 100);
        int int11 = dateTimeZone0.getStandardOffset((long) 1);
        long long13 = dateTimeZone0.previousTransition((long) 0);
        long long15 = dateTimeZone0.convertUTCToLocal(100L);
        long long17 = dateTimeZone0.convertUTCToLocal((-118799903L));
        long long21 = dateTimeZone0.convertLocalToUTC((-345599990L), true, (-10320000L));
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone0.getName(3599935L, locale23);
        java.lang.String str25 = dateTimeZone0.toString();
        java.lang.String str26 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-118799903L) + "'", long17 == (-118799903L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-345599990L) + "'", long21 == (-345599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
    }

    @Test
    public void test21966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21966");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone0.getOffset(readableInstant2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean5 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test21967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21967");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        int int7 = dateTimeZone0.getOffset((-10320000L));
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        boolean boolean10 = dateTimeZone0.isStandardOffset(345600000L);
        java.lang.String str12 = dateTimeZone0.getNameKey((-79200000L));
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        int int16 = dateTimeZone0.getStandardOffset(363600042L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test21968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21968");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getNameKey(1L);
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) "+97:00");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        boolean boolean12 = dateTimeZone8.isFixed();
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, (long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone15.isFixed();
        int int18 = dateTimeZone15.getStandardOffset(0L);
        java.lang.String str20 = dateTimeZone15.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone15.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone15.getOffset(readableInstant23);
        boolean boolean26 = dateTimeZone15.isStandardOffset((long) (short) 1);
        long long30 = dateTimeZone15.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int32 = dateTimeZone15.getOffsetFromLocal((long) (short) 0);
        java.lang.String str34 = dateTimeZone15.getNameKey((long) ' ');
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone15.getShortName((long) (byte) 100, locale36);
        long long39 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (-115200000L));
        int int41 = dateTimeZone15.getOffset((-1L));
        long long44 = dateTimeZone15.adjustOffset(359999998L, false);
        java.lang.String str46 = dateTimeZone15.getName((-7200000L));
        java.util.TimeZone timeZone47 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 115200000L + "'", long30 == 115200000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-115200000L) + "'", long39 == (-115200000L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 359999998L + "'", long44 == 359999998L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone48);
    }

    @Test
    public void test21969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21969");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str7 = dateTimeZone5.getShortName((long) 'a');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone5.getShortName((long) (short) -1, locale9);
        int int12 = dateTimeZone5.getOffset((long) 115200000);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) (short) 0);
        boolean boolean16 = dateTimeZone5.isStandardOffset((long) 1);
        boolean boolean17 = dateTimeZone5.isFixed();
        int int19 = dateTimeZone5.getOffset(129660000L);
        int int21 = dateTimeZone5.getOffsetFromLocal((-3599903L));
        long long24 = dateTimeZone5.convertLocalToUTC(356400000L, false);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone5.getName(360059999L, locale26);
        int int29 = dateTimeZone5.getOffsetFromLocal((-3599913L));
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone5.getOffset(readableInstant30);
        long long33 = dateTimeZone5.nextTransition((-3599890L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+32:00" + "'", str10, "+32:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 115200000 + "'", int12 == 115200000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200000L) + "'", long14 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 115200000 + "'", int19 == 115200000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 115200000 + "'", int21 == 115200000);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 241200000L + "'", long24 == 241200000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+32:00" + "'", str27, "+32:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 115200000 + "'", int29 == 115200000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 115200000 + "'", int31 == 115200000);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599890L) + "'", long33 == (-3599890L));
    }

    @Test
    public void test21970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21970");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        int int9 = dateTimeZone1.getOffsetFromLocal(32L);
        boolean boolean11 = dateTimeZone1.isStandardOffset(359999989L);
        boolean boolean13 = dateTimeZone1.isStandardOffset((-349199990L));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getName(361920000L, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test21971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21971");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((long) 'a', locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName((long) (short) 0, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-1L), locale9);
        boolean boolean12 = dateTimeZone1.isStandardOffset((long) 127920000);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone13.getOffset(readableInstant14);
        int int17 = dateTimeZone13.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone18.isFixed();
        int int21 = dateTimeZone18.getStandardOffset(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone18.getShortName((-1L), locale23);
        int int26 = dateTimeZone18.getOffsetFromLocal(0L);
        long long28 = dateTimeZone13.getMillisKeepLocal(dateTimeZone18, (long) 115200000);
        java.lang.String str30 = dateTimeZone13.getShortName((long) '4');
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone13.getName((long) '4', locale32);
        long long36 = dateTimeZone13.convertLocalToUTC(0L, true);
        boolean boolean37 = dateTimeZone13.isFixed();
        boolean boolean38 = dateTimeZone13.isFixed();
        java.lang.String str39 = dateTimeZone13.toString();
        long long43 = dateTimeZone13.convertLocalToUTC(356400032L, false, 0L);
        int int45 = dateTimeZone13.getOffset((-3600000L));
        long long47 = dateTimeZone1.getMillisKeepLocal(dateTimeZone13, 475200097L);
        int int49 = dateTimeZone13.getOffsetFromLocal(3600052L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone51.getName(359999999L, locale53);
        long long57 = dateTimeZone51.adjustOffset((long) 100, false);
        org.joda.time.LocalDateTime localDateTime58 = null;
        boolean boolean59 = dateTimeZone51.isLocalDateTimeGap(localDateTime58);
        java.lang.String str60 = dateTimeZone51.getID();
        boolean boolean61 = dateTimeZone13.equals((java.lang.Object) str60);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 115200000L + "'", long28 == 115200000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 356400032L + "'", long43 == 356400032L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 835200097L + "'", long47 == 835200097L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.097" + "'", str54, "+00:00:00.097");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.097" + "'", str60, "+00:00:00.097");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21972");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.previousTransition((long) (byte) -1);
        long long6 = dateTimeZone1.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        long long11 = dateTimeZone1.convertUTCToLocal(360000032L);
        long long13 = dateTimeZone1.previousTransition((-745199990L));
        java.util.TimeZone timeZone14 = dateTimeZone1.toTimeZone();
        java.lang.String str15 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 360000032L + "'", long11 == 360000032L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-745199990L) + "'", long13 == (-745199990L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
    }

    @Test
    public void test21973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21973");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long5 = dateTimeZone1.nextTransition(151200000L);
        long long8 = dateTimeZone1.convertLocalToUTC(187200001L, true);
        java.lang.String str10 = dateTimeZone1.getShortName((-3599990L));
        org.joda.time.tz.Provider provider11 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        org.joda.time.DateTimeZone.setProvider(provider11);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) provider11);
        long long21 = dateTimeZone1.convertUTCToLocal(32L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone1.getName(127920000L, locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        int int28 = dateTimeZone25.getStandardOffset(0L);
        java.lang.String str30 = dateTimeZone25.getNameKey(1L);
        int int32 = dateTimeZone25.getOffset((-1L));
        java.lang.String str33 = dateTimeZone25.toString();
        java.lang.String str35 = dateTimeZone25.getName(32L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean38 = dateTimeZone36.equals((java.lang.Object) 100);
        int int40 = dateTimeZone36.getStandardOffset((long) ' ');
        java.lang.String str41 = dateTimeZone36.getID();
        java.lang.String str43 = dateTimeZone36.getName(52L);
        long long45 = dateTimeZone25.getMillisKeepLocal(dateTimeZone36, 359999989L);
        long long47 = dateTimeZone36.previousTransition(3600000L);
        java.lang.String str49 = dateTimeZone36.getNameKey((long) 363120000);
        java.lang.String str51 = dateTimeZone36.getName(187199999L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone52.isLocalDateTimeGap(localDateTime54);
        long long57 = dateTimeZone52.convertUTCToLocal(0L);
        java.lang.String str58 = dateTimeZone52.toString();
        boolean boolean59 = dateTimeZone52.isFixed();
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone52.getShortName(32L, locale61);
        long long66 = dateTimeZone52.convertLocalToUTC(547199998L, true, 356459990L);
        long long68 = dateTimeZone36.getMillisKeepLocal(dateTimeZone52, (long) 0);
        long long70 = dateTimeZone1.getMillisKeepLocal(dateTimeZone52, 221280010L);
        long long73 = dateTimeZone52.convertLocalToUTC(115199935L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 151200000L + "'", long5 == 151200000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 187199991L + "'", long8 == 187199991L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 42L + "'", long21 == 42L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 359999989L + "'", long45 == 359999989L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3600000L + "'", long47 == 3600000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 547199998L + "'", long66 == 547199998L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 221280020L + "'", long70 == 221280020L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 115199935L + "'", long73 == 115199935L);
    }

    @Test
    public void test21974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21974");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        java.lang.String str8 = dateTimeZone0.getShortName(1L);
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertLocalToUTC(359999999L, true);
        long long16 = dateTimeZone0.convertLocalToUTC(10L, true, (long) 10);
        boolean boolean17 = dateTimeZone0.isFixed();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName((long) '#', locale19);
        int int22 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        boolean boolean24 = dateTimeZone0.isStandardOffset((-306000000L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        int int29 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        long long40 = dateTimeZone25.getMillisKeepLocal(dateTimeZone30, (long) 115200000);
        java.lang.String str42 = dateTimeZone30.getShortName((long) (short) 1);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone30.getShortName((long) 10, locale44);
        long long47 = dateTimeZone0.getMillisKeepLocal(dateTimeZone30, 100L);
        boolean boolean49 = dateTimeZone30.isStandardOffset((-111600000L));
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        boolean boolean51 = dateTimeZone50.isFixed();
        int int53 = dateTimeZone50.getStandardOffset(0L);
        java.util.Locale locale55 = null;
        java.lang.String str56 = dateTimeZone50.getShortName((-1L), locale55);
        java.lang.String str58 = dateTimeZone50.getShortName(1L);
        long long60 = dateTimeZone50.nextTransition((long) 0);
        long long62 = dateTimeZone50.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean66 = dateTimeZone50.equals((java.lang.Object) '#');
        long long68 = dateTimeZone50.convertUTCToLocal((-3600000L));
        java.lang.String str70 = dateTimeZone50.getNameKey(10L);
        long long74 = dateTimeZone50.convertLocalToUTC(111600000L, false, (long) '4');
        java.util.Locale locale76 = null;
        java.lang.String str77 = dateTimeZone50.getName(126060000L, locale76);
        long long79 = dateTimeZone50.nextTransition((-306000000L));
        int int81 = dateTimeZone50.getStandardOffset(115200097L);
        long long84 = dateTimeZone50.adjustOffset((long) (short) 10, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        boolean boolean86 = dateTimeZone30.equals((java.lang.Object) dateTimeZone50);
        java.lang.String str87 = dateTimeZone50.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 359999999L + "'", long12 == 359999999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 115200000L + "'", long40 == 115200000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-3600000L) + "'", long68 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 111600000L + "'", long74 == 111600000L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-306000000L) + "'", long79 == (-306000000L));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10L + "'", long84 == 10L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
    }

    @Test
    public void test21975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21975");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, (int) ' ');
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test21976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21976");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        int int9 = dateTimeZone5.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone10.isFixed();
        int int13 = dateTimeZone10.getStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone10.getShortName((-1L), locale15);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        long long20 = dateTimeZone5.getMillisKeepLocal(dateTimeZone10, (long) 115200000);
        java.lang.String str22 = dateTimeZone5.getShortName((long) '4');
        boolean boolean23 = dateTimeZone4.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int26 = dateTimeZone5.getOffset(460800000L);
        java.lang.String str27 = dateTimeZone5.toString();
        long long29 = dateTimeZone5.nextTransition((-475199965L));
        java.lang.String str31 = dateTimeZone5.getName((-61199991L));
        boolean boolean32 = dateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 115200000L + "'", long20 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-475199965L) + "'", long29 == (-475199965L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test21977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21977");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.lang.String str24 = dateTimeZone0.getName((-292199999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test21978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21978");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        java.lang.String str5 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertUTCToLocal(464400001L);
        long long9 = dateTimeZone1.convertUTCToLocal(115199999L);
        int int11 = dateTimeZone1.getStandardOffset((-59965L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName((-48720001L), locale13);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        long long18 = dateTimeZone1.convertLocalToUTC(115200097L, true);
        java.lang.String str19 = dateTimeZone1.getID();
        boolean boolean21 = dateTimeZone1.isStandardOffset(489600000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 464400001L + "'", long7 == 464400001L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 115199999L + "'", long9 == 115199999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 115200097L + "'", long18 == 115200097L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test21979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21979");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, (int) (short) 1);
        java.lang.String str4 = dateTimeZone2.getName(72000001L);
        long long8 = dateTimeZone2.convertLocalToUTC((-105000009L), true, (-547799990L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone9.isFixed();
        int int12 = dateTimeZone9.getStandardOffset(0L);
        java.lang.String str14 = dateTimeZone9.getShortName((long) (byte) 100);
        java.lang.String str16 = dateTimeZone9.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone9.getOffset(readableInstant17);
        boolean boolean20 = dateTimeZone9.isStandardOffset((long) (short) 1);
        long long24 = dateTimeZone9.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int26 = dateTimeZone9.getOffsetFromLocal((long) (short) 0);
        java.lang.String str28 = dateTimeZone9.getNameKey((long) ' ');
        java.lang.String str29 = dateTimeZone9.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        int int38 = dateTimeZone30.getOffsetFromLocal(0L);
        long long40 = dateTimeZone30.convertUTCToLocal((long) 0);
        long long42 = dateTimeZone30.previousTransition(0L);
        long long44 = dateTimeZone9.getMillisKeepLocal(dateTimeZone30, 3600001L);
        java.util.TimeZone timeZone45 = dateTimeZone30.toTimeZone();
        java.util.TimeZone timeZone46 = dateTimeZone30.toTimeZone();
        boolean boolean47 = dateTimeZone2.equals((java.lang.Object) timeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        java.lang.String str50 = dateTimeZone48.getNameKey((-131520000L));
        int int52 = dateTimeZone48.getStandardOffset(432000000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:01" + "'", str4, "+10:01");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-141060009L) + "'", long8 == (-141060009L));
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 115200000L + "'", long24 == 115200000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600001L + "'", long44 == 3600001L);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test21980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21980");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal((long) (byte) 0);
        java.lang.String str4 = dateTimeZone0.getShortName((long) '4');
        int int6 = dateTimeZone0.getOffset(35L);
        java.lang.String str8 = dateTimeZone0.getName(350400000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test21981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21981");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        int int21 = dateTimeZone0.getOffsetFromLocal((long) '4');
        long long23 = dateTimeZone0.nextTransition(483900152L);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long28 = dateTimeZone0.convertLocalToUTC((-77040000L), true);
        long long30 = dateTimeZone0.convertUTCToLocal(835200052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 483900152L + "'", long23 == 483900152L);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-77040000L) + "'", long28 == (-77040000L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 835200052L + "'", long30 == 835200052L);
    }

    @Test
    public void test21982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21982");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition((long) 115200000);
        java.lang.String str6 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) 'a');
        java.lang.String str9 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long14 = dateTimeZone0.adjustOffset((-3599848L), true);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        java.lang.String str17 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 115200000L + "'", long4 == 115200000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599848L) + "'", long14 == (-3599848L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test21983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21983");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        boolean boolean16 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getShortName((long) 97, locale18);
        java.lang.String str20 = dateTimeZone0.toString();
        long long23 = dateTimeZone0.adjustOffset((-10200000L), false);
        int int25 = dateTimeZone0.getOffsetFromLocal((-360599890L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-10200000L) + "'", long23 == (-10200000L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test21984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        int int17 = dateTimeZone5.getOffset((long) '4');
        int int19 = dateTimeZone5.getOffsetFromLocal(100L);
        long long21 = dateTimeZone5.previousTransition(1L);
        java.lang.String str23 = dateTimeZone5.getShortName(0L);
        java.util.TimeZone timeZone24 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffsetFromLocal(349800000L);
        java.lang.Class<?> wildcardClass28 = dateTimeZone25.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test21985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21985");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str10 = dateTimeZone0.getShortName(0L);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, false, 0L);
        long long17 = dateTimeZone0.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.util.TimeZone timeZone23 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str25 = dateTimeZone24.getID();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone24.getShortName((-118800000L), locale27);
        boolean boolean29 = dateTimeZone24.isFixed();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        int int33 = dateTimeZone30.getStandardOffset(0L);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone30.getShortName((-1L), locale35);
        java.lang.String str38 = dateTimeZone30.getShortName(1L);
        long long40 = dateTimeZone30.nextTransition((long) 0);
        long long42 = dateTimeZone30.nextTransition((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) ' ');
        boolean boolean46 = dateTimeZone30.equals((java.lang.Object) '#');
        long long48 = dateTimeZone30.convertUTCToLocal((-3600000L));
        boolean boolean50 = dateTimeZone30.isStandardOffset((-1L));
        long long52 = dateTimeZone30.convertUTCToLocal((long) 127920000);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone30.isLocalDateTimeGap(localDateTime53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        java.util.TimeZone timeZone56 = dateTimeZone30.toTimeZone();
        long long58 = dateTimeZone24.getMillisKeepLocal(dateTimeZone30, 150599971L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3600000L) + "'", long48 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 127920000L + "'", long52 == 127920000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 150599971L + "'", long58 == 150599971L);
    }

    @Test
    public void test21986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21986");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone0.isLocalDateTimeGap(localDateTime2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        long long9 = dateTimeZone0.convertLocalToUTC(359999999L, true, (long) 100);
        long long11 = dateTimeZone0.previousTransition(486000000L);
        long long13 = dateTimeZone0.convertUTCToLocal((-755460000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 359999999L + "'", long9 == 359999999L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 486000000L + "'", long11 == 486000000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-755460000L) + "'", long13 == (-755460000L));
    }

    @Test
    public void test21987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21987");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        long long8 = dateTimeZone1.nextTransition((long) (byte) -1);
        long long10 = dateTimeZone1.convertUTCToLocal((long) (byte) 10);
        java.lang.String str12 = dateTimeZone1.getName((long) (short) -1);
        long long14 = dateTimeZone1.previousTransition((-115199900L));
        long long16 = dateTimeZone1.nextTransition(110L);
        long long18 = dateTimeZone1.convertUTCToLocal((-158459948L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115199900L) + "'", long14 == (-115199900L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 110L + "'", long16 == 110L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-158459948L) + "'", long18 == (-158459948L));
    }

    @Test
    public void test21988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21988");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:00");
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        boolean boolean5 = dateTimeZone1.isStandardOffset((-356399900L));
        java.lang.String str7 = dateTimeZone1.getShortName(662400010L);
        java.lang.String str8 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
    }

    @Test
    public void test21989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName(52L, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (byte) -1, locale9);
        int int12 = dateTimeZone0.getOffset((long) (-3600000));
        long long14 = dateTimeZone0.previousTransition((-359999900L));
        long long16 = dateTimeZone0.previousTransition((-346199990L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getShortName((-356400000L), locale18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-359999900L) + "'", long14 == (-359999900L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-346199990L) + "'", long16 == (-346199990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test21990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21990");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        boolean boolean4 = dateTimeZone0.isFixed();
        long long6 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(356460000L, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long13 = dateTimeZone11.previousTransition((long) (byte) -1);
        long long16 = dateTimeZone11.convertLocalToUTC(52L, false);
        java.util.TimeZone timeZone17 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) timeZone17);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        java.lang.String str23 = dateTimeZone0.getNameKey(359999990L);
        int int25 = dateTimeZone0.getStandardOffset(82199991L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone0.getShortName((-426480000L), locale27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test21991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21991");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName((-1L), locale5);
        int int8 = dateTimeZone0.getOffsetFromLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset((long) (byte) 10);
        java.lang.String str12 = dateTimeZone0.getName((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) (short) 100);
        java.util.TimeZone timeZone18 = dateTimeZone15.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str21 = dateTimeZone20.toString();
        java.lang.String str22 = dateTimeZone20.toString();
        int int24 = dateTimeZone20.getStandardOffset((-3599968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test21992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21992");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        int int3 = dateTimeZone1.getStandardOffset(0L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getShortName((long) (byte) 0, locale5);
        int int8 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) ' ', locale14);
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) dateTimeZone12);
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone12);
        long long19 = dateTimeZone12.convertUTCToLocal((-3600000L));
        boolean boolean21 = dateTimeZone12.isStandardOffset(108480000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        long long26 = dateTimeZone12.convertLocalToUTC(71399904L, false, 289920032L);
        java.lang.String str28 = dateTimeZone12.getShortName((-228900001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-7200000L) + "'", long19 == (-7200000L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 74999904L + "'", long26 == 74999904L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-01:00" + "'", str28, "-01:00");
    }

    @Test
    public void test21993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21993");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        java.lang.String str2 = dateTimeZone1.toString();
        int int4 = dateTimeZone1.getStandardOffset((long) 600000);
        java.lang.String str6 = dateTimeZone1.getShortName((-187799900L));
        java.lang.String str8 = dateTimeZone1.getNameKey(122460100L);
        int int10 = dateTimeZone1.getStandardOffset(152L);
        long long12 = dateTimeZone1.nextTransition((-1011599997L));
        int int14 = dateTimeZone1.getStandardOffset((long) 351300000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-00:00:00.001" + "'", str2, "-00:00:00.001");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-00:00:00.001" + "'", str6, "-00:00:00.001");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1011599997L) + "'", long12 == (-1011599997L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test21994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21994");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 115200000, locale2);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getName(0L, locale5);
        long long8 = dateTimeZone0.convertUTCToLocal(0L);
        int int10 = dateTimeZone0.getStandardOffset(100559990L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.lang.String str16 = dateTimeZone14.getNameKey(32L);
        java.lang.String str18 = dateTimeZone14.getName((long) 1);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName(42L, locale20);
        java.lang.String str23 = dateTimeZone14.getName(9L);
        long long25 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 0L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        long long28 = dateTimeZone26.convertUTCToLocal((long) (byte) 0);
        java.lang.String str29 = dateTimeZone26.toString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone26.getName((-1L), locale31);
        long long34 = dateTimeZone26.previousTransition(52L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone26.getShortName(127920000L, locale36);
        long long39 = dateTimeZone26.convertUTCToLocal(359999999L);
        java.lang.String str41 = dateTimeZone26.getName((-2L));
        long long43 = dateTimeZone26.previousTransition((-719460000L));
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone26.getShortName(6719999L, locale45);
        long long48 = dateTimeZone0.getMillisKeepLocal(dateTimeZone26, 228540087L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 359999999L + "'", long39 == 359999999L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-719460000L) + "'", long43 == (-719460000L));
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 228540087L + "'", long48 == 228540087L);
    }

    @Test
    public void test21995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean5 = dateTimeZone0.isStandardOffset(100L);
        java.lang.String str6 = dateTimeZone0.getID();
        long long8 = dateTimeZone0.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str17 = dateTimeZone12.getShortName((long) (byte) 100);
        long long19 = dateTimeZone12.previousTransition((long) (short) 100);
        long long21 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, 127499999L);
        java.lang.String str22 = dateTimeZone12.toString();
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone12.isLocalDateTimeGap(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 127499999L + "'", long21 == 127499999L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test21996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21996");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean1 = dateTimeZone0.isFixed();
        int int3 = dateTimeZone0.getStandardOffset(0L);
        java.lang.String str5 = dateTimeZone0.getShortName((long) (byte) 100);
        java.lang.String str7 = dateTimeZone0.getShortName((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        boolean boolean11 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) 115200000, false, (long) (-1));
        int int17 = dateTimeZone0.getOffsetFromLocal((long) (short) 0);
        java.lang.String str19 = dateTimeZone0.getNameKey((long) ' ');
        java.lang.String str21 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone0.getName(115200001L, locale25);
        boolean boolean28 = dateTimeZone0.isStandardOffset((-3599999L));
        long long32 = dateTimeZone0.convertLocalToUTC(244860010L, false, (-196080000L));
        boolean boolean33 = dateTimeZone0.isFixed();
        java.lang.String str35 = dateTimeZone0.getName(3599900L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 244860010L + "'", long32 == 244860010L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test21997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21997");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        int int4 = dateTimeZone0.getStandardOffset(1L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone5.isFixed();
        int int8 = dateTimeZone5.getStandardOffset(0L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone5.getShortName((-1L), locale10);
        int int13 = dateTimeZone5.getOffsetFromLocal(0L);
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, (long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone19.getName((long) ' ', locale21);
        boolean boolean23 = dateTimeZone17.equals((java.lang.Object) dateTimeZone19);
        boolean boolean24 = dateTimeZone0.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone0.getOffset(readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test21998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21998");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.equals((java.lang.Object) 100);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone0.getShortName(0L, locale5);
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((long) 115200000);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str13 = dateTimeZone11.getShortName((long) 'a');
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone11.getShortName((long) (short) -1, locale15);
        int int18 = dateTimeZone11.getOffset((long) 115200000);
        int int20 = dateTimeZone11.getStandardOffset((long) (short) 10);
        java.lang.String str21 = dateTimeZone11.getID();
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) 0);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone0.isLocalDateTimeGap(localDateTime24);
        java.lang.String str26 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forID("+00:00:00.097");
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        int int32 = dateTimeZone29.getStandardOffset(0L);
        java.lang.String str34 = dateTimeZone29.getNameKey(1L);
        java.util.TimeZone timeZone35 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        boolean boolean39 = dateTimeZone28.equals((java.lang.Object) dateTimeZone38);
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) dateTimeZone28);
        boolean boolean41 = dateTimeZone28.isFixed();
        int int43 = dateTimeZone28.getOffsetFromLocal(356400032L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        boolean boolean45 = dateTimeZone44.isFixed();
        int int47 = dateTimeZone44.getStandardOffset(0L);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone44.getShortName((-1L), locale49);
        java.lang.String str51 = dateTimeZone44.getID();
        java.util.TimeZone timeZone52 = dateTimeZone44.toTimeZone();
        long long54 = dateTimeZone44.convertUTCToLocal((long) (short) 0);
        long long56 = dateTimeZone44.previousTransition((long) 600000);
        java.lang.String str58 = dateTimeZone44.getName(154320052L);
        long long60 = dateTimeZone28.getMillisKeepLocal(dateTimeZone44, (-709199990L));
        long long63 = dateTimeZone44.adjustOffset((-118799990L), false);
        java.lang.String str65 = dateTimeZone44.getShortName((long) (byte) 1);
        long long69 = dateTimeZone44.convertLocalToUTC(0L, true, (-127919999L));
        long long73 = dateTimeZone44.convertLocalToUTC((-257519903L), true, 191399990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+32:00" + "'", str13, "+32:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+32:00" + "'", str16, "+32:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 115200000 + "'", int18 == 115200000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 115200000 + "'", int20 == 115200000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+32:00" + "'", str21, "+32:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-115200000L) + "'", long23 == (-115200000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 600000L + "'", long56 == 600000L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-709199893L) + "'", long60 == (-709199893L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-118799990L) + "'", long63 == (-118799990L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-257519903L) + "'", long73 == (-257519903L));
    }

    @Test
    public void test21999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21999");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone2.isFixed();
        int int5 = dateTimeZone2.getStandardOffset(0L);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-1L), locale7);
        int int10 = dateTimeZone2.getOffsetFromLocal(0L);
        int int12 = dateTimeZone2.getStandardOffset((long) (byte) 10);
        java.lang.String str14 = dateTimeZone2.getName((long) (byte) 10);
        long long16 = dateTimeZone2.previousTransition(52L);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 'a');
        long long20 = dateTimeZone2.previousTransition((long) 3600000);
        long long22 = dateTimeZone2.convertUTCToLocal((-111600001L));
        boolean boolean24 = dateTimeZone2.isStandardOffset((-118860001L));
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone2.isLocalDateTimeGap(localDateTime25);
        long long29 = dateTimeZone2.adjustOffset((-187199965L), true);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        long long32 = dateTimeZone2.getMillisKeepLocal(dateTimeZone30, 82199991L);
        java.lang.String str33 = dateTimeZone2.toString();
        int int35 = dateTimeZone2.getOffset((-428399990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000097L + "'", long18 == 360000097L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3600000L + "'", long20 == 3600000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-111600001L) + "'", long22 == (-111600001L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-187199965L) + "'", long29 == (-187199965L));
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 82199991L + "'", long32 == 82199991L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test22000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test22000");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (-4200000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -4200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}
